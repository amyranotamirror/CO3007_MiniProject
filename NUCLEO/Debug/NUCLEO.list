
NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005740  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800584c  0800584c  0001584c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d4  080058d4  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  080058d4  080058d4  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058d4  080058d4  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080058dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200000bc  08005998  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08005998  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e686  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ab  00000000  00000000  0002e7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00031060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b39  00000000  00000000  00031ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000195e9  00000000  00000000  00032a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d05  00000000  00000000  0004c012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b091  00000000  00000000  0005ed17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ec8  00000000  00000000  000e9da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000edc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08005834 	.word	0x08005834

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	08005834 	.word	0x08005834

0800014c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	; (8000240 <buttonReading+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	; (8000244 <buttonReading+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	; (8000248 <buttonReading+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	; (8000240 <buttonReading+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <buttonReading+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	; (8000250 <buttonReading+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f002 fc4b 	bl	8002a20 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <buttonReading+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2c      	ldr	r2, [pc, #176]	; (8000248 <buttonReading+0xfc>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	; (8000240 <buttonReading+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d143      	bne.n	800022a <buttonReading+0xde>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a28      	ldr	r2, [pc, #160]	; (8000248 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <buttonReading+0xf8>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d13b      	bne.n	800022a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a27      	ldr	r2, [pc, #156]	; (8000254 <buttonReading+0x108>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4923      	ldr	r1, [pc, #140]	; (8000248 <buttonReading+0xfc>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	; (8000248 <buttonReading+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	; (8000254 <buttonReading+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a20      	ldr	r2, [pc, #128]	; (8000254 <buttonReading+0x108>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d128      	bne.n	800022a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <buttonReading+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / TIMER_TICK;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <buttonReading+0x110>)
 80001e4:	21c8      	movs	r1, #200	; 0xc8
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001ea:	e01e      	b.n	800022a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <buttonReading+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d119      	bne.n	800022a <buttonReading+0xde>
					buttonCounters[i] --;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <buttonReading+0x110>)
 80001fa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80001fe:	b292      	uxth	r2, r2
 8000200:	3a01      	subs	r2, #1
 8000202:	b292      	uxth	r2, r2
 8000204:	b211      	sxth	r1, r2
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <buttonReading+0x110>)
 8000208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <buttonReading+0x110>)
 8000210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dc08      	bgt.n	800022a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <buttonReading+0x10c>)
 800021c:	2101      	movs	r1, #1
 800021e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / TIMER_TICK;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a0e      	ldr	r2, [pc, #56]	; (800025c <buttonReading+0x110>)
 8000224:	2114      	movs	r1, #20
 8000226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d990      	bls.n	8000158 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	200000e0 	.word	0x200000e0
 8000244:	200000e4 	.word	0x200000e4
 8000248:	200000dc 	.word	0x200000dc
 800024c:	20000000 	.word	0x20000000
 8000250:	20000010 	.word	0x20000010
 8000254:	200000d8 	.word	0x200000d8
 8000258:	200000e8 	.word	0x200000e8
 800025c:	200000ec 	.word	0x200000ec

08000260 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d901      	bls.n	8000274 <buttonPressed+0x14>
 8000270:	2300      	movs	r3, #0
 8000272:	e00b      	b.n	800028c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <buttonPressed+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d105      	bne.n	800028a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a05      	ldr	r2, [pc, #20]	; (8000298 <buttonPressed+0x38>)
 8000282:	2100      	movs	r1, #0
 8000284:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <buttonPressed+0x2c>
	}
	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	200000e8 	.word	0x200000e8

0800029c <buzzer0Set>:

#include "buzzer.h"

extern TIM_HandleTypeDef htim3;

void buzzer0Set(uint8_t volume){
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	// Ensure volume stays in the range: 0% - 100%
	if (volume < BUZZER_VOLUME_MIN) {
		volume = BUZZER_VOLUME_MIN;
	}
	if (volume > BUZZER_VOLUME_MAX) {
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b64      	cmp	r3, #100	; 0x64
 80002aa:	d901      	bls.n	80002b0 <buzzer0Set+0x14>
        volume = BUZZER_VOLUME_MAX;
 80002ac:	2364      	movs	r3, #100	; 0x64
 80002ae:	71fb      	strb	r3, [r7, #7]
	}

    // Calculate and set PWM to Buzzer
	volume = BUZZER_VOLUME_MAX - volume;
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80002b6:	71fb      	strb	r3, [r7, #7]
    uint32_t pulseWidth = BUZZER_MAX * BUZZER_RATIO * volume / 100;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <buzzer0Set+0x50>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	2264      	movs	r2, #100	; 0x64
 80002be:	fb02 f303 	mul.w	r3, r2, r3
 80002c2:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <buzzer0Set+0x54>)
 80002c4:	fba2 2303 	umull	r2, r3, r2, r3
 80002c8:	095b      	lsrs	r3, r3, #5
 80002ca:	79fa      	ldrb	r2, [r7, #7]
 80002cc:	fb02 f303 	mul.w	r3, r2, r3
 80002d0:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <buzzer0Set+0x54>)
 80002d2:	fba2 2303 	umull	r2, r3, r2, r3
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseWidth);
 80002da:	4b04      	ldr	r3, [pc, #16]	; (80002ec <buzzer0Set+0x50>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	68fa      	ldr	r2, [r7, #12]
 80002e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	2000015c 	.word	0x2000015c
 80002f0:	51eb851f 	.word	0x51eb851f

080002f4 <buzzer1Set>:

void buzzer1Set(uint8_t volume){
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
    // Ensure volume stays in the range: 0% - 100%
	if (volume < BUZZER_VOLUME_MIN) {
		volume = BUZZER_VOLUME_MIN;
	}
	if (volume > BUZZER_VOLUME_MAX) {
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	2b64      	cmp	r3, #100	; 0x64
 8000302:	d901      	bls.n	8000308 <buzzer1Set+0x14>
        volume = BUZZER_VOLUME_MAX;
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	71fb      	strb	r3, [r7, #7]
	}

    // Calculate and set PWM to Buzzer
	volume = BUZZER_VOLUME_MAX - volume;
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800030e:	71fb      	strb	r3, [r7, #7]
    uint32_t pulseWidth = BUZZER_MAX * BUZZER_RATIO * volume / 100;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <buzzer1Set+0x50>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	2264      	movs	r2, #100	; 0x64
 8000316:	fb02 f303 	mul.w	r3, r2, r3
 800031a:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <buzzer1Set+0x54>)
 800031c:	fba2 2303 	umull	r2, r3, r2, r3
 8000320:	095b      	lsrs	r3, r3, #5
 8000322:	79fa      	ldrb	r2, [r7, #7]
 8000324:	fb02 f303 	mul.w	r3, r2, r3
 8000328:	4a07      	ldr	r2, [pc, #28]	; (8000348 <buzzer1Set+0x54>)
 800032a:	fba2 2303 	umull	r2, r3, r2, r3
 800032e:	095b      	lsrs	r3, r3, #5
 8000330:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseWidth);
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <buzzer1Set+0x50>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	639a      	str	r2, [r3, #56]	; 0x38
}
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	2000015c 	.word	0x2000015c
 8000348:	51eb851f 	.word	0x51eb851f

0800034c <buzzer0On>:

void buzzer0On(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	if (pedestrianCounters[0] > BUZZER_TIMEOUT) {
 8000350:	4b0e      	ldr	r3, [pc, #56]	; (800038c <buzzer0On+0x40>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000358:	d903      	bls.n	8000362 <buzzer0On+0x16>
		buzzer0Set(BUZZER_VOLUME_AUTO);
 800035a:	2000      	movs	r0, #0
 800035c:	f7ff ff9e 	bl	800029c <buzzer0Set>
	}
	else {
		buzzer0Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[0]) / BUZZER_TIMEOUT);
	}
}
 8000360:	e011      	b.n	8000386 <buzzer0On+0x3a>
		buzzer0Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[0]) / BUZZER_TIMEOUT);
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <buzzer0On+0x40>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800036a:	fb02 f303 	mul.w	r3, r2, r3
 800036e:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 8000372:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000376:	4a06      	ldr	r2, [pc, #24]	; (8000390 <buzzer0On+0x44>)
 8000378:	fba2 2303 	umull	r2, r3, r2, r3
 800037c:	09db      	lsrs	r3, r3, #7
 800037e:	b2db      	uxtb	r3, r3
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff8b 	bl	800029c <buzzer0Set>
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200001f4 	.word	0x200001f4
 8000390:	10624dd3 	.word	0x10624dd3

08000394 <buzzer0Off>:

void buzzer0Off(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	buzzer0Set(0);
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff ff7f 	bl	800029c <buzzer0Set>
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <buzzer1On>:

void buzzer1On(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	if (pedestrianCounters[1] > BUZZER_TIMEOUT) {
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <buzzer1On+0x40>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003b0:	d903      	bls.n	80003ba <buzzer1On+0x16>
		buzzer1Set(BUZZER_VOLUME_AUTO);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ff9e 	bl	80002f4 <buzzer1Set>
	}
	else {
		buzzer1Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[1]) / BUZZER_TIMEOUT);
	}
}
 80003b8:	e011      	b.n	80003de <buzzer1On+0x3a>
		buzzer1Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[1]) / BUZZER_TIMEOUT);
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <buzzer1On+0x40>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80003c2:	fb02 f303 	mul.w	r3, r2, r3
 80003c6:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 80003ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80003ce:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <buzzer1On+0x44>)
 80003d0:	fba2 2303 	umull	r2, r3, r2, r3
 80003d4:	09db      	lsrs	r3, r3, #7
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff8b 	bl	80002f4 <buzzer1Set>
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200001f4 	.word	0x200001f4
 80003e8:	10624dd3 	.word	0x10624dd3

080003ec <buzzer1Off>:

void buzzer1Off(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	buzzer1Set(0);
 80003f0:	2000      	movs	r0, #0
 80003f2:	f7ff ff7f 	bl	80002f4 <buzzer1Set>
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <counterRun>:
 *      Author: Nhat Khai
 */

#include "counter.h"

void counterRun(void) {
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	if (trafficCounters[0] > TIMER_TICK) {
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <counterRun+0x74>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b0a      	cmp	r3, #10
 8000406:	d905      	bls.n	8000414 <counterRun+0x18>
		trafficCounters[0] -= TIMER_TICK;
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <counterRun+0x74>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3b0a      	subs	r3, #10
 800040e:	4a18      	ldr	r2, [pc, #96]	; (8000470 <counterRun+0x74>)
 8000410:	6013      	str	r3, [r2, #0]
 8000412:	e002      	b.n	800041a <counterRun+0x1e>
	}
	else {
		trafficCounters[0] = 0;
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <counterRun+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
	}
	if (trafficCounters[1] > TIMER_TICK) {
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <counterRun+0x74>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	2b0a      	cmp	r3, #10
 8000420:	d905      	bls.n	800042e <counterRun+0x32>
		trafficCounters[1] -= TIMER_TICK;
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <counterRun+0x74>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	3b0a      	subs	r3, #10
 8000428:	4a11      	ldr	r2, [pc, #68]	; (8000470 <counterRun+0x74>)
 800042a:	6053      	str	r3, [r2, #4]
 800042c:	e002      	b.n	8000434 <counterRun+0x38>
	}
	else {
		trafficCounters[1] = 0;
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <counterRun+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	605a      	str	r2, [r3, #4]
	}
	if (pedestrianCounters[0] > TIMER_TICK) {
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <counterRun+0x78>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b0a      	cmp	r3, #10
 800043a:	d905      	bls.n	8000448 <counterRun+0x4c>
		pedestrianCounters[0] -= TIMER_TICK;
 800043c:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <counterRun+0x78>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	3b0a      	subs	r3, #10
 8000442:	4a0c      	ldr	r2, [pc, #48]	; (8000474 <counterRun+0x78>)
 8000444:	6013      	str	r3, [r2, #0]
 8000446:	e002      	b.n	800044e <counterRun+0x52>
	}
	else {
		pedestrianCounters[0] = 0;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <counterRun+0x78>)
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
	}
	if (pedestrianCounters[1] > TIMER_TICK) {
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <counterRun+0x78>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	2b0a      	cmp	r3, #10
 8000454:	d905      	bls.n	8000462 <counterRun+0x66>
		pedestrianCounters[1] -= TIMER_TICK;
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <counterRun+0x78>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	3b0a      	subs	r3, #10
 800045c:	4a05      	ldr	r2, [pc, #20]	; (8000474 <counterRun+0x78>)
 800045e:	6053      	str	r3, [r2, #4]
	}
	else {
		pedestrianCounters[1] = 0;
	}
}
 8000460:	e002      	b.n	8000468 <counterRun+0x6c>
		pedestrianCounters[1] = 0;
 8000462:	4b04      	ldr	r3, [pc, #16]	; (8000474 <counterRun+0x78>)
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	20000394 	.word	0x20000394
 8000474:	200001f4 	.word	0x200001f4

08000478 <counterReset>:

void counterReset(void) {
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	trafficCounters[0] = 0;
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <counterReset+0x24>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
	trafficCounters[1] = 0;
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <counterReset+0x24>)
 8000484:	2200      	movs	r2, #0
 8000486:	605a      	str	r2, [r3, #4]
	pedestrianCounters[0] = 0;
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <counterReset+0x28>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
	pedestrianCounters[1] = 0;
 800048e:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <counterReset+0x28>)
 8000490:	2200      	movs	r2, #0
 8000492:	605a      	str	r2, [r3, #4]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20000394 	.word	0x20000394
 80004a0:	200001f4 	.word	0x200001f4

080004a4 <fsmAutoStop>:
static uint8_t fsmIDs[FSM_TASK] = {};
static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmAutoStop(void) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	SCH_AddTask(counterReset, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <fsmAutoStop+0x14>)
 80004ae:	f001 f83d 	bl	800152c <SCH_AddTask>
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	08000479 	.word	0x08000479

080004bc <fsmAutoProcessing>:

void fsmAutoProcessing(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff fecd 	bl	8000260 <buttonPressed>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d00c      	beq.n	80004e6 <fsmAutoProcessing+0x2a>
		if (fsmAutoIDs[9] == 0) {
 80004cc:	4b25      	ldr	r3, [pc, #148]	; (8000564 <fsmAutoProcessing+0xa8>)
 80004ce:	7a5b      	ldrb	r3, [r3, #9]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d108      	bne.n	80004e6 <fsmAutoProcessing+0x2a>
			fsmAutoIDs[9] = SCH_AddTask(pedestrian0On, 0, TIMER_TICK);
 80004d4:	220a      	movs	r2, #10
 80004d6:	2100      	movs	r1, #0
 80004d8:	4823      	ldr	r0, [pc, #140]	; (8000568 <fsmAutoProcessing+0xac>)
 80004da:	f001 f827 	bl	800152c <SCH_AddTask>
 80004de:	4603      	mov	r3, r0
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b20      	ldr	r3, [pc, #128]	; (8000564 <fsmAutoProcessing+0xa8>)
 80004e4:	725a      	strb	r2, [r3, #9]
		}
	}
	if (pedestrianStates[0] == PEDESTRIAN_GREEN && pedestrianCounters[0] <= 20) {
 80004e6:	4b21      	ldr	r3, [pc, #132]	; (800056c <fsmAutoProcessing+0xb0>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d110      	bne.n	8000510 <fsmAutoProcessing+0x54>
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <fsmAutoProcessing+0xb4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b14      	cmp	r3, #20
 80004f4:	d80c      	bhi.n	8000510 <fsmAutoProcessing+0x54>
		SCH_DeleteTask(fsmAutoIDs[9]);
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <fsmAutoProcessing+0xa8>)
 80004f8:	7a5b      	ldrb	r3, [r3, #9]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 f91c 	bl	8001738 <SCH_DeleteTask>
		fsmAutoIDs[9] = 0;
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <fsmAutoProcessing+0xa8>)
 8000502:	2200      	movs	r2, #0
 8000504:	725a      	strb	r2, [r3, #9]
		SCH_AddTask(pedestrian0Off, 20, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2114      	movs	r1, #20
 800050a:	481a      	ldr	r0, [pc, #104]	; (8000574 <fsmAutoProcessing+0xb8>)
 800050c:	f001 f80e 	bl	800152c <SCH_AddTask>
	}
	if (buttonPressed(2)) {
 8000510:	2002      	movs	r0, #2
 8000512:	f7ff fea5 	bl	8000260 <buttonPressed>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00c      	beq.n	8000536 <fsmAutoProcessing+0x7a>
		if (fsmAutoIDs[10] == 0) {
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <fsmAutoProcessing+0xa8>)
 800051e:	7a9b      	ldrb	r3, [r3, #10]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d108      	bne.n	8000536 <fsmAutoProcessing+0x7a>
			fsmAutoIDs[10] = SCH_AddTask(pedestrian1On, 0, TIMER_TICK);
 8000524:	220a      	movs	r2, #10
 8000526:	2100      	movs	r1, #0
 8000528:	4813      	ldr	r0, [pc, #76]	; (8000578 <fsmAutoProcessing+0xbc>)
 800052a:	f000 ffff 	bl	800152c <SCH_AddTask>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <fsmAutoProcessing+0xa8>)
 8000534:	729a      	strb	r2, [r3, #10]
		}
	}
	if (pedestrianStates[1] == PEDESTRIAN_GREEN && pedestrianCounters[1] <= 20) {
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <fsmAutoProcessing+0xb0>)
 8000538:	785b      	ldrb	r3, [r3, #1]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d110      	bne.n	8000560 <fsmAutoProcessing+0xa4>
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <fsmAutoProcessing+0xb4>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	2b14      	cmp	r3, #20
 8000544:	d80c      	bhi.n	8000560 <fsmAutoProcessing+0xa4>
		SCH_DeleteTask(fsmAutoIDs[10]);
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <fsmAutoProcessing+0xa8>)
 8000548:	7a9b      	ldrb	r3, [r3, #10]
 800054a:	4618      	mov	r0, r3
 800054c:	f001 f8f4 	bl	8001738 <SCH_DeleteTask>
		fsmAutoIDs[10] = 0;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <fsmAutoProcessing+0xa8>)
 8000552:	2200      	movs	r2, #0
 8000554:	729a      	strb	r2, [r3, #10]
		SCH_AddTask(pedestrian1Off, 20, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2114      	movs	r1, #20
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <fsmAutoProcessing+0xc0>)
 800055c:	f000 ffe6 	bl	800152c <SCH_AddTask>
	}
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000fc 	.word	0x200000fc
 8000568:	08001371 	.word	0x08001371
 800056c:	200001f0 	.word	0x200001f0
 8000570:	200001f4 	.word	0x200001f4
 8000574:	080013f1 	.word	0x080013f1
 8000578:	080013b1 	.word	0x080013b1
 800057c:	08001405 	.word	0x08001405

08000580 <fsmAuto>:

void fsmAuto(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	SCH_AddTask(pedestrian0Off, 0, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	484a      	ldr	r0, [pc, #296]	; (80006b4 <fsmAuto+0x134>)
 800058a:	f000 ffcf 	bl	800152c <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	4849      	ldr	r0, [pc, #292]	; (80006b8 <fsmAuto+0x138>)
 8000594:	f000 ffca 	bl	800152c <SCH_AddTask>
	fsmAutoIDs[0] = SCH_AddTask(fsmAutoProcessing, 10, TIMER_TICK);
 8000598:	220a      	movs	r2, #10
 800059a:	210a      	movs	r1, #10
 800059c:	4847      	ldr	r0, [pc, #284]	; (80006bc <fsmAuto+0x13c>)
 800059e:	f000 ffc5 	bl	800152c <SCH_AddTask>
 80005a2:	4603      	mov	r3, r0
 80005a4:	461a      	mov	r2, r3
 80005a6:	4b46      	ldr	r3, [pc, #280]	; (80006c0 <fsmAuto+0x140>)
 80005a8:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(counterRun, 0, TIMER_TICK);
 80005aa:	220a      	movs	r2, #10
 80005ac:	2100      	movs	r1, #0
 80005ae:	4845      	ldr	r0, [pc, #276]	; (80006c4 <fsmAuto+0x144>)
 80005b0:	f000 ffbc 	bl	800152c <SCH_AddTask>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b41      	ldr	r3, [pc, #260]	; (80006c0 <fsmAuto+0x140>)
 80005ba:	705a      	strb	r2, [r3, #1]
	fsmAutoIDs[2] = SCH_AddTask(uartCounter, 50, 1000);
 80005bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c0:	2132      	movs	r1, #50	; 0x32
 80005c2:	4841      	ldr	r0, [pc, #260]	; (80006c8 <fsmAuto+0x148>)
 80005c4:	f000 ffb2 	bl	800152c <SCH_AddTask>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <fsmAuto+0x140>)
 80005ce:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80005d0:	4b3e      	ldr	r3, [pc, #248]	; (80006cc <fsmAuto+0x14c>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b3e      	ldr	r3, [pc, #248]	; (80006d0 <fsmAuto+0x150>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	441a      	add	r2, r3
 80005da:	4b3e      	ldr	r3, [pc, #248]	; (80006d4 <fsmAuto+0x154>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	461a      	mov	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	483c      	ldr	r0, [pc, #240]	; (80006d8 <fsmAuto+0x158>)
 80005e6:	f000 ffa1 	bl	800152c <SCH_AddTask>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b34      	ldr	r3, [pc, #208]	; (80006c0 <fsmAuto+0x140>)
 80005f0:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80005f2:	4b36      	ldr	r3, [pc, #216]	; (80006cc <fsmAuto+0x14c>)
 80005f4:	6819      	ldr	r1, [r3, #0]
 80005f6:	4b35      	ldr	r3, [pc, #212]	; (80006cc <fsmAuto+0x14c>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <fsmAuto+0x150>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	441a      	add	r2, r3
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <fsmAuto+0x154>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4413      	add	r3, r2
 8000606:	461a      	mov	r2, r3
 8000608:	4834      	ldr	r0, [pc, #208]	; (80006dc <fsmAuto+0x15c>)
 800060a:	f000 ff8f 	bl	800152c <SCH_AddTask>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <fsmAuto+0x140>)
 8000614:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000616:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <fsmAuto+0x14c>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <fsmAuto+0x154>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	18d1      	adds	r1, r2, r3
 8000620:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <fsmAuto+0x14c>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <fsmAuto+0x150>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	441a      	add	r2, r3
 800062a:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <fsmAuto+0x154>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4413      	add	r3, r2
 8000630:	461a      	mov	r2, r3
 8000632:	482b      	ldr	r0, [pc, #172]	; (80006e0 <fsmAuto+0x160>)
 8000634:	f000 ff7a 	bl	800152c <SCH_AddTask>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <fsmAuto+0x140>)
 800063e:	715a      	strb	r2, [r3, #5]
	fsmAutoIDs[6] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <fsmAuto+0x14c>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <fsmAuto+0x150>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	441a      	add	r2, r3
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <fsmAuto+0x154>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	461a      	mov	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	4823      	ldr	r0, [pc, #140]	; (80006e4 <fsmAuto+0x164>)
 8000656:	f000 ff69 	bl	800152c <SCH_AddTask>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <fsmAuto+0x140>)
 8000660:	719a      	strb	r2, [r3, #6]
	fsmAutoIDs[7] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <fsmAuto+0x154>)
 8000664:	6819      	ldr	r1, [r3, #0]
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <fsmAuto+0x14c>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <fsmAuto+0x150>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	441a      	add	r2, r3
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <fsmAuto+0x154>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4413      	add	r3, r2
 8000676:	461a      	mov	r2, r3
 8000678:	481b      	ldr	r0, [pc, #108]	; (80006e8 <fsmAuto+0x168>)
 800067a:	f000 ff57 	bl	800152c <SCH_AddTask>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <fsmAuto+0x140>)
 8000684:	71da      	strb	r2, [r3, #7]
	fsmAutoIDs[8] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <fsmAuto+0x154>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <fsmAuto+0x150>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	18d1      	adds	r1, r2, r3
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <fsmAuto+0x14c>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <fsmAuto+0x150>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	441a      	add	r2, r3
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <fsmAuto+0x154>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4413      	add	r3, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4812      	ldr	r0, [pc, #72]	; (80006ec <fsmAuto+0x16c>)
 80006a4:	f000 ff42 	bl	800152c <SCH_AddTask>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <fsmAuto+0x140>)
 80006ae:	721a      	strb	r2, [r3, #8]
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	080013f1 	.word	0x080013f1
 80006b8:	08001405 	.word	0x08001405
 80006bc:	080004bd 	.word	0x080004bd
 80006c0:	200000fc 	.word	0x200000fc
 80006c4:	080003fd 	.word	0x080003fd
 80006c8:	08002245 	.word	0x08002245
 80006cc:	20000034 	.word	0x20000034
 80006d0:	2000003c 	.word	0x2000003c
 80006d4:	20000038 	.word	0x20000038
 80006d8:	08002109 	.word	0x08002109
 80006dc:	08002119 	.word	0x08002119
 80006e0:	08002129 	.word	0x08002129
 80006e4:	08002159 	.word	0x08002159
 80006e8:	08002169 	.word	0x08002169
 80006ec:	08002149 	.word	0x08002149

080006f0 <fsmManualStop>:

void fsmManualStop(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	SCH_AddTask(traffic0Off, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <fsmManualStop+0x30>)
 80006fa:	f000 ff17 	bl	800152c <SCH_AddTask>
	SCH_AddTask(traffic1Off, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <fsmManualStop+0x34>)
 8000704:	f000 ff12 	bl	800152c <SCH_AddTask>
	SCH_AddTask(pedestrian0Off, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	4806      	ldr	r0, [pc, #24]	; (8000728 <fsmManualStop+0x38>)
 800070e:	f000 ff0d 	bl	800152c <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <fsmManualStop+0x3c>)
 8000718:	f000 ff08 	bl	800152c <SCH_AddTask>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	080020f9 	.word	0x080020f9
 8000724:	08002139 	.word	0x08002139
 8000728:	080013f1 	.word	0x080013f1
 800072c:	08001405 	.word	0x08001405

08000730 <fsmManualProcessing>:

void fsmManualProcessing(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff fd93 	bl	8000260 <buttonPressed>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d01d      	beq.n	800077c <fsmManualProcessing+0x4c>
		switch (trafficStates[0]) {
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <fsmManualProcessing+0x98>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d012      	beq.n	800076e <fsmManualProcessing+0x3e>
 8000748:	2b03      	cmp	r3, #3
 800074a:	dc16      	bgt.n	800077a <fsmManualProcessing+0x4a>
 800074c:	2b01      	cmp	r3, #1
 800074e:	d002      	beq.n	8000756 <fsmManualProcessing+0x26>
 8000750:	2b02      	cmp	r3, #2
 8000752:	d006      	beq.n	8000762 <fsmManualProcessing+0x32>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Red, 0, 0);
			break;
		default:
			break;
 8000754:	e011      	b.n	800077a <fsmManualProcessing+0x4a>
			SCH_AddTask(traffic0Green, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	481c      	ldr	r0, [pc, #112]	; (80007cc <fsmManualProcessing+0x9c>)
 800075c:	f000 fee6 	bl	800152c <SCH_AddTask>
			break;
 8000760:	e00c      	b.n	800077c <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Yellow, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	481a      	ldr	r0, [pc, #104]	; (80007d0 <fsmManualProcessing+0xa0>)
 8000768:	f000 fee0 	bl	800152c <SCH_AddTask>
			break;
 800076c:	e006      	b.n	800077c <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Red, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	4818      	ldr	r0, [pc, #96]	; (80007d4 <fsmManualProcessing+0xa4>)
 8000774:	f000 feda 	bl	800152c <SCH_AddTask>
			break;
 8000778:	e000      	b.n	800077c <fsmManualProcessing+0x4c>
			break;
 800077a:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff fd6f 	bl	8000260 <buttonPressed>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d01d      	beq.n	80007c4 <fsmManualProcessing+0x94>
		switch (trafficStates[1]) {
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <fsmManualProcessing+0x98>)
 800078a:	785b      	ldrb	r3, [r3, #1]
 800078c:	2b03      	cmp	r3, #3
 800078e:	d012      	beq.n	80007b6 <fsmManualProcessing+0x86>
 8000790:	2b03      	cmp	r3, #3
 8000792:	dc16      	bgt.n	80007c2 <fsmManualProcessing+0x92>
 8000794:	2b01      	cmp	r3, #1
 8000796:	d002      	beq.n	800079e <fsmManualProcessing+0x6e>
 8000798:	2b02      	cmp	r3, #2
 800079a:	d006      	beq.n	80007aa <fsmManualProcessing+0x7a>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Red, 0, 0);
			break;
		default:
			break;
 800079c:	e011      	b.n	80007c2 <fsmManualProcessing+0x92>
			SCH_AddTask(traffic1Green, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	480d      	ldr	r0, [pc, #52]	; (80007d8 <fsmManualProcessing+0xa8>)
 80007a4:	f000 fec2 	bl	800152c <SCH_AddTask>
			break;
 80007a8:	e00c      	b.n	80007c4 <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Yellow, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <fsmManualProcessing+0xac>)
 80007b0:	f000 febc 	bl	800152c <SCH_AddTask>
			break;
 80007b4:	e006      	b.n	80007c4 <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Red, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	4809      	ldr	r0, [pc, #36]	; (80007e0 <fsmManualProcessing+0xb0>)
 80007bc:	f000 feb6 	bl	800152c <SCH_AddTask>
			break;
 80007c0:	e000      	b.n	80007c4 <fsmManualProcessing+0x94>
			break;
 80007c2:	bf00      	nop
		}
	}
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000390 	.word	0x20000390
 80007cc:	08002119 	.word	0x08002119
 80007d0:	08002129 	.word	0x08002129
 80007d4:	08002109 	.word	0x08002109
 80007d8:	08002159 	.word	0x08002159
 80007dc:	08002169 	.word	0x08002169
 80007e0:	08002149 	.word	0x08002149

080007e4 <fsmManual>:

void fsmManual(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	fsmManualIDs[0] = SCH_AddTask(fsmManualProcessing, 10, TIMER_TICK);
 80007e8:	220a      	movs	r2, #10
 80007ea:	210a      	movs	r1, #10
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <fsmManual+0x54>)
 80007ee:	f000 fe9d 	bl	800152c <SCH_AddTask>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <fsmManual+0x58>)
 80007f8:	701a      	strb	r2, [r3, #0]
	fsmManualIDs[1] = SCH_AddTask(pedestrian0On, 10, TIMER_TICK);
 80007fa:	220a      	movs	r2, #10
 80007fc:	210a      	movs	r1, #10
 80007fe:	4810      	ldr	r0, [pc, #64]	; (8000840 <fsmManual+0x5c>)
 8000800:	f000 fe94 	bl	800152c <SCH_AddTask>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <fsmManual+0x58>)
 800080a:	705a      	strb	r2, [r3, #1]
	fsmManualIDs[2] = SCH_AddTask(pedestrian1On, 10, TIMER_TICK);
 800080c:	220a      	movs	r2, #10
 800080e:	210a      	movs	r1, #10
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <fsmManual+0x60>)
 8000812:	f000 fe8b 	bl	800152c <SCH_AddTask>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <fsmManual+0x58>)
 800081c:	709a      	strb	r2, [r3, #2]
	// Initialize for Manual Mode
	SCH_AddTask(traffic0Red, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <fsmManual+0x64>)
 8000824:	f000 fe82 	bl	800152c <SCH_AddTask>
	SCH_AddTask(traffic1Green, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	4807      	ldr	r0, [pc, #28]	; (800084c <fsmManual+0x68>)
 800082e:	f000 fe7d 	bl	800152c <SCH_AddTask>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	08000731 	.word	0x08000731
 800083c:	20000108 	.word	0x20000108
 8000840:	08001371 	.word	0x08001371
 8000844:	080013b1 	.word	0x080013b1
 8000848:	08002109 	.word	0x08002109
 800084c:	08002159 	.word	0x08002159

08000850 <fsmTunningStop>:

void fsmTunningStop(void) {
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
	return;
 8000854:	bf00      	nop
}
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <fsmTunningProcessing>:

void fsmTunningProcessing(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fcfd 	bl	8000260 <buttonPressed>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	f000 80cb 	beq.w	8000a04 <fsmTunningProcessing+0x1a8>
		SCH_DeleteTask(fsmTunningIDs[1]);
 800086e:	4bad      	ldr	r3, [pc, #692]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 8000870:	785b      	ldrb	r3, [r3, #1]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 ff60 	bl	8001738 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[2]);
 8000878:	4baa      	ldr	r3, [pc, #680]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 800087a:	789b      	ldrb	r3, [r3, #2]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 ff5b 	bl	8001738 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[3]);
 8000882:	4ba8      	ldr	r3, [pc, #672]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 8000884:	78db      	ldrb	r3, [r3, #3]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 ff56 	bl	8001738 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[4]);
 800088c:	4ba5      	ldr	r3, [pc, #660]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	f000 ff51 	bl	8001738 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[5]);
 8000896:	4ba3      	ldr	r3, [pc, #652]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 8000898:	795b      	ldrb	r3, [r3, #5]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 ff4c 	bl	8001738 <SCH_DeleteTask>
		switch (fsmTunningState) {
 80008a0:	4ba1      	ldr	r3, [pc, #644]	; (8000b28 <fsmTunningProcessing+0x2cc>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d075      	beq.n	8000994 <fsmTunningProcessing+0x138>
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	f300 80aa 	bgt.w	8000a02 <fsmTunningProcessing+0x1a6>
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d002      	beq.n	80008b8 <fsmTunningProcessing+0x5c>
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d037      	beq.n	8000926 <fsmTunningProcessing+0xca>
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
			fsmTunningState = TRAFFIC_RED;
			break;
		default:
			break;
 80008b6:	e0a4      	b.n	8000a02 <fsmTunningProcessing+0x1a6>
			fsmTunningIDs[1] = SCH_AddTask(uartGreenDuration, 50, 100);
 80008b8:	2264      	movs	r2, #100	; 0x64
 80008ba:	2132      	movs	r1, #50	; 0x32
 80008bc:	489b      	ldr	r0, [pc, #620]	; (8000b2c <fsmTunningProcessing+0x2d0>)
 80008be:	f000 fe35 	bl	800152c <SCH_AddTask>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b97      	ldr	r3, [pc, #604]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 80008c8:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Green, 0, 1000);
 80008ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ce:	2100      	movs	r1, #0
 80008d0:	4897      	ldr	r0, [pc, #604]	; (8000b30 <fsmTunningProcessing+0x2d4>)
 80008d2:	f000 fe2b 	bl	800152c <SCH_AddTask>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b92      	ldr	r3, [pc, #584]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 80008dc:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Green, 0, 1000);
 80008de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008e2:	2100      	movs	r1, #0
 80008e4:	4893      	ldr	r0, [pc, #588]	; (8000b34 <fsmTunningProcessing+0x2d8>)
 80008e6:	f000 fe21 	bl	800152c <SCH_AddTask>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b8d      	ldr	r3, [pc, #564]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 80008f0:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 80008f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008fa:	488f      	ldr	r0, [pc, #572]	; (8000b38 <fsmTunningProcessing+0x2dc>)
 80008fc:	f000 fe16 	bl	800152c <SCH_AddTask>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b87      	ldr	r3, [pc, #540]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 8000906:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 8000908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800090c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000910:	488a      	ldr	r0, [pc, #552]	; (8000b3c <fsmTunningProcessing+0x2e0>)
 8000912:	f000 fe0b 	bl	800152c <SCH_AddTask>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b82      	ldr	r3, [pc, #520]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 800091c:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_GREEN;
 800091e:	4b82      	ldr	r3, [pc, #520]	; (8000b28 <fsmTunningProcessing+0x2cc>)
 8000920:	2202      	movs	r2, #2
 8000922:	701a      	strb	r2, [r3, #0]
			break;
 8000924:	e06e      	b.n	8000a04 <fsmTunningProcessing+0x1a8>
			fsmTunningIDs[1] = SCH_AddTask(uartYellowDuration, 50, 100);
 8000926:	2264      	movs	r2, #100	; 0x64
 8000928:	2132      	movs	r1, #50	; 0x32
 800092a:	4885      	ldr	r0, [pc, #532]	; (8000b40 <fsmTunningProcessing+0x2e4>)
 800092c:	f000 fdfe 	bl	800152c <SCH_AddTask>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	4b7b      	ldr	r3, [pc, #492]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 8000936:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Yellow, 0, 1000);
 8000938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800093c:	2100      	movs	r1, #0
 800093e:	4881      	ldr	r0, [pc, #516]	; (8000b44 <fsmTunningProcessing+0x2e8>)
 8000940:	f000 fdf4 	bl	800152c <SCH_AddTask>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	4b76      	ldr	r3, [pc, #472]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 800094a:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Yellow, 0, 1000);
 800094c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000950:	2100      	movs	r1, #0
 8000952:	487d      	ldr	r0, [pc, #500]	; (8000b48 <fsmTunningProcessing+0x2ec>)
 8000954:	f000 fdea 	bl	800152c <SCH_AddTask>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	4b71      	ldr	r3, [pc, #452]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 800095e:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 8000960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000964:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000968:	4873      	ldr	r0, [pc, #460]	; (8000b38 <fsmTunningProcessing+0x2dc>)
 800096a:	f000 fddf 	bl	800152c <SCH_AddTask>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b6c      	ldr	r3, [pc, #432]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 8000974:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 8000976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800097a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800097e:	486f      	ldr	r0, [pc, #444]	; (8000b3c <fsmTunningProcessing+0x2e0>)
 8000980:	f000 fdd4 	bl	800152c <SCH_AddTask>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b66      	ldr	r3, [pc, #408]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 800098a:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_YELLOW;
 800098c:	4b66      	ldr	r3, [pc, #408]	; (8000b28 <fsmTunningProcessing+0x2cc>)
 800098e:	2203      	movs	r2, #3
 8000990:	701a      	strb	r2, [r3, #0]
			break;
 8000992:	e037      	b.n	8000a04 <fsmTunningProcessing+0x1a8>
			fsmTunningIDs[1] = SCH_AddTask(uartRedDuration, 50, 100);
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	2132      	movs	r1, #50	; 0x32
 8000998:	486c      	ldr	r0, [pc, #432]	; (8000b4c <fsmTunningProcessing+0x2f0>)
 800099a:	f000 fdc7 	bl	800152c <SCH_AddTask>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b60      	ldr	r3, [pc, #384]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 80009a4:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Red, 0, 1000);
 80009a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009aa:	2100      	movs	r1, #0
 80009ac:	4868      	ldr	r0, [pc, #416]	; (8000b50 <fsmTunningProcessing+0x2f4>)
 80009ae:	f000 fdbd 	bl	800152c <SCH_AddTask>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b5b      	ldr	r3, [pc, #364]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 80009b8:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Red, 0, 1000);
 80009ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009be:	2100      	movs	r1, #0
 80009c0:	4864      	ldr	r0, [pc, #400]	; (8000b54 <fsmTunningProcessing+0x2f8>)
 80009c2:	f000 fdb3 	bl	800152c <SCH_AddTask>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b56      	ldr	r3, [pc, #344]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 80009cc:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 80009ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009d6:	4858      	ldr	r0, [pc, #352]	; (8000b38 <fsmTunningProcessing+0x2dc>)
 80009d8:	f000 fda8 	bl	800152c <SCH_AddTask>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	4b50      	ldr	r3, [pc, #320]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 80009e2:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 80009e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009ec:	4853      	ldr	r0, [pc, #332]	; (8000b3c <fsmTunningProcessing+0x2e0>)
 80009ee:	f000 fd9d 	bl	800152c <SCH_AddTask>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b4b      	ldr	r3, [pc, #300]	; (8000b24 <fsmTunningProcessing+0x2c8>)
 80009f8:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_RED;
 80009fa:	4b4b      	ldr	r3, [pc, #300]	; (8000b28 <fsmTunningProcessing+0x2cc>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
			break;
 8000a00:	e000      	b.n	8000a04 <fsmTunningProcessing+0x1a8>
			break;
 8000a02:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 8000a04:	2002      	movs	r0, #2
 8000a06:	f7ff fc2b 	bl	8000260 <buttonPressed>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d041      	beq.n	8000a94 <fsmTunningProcessing+0x238>
		switch (fsmTunningState) {
 8000a10:	4b45      	ldr	r3, [pc, #276]	; (8000b28 <fsmTunningProcessing+0x2cc>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d02a      	beq.n	8000a6e <fsmTunningProcessing+0x212>
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	dc3a      	bgt.n	8000a92 <fsmTunningProcessing+0x236>
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d002      	beq.n	8000a26 <fsmTunningProcessing+0x1ca>
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d012      	beq.n	8000a4a <fsmTunningProcessing+0x1ee>
			else {
				trafficYellowDuration = TRAFFIC_DURARION_MAX;
			}
			break;
		default:
			break;
 8000a24:	e035      	b.n	8000a92 <fsmTunningProcessing+0x236>
			if (trafficRedDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000a26:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <fsmTunningProcessing+0x2fc>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d806      	bhi.n	8000a40 <fsmTunningProcessing+0x1e4>
				trafficRedDuration += TRAFFIC_DURARION_AUTO;
 8000a32:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <fsmTunningProcessing+0x2fc>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a3a:	4a47      	ldr	r2, [pc, #284]	; (8000b58 <fsmTunningProcessing+0x2fc>)
 8000a3c:	6013      	str	r3, [r2, #0]
			break;
 8000a3e:	e029      	b.n	8000a94 <fsmTunningProcessing+0x238>
				trafficRedDuration = TRAFFIC_DURARION_MAX;
 8000a40:	4b45      	ldr	r3, [pc, #276]	; (8000b58 <fsmTunningProcessing+0x2fc>)
 8000a42:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a46:	601a      	str	r2, [r3, #0]
			break;
 8000a48:	e024      	b.n	8000a94 <fsmTunningProcessing+0x238>
			if (trafficGreenDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000a4a:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <fsmTunningProcessing+0x300>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d806      	bhi.n	8000a64 <fsmTunningProcessing+0x208>
				trafficGreenDuration += TRAFFIC_DURARION_AUTO;
 8000a56:	4b41      	ldr	r3, [pc, #260]	; (8000b5c <fsmTunningProcessing+0x300>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a5e:	4a3f      	ldr	r2, [pc, #252]	; (8000b5c <fsmTunningProcessing+0x300>)
 8000a60:	6013      	str	r3, [r2, #0]
			break;
 8000a62:	e017      	b.n	8000a94 <fsmTunningProcessing+0x238>
				trafficGreenDuration = TRAFFIC_DURARION_MAX;
 8000a64:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <fsmTunningProcessing+0x300>)
 8000a66:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a6a:	601a      	str	r2, [r3, #0]
			break;
 8000a6c:	e012      	b.n	8000a94 <fsmTunningProcessing+0x238>
			if (trafficYellowDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000a6e:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <fsmTunningProcessing+0x304>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d806      	bhi.n	8000a88 <fsmTunningProcessing+0x22c>
				trafficYellowDuration += TRAFFIC_DURARION_AUTO;
 8000a7a:	4b39      	ldr	r3, [pc, #228]	; (8000b60 <fsmTunningProcessing+0x304>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a82:	4a37      	ldr	r2, [pc, #220]	; (8000b60 <fsmTunningProcessing+0x304>)
 8000a84:	6013      	str	r3, [r2, #0]
			break;
 8000a86:	e005      	b.n	8000a94 <fsmTunningProcessing+0x238>
				trafficYellowDuration = TRAFFIC_DURARION_MAX;
 8000a88:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <fsmTunningProcessing+0x304>)
 8000a8a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a8e:	601a      	str	r2, [r3, #0]
			break;
 8000a90:	e000      	b.n	8000a94 <fsmTunningProcessing+0x238>
			break;
 8000a92:	bf00      	nop
		}
	}
	if (buttonPressed(3)) {
 8000a94:	2003      	movs	r0, #3
 8000a96:	f7ff fbe3 	bl	8000260 <buttonPressed>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d03e      	beq.n	8000b1e <fsmTunningProcessing+0x2c2>
		switch (fsmTunningState) {
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <fsmTunningProcessing+0x2cc>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d028      	beq.n	8000afa <fsmTunningProcessing+0x29e>
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	dc37      	bgt.n	8000b1c <fsmTunningProcessing+0x2c0>
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d002      	beq.n	8000ab6 <fsmTunningProcessing+0x25a>
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d011      	beq.n	8000ad8 <fsmTunningProcessing+0x27c>
			else {
				trafficYellowDuration = TRAFFIC_DURARION_MIN;
			}
			break;
		default:
			break;
 8000ab4:	e032      	b.n	8000b1c <fsmTunningProcessing+0x2c0>
			if (trafficRedDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <fsmTunningProcessing+0x2fc>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000abe:	d906      	bls.n	8000ace <fsmTunningProcessing+0x272>
				trafficRedDuration -= TRAFFIC_DURARION_AUTO;
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <fsmTunningProcessing+0x2fc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000ac8:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <fsmTunningProcessing+0x2fc>)
 8000aca:	6013      	str	r3, [r2, #0]
			break;
 8000acc:	e027      	b.n	8000b1e <fsmTunningProcessing+0x2c2>
				trafficRedDuration = TRAFFIC_DURARION_MIN;
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <fsmTunningProcessing+0x2fc>)
 8000ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ad4:	601a      	str	r2, [r3, #0]
			break;
 8000ad6:	e022      	b.n	8000b1e <fsmTunningProcessing+0x2c2>
			if (trafficGreenDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <fsmTunningProcessing+0x300>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ae0:	d906      	bls.n	8000af0 <fsmTunningProcessing+0x294>
				trafficGreenDuration -= TRAFFIC_DURARION_AUTO;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <fsmTunningProcessing+0x300>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <fsmTunningProcessing+0x300>)
 8000aec:	6013      	str	r3, [r2, #0]
			break;
 8000aee:	e016      	b.n	8000b1e <fsmTunningProcessing+0x2c2>
				trafficGreenDuration = TRAFFIC_DURARION_MIN;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <fsmTunningProcessing+0x300>)
 8000af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af6:	601a      	str	r2, [r3, #0]
			break;
 8000af8:	e011      	b.n	8000b1e <fsmTunningProcessing+0x2c2>
			if (trafficYellowDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <fsmTunningProcessing+0x304>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b02:	d906      	bls.n	8000b12 <fsmTunningProcessing+0x2b6>
				trafficYellowDuration -= TRAFFIC_DURARION_AUTO;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <fsmTunningProcessing+0x304>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <fsmTunningProcessing+0x304>)
 8000b0e:	6013      	str	r3, [r2, #0]
			break;
 8000b10:	e005      	b.n	8000b1e <fsmTunningProcessing+0x2c2>
				trafficYellowDuration = TRAFFIC_DURARION_MIN;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <fsmTunningProcessing+0x304>)
 8000b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b18:	601a      	str	r2, [r3, #0]
			break;
 8000b1a:	e000      	b.n	8000b1e <fsmTunningProcessing+0x2c2>
			break;
 8000b1c:	bf00      	nop
		}
	}
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000010c 	.word	0x2000010c
 8000b28:	200000f5 	.word	0x200000f5
 8000b2c:	080021bd 	.word	0x080021bd
 8000b30:	08002119 	.word	0x08002119
 8000b34:	08002159 	.word	0x08002159
 8000b38:	080020f9 	.word	0x080020f9
 8000b3c:	08002139 	.word	0x08002139
 8000b40:	08002201 	.word	0x08002201
 8000b44:	08002129 	.word	0x08002129
 8000b48:	08002169 	.word	0x08002169
 8000b4c:	08002179 	.word	0x08002179
 8000b50:	08002109 	.word	0x08002109
 8000b54:	08002149 	.word	0x08002149
 8000b58:	20000034 	.word	0x20000034
 8000b5c:	20000038 	.word	0x20000038
 8000b60:	2000003c 	.word	0x2000003c

08000b64 <fsmTunning>:

void fsmTunning(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	fsmTunningIDs[0] = SCH_AddTask(fsmTunningProcessing, 10, TIMER_TICK);
 8000b68:	220a      	movs	r2, #10
 8000b6a:	210a      	movs	r1, #10
 8000b6c:	481f      	ldr	r0, [pc, #124]	; (8000bec <fsmTunning+0x88>)
 8000b6e:	f000 fcdd 	bl	800152c <SCH_AddTask>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <fsmTunning+0x8c>)
 8000b78:	701a      	strb	r2, [r3, #0]
	// Initialize for Tunning Mode
	fsmTunningState = TRAFFIC_RED;
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <fsmTunning+0x90>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
	fsmTunningIDs[1] = SCH_AddTask(uartRedDuration, 50, 100);
 8000b80:	2264      	movs	r2, #100	; 0x64
 8000b82:	2132      	movs	r1, #50	; 0x32
 8000b84:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <fsmTunning+0x94>)
 8000b86:	f000 fcd1 	bl	800152c <SCH_AddTask>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <fsmTunning+0x8c>)
 8000b90:	705a      	strb	r2, [r3, #1]
	fsmTunningIDs[2] = SCH_AddTask(traffic0Red, 0, 1000);
 8000b92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b96:	2100      	movs	r1, #0
 8000b98:	4818      	ldr	r0, [pc, #96]	; (8000bfc <fsmTunning+0x98>)
 8000b9a:	f000 fcc7 	bl	800152c <SCH_AddTask>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <fsmTunning+0x8c>)
 8000ba4:	709a      	strb	r2, [r3, #2]
	fsmTunningIDs[3] = SCH_AddTask(traffic1Red, 0, 1000);
 8000ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000baa:	2100      	movs	r1, #0
 8000bac:	4814      	ldr	r0, [pc, #80]	; (8000c00 <fsmTunning+0x9c>)
 8000bae:	f000 fcbd 	bl	800152c <SCH_AddTask>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <fsmTunning+0x8c>)
 8000bb8:	70da      	strb	r2, [r3, #3]
	fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 8000bba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bbe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bc2:	4810      	ldr	r0, [pc, #64]	; (8000c04 <fsmTunning+0xa0>)
 8000bc4:	f000 fcb2 	bl	800152c <SCH_AddTask>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <fsmTunning+0x8c>)
 8000bce:	711a      	strb	r2, [r3, #4]
	fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 8000bd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bd4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <fsmTunning+0xa4>)
 8000bda:	f000 fca7 	bl	800152c <SCH_AddTask>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <fsmTunning+0x8c>)
 8000be4:	715a      	strb	r2, [r3, #5]
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800085d 	.word	0x0800085d
 8000bf0:	2000010c 	.word	0x2000010c
 8000bf4:	200000f5 	.word	0x200000f5
 8000bf8:	08002179 	.word	0x08002179
 8000bfc:	08002109 	.word	0x08002109
 8000c00:	08002149 	.word	0x08002149
 8000c04:	080020f9 	.word	0x080020f9
 8000c08:	08002139 	.word	0x08002139

08000c0c <fsmInit>:

void fsmInit(void) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	fsmState = FSM_INIT;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <fsmInit+0x34>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
	fsmIDs[0] = SCH_AddTask(testButton, 0, TIMER_TICK);
 8000c16:	220a      	movs	r2, #10
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <fsmInit+0x38>)
 8000c1c:	f000 fc86 	bl	800152c <SCH_AddTask>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <fsmInit+0x3c>)
 8000c26:	701a      	strb	r2, [r3, #0]
	SCH_AddTask(testBuzzer, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <fsmInit+0x40>)
 8000c2e:	f000 fc7d 	bl	800152c <SCH_AddTask>
	SCH_AddTask(testLED, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <fsmInit+0x44>)
 8000c38:	f000 fc78 	bl	800152c <SCH_AddTask>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000f4 	.word	0x200000f4
 8000c44:	08001dd5 	.word	0x08001dd5
 8000c48:	200000f8 	.word	0x200000f8
 8000c4c:	08001e61 	.word	0x08001e61
 8000c50:	08001e81 	.word	0x08001e81

08000c54 <fsmProcessing>:

void fsmProcessing(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
	if (buttonPressed(0)) {
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fb00 	bl	8000260 <buttonPressed>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d07e      	beq.n	8000d64 <fsmProcessing+0x110>
		switch (fsmState) {
 8000c66:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <fsmProcessing+0x118>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d879      	bhi.n	8000d62 <fsmProcessing+0x10e>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <fsmProcessing+0x20>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000c85 	.word	0x08000c85
 8000c78:	08000cb5 	.word	0x08000cb5
 8000c7c:	08000cef 	.word	0x08000cef
 8000c80:	08000d29 	.word	0x08000d29
		case FSM_INIT:
			for (uint8_t i = 0; i < FSM_TASK; i ++) {
 8000c84:	2300      	movs	r3, #0
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	e008      	b.n	8000c9c <fsmProcessing+0x48>
				SCH_DeleteTask(fsmIDs[i]);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a38      	ldr	r2, [pc, #224]	; (8000d70 <fsmProcessing+0x11c>)
 8000c8e:	5cd3      	ldrb	r3, [r2, r3]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fd51 	bl	8001738 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TASK; i ++) {
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f3      	beq.n	8000c8a <fsmProcessing+0x36>
			}
			SCH_AddTask(fsmAuto, 10, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	4833      	ldr	r0, [pc, #204]	; (8000d74 <fsmProcessing+0x120>)
 8000ca8:	f000 fc40 	bl	800152c <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000cac:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <fsmProcessing+0x118>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
			break;
 8000cb2:	e057      	b.n	8000d64 <fsmProcessing+0x110>
		case FSM_AUTO:
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	71bb      	strb	r3, [r7, #6]
 8000cb8:	e008      	b.n	8000ccc <fsmProcessing+0x78>
				SCH_DeleteTask(fsmAutoIDs[i]);
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	4a2e      	ldr	r2, [pc, #184]	; (8000d78 <fsmProcessing+0x124>)
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fd39 	bl	8001738 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	71bb      	strb	r3, [r7, #6]
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	2b0a      	cmp	r3, #10
 8000cd0:	d9f3      	bls.n	8000cba <fsmProcessing+0x66>
			}
			SCH_AddTask(fsmAutoStop, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4829      	ldr	r0, [pc, #164]	; (8000d7c <fsmProcessing+0x128>)
 8000cd8:	f000 fc28 	bl	800152c <SCH_AddTask>
			SCH_AddTask(fsmManual, 10, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	210a      	movs	r1, #10
 8000ce0:	4827      	ldr	r0, [pc, #156]	; (8000d80 <fsmProcessing+0x12c>)
 8000ce2:	f000 fc23 	bl	800152c <SCH_AddTask>
			fsmState = FSM_MANUAL;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <fsmProcessing+0x118>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]
			break;
 8000cec:	e03a      	b.n	8000d64 <fsmProcessing+0x110>
		case FSM_MANUAL:
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	717b      	strb	r3, [r7, #5]
 8000cf2:	e008      	b.n	8000d06 <fsmProcessing+0xb2>
				SCH_DeleteTask(fsmManualIDs[i]);
 8000cf4:	797b      	ldrb	r3, [r7, #5]
 8000cf6:	4a23      	ldr	r2, [pc, #140]	; (8000d84 <fsmProcessing+0x130>)
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fd1c 	bl	8001738 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	3301      	adds	r3, #1
 8000d04:	717b      	strb	r3, [r7, #5]
 8000d06:	797b      	ldrb	r3, [r7, #5]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d9f3      	bls.n	8000cf4 <fsmProcessing+0xa0>
			}
			SCH_AddTask(fsmManualStop, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	481d      	ldr	r0, [pc, #116]	; (8000d88 <fsmProcessing+0x134>)
 8000d12:	f000 fc0b 	bl	800152c <SCH_AddTask>
			SCH_AddTask(fsmTunning, 10, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210a      	movs	r1, #10
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <fsmProcessing+0x138>)
 8000d1c:	f000 fc06 	bl	800152c <SCH_AddTask>
			fsmState = FSM_TUNNING;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <fsmProcessing+0x118>)
 8000d22:	2203      	movs	r2, #3
 8000d24:	701a      	strb	r2, [r3, #0]
			break;
 8000d26:	e01d      	b.n	8000d64 <fsmProcessing+0x110>
		case FSM_TUNNING:
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	713b      	strb	r3, [r7, #4]
 8000d2c:	e008      	b.n	8000d40 <fsmProcessing+0xec>
				SCH_DeleteTask(fsmTunningIDs[i]);
 8000d2e:	793b      	ldrb	r3, [r7, #4]
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <fsmProcessing+0x13c>)
 8000d32:	5cd3      	ldrb	r3, [r2, r3]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fcff 	bl	8001738 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000d3a:	793b      	ldrb	r3, [r7, #4]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	713b      	strb	r3, [r7, #4]
 8000d40:	793b      	ldrb	r3, [r7, #4]
 8000d42:	2b05      	cmp	r3, #5
 8000d44:	d9f3      	bls.n	8000d2e <fsmProcessing+0xda>
			}
			SCH_AddTask(fsmTunningStop, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4812      	ldr	r0, [pc, #72]	; (8000d94 <fsmProcessing+0x140>)
 8000d4c:	f000 fbee 	bl	800152c <SCH_AddTask>
			SCH_AddTask(fsmAuto, 10, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	210a      	movs	r1, #10
 8000d54:	4807      	ldr	r0, [pc, #28]	; (8000d74 <fsmProcessing+0x120>)
 8000d56:	f000 fbe9 	bl	800152c <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <fsmProcessing+0x118>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
			break;
 8000d60:	e000      	b.n	8000d64 <fsmProcessing+0x110>
		default:
			break;
 8000d62:	bf00      	nop
		}
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200000f4 	.word	0x200000f4
 8000d70:	200000f8 	.word	0x200000f8
 8000d74:	08000581 	.word	0x08000581
 8000d78:	200000fc 	.word	0x200000fc
 8000d7c:	080004a5 	.word	0x080004a5
 8000d80:	080007e5 	.word	0x080007e5
 8000d84:	20000108 	.word	0x20000108
 8000d88:	080006f1 	.word	0x080006f1
 8000d8c:	08000b65 	.word	0x08000b65
 8000d90:	2000010c 	.word	0x2000010c
 8000d94:	08000851 	.word	0x08000851

08000d98 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_UART_RxCpltCallback+0x30>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10a      	bne.n	8000dc0 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <HAL_UART_RxCpltCallback+0x34>)
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <HAL_UART_RxCpltCallback+0x38>)
 8000db0:	f003 fae9 	bl	8004386 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000db4:	2332      	movs	r3, #50	; 0x32
 8000db6:	2201      	movs	r2, #1
 8000db8:	4904      	ldr	r1, [pc, #16]	; (8000dcc <HAL_UART_RxCpltCallback+0x34>)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_RxCpltCallback+0x38>)
 8000dbc:	f003 fa60 	bl	8004280 <HAL_UART_Transmit>
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	200001ec 	.word	0x200001ec
 8000dd0:	200001a4 	.word	0x200001a4

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd8:	f001 fa7c 	bl	80022d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ddc:	f000 f842 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de0:	f000 f97a 	bl	80010d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000de4:	f000 f94e 	bl	8001084 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000de8:	f000 f87e 	bl	8000ee8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dec:	f000 f8c8 	bl	8000f80 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000df0:	4814      	ldr	r0, [pc, #80]	; (8000e44 <main+0x70>)
 8000df2:	f002 fadf 	bl	80033b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000df6:	2100      	movs	r1, #0
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <main+0x74>)
 8000dfa:	f002 fb85 	bl	8003508 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dfe:	2104      	movs	r1, #4
 8000e00:	4811      	ldr	r0, [pc, #68]	; (8000e48 <main+0x74>)
 8000e02:	f002 fb81 	bl	8003508 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000e06:	2201      	movs	r2, #1
 8000e08:	4910      	ldr	r1, [pc, #64]	; (8000e4c <main+0x78>)
 8000e0a:	4811      	ldr	r0, [pc, #68]	; (8000e50 <main+0x7c>)
 8000e0c:	f003 fabb 	bl	8004386 <HAL_UART_Receive_IT>
  SCH_Init();
 8000e10:	f000 fb02 	bl	8001418 <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(testMCU, 0, 500);
 8000e14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e18:	2100      	movs	r1, #0
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <main+0x80>)
 8000e1c:	f000 fb86 	bl	800152c <SCH_AddTask>
//  SCH_AddTask(uartReport, 100, 5000);
  SCH_AddTask(buttonReading, 0, TIMER_TICK);
 8000e20:	220a      	movs	r2, #10
 8000e22:	2100      	movs	r1, #0
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <main+0x84>)
 8000e26:	f000 fb81 	bl	800152c <SCH_AddTask>
   SCH_AddTask(fsmInit, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <main+0x88>)
 8000e30:	f000 fb7c 	bl	800152c <SCH_AddTask>
   SCH_AddTask(fsmProcessing, 10, TIMER_TICK);
 8000e34:	220a      	movs	r2, #10
 8000e36:	210a      	movs	r1, #10
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <main+0x8c>)
 8000e3a:	f000 fb77 	bl	800152c <SCH_AddTask>
  {
//    	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 20000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SCH_Dispatch();
 8000e3e:	f000 fb5b 	bl	80014f8 <SCH_Dispatch>
 8000e42:	e7fc      	b.n	8000e3e <main+0x6a>
 8000e44:	20000114 	.word	0x20000114
 8000e48:	2000015c 	.word	0x2000015c
 8000e4c:	200001ec 	.word	0x200001ec
 8000e50:	200001a4 	.word	0x200001a4
 8000e54:	08001dc1 	.word	0x08001dc1
 8000e58:	0800014d 	.word	0x0800014d
 8000e5c:	08000c0d 	.word	0x08000c0d
 8000e60:	08000c55 	.word	0x08000c55

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b090      	sub	sp, #64	; 0x40
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2228      	movs	r2, #40	; 0x28
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f004 f84c 	bl	8004f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8e:	2310      	movs	r3, #16
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	2302      	movs	r3, #2
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e9a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 fe25 	bl	8002af4 <HAL_RCC_OscConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000eb0:	f000 f9b3 	bl	800121a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2102      	movs	r1, #2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 f892 	bl	8002ff8 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000eda:	f000 f99e 	bl	800121a <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3740      	adds	r7, #64	; 0x40
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	463b      	mov	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f0e:	2209      	movs	r2, #9
 8000f10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f1a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000f1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f2c:	4813      	ldr	r0, [pc, #76]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f2e:	f002 f9f1 	bl	8003314 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f38:	f000 f96f 	bl	800121a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f4a:	f002 fd49 	bl	80039e0 <HAL_TIM_ConfigClockSource>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f54:	f000 f961 	bl	800121a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_TIM2_Init+0x94>)
 8000f66:	f003 f8cb 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f70:	f000 f953 	bl	800121a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000114 	.word	0x20000114

08000f80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	; 0x38
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	615a      	str	r2, [r3, #20]
 8000fae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb0:	4b32      	ldr	r3, [pc, #200]	; (800107c <MX_TIM3_Init+0xfc>)
 8000fb2:	4a33      	ldr	r2, [pc, #204]	; (8001080 <MX_TIM3_Init+0x100>)
 8000fb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <MX_TIM3_Init+0xfc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <MX_TIM3_Init+0xfc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <MX_TIM3_Init+0xfc>)
 8000fc4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000fc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <MX_TIM3_Init+0xfc>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd0:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_TIM3_Init+0xfc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fd6:	4829      	ldr	r0, [pc, #164]	; (800107c <MX_TIM3_Init+0xfc>)
 8000fd8:	f002 f99c 	bl	8003314 <HAL_TIM_Base_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fe2:	f000 f91a 	bl	800121a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4822      	ldr	r0, [pc, #136]	; (800107c <MX_TIM3_Init+0xfc>)
 8000ff4:	f002 fcf4 	bl	80039e0 <HAL_TIM_ConfigClockSource>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ffe:	f000 f90c 	bl	800121a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001002:	481e      	ldr	r0, [pc, #120]	; (800107c <MX_TIM3_Init+0xfc>)
 8001004:	f002 fa28 	bl	8003458 <HAL_TIM_PWM_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800100e:	f000 f904 	bl	800121a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	4619      	mov	r1, r3
 8001020:	4816      	ldr	r0, [pc, #88]	; (800107c <MX_TIM3_Init+0xfc>)
 8001022:	f003 f86d 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800102c:	f000 f8f5 	bl	800121a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001030:	2360      	movs	r3, #96	; 0x60
 8001032:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <MX_TIM3_Init+0xfc>)
 8001048:	f002 fc08 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001052:	f000 f8e2 	bl	800121a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2204      	movs	r2, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4807      	ldr	r0, [pc, #28]	; (800107c <MX_TIM3_Init+0xfc>)
 800105e:	f002 fbfd 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001068:	f000 f8d7 	bl	800121a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <MX_TIM3_Init+0xfc>)
 800106e:	f000 fda5 	bl	8001bbc <HAL_TIM_MspPostInit>

}
 8001072:	bf00      	nop
 8001074:	3738      	adds	r7, #56	; 0x38
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000015c 	.word	0x2000015c
 8001080:	40000400 	.word	0x40000400

08001084 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <MX_USART2_UART_Init+0x50>)
 800108c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 8001090:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001094:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USART2_UART_Init+0x4c>)
 80010bc:	f003 f890 	bl	80041e0 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c6:	f000 f8a8 	bl	800121a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001a4 	.word	0x200001a4
 80010d4:	40004400 	.word	0x40004400

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <MX_GPIO_Init+0x110>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a3d      	ldr	r2, [pc, #244]	; (80011e8 <MX_GPIO_Init+0x110>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <MX_GPIO_Init+0x110>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001104:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <MX_GPIO_Init+0x110>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a37      	ldr	r2, [pc, #220]	; (80011e8 <MX_GPIO_Init+0x110>)
 800110a:	f043 0320 	orr.w	r3, r3, #32
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <MX_GPIO_Init+0x110>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <MX_GPIO_Init+0x110>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a31      	ldr	r2, [pc, #196]	; (80011e8 <MX_GPIO_Init+0x110>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <MX_GPIO_Init+0x110>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MX_GPIO_Init+0x110>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <MX_GPIO_Init+0x110>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <MX_GPIO_Init+0x110>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2120      	movs	r1, #32
 8001150:	4826      	ldr	r0, [pc, #152]	; (80011ec <MX_GPIO_Init+0x114>)
 8001152:	f001 fc7c 	bl	8002a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin
 8001156:	2200      	movs	r2, #0
 8001158:	f247 3173 	movw	r1, #29555	; 0x7373
 800115c:	4824      	ldr	r0, [pc, #144]	; (80011f0 <MX_GPIO_Init+0x118>)
 800115e:	f001 fc76 	bl	8002a4e <HAL_GPIO_WritePin>
                          |TRAFFIC1_GREEN_Pin|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin|TRAFFIC0_GREEN_Pin
                          |PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_GPIO_Init+0x11c>)
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	4820      	ldr	r0, [pc, #128]	; (80011f8 <MX_GPIO_Init+0x120>)
 8001178:	f001 face 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800117c:	2320      	movs	r3, #32
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001184:	2301      	movs	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2302      	movs	r3, #2
 800118a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	4816      	ldr	r0, [pc, #88]	; (80011ec <MX_GPIO_Init+0x114>)
 8001194:	f001 fac0 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDESTRIAN0_RED_Pin PEDESTRIAN0_GREEN_Pin TRAFFIC1_RED_Pin TRAFFIC1_YELLOW_Pin
                           TRAFFIC1_GREEN_Pin TRAFFIC0_RED_Pin TRAFFIC0_YELLOW_Pin TRAFFIC0_GREEN_Pin
                           PEDESTRIAN1_RED_Pin PEDESTRIAN1_GREEN_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin
 8001198:	f247 3373 	movw	r3, #29555	; 0x7373
 800119c:	613b      	str	r3, [r7, #16]
                          |TRAFFIC1_GREEN_Pin|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin|TRAFFIC0_GREEN_Pin
                          |PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	480f      	ldr	r0, [pc, #60]	; (80011f0 <MX_GPIO_Init+0x118>)
 80011b2:	f001 fab1 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80011b6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <MX_GPIO_Init+0x114>)
 80011cc:	f001 faa4 	bl	8002718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	2028      	movs	r0, #40	; 0x28
 80011d6:	f001 f9b6 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011da:	2028      	movs	r0, #40	; 0x28
 80011dc:	f001 f9cf 	bl	800257e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010800 	.word	0x40010800
 80011f0:	40010c00 	.word	0x40010c00
 80011f4:	10110000 	.word	0x10110000
 80011f8:	40011000 	.word	0x40011000

080011fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120c:	d101      	bne.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 800120e:	f000 f94d 	bl	80014ac <SCH_Update>
	}
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800121e:	b672      	cpsid	i
}
 8001220:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001222:	e7fe      	b.n	8001222 <Error_Handler+0x8>

08001224 <pedestrianToggle>:
static GPIO_TypeDef* pedestrianGreenPorts[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_GPIO_Port};

static uint16_t pedestrianRedPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_RED_Pin, PEDESTRIAN1_RED_Pin};
static uint16_t pedestrianGreenPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_Pin, PEDESTRIAN1_GREEN_Pin};
//uint8_t test;
void pedestrianToggle(uint8_t index, enum PEDESTRIAN_STATE state) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d05e      	beq.n	80012f8 <pedestrianToggle+0xd4>
 800123a:	2b02      	cmp	r3, #2
 800123c:	f300 8081 	bgt.w	8001342 <pedestrianToggle+0x11e>
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <pedestrianToggle+0x26>
 8001244:	2b01      	cmp	r3, #1
 8001246:	d01d      	beq.n	8001284 <pedestrianToggle+0x60>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
		pedestrianStates[index] = PEDESTRIAN_GREEN;
		pedestrianCounters[index] = trafficCounters[index];
		break;
	default:
		break;
 8001248:	e07b      	b.n	8001342 <pedestrianToggle+0x11e>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4a3f      	ldr	r2, [pc, #252]	; (800134c <pedestrianToggle+0x128>)
 800124e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4a3e      	ldr	r2, [pc, #248]	; (8001350 <pedestrianToggle+0x12c>)
 8001256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f001 fbf6 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4a3b      	ldr	r2, [pc, #236]	; (8001354 <pedestrianToggle+0x130>)
 8001266:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4a3a      	ldr	r2, [pc, #232]	; (8001358 <pedestrianToggle+0x134>)
 800126e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001272:	2201      	movs	r2, #1
 8001274:	4619      	mov	r1, r3
 8001276:	f001 fbea 	bl	8002a4e <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_OFF;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a37      	ldr	r2, [pc, #220]	; (800135c <pedestrianToggle+0x138>)
 800127e:	2100      	movs	r1, #0
 8001280:	54d1      	strb	r1, [r2, r3]
		break;
 8001282:	e05f      	b.n	8001344 <pedestrianToggle+0x120>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_RESET);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <pedestrianToggle+0x128>)
 8001288:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4a30      	ldr	r2, [pc, #192]	; (8001350 <pedestrianToggle+0x12c>)
 8001290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	f001 fbd9 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <pedestrianToggle+0x130>)
 80012a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <pedestrianToggle+0x134>)
 80012a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	f001 fbcd 	bl	8002a4e <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_RED;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4a29      	ldr	r2, [pc, #164]	; (800135c <pedestrianToggle+0x138>)
 80012b8:	2101      	movs	r1, #1
 80012ba:	54d1      	strb	r1, [r2, r3]
		switch (trafficStates[index]) {
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4a28      	ldr	r2, [pc, #160]	; (8001360 <pedestrianToggle+0x13c>)
 80012c0:	5cd3      	ldrb	r3, [r2, r3]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d002      	beq.n	80012cc <pedestrianToggle+0xa8>
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d00c      	beq.n	80012e4 <pedestrianToggle+0xc0>
			break;
 80012ca:	e014      	b.n	80012f6 <pedestrianToggle+0xd2>
			pedestrianCounters[index] = trafficCounters[index] + trafficYellowDuration;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4a25      	ldr	r2, [pc, #148]	; (8001364 <pedestrianToggle+0x140>)
 80012d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <pedestrianToggle+0x144>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	440a      	add	r2, r1
 80012dc:	4923      	ldr	r1, [pc, #140]	; (800136c <pedestrianToggle+0x148>)
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 80012e2:	e008      	b.n	80012f6 <pedestrianToggle+0xd2>
			pedestrianCounters[index] = trafficCounters[index];
 80012e4:	79fa      	ldrb	r2, [r7, #7]
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	491e      	ldr	r1, [pc, #120]	; (8001364 <pedestrianToggle+0x140>)
 80012ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012ee:	491f      	ldr	r1, [pc, #124]	; (800136c <pedestrianToggle+0x148>)
 80012f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 80012f4:	bf00      	nop
		break;
 80012f6:	e025      	b.n	8001344 <pedestrianToggle+0x120>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4a14      	ldr	r2, [pc, #80]	; (800134c <pedestrianToggle+0x128>)
 80012fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4a13      	ldr	r2, [pc, #76]	; (8001350 <pedestrianToggle+0x12c>)
 8001304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001308:	2201      	movs	r2, #1
 800130a:	4619      	mov	r1, r3
 800130c:	f001 fb9f 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <pedestrianToggle+0x130>)
 8001314:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <pedestrianToggle+0x134>)
 800131c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	f001 fb93 	bl	8002a4e <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_GREEN;
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <pedestrianToggle+0x138>)
 800132c:	2102      	movs	r1, #2
 800132e:	54d1      	strb	r1, [r2, r3]
		pedestrianCounters[index] = trafficCounters[index];
 8001330:	79fa      	ldrb	r2, [r7, #7]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	490b      	ldr	r1, [pc, #44]	; (8001364 <pedestrianToggle+0x140>)
 8001336:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800133a:	490c      	ldr	r1, [pc, #48]	; (800136c <pedestrianToggle+0x148>)
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001340:	e000      	b.n	8001344 <pedestrianToggle+0x120>
		break;
 8001342:	bf00      	nop
	}
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000018 	.word	0x20000018
 8001350:	20000028 	.word	0x20000028
 8001354:	20000020 	.word	0x20000020
 8001358:	2000002c 	.word	0x2000002c
 800135c:	200001f0 	.word	0x200001f0
 8001360:	20000390 	.word	0x20000390
 8001364:	20000394 	.word	0x20000394
 8001368:	2000003c 	.word	0x2000003c
 800136c:	200001f4 	.word	0x200001f4

08001370 <pedestrian0On>:

void pedestrian0On(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	switch (trafficStates[0]) {
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <pedestrian0On+0x3c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d005      	beq.n	8001388 <pedestrian0On+0x18>
 800137c:	2b00      	cmp	r3, #0
 800137e:	dd11      	ble.n	80013a4 <pedestrian0On+0x34>
 8001380:	3b02      	subs	r3, #2
 8001382:	2b01      	cmp	r3, #1
 8001384:	d80e      	bhi.n	80013a4 <pedestrian0On+0x34>
 8001386:	e006      	b.n	8001396 <pedestrian0On+0x26>
	case TRAFFIC_RED:
		pedestrianToggle(0, PEDESTRIAN_GREEN);
 8001388:	2102      	movs	r1, #2
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff ff4a 	bl	8001224 <pedestrianToggle>
		buzzer0On();
 8001390:	f7fe ffdc 	bl	800034c <buzzer0On>
		break;
 8001394:	e007      	b.n	80013a6 <pedestrian0On+0x36>
	case TRAFFIC_YELLOW:
	case TRAFFIC_GREEN:
		pedestrianToggle(0, PEDESTRIAN_RED);
 8001396:	2101      	movs	r1, #1
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff ff43 	bl	8001224 <pedestrianToggle>
		buzzer0Off();
 800139e:	f7fe fff9 	bl	8000394 <buzzer0Off>
		break;
 80013a2:	e000      	b.n	80013a6 <pedestrian0On+0x36>
	default:
		break;
 80013a4:	bf00      	nop
	}
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000390 	.word	0x20000390

080013b0 <pedestrian1On>:

void pedestrian1On(void) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	switch (trafficStates[1]) {
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <pedestrian1On+0x3c>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <pedestrian1On+0x18>
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dd11      	ble.n	80013e4 <pedestrian1On+0x34>
 80013c0:	3b02      	subs	r3, #2
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d80e      	bhi.n	80013e4 <pedestrian1On+0x34>
 80013c6:	e006      	b.n	80013d6 <pedestrian1On+0x26>
	case TRAFFIC_RED:
		pedestrianToggle(1, PEDESTRIAN_GREEN);
 80013c8:	2102      	movs	r1, #2
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff ff2a 	bl	8001224 <pedestrianToggle>
		buzzer1On();
 80013d0:	f7fe ffe8 	bl	80003a4 <buzzer1On>
		break;
 80013d4:	e007      	b.n	80013e6 <pedestrian1On+0x36>
	case TRAFFIC_YELLOW:
	case TRAFFIC_GREEN:
		pedestrianToggle(1, PEDESTRIAN_RED);
 80013d6:	2101      	movs	r1, #1
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff ff23 	bl	8001224 <pedestrianToggle>
		buzzer1Off();
 80013de:	f7ff f805 	bl	80003ec <buzzer1Off>
		break;
 80013e2:	e000      	b.n	80013e6 <pedestrian1On+0x36>
	default:
		break;
 80013e4:	bf00      	nop
	}
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000390 	.word	0x20000390

080013f0 <pedestrian0Off>:

void pedestrian0Off(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	pedestrianToggle(0, PEDESTRIAN_OFF);
 80013f4:	2100      	movs	r1, #0
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff ff14 	bl	8001224 <pedestrianToggle>
	buzzer0Off();
 80013fc:	f7fe ffca 	bl	8000394 <buzzer0Off>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <pedestrian1Off>:

void pedestrian1Off(void) {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	pedestrianToggle(1, PEDESTRIAN_OFF);
 8001408:	2100      	movs	r1, #0
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff ff0a 	bl	8001224 <pedestrianToggle>
	buzzer1Off();
 8001410:	f7fe ffec 	bl	80003ec <buzzer1Off>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800141e:	2300      	movs	r3, #0
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	e037      	b.n	8001494 <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	4920      	ldr	r1, [pc, #128]	; (80014a8 <SCH_Init+0x90>)
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i;
 8001436:	79fa      	ldrb	r2, [r7, #7]
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f1c3 0314 	rsb	r3, r3, #20
 800143e:	b2d8      	uxtb	r0, r3
 8001440:	4919      	ldr	r1, [pc, #100]	; (80014a8 <SCH_Init+0x90>)
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	3304      	adds	r3, #4
 800144e:	4602      	mov	r2, r0
 8001450:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	4914      	ldr	r1, [pc, #80]	; (80014a8 <SCH_Init+0x90>)
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3308      	adds	r3, #8
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	490f      	ldr	r1, [pc, #60]	; (80014a8 <SCH_Init+0x90>)
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	440b      	add	r3, r1
 8001474:	330c      	adds	r3, #12
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	490a      	ldr	r1, [pc, #40]	; (80014a8 <SCH_Init+0x90>)
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	3310      	adds	r3, #16
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	3301      	adds	r3, #1
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b13      	cmp	r3, #19
 8001498:	d9c4      	bls.n	8001424 <SCH_Init+0xc>
    }
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	200001fc 	.word	0x200001fc

080014ac <SCH_Update>:

void SCH_Update(void) {
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <SCH_Update+0x48>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d018      	beq.n	80014ea <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <SCH_Update+0x48>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00c      	beq.n	80014da <SCH_Update+0x2e>
		if (tasks[0].delay > TIMER_TICK) {
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <SCH_Update+0x48>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b0a      	cmp	r3, #10
 80014c6:	d905      	bls.n	80014d4 <SCH_Update+0x28>
			tasks[0].delay -= TIMER_TICK;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <SCH_Update+0x48>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	3b0a      	subs	r3, #10
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <SCH_Update+0x48>)
 80014d0:	6093      	str	r3, [r2, #8]
 80014d2:	e002      	b.n	80014da <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <SCH_Update+0x48>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <SCH_Update+0x48>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d104      	bne.n	80014ec <SCH_Update+0x40>
		tasks[0].flag = 1;
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SCH_Update+0x48>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	741a      	strb	r2, [r3, #16]
 80014e8:	e000      	b.n	80014ec <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 80014ea:	bf00      	nop
	}
}
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	200001fc 	.word	0x200001fc

080014f8 <SCH_Dispatch>:

void SCH_Dispatch(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <SCH_Dispatch+0x30>)
 80014fe:	7c1b      	ldrb	r3, [r3, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00f      	beq.n	8001524 <SCH_Dispatch+0x2c>
    (*tasks[0].functionPointer)();
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <SCH_Dispatch+0x30>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4798      	blx	r3
    if (tasks[0].period > 0) {
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <SCH_Dispatch+0x30>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <SCH_Dispatch+0x20>
        SCH_RefreshTask();
 8001512:	f000 f9af 	bl	8001874 <SCH_RefreshTask>
 8001516:	e006      	b.n	8001526 <SCH_Dispatch+0x2e>
    }
    else {
        SCH_DeleteTask(tasks[0].id);
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <SCH_Dispatch+0x30>)
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f90b 	bl	8001738 <SCH_DeleteTask>
 8001522:	e000      	b.n	8001526 <SCH_Dispatch+0x2e>
    if (tasks[0].flag == 0) return;
 8001524:	bf00      	nop
    }
}
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200001fc 	.word	0x200001fc

0800152c <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 800152c:	b4b0      	push	{r4, r5, r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return 0;
 8001538:	4b7e      	ldr	r3, [pc, #504]	; (8001734 <SCH_AddTask+0x208>)
 800153a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SCH_AddTask+0x1a>
 8001542:	2300      	movs	r3, #0
 8001544:	e0f1      	b.n	800172a <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 8001546:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <SCH_AddTask+0x208>)
 8001548:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800154c:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001552:	2300      	movs	r3, #0
 8001554:	76fb      	strb	r3, [r7, #27]
 8001556:	e0e3      	b.n	8001720 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 8001558:	7efa      	ldrb	r2, [r7, #27]
 800155a:	4976      	ldr	r1, [pc, #472]	; (8001734 <SCH_AddTask+0x208>)
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	3308      	adds	r3, #8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	429a      	cmp	r2, r3
 8001576:	d80a      	bhi.n	800158e <SCH_AddTask+0x62>
 8001578:	7efa      	ldrb	r2, [r7, #27]
 800157a:	496e      	ldr	r1, [pc, #440]	; (8001734 <SCH_AddTask+0x208>)
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 80c6 	bne.w	800171a <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 800158e:	2313      	movs	r3, #19
 8001590:	76bb      	strb	r3, [r7, #26]
 8001592:	e017      	b.n	80015c4 <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 8001594:	7ebb      	ldrb	r3, [r7, #26]
 8001596:	1e5a      	subs	r2, r3, #1
 8001598:	7eb9      	ldrb	r1, [r7, #26]
 800159a:	4866      	ldr	r0, [pc, #408]	; (8001734 <SCH_AddTask+0x208>)
 800159c:	460b      	mov	r3, r1
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4418      	add	r0, r3
 80015a6:	4963      	ldr	r1, [pc, #396]	; (8001734 <SCH_AddTask+0x208>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	4604      	mov	r4, r0
 80015b4:	461d      	mov	r5, r3
 80015b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ba:	682b      	ldr	r3, [r5, #0]
 80015bc:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 80015be:	7ebb      	ldrb	r3, [r7, #26]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	76bb      	strb	r3, [r7, #26]
 80015c4:	7eba      	ldrb	r2, [r7, #26]
 80015c6:	7efb      	ldrb	r3, [r7, #27]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8e3      	bhi.n	8001594 <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 80015cc:	7efa      	ldrb	r2, [r7, #27]
 80015ce:	4959      	ldr	r1, [pc, #356]	; (8001734 <SCH_AddTask+0x208>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 80015de:	7efa      	ldrb	r2, [r7, #27]
 80015e0:	4954      	ldr	r1, [pc, #336]	; (8001734 <SCH_AddTask+0x208>)
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	3304      	adds	r3, #4
 80015ee:	7e7a      	ldrb	r2, [r7, #25]
 80015f0:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 80015f2:	7efa      	ldrb	r2, [r7, #27]
 80015f4:	494f      	ldr	r1, [pc, #316]	; (8001734 <SCH_AddTask+0x208>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	330c      	adds	r3, #12
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 8001606:	7efa      	ldrb	r2, [r7, #27]
 8001608:	494a      	ldr	r1, [pc, #296]	; (8001734 <SCH_AddTask+0x208>)
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3310      	adds	r3, #16
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	429a      	cmp	r2, r3
 8001620:	d950      	bls.n	80016c4 <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 800162a:	7efb      	ldrb	r3, [r7, #27]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	4941      	ldr	r1, [pc, #260]	; (8001734 <SCH_AddTask+0x208>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	3308      	adds	r3, #8
 800163c:	6819      	ldr	r1, [r3, #0]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	7efa      	ldrb	r2, [r7, #27]
 8001642:	1ac9      	subs	r1, r1, r3
 8001644:	483b      	ldr	r0, [pc, #236]	; (8001734 <SCH_AddTask+0x208>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4403      	add	r3, r0
 8001650:	3308      	adds	r3, #8
 8001652:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8001654:	7efa      	ldrb	r2, [r7, #27]
 8001656:	4937      	ldr	r1, [pc, #220]	; (8001734 <SCH_AddTask+0x208>)
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3308      	adds	r3, #8
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 800166a:	7efa      	ldrb	r2, [r7, #27]
 800166c:	4931      	ldr	r1, [pc, #196]	; (8001734 <SCH_AddTask+0x208>)
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3310      	adds	r3, #16
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 800167e:	7efb      	ldrb	r3, [r7, #27]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	6979      	ldr	r1, [r7, #20]
 8001684:	482b      	ldr	r0, [pc, #172]	; (8001734 <SCH_AddTask+0x208>)
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4403      	add	r3, r0
 8001690:	3308      	adds	r3, #8
 8001692:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 8001694:	7efb      	ldrb	r3, [r7, #27]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	4926      	ldr	r1, [pc, #152]	; (8001734 <SCH_AddTask+0x208>)
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3308      	adds	r3, #8
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d12c      	bne.n	8001706 <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 80016ac:	7efb      	ldrb	r3, [r7, #27]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	4920      	ldr	r1, [pc, #128]	; (8001734 <SCH_AddTask+0x208>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3310      	adds	r3, #16
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e020      	b.n	8001706 <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 80016c4:	7efa      	ldrb	r2, [r7, #27]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	1ac9      	subs	r1, r1, r3
 80016cc:	4819      	ldr	r0, [pc, #100]	; (8001734 <SCH_AddTask+0x208>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4403      	add	r3, r0
 80016d8:	3308      	adds	r3, #8
 80016da:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 80016dc:	7efa      	ldrb	r2, [r7, #27]
 80016de:	4915      	ldr	r1, [pc, #84]	; (8001734 <SCH_AddTask+0x208>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	3308      	adds	r3, #8
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 80016f2:	7efa      	ldrb	r2, [r7, #27]
 80016f4:	490f      	ldr	r1, [pc, #60]	; (8001734 <SCH_AddTask+0x208>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3310      	adds	r3, #16
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 8001706:	7efa      	ldrb	r2, [r7, #27]
 8001708:	490a      	ldr	r1, [pc, #40]	; (8001734 <SCH_AddTask+0x208>)
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	3304      	adds	r3, #4
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	e007      	b.n	800172a <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800171a:	7efb      	ldrb	r3, [r7, #27]
 800171c:	3301      	adds	r3, #1
 800171e:	76fb      	strb	r3, [r7, #27]
 8001720:	7efb      	ldrb	r3, [r7, #27]
 8001722:	2b13      	cmp	r3, #19
 8001724:	f67f af18 	bls.w	8001558 <SCH_AddTask+0x2c>
        }
    }
    return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	bcb0      	pop	{r4, r5, r7}
 8001732:	4770      	bx	lr
 8001734:	200001fc 	.word	0x200001fc

08001738 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 8001738:	b4b0      	push	{r4, r5, r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001742:	2300      	movs	r3, #0
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	e088      	b.n	800185a <SCH_DeleteTask+0x122>
    	if (tasks[i].functionPointer == 0) return 0;
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	4949      	ldr	r1, [pc, #292]	; (8001870 <SCH_DeleteTask+0x138>)
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <SCH_DeleteTask+0x28>
 800175c:	2300      	movs	r3, #0
 800175e:	e081      	b.n	8001864 <SCH_DeleteTask+0x12c>
        if (tasks[i].id == id) {
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	4943      	ldr	r1, [pc, #268]	; (8001870 <SCH_DeleteTask+0x138>)
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	3304      	adds	r3, #4
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	79fa      	ldrb	r2, [r7, #7]
 8001774:	429a      	cmp	r2, r3
 8001776:	d16d      	bne.n	8001854 <SCH_DeleteTask+0x11c>
            uint8_t currentID = tasks[i].id;
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	493d      	ldr	r1, [pc, #244]	; (8001870 <SCH_DeleteTask+0x138>)
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	3304      	adds	r3, #4
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	4937      	ldr	r1, [pc, #220]	; (8001870 <SCH_DeleteTask+0x138>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01d      	beq.n	80017de <SCH_DeleteTask+0xa6>
                tasks[i + 1].delay += tasks[i].delay;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	4932      	ldr	r1, [pc, #200]	; (8001870 <SCH_DeleteTask+0x138>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	3308      	adds	r3, #8
 80017b4:	6819      	ldr	r1, [r3, #0]
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	482d      	ldr	r0, [pc, #180]	; (8001870 <SCH_DeleteTask+0x138>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4403      	add	r3, r0
 80017c4:	3308      	adds	r3, #8
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	3201      	adds	r2, #1
 80017cc:	4419      	add	r1, r3
 80017ce:	4828      	ldr	r0, [pc, #160]	; (8001870 <SCH_DeleteTask+0x138>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4403      	add	r3, r0
 80017da:	3308      	adds	r3, #8
 80017dc:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	73bb      	strb	r3, [r7, #14]
 80017e2:	e017      	b.n	8001814 <SCH_DeleteTask+0xdc>
                tasks[j] = tasks[j + 1];
 80017e4:	7bbb      	ldrb	r3, [r7, #14]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	7bb9      	ldrb	r1, [r7, #14]
 80017ea:	4821      	ldr	r0, [pc, #132]	; (8001870 <SCH_DeleteTask+0x138>)
 80017ec:	460b      	mov	r3, r1
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4418      	add	r0, r3
 80017f6:	491e      	ldr	r1, [pc, #120]	; (8001870 <SCH_DeleteTask+0x138>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	4604      	mov	r4, r0
 8001804:	461d      	mov	r5, r3
 8001806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800180a:	682b      	ldr	r3, [r5, #0]
 800180c:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 800180e:	7bbb      	ldrb	r3, [r7, #14]
 8001810:	3301      	adds	r3, #1
 8001812:	73bb      	strb	r3, [r7, #14]
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	2b12      	cmp	r3, #18
 8001818:	d9e4      	bls.n	80017e4 <SCH_DeleteTask+0xac>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <SCH_DeleteTask+0x138>)
 800181c:	2200      	movs	r2, #0
 800181e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 8001822:	4a13      	ldr	r2, [pc, #76]	; (8001870 <SCH_DeleteTask+0x138>)
 8001824:	7b7b      	ldrb	r3, [r7, #13]
 8001826:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <SCH_DeleteTask+0x138>)
 800182c:	2200      	movs	r2, #0
 800182e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            tasks[SCH_TASKNUMBER - 1].period = 0;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <SCH_DeleteTask+0x138>)
 8001834:	2200      	movs	r2, #0
 8001836:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <SCH_DeleteTask+0x138>)
 800183c:	2200      	movs	r2, #0
 800183e:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <SCH_DeleteTask+0x138>)
 8001844:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	e007      	b.n	8001864 <SCH_DeleteTask+0x12c>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	3301      	adds	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	2b13      	cmp	r3, #19
 800185e:	f67f af73 	bls.w	8001748 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bcb0      	pop	{r4, r5, r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	200001fc 	.word	0x200001fc

08001874 <SCH_RefreshTask>:

unsigned char SCH_RefreshTask(void) {
 8001874:	b4b0      	push	{r4, r5, r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return 0;
 800187a:	4b96      	ldr	r3, [pc, #600]	; (8001ad4 <SCH_RefreshTask+0x260>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <SCH_RefreshTask+0x12>
 8001882:	2300      	movs	r3, #0
 8001884:	e120      	b.n	8001ac8 <SCH_RefreshTask+0x254>
    SCH_Task currentTask = tasks[0];
 8001886:	4b93      	ldr	r3, [pc, #588]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001888:	463c      	mov	r4, r7
 800188a:	461d      	mov	r5, r3
 800188c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800188e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	6023      	str	r3, [r4, #0]
    uint32_t currentDelay = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001898:	2300      	movs	r3, #0
 800189a:	76fb      	strb	r3, [r7, #27]
 800189c:	e10f      	b.n	8001abe <SCH_RefreshTask+0x24a>
        if (i + 1 == SCH_TASKNUMBER || tasks[i + 1].functionPointer == NULL) {
 800189e:	7efb      	ldrb	r3, [r7, #27]
 80018a0:	2b13      	cmp	r3, #19
 80018a2:	d00a      	beq.n	80018ba <SCH_RefreshTask+0x46>
 80018a4:	7efb      	ldrb	r3, [r7, #27]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	498a      	ldr	r1, [pc, #552]	; (8001ad4 <SCH_RefreshTask+0x260>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d14a      	bne.n	8001950 <SCH_RefreshTask+0xdc>
            tasks[i].functionPointer = currentTask.functionPointer;
 80018ba:	7efa      	ldrb	r2, [r7, #27]
 80018bc:	6839      	ldr	r1, [r7, #0]
 80018be:	4885      	ldr	r0, [pc, #532]	; (8001ad4 <SCH_RefreshTask+0x260>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4403      	add	r3, r0
 80018ca:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 80018cc:	7efa      	ldrb	r2, [r7, #27]
 80018ce:	7938      	ldrb	r0, [r7, #4]
 80018d0:	4980      	ldr	r1, [pc, #512]	; (8001ad4 <SCH_RefreshTask+0x260>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	3304      	adds	r3, #4
 80018de:	4602      	mov	r2, r0
 80018e0:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 80018e2:	7efa      	ldrb	r2, [r7, #27]
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	487b      	ldr	r0, [pc, #492]	; (8001ad4 <SCH_RefreshTask+0x260>)
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4403      	add	r3, r0
 80018f2:	330c      	adds	r3, #12
 80018f4:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 80018f6:	7efa      	ldrb	r2, [r7, #27]
 80018f8:	4976      	ldr	r1, [pc, #472]	; (8001ad4 <SCH_RefreshTask+0x260>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3310      	adds	r3, #16
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 800190a:	68f9      	ldr	r1, [r7, #12]
 800190c:	7efa      	ldrb	r2, [r7, #27]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	1ac9      	subs	r1, r1, r3
 8001912:	4870      	ldr	r0, [pc, #448]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4403      	add	r3, r0
 800191e:	3308      	adds	r3, #8
 8001920:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8001922:	7efa      	ldrb	r2, [r7, #27]
 8001924:	496b      	ldr	r1, [pc, #428]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	3308      	adds	r3, #8
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <SCH_RefreshTask+0xd8>
                tasks[i].flag = 1;
 8001938:	7efa      	ldrb	r2, [r7, #27]
 800193a:	4966      	ldr	r1, [pc, #408]	; (8001ad4 <SCH_RefreshTask+0x260>)
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3310      	adds	r3, #16
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 800194c:	2301      	movs	r3, #1
 800194e:	e0bb      	b.n	8001ac8 <SCH_RefreshTask+0x254>
        }
        currentDelay += tasks[i + 1].delay;
 8001950:	7efb      	ldrb	r3, [r7, #27]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	495f      	ldr	r1, [pc, #380]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3308      	adds	r3, #8
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	61fb      	str	r3, [r7, #28]
        if (currentDelay > currentTask.period) {
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	429a      	cmp	r2, r3
 8001970:	f240 808d 	bls.w	8001a8e <SCH_RefreshTask+0x21a>
            tasks[i].functionPointer = currentTask.functionPointer;
 8001974:	7efa      	ldrb	r2, [r7, #27]
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	4856      	ldr	r0, [pc, #344]	; (8001ad4 <SCH_RefreshTask+0x260>)
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4403      	add	r3, r0
 8001984:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8001986:	7efa      	ldrb	r2, [r7, #27]
 8001988:	7938      	ldrb	r0, [r7, #4]
 800198a:	4952      	ldr	r1, [pc, #328]	; (8001ad4 <SCH_RefreshTask+0x260>)
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	3304      	adds	r3, #4
 8001998:	4602      	mov	r2, r0
 800199a:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 800199c:	7efa      	ldrb	r2, [r7, #27]
 800199e:	68f9      	ldr	r1, [r7, #12]
 80019a0:	484c      	ldr	r0, [pc, #304]	; (8001ad4 <SCH_RefreshTask+0x260>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4403      	add	r3, r0
 80019ac:	330c      	adds	r3, #12
 80019ae:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 80019b0:	7efa      	ldrb	r2, [r7, #27]
 80019b2:	4948      	ldr	r1, [pc, #288]	; (8001ad4 <SCH_RefreshTask+0x260>)
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3310      	adds	r3, #16
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 80019cc:	7efb      	ldrb	r3, [r7, #27]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	4940      	ldr	r1, [pc, #256]	; (8001ad4 <SCH_RefreshTask+0x260>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	3308      	adds	r3, #8
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	7efa      	ldrb	r2, [r7, #27]
 80019e4:	1ac9      	subs	r1, r1, r3
 80019e6:	483b      	ldr	r0, [pc, #236]	; (8001ad4 <SCH_RefreshTask+0x260>)
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4403      	add	r3, r0
 80019f2:	3308      	adds	r3, #8
 80019f4:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 80019f6:	7efa      	ldrb	r2, [r7, #27]
 80019f8:	4936      	ldr	r1, [pc, #216]	; (8001ad4 <SCH_RefreshTask+0x260>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	3308      	adds	r3, #8
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <SCH_RefreshTask+0x1ac>
                tasks[i].flag = 1;
 8001a0c:	7efa      	ldrb	r2, [r7, #27]
 8001a0e:	4931      	ldr	r1, [pc, #196]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	3310      	adds	r3, #16
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 8001a20:	7efb      	ldrb	r3, [r7, #27]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	492b      	ldr	r1, [pc, #172]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3308      	adds	r3, #8
 8001a32:	6819      	ldr	r1, [r3, #0]
 8001a34:	7efa      	ldrb	r2, [r7, #27]
 8001a36:	4827      	ldr	r0, [pc, #156]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4403      	add	r3, r0
 8001a42:	3308      	adds	r3, #8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	7efa      	ldrb	r2, [r7, #27]
 8001a48:	3201      	adds	r2, #1
 8001a4a:	1ac9      	subs	r1, r1, r3
 8001a4c:	4821      	ldr	r0, [pc, #132]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4403      	add	r3, r0
 8001a58:	3308      	adds	r3, #8
 8001a5a:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 8001a5c:	7efb      	ldrb	r3, [r7, #27]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	491c      	ldr	r1, [pc, #112]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10a      	bne.n	8001a8a <SCH_RefreshTask+0x216>
                tasks[i + 1].flag = 1;
 8001a74:	7efb      	ldrb	r3, [r7, #27]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	3310      	adds	r3, #16
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e01c      	b.n	8001ac8 <SCH_RefreshTask+0x254>
        }
        else {
            tasks[i] = tasks[i + 1];
 8001a8e:	7efb      	ldrb	r3, [r7, #27]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	7ef9      	ldrb	r1, [r7, #27]
 8001a94:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001a96:	460b      	mov	r3, r1
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4418      	add	r0, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <SCH_RefreshTask+0x260>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	4604      	mov	r4, r0
 8001aae:	461d      	mov	r5, r3
 8001ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001ab8:	7efb      	ldrb	r3, [r7, #27]
 8001aba:	3301      	adds	r3, #1
 8001abc:	76fb      	strb	r3, [r7, #27]
 8001abe:	7efb      	ldrb	r3, [r7, #27]
 8001ac0:	2b13      	cmp	r3, #19
 8001ac2:	f67f aeec 	bls.w	800189e <SCH_RefreshTask+0x2a>
        }
    }
    return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3724      	adds	r7, #36	; 0x24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bcb0      	pop	{r4, r5, r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200001fc 	.word	0x200001fc

08001ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_MspInit+0x5c>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <HAL_MspInit+0x5c>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6193      	str	r3, [r2, #24]
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_MspInit+0x5c>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_MspInit+0x5c>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_MspInit+0x5c>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_MspInit+0x5c>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_MspInit+0x60>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <HAL_MspInit+0x60>)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000

08001b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b4c:	d114      	bne.n	8001b78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_TIM_Base_MspInit+0x78>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_TIM_Base_MspInit+0x78>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_TIM_Base_MspInit+0x78>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	201c      	movs	r0, #28
 8001b6c:	f000 fceb 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b70:	201c      	movs	r0, #28
 8001b72:	f000 fd04 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b76:	e018      	b.n	8001baa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_TIM_Base_MspInit+0x7c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d113      	bne.n	8001baa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_TIM_Base_MspInit+0x78>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_TIM_Base_MspInit+0x78>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_TIM_Base_MspInit+0x78>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	201d      	movs	r0, #29
 8001ba0:	f000 fcd1 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ba4:	201d      	movs	r0, #29
 8001ba6:	f000 fcea 	bl	800257e <HAL_NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40000400 	.word	0x40000400

08001bbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <HAL_TIM_MspPostInit+0x58>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d117      	bne.n	8001c0c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_TIM_MspPostInit+0x5c>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_TIM_MspPostInit+0x5c>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_TIM_MspPostInit+0x5c>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf4:	23c0      	movs	r3, #192	; 0xc0
 8001bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_TIM_MspPostInit+0x60>)
 8001c08:	f000 fd86 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_UART_MspInit+0x80>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d12b      	bne.n	8001c98 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_UART_MspInit+0x84>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_UART_MspInit+0x84>)
 8001c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4a:	61d3      	str	r3, [r2, #28]
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_UART_MspInit+0x84>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_UART_MspInit+0x84>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <HAL_UART_MspInit+0x84>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_UART_MspInit+0x84>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c70:	230c      	movs	r3, #12
 8001c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	4809      	ldr	r0, [pc, #36]	; (8001ca8 <HAL_UART_MspInit+0x88>)
 8001c84:	f000 fd48 	bl	8002718 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2026      	movs	r0, #38	; 0x26
 8001c8e:	f000 fc5a 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c92:	2026      	movs	r0, #38	; 0x26
 8001c94:	f000 fc73 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c98:	bf00      	nop
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40004400 	.word	0x40004400
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010800 	.word	0x40010800

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <NMI_Handler+0x4>

08001cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler+0x4>

08001cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf2:	f000 fb35 	bl	8002360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <TIM2_IRQHandler+0x10>)
 8001d02:	f001 fca3 	bl	800364c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000114 	.word	0x20000114

08001d10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <TIM3_IRQHandler+0x10>)
 8001d16:	f001 fc99 	bl	800364c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000015c 	.word	0x2000015c

08001d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <USART2_IRQHandler+0x10>)
 8001d2a:	f002 fb51 	bl	80043d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200001a4 	.word	0x200001a4

08001d38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d40:	f000 feb6 	bl	8002ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f003 f8d2 	bl	8004f20 <__errno>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	220c      	movs	r2, #12
 8001d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20005000 	.word	0x20005000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	2000038c 	.word	0x2000038c
 8001db0:	200004e8 	.word	0x200004e8

08001db4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <testMCU>:

#include "test.h"

extern TIM_HandleTypeDef htim3;

void testMCU(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001dc4:	2120      	movs	r1, #32
 8001dc6:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <testMCU+0x10>)
 8001dc8:	f000 fe59 	bl	8002a7e <HAL_GPIO_TogglePin>
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40010800 	.word	0x40010800

08001dd4 <testButton>:

void testButton(void) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	if (buttonPressed(1) || buttonPressed(2) || buttonPressed(3)) {
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7fe fa41 	bl	8000260 <buttonPressed>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10b      	bne.n	8001dfc <testButton+0x28>
 8001de4:	2002      	movs	r0, #2
 8001de6:	f7fe fa3b 	bl	8000260 <buttonPressed>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <testButton+0x28>
 8001df0:	2003      	movs	r0, #3
 8001df2:	f7fe fa35 	bl	8000260 <buttonPressed>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d02c      	beq.n	8001e56 <testButton+0x82>
		HAL_GPIO_TogglePin(TRAFFIC0_RED_GPIO_Port, TRAFFIC0_RED_Pin);
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	4817      	ldr	r0, [pc, #92]	; (8001e5c <testButton+0x88>)
 8001e00:	f000 fe3d 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC0_GREEN_GPIO_Port, TRAFFIC0_GREEN_Pin);
 8001e04:	2140      	movs	r1, #64	; 0x40
 8001e06:	4815      	ldr	r0, [pc, #84]	; (8001e5c <testButton+0x88>)
 8001e08:	f000 fe39 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC0_YELLOW_GPIO_Port, TRAFFIC0_YELLOW_Pin);
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	4813      	ldr	r0, [pc, #76]	; (8001e5c <testButton+0x88>)
 8001e10:	f000 fe35 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_RED_GPIO_Port, TRAFFIC1_RED_Pin);
 8001e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e18:	4810      	ldr	r0, [pc, #64]	; (8001e5c <testButton+0x88>)
 8001e1a:	f000 fe30 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_GREEN_GPIO_Port, TRAFFIC1_GREEN_Pin);
 8001e1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e22:	480e      	ldr	r0, [pc, #56]	; (8001e5c <testButton+0x88>)
 8001e24:	f000 fe2b 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_YELLOW_GPIO_Port, TRAFFIC1_YELLOW_Pin);
 8001e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <testButton+0x88>)
 8001e2e:	f000 fe26 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN0_RED_GPIO_Port, PEDESTRIAN0_RED_Pin);
 8001e32:	2101      	movs	r1, #1
 8001e34:	4809      	ldr	r0, [pc, #36]	; (8001e5c <testButton+0x88>)
 8001e36:	f000 fe22 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN0_GREEN_Pin);
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	4807      	ldr	r0, [pc, #28]	; (8001e5c <testButton+0x88>)
 8001e3e:	f000 fe1e 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN1_RED_GPIO_Port, PEDESTRIAN1_RED_Pin);
 8001e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <testButton+0x88>)
 8001e48:	f000 fe19 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN1_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_Pin);
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <testButton+0x88>)
 8001e52:	f000 fe14 	bl	8002a7e <HAL_GPIO_TogglePin>
	}
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40010c00 	.word	0x40010c00

08001e60 <testBuzzer>:

void testBuzzer(void) {
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <testBuzzer+0x1c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <testBuzzer+0x1c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2200      	movs	r2, #0
 8001e72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	2000015c 	.word	0x2000015c

08001e80 <testLED>:

void testLED(void) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRAFFIC0_RED_GPIO_Port, TRAFFIC0_RED_Pin, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2110      	movs	r1, #16
 8001e88:	481b      	ldr	r0, [pc, #108]	; (8001ef8 <testLED+0x78>)
 8001e8a:	f000 fde0 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC0_GREEN_GPIO_Port, TRAFFIC0_GREEN_Pin, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2140      	movs	r1, #64	; 0x40
 8001e92:	4819      	ldr	r0, [pc, #100]	; (8001ef8 <testLED+0x78>)
 8001e94:	f000 fddb 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC0_YELLOW_GPIO_Port, TRAFFIC0_YELLOW_Pin, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2120      	movs	r1, #32
 8001e9c:	4816      	ldr	r0, [pc, #88]	; (8001ef8 <testLED+0x78>)
 8001e9e:	f000 fdd6 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_RED_GPIO_Port, TRAFFIC1_RED_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea8:	4813      	ldr	r0, [pc, #76]	; (8001ef8 <testLED+0x78>)
 8001eaa:	f000 fdd0 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_GREEN_GPIO_Port, TRAFFIC1_GREEN_Pin, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb4:	4810      	ldr	r0, [pc, #64]	; (8001ef8 <testLED+0x78>)
 8001eb6:	f000 fdca 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_YELLOW_GPIO_Port, TRAFFIC1_YELLOW_Pin, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec0:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <testLED+0x78>)
 8001ec2:	f000 fdc4 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN0_RED_GPIO_Port, PEDESTRIAN0_RED_Pin, GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2101      	movs	r1, #1
 8001eca:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <testLED+0x78>)
 8001ecc:	f000 fdbf 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN0_GREEN_Pin, GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	4808      	ldr	r0, [pc, #32]	; (8001ef8 <testLED+0x78>)
 8001ed6:	f000 fdba 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN1_RED_GPIO_Port, PEDESTRIAN1_RED_Pin, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <testLED+0x78>)
 8001ee2:	f000 fdb4 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN1_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <testLED+0x78>)
 8001eee:	f000 fdae 	bl	8002a4e <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40010c00 	.word	0x40010c00

08001efc <trafficToggle>:

static uint16_t trafficRedPins[TRAFFIC_NUMBER] = {TRAFFIC0_RED_Pin, TRAFFIC1_RED_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMBER] = {TRAFFIC0_GREEN_Pin, TRAFFIC1_GREEN_Pin};
static uint16_t trafficYellowPins[TRAFFIC_NUMBER] = {TRAFFIC0_YELLOW_Pin, TRAFFIC1_YELLOW_Pin};

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	460a      	mov	r2, r1
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8001f0c:	79bb      	ldrb	r3, [r7, #6]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	f200 80ce 	bhi.w	80020b0 <trafficToggle+0x1b4>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <trafficToggle+0x20>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f7f 	.word	0x08001f7f
 8001f24:	08001fe5 	.word	0x08001fe5
 8001f28:	0800204b 	.word	0x0800204b
	case TRAFFIC_OFF:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	4a66      	ldr	r2, [pc, #408]	; (80020c8 <trafficToggle+0x1cc>)
 8001f30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	4a65      	ldr	r2, [pc, #404]	; (80020cc <trafficToggle+0x1d0>)
 8001f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f000 fd85 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	4a62      	ldr	r2, [pc, #392]	; (80020d0 <trafficToggle+0x1d4>)
 8001f48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	4a61      	ldr	r2, [pc, #388]	; (80020d4 <trafficToggle+0x1d8>)
 8001f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4619      	mov	r1, r3
 8001f58:	f000 fd79 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	4a5e      	ldr	r2, [pc, #376]	; (80020d8 <trafficToggle+0x1dc>)
 8001f60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	4a5d      	ldr	r2, [pc, #372]	; (80020dc <trafficToggle+0x1e0>)
 8001f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f000 fd6d 	bl	8002a4e <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_OFF;
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	4a5a      	ldr	r2, [pc, #360]	; (80020e0 <trafficToggle+0x1e4>)
 8001f78:	2100      	movs	r1, #0
 8001f7a:	54d1      	strb	r1, [r2, r3]
		break;
 8001f7c:	e09f      	b.n	80020be <trafficToggle+0x1c2>
	case TRAFFIC_RED:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_RESET);
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	4a51      	ldr	r2, [pc, #324]	; (80020c8 <trafficToggle+0x1cc>)
 8001f82:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4a50      	ldr	r2, [pc, #320]	; (80020cc <trafficToggle+0x1d0>)
 8001f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4619      	mov	r1, r3
 8001f92:	f000 fd5c 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	4a4d      	ldr	r2, [pc, #308]	; (80020d0 <trafficToggle+0x1d4>)
 8001f9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <trafficToggle+0x1d8>)
 8001fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f000 fd50 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	4a49      	ldr	r2, [pc, #292]	; (80020d8 <trafficToggle+0x1dc>)
 8001fb2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <trafficToggle+0x1e0>)
 8001fba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f000 fd44 	bl	8002a4e <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_RED;
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	4a45      	ldr	r2, [pc, #276]	; (80020e0 <trafficToggle+0x1e4>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001fce:	4b45      	ldr	r3, [pc, #276]	; (80020e4 <trafficToggle+0x1e8>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d16e      	bne.n	80020b4 <trafficToggle+0x1b8>
			trafficCounters[index] = trafficRedDuration;
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4a43      	ldr	r2, [pc, #268]	; (80020e8 <trafficToggle+0x1ec>)
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	4943      	ldr	r1, [pc, #268]	; (80020ec <trafficToggle+0x1f0>)
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001fe2:	e067      	b.n	80020b4 <trafficToggle+0x1b8>
	case TRAFFIC_GREEN:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	4a38      	ldr	r2, [pc, #224]	; (80020c8 <trafficToggle+0x1cc>)
 8001fe8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	4a37      	ldr	r2, [pc, #220]	; (80020cc <trafficToggle+0x1d0>)
 8001ff0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f000 fd29 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	4a34      	ldr	r2, [pc, #208]	; (80020d0 <trafficToggle+0x1d4>)
 8002000:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4a33      	ldr	r2, [pc, #204]	; (80020d4 <trafficToggle+0x1d8>)
 8002008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800200c:	2201      	movs	r2, #1
 800200e:	4619      	mov	r1, r3
 8002010:	f000 fd1d 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_RESET);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	4a30      	ldr	r2, [pc, #192]	; (80020d8 <trafficToggle+0x1dc>)
 8002018:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <trafficToggle+0x1e0>)
 8002020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002024:	2200      	movs	r2, #0
 8002026:	4619      	mov	r1, r3
 8002028:	f000 fd11 	bl	8002a4e <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_GREEN;
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <trafficToggle+0x1e4>)
 8002030:	2102      	movs	r1, #2
 8002032:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <trafficToggle+0x1e8>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d13d      	bne.n	80020b8 <trafficToggle+0x1bc>
			trafficCounters[index] = trafficGreenDuration;
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	4a2c      	ldr	r2, [pc, #176]	; (80020f0 <trafficToggle+0x1f4>)
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	492a      	ldr	r1, [pc, #168]	; (80020ec <trafficToggle+0x1f0>)
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8002048:	e036      	b.n	80020b8 <trafficToggle+0x1bc>
	case TRAFFIC_YELLOW:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <trafficToggle+0x1cc>)
 800204e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <trafficToggle+0x1d0>)
 8002056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800205a:	2201      	movs	r2, #1
 800205c:	4619      	mov	r1, r3
 800205e:	f000 fcf6 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_RESET);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <trafficToggle+0x1d4>)
 8002066:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <trafficToggle+0x1d8>)
 800206e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	f000 fcea 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <trafficToggle+0x1dc>)
 800207e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4a15      	ldr	r2, [pc, #84]	; (80020dc <trafficToggle+0x1e0>)
 8002086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800208a:	2201      	movs	r2, #1
 800208c:	4619      	mov	r1, r3
 800208e:	f000 fcde 	bl	8002a4e <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_YELLOW;
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <trafficToggle+0x1e4>)
 8002096:	2103      	movs	r1, #3
 8002098:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <trafficToggle+0x1e8>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10c      	bne.n	80020bc <trafficToggle+0x1c0>
			trafficCounters[index] = trafficYellowDuration;
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	4a13      	ldr	r2, [pc, #76]	; (80020f4 <trafficToggle+0x1f8>)
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	4910      	ldr	r1, [pc, #64]	; (80020ec <trafficToggle+0x1f0>)
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 80020ae:	e005      	b.n	80020bc <trafficToggle+0x1c0>
	default:
		break;
 80020b0:	bf00      	nop
 80020b2:	e004      	b.n	80020be <trafficToggle+0x1c2>
		break;
 80020b4:	bf00      	nop
 80020b6:	e002      	b.n	80020be <trafficToggle+0x1c2>
		break;
 80020b8:	bf00      	nop
 80020ba:	e000      	b.n	80020be <trafficToggle+0x1c2>
		break;
 80020bc:	bf00      	nop
	}
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000040 	.word	0x20000040
 80020cc:	20000058 	.word	0x20000058
 80020d0:	20000050 	.word	0x20000050
 80020d4:	20000060 	.word	0x20000060
 80020d8:	20000048 	.word	0x20000048
 80020dc:	2000005c 	.word	0x2000005c
 80020e0:	20000390 	.word	0x20000390
 80020e4:	200000f4 	.word	0x200000f4
 80020e8:	20000034 	.word	0x20000034
 80020ec:	20000394 	.word	0x20000394
 80020f0:	20000038 	.word	0x20000038
 80020f4:	2000003c 	.word	0x2000003c

080020f8 <traffic0Off>:

void traffic0Off(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_OFF);
 80020fc:	2100      	movs	r1, #0
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff fefc 	bl	8001efc <trafficToggle>
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}

08002108 <traffic0Red>:
void traffic0Red(void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 800210c:	2101      	movs	r1, #1
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff fef4 	bl	8001efc <trafficToggle>
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}

08002118 <traffic0Green>:
void traffic0Green(void) {
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 800211c:	2102      	movs	r1, #2
 800211e:	2000      	movs	r0, #0
 8002120:	f7ff feec 	bl	8001efc <trafficToggle>
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <traffic0Yellow>:
void traffic0Yellow(void) {
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 800212c:	2103      	movs	r1, #3
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff fee4 	bl	8001efc <trafficToggle>
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <traffic1Off>:

void traffic1Off(void) {
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_OFF);
 800213c:	2100      	movs	r1, #0
 800213e:	2001      	movs	r0, #1
 8002140:	f7ff fedc 	bl	8001efc <trafficToggle>
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <traffic1Red>:
void traffic1Red(void) {
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 800214c:	2101      	movs	r1, #1
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff fed4 	bl	8001efc <trafficToggle>
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <traffic1Green>:
void traffic1Green(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 800215c:	2102      	movs	r1, #2
 800215e:	2001      	movs	r0, #1
 8002160:	f7ff fecc 	bl	8001efc <trafficToggle>
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}

08002168 <traffic1Yellow>:
void traffic1Yellow(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 800216c:	2103      	movs	r1, #3
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff fec4 	bl	8001efc <trafficToggle>
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <uartRedDuration>:
void uartReport(void) {
	char str[40];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Time: %lu - Task: %u\r\n", HAL_GetTick(), SCH_Report()), 100);
}

void uartRedDuration(void) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficRedDuration / 1000), 100);
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <uartRedDuration+0x34>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <uartRedDuration+0x38>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	099a      	lsrs	r2, r3, #6
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4909      	ldr	r1, [pc, #36]	; (80021b4 <uartRedDuration+0x3c>)
 800218e:	4618      	mov	r0, r3
 8002190:	f002 fe9e 	bl	8004ed0 <siprintf>
 8002194:	4603      	mov	r3, r0
 8002196:	b29a      	uxth	r2, r3
 8002198:	1d39      	adds	r1, r7, #4
 800219a:	2364      	movs	r3, #100	; 0x64
 800219c:	4806      	ldr	r0, [pc, #24]	; (80021b8 <uartRedDuration+0x40>)
 800219e:	f002 f86f 	bl	8004280 <HAL_UART_Transmit>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000034 	.word	0x20000034
 80021b0:	10624dd3 	.word	0x10624dd3
 80021b4:	08005864 	.word	0x08005864
 80021b8:	200001a4 	.word	0x200001a4

080021bc <uartGreenDuration>:

void uartGreenDuration(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficGreenDuration / 1000), 100);
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <uartGreenDuration+0x34>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <uartGreenDuration+0x38>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	099a      	lsrs	r2, r3, #6
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4909      	ldr	r1, [pc, #36]	; (80021f8 <uartGreenDuration+0x3c>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f002 fe7c 	bl	8004ed0 <siprintf>
 80021d8:	4603      	mov	r3, r0
 80021da:	b29a      	uxth	r2, r3
 80021dc:	1d39      	adds	r1, r7, #4
 80021de:	2364      	movs	r3, #100	; 0x64
 80021e0:	4806      	ldr	r0, [pc, #24]	; (80021fc <uartGreenDuration+0x40>)
 80021e2:	f002 f84d 	bl	8004280 <HAL_UART_Transmit>
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000038 	.word	0x20000038
 80021f4:	10624dd3 	.word	0x10624dd3
 80021f8:	08005864 	.word	0x08005864
 80021fc:	200001a4 	.word	0x200001a4

08002200 <uartYellowDuration>:

void uartYellowDuration(void) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficYellowDuration / 1000), 100);
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <uartYellowDuration+0x34>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <uartYellowDuration+0x38>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	099a      	lsrs	r2, r3, #6
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	4909      	ldr	r1, [pc, #36]	; (800223c <uartYellowDuration+0x3c>)
 8002216:	4618      	mov	r0, r3
 8002218:	f002 fe5a 	bl	8004ed0 <siprintf>
 800221c:	4603      	mov	r3, r0
 800221e:	b29a      	uxth	r2, r3
 8002220:	1d39      	adds	r1, r7, #4
 8002222:	2364      	movs	r3, #100	; 0x64
 8002224:	4806      	ldr	r0, [pc, #24]	; (8002240 <uartYellowDuration+0x40>)
 8002226:	f002 f82b 	bl	8004280 <HAL_UART_Transmit>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	2000003c 	.word	0x2000003c
 8002238:	10624dd3 	.word	0x10624dd3
 800223c:	08005864 	.word	0x08005864
 8002240:	200001a4 	.word	0x200001a4

08002244 <uartCounter>:

void uartCounter(void) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficCounters[0] / 1000), 100);
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <uartCounter+0x34>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <uartCounter+0x38>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	099a      	lsrs	r2, r3, #6
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <uartCounter+0x3c>)
 800225a:	4618      	mov	r0, r3
 800225c:	f002 fe38 	bl	8004ed0 <siprintf>
 8002260:	4603      	mov	r3, r0
 8002262:	b29a      	uxth	r2, r3
 8002264:	1d39      	adds	r1, r7, #4
 8002266:	2364      	movs	r3, #100	; 0x64
 8002268:	4806      	ldr	r0, [pc, #24]	; (8002284 <uartCounter+0x40>)
 800226a:	f002 f809 	bl	8004280 <HAL_UART_Transmit>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000394 	.word	0x20000394
 800227c:	10624dd3 	.word	0x10624dd3
 8002280:	08005864 	.word	0x08005864
 8002284:	200001a4 	.word	0x200001a4

08002288 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002288:	f7ff fd94 	bl	8001db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800228c:	480b      	ldr	r0, [pc, #44]	; (80022bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800228e:	490c      	ldr	r1, [pc, #48]	; (80022c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002290:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002294:	e002      	b.n	800229c <LoopCopyDataInit>

08002296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229a:	3304      	adds	r3, #4

0800229c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800229c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a0:	d3f9      	bcc.n	8002296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022a4:	4c09      	ldr	r4, [pc, #36]	; (80022cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a8:	e001      	b.n	80022ae <LoopFillZerobss>

080022aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ac:	3204      	adds	r2, #4

080022ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b0:	d3fb      	bcc.n	80022aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022b2:	f002 fe3b 	bl	8004f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022b6:	f7fe fd8d 	bl	8000dd4 <main>
  bx lr
 80022ba:	4770      	bx	lr
  ldr r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80022c4:	080058dc 	.word	0x080058dc
  ldr r2, =_sbss
 80022c8:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80022cc:	200004e8 	.word	0x200004e8

080022d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022d0:	e7fe      	b.n	80022d0 <ADC1_2_IRQHandler>
	...

080022d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_Init+0x28>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_Init+0x28>)
 80022de:	f043 0310 	orr.w	r3, r3, #16
 80022e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f000 f923 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ea:	2000      	movs	r0, #0
 80022ec:	f000 f808 	bl	8002300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f0:	f7ff fbf2 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40022000 	.word	0x40022000

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_InitTick+0x54>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_InitTick+0x58>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002316:	fbb3 f3f1 	udiv	r3, r3, r1
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f93b 	bl	800259a <HAL_SYSTICK_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00e      	b.n	800234c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b0f      	cmp	r3, #15
 8002332:	d80a      	bhi.n	800234a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002334:	2200      	movs	r2, #0
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f000 f903 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002340:	4a06      	ldr	r2, [pc, #24]	; (800235c <HAL_InitTick+0x5c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000030 	.word	0x20000030
 8002358:	20000068 	.word	0x20000068
 800235c:	20000064 	.word	0x20000064

08002360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_IncTick+0x1c>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_IncTick+0x20>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4413      	add	r3, r2
 8002370:	4a03      	ldr	r2, [pc, #12]	; (8002380 <HAL_IncTick+0x20>)
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000068 	.word	0x20000068
 8002380:	2000039c 	.word	0x2000039c

08002384 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return uwTick;
 8002388:	4b02      	ldr	r3, [pc, #8]	; (8002394 <HAL_GetTick+0x10>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	2000039c 	.word	0x2000039c

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4906      	ldr	r1, [pc, #24]	; (8002430 <__NVIC_EnableIRQ+0x34>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	; (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff90 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff2d 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff42 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff90 	bl	8002488 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5f 	bl	8002434 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff35 	bl	80023fc <__NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffa2 	bl	80024ec <SysTick_Config>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d008      	beq.n	80025dc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2204      	movs	r2, #4
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e020      	b.n	800261e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 020e 	bic.w	r2, r2, #14
 80025ea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d005      	beq.n	800264c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2204      	movs	r2, #4
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e051      	b.n	80026f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 020e 	bic.w	r2, r2, #14
 800265a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_DMA_Abort_IT+0xd4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d029      	beq.n	80026ca <HAL_DMA_Abort_IT+0xa2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a21      	ldr	r2, [pc, #132]	; (8002700 <HAL_DMA_Abort_IT+0xd8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d022      	beq.n	80026c6 <HAL_DMA_Abort_IT+0x9e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1f      	ldr	r2, [pc, #124]	; (8002704 <HAL_DMA_Abort_IT+0xdc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01a      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x98>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <HAL_DMA_Abort_IT+0xe0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d012      	beq.n	80026ba <HAL_DMA_Abort_IT+0x92>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1c      	ldr	r2, [pc, #112]	; (800270c <HAL_DMA_Abort_IT+0xe4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00a      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x8c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1b      	ldr	r2, [pc, #108]	; (8002710 <HAL_DMA_Abort_IT+0xe8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d102      	bne.n	80026ae <HAL_DMA_Abort_IT+0x86>
 80026a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ac:	e00e      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b2:	e00b      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026b8:	e008      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026be:	e005      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c4:	e002      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026c6:	2310      	movs	r3, #16
 80026c8:	e000      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026ca:	2301      	movs	r3, #1
 80026cc:	4a11      	ldr	r2, [pc, #68]	; (8002714 <HAL_DMA_Abort_IT+0xec>)
 80026ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
    } 
  }
  return status;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40020008 	.word	0x40020008
 8002700:	4002001c 	.word	0x4002001c
 8002704:	40020030 	.word	0x40020030
 8002708:	40020044 	.word	0x40020044
 800270c:	40020058 	.word	0x40020058
 8002710:	4002006c 	.word	0x4002006c
 8002714:	40020000 	.word	0x40020000

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b480      	push	{r7}
 800271a:	b08b      	sub	sp, #44	; 0x2c
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272a:	e169      	b.n	8002a00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800272c:	2201      	movs	r2, #1
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	429a      	cmp	r2, r3
 8002746:	f040 8158 	bne.w	80029fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4a9a      	ldr	r2, [pc, #616]	; (80029b8 <HAL_GPIO_Init+0x2a0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d05e      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
 8002754:	4a98      	ldr	r2, [pc, #608]	; (80029b8 <HAL_GPIO_Init+0x2a0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d875      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 800275a:	4a98      	ldr	r2, [pc, #608]	; (80029bc <HAL_GPIO_Init+0x2a4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d058      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
 8002760:	4a96      	ldr	r2, [pc, #600]	; (80029bc <HAL_GPIO_Init+0x2a4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d86f      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 8002766:	4a96      	ldr	r2, [pc, #600]	; (80029c0 <HAL_GPIO_Init+0x2a8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d052      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
 800276c:	4a94      	ldr	r2, [pc, #592]	; (80029c0 <HAL_GPIO_Init+0x2a8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d869      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 8002772:	4a94      	ldr	r2, [pc, #592]	; (80029c4 <HAL_GPIO_Init+0x2ac>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04c      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
 8002778:	4a92      	ldr	r2, [pc, #584]	; (80029c4 <HAL_GPIO_Init+0x2ac>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d863      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 800277e:	4a92      	ldr	r2, [pc, #584]	; (80029c8 <HAL_GPIO_Init+0x2b0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d046      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
 8002784:	4a90      	ldr	r2, [pc, #576]	; (80029c8 <HAL_GPIO_Init+0x2b0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d85d      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 800278a:	2b12      	cmp	r3, #18
 800278c:	d82a      	bhi.n	80027e4 <HAL_GPIO_Init+0xcc>
 800278e:	2b12      	cmp	r3, #18
 8002790:	d859      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 8002792:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <HAL_GPIO_Init+0x80>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	08002813 	.word	0x08002813
 800279c:	080027ed 	.word	0x080027ed
 80027a0:	080027ff 	.word	0x080027ff
 80027a4:	08002841 	.word	0x08002841
 80027a8:	08002847 	.word	0x08002847
 80027ac:	08002847 	.word	0x08002847
 80027b0:	08002847 	.word	0x08002847
 80027b4:	08002847 	.word	0x08002847
 80027b8:	08002847 	.word	0x08002847
 80027bc:	08002847 	.word	0x08002847
 80027c0:	08002847 	.word	0x08002847
 80027c4:	08002847 	.word	0x08002847
 80027c8:	08002847 	.word	0x08002847
 80027cc:	08002847 	.word	0x08002847
 80027d0:	08002847 	.word	0x08002847
 80027d4:	08002847 	.word	0x08002847
 80027d8:	08002847 	.word	0x08002847
 80027dc:	080027f5 	.word	0x080027f5
 80027e0:	08002809 	.word	0x08002809
 80027e4:	4a79      	ldr	r2, [pc, #484]	; (80029cc <HAL_GPIO_Init+0x2b4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ea:	e02c      	b.n	8002846 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	623b      	str	r3, [r7, #32]
          break;
 80027f2:	e029      	b.n	8002848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	3304      	adds	r3, #4
 80027fa:	623b      	str	r3, [r7, #32]
          break;
 80027fc:	e024      	b.n	8002848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	3308      	adds	r3, #8
 8002804:	623b      	str	r3, [r7, #32]
          break;
 8002806:	e01f      	b.n	8002848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	330c      	adds	r3, #12
 800280e:	623b      	str	r3, [r7, #32]
          break;
 8002810:	e01a      	b.n	8002848 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800281a:	2304      	movs	r3, #4
 800281c:	623b      	str	r3, [r7, #32]
          break;
 800281e:	e013      	b.n	8002848 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002828:	2308      	movs	r3, #8
 800282a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	611a      	str	r2, [r3, #16]
          break;
 8002832:	e009      	b.n	8002848 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002834:	2308      	movs	r3, #8
 8002836:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	615a      	str	r2, [r3, #20]
          break;
 800283e:	e003      	b.n	8002848 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
          break;
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x130>
          break;
 8002846:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2bff      	cmp	r3, #255	; 0xff
 800284c:	d801      	bhi.n	8002852 <HAL_GPIO_Init+0x13a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	e001      	b.n	8002856 <HAL_GPIO_Init+0x13e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	d802      	bhi.n	8002864 <HAL_GPIO_Init+0x14c>
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	e002      	b.n	800286a <HAL_GPIO_Init+0x152>
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	3b08      	subs	r3, #8
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	210f      	movs	r1, #15
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	401a      	ands	r2, r3
 800287c:	6a39      	ldr	r1, [r7, #32]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	431a      	orrs	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80b1 	beq.w	80029fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002898:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <HAL_GPIO_Init+0x2b8>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4a4c      	ldr	r2, [pc, #304]	; (80029d0 <HAL_GPIO_Init+0x2b8>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6193      	str	r3, [r2, #24]
 80028a4:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_GPIO_Init+0x2b8>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028b0:	4a48      	ldr	r2, [pc, #288]	; (80029d4 <HAL_GPIO_Init+0x2bc>)
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	3302      	adds	r3, #2
 80028b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4013      	ands	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a40      	ldr	r2, [pc, #256]	; (80029d8 <HAL_GPIO_Init+0x2c0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <HAL_GPIO_Init+0x1ec>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3f      	ldr	r2, [pc, #252]	; (80029dc <HAL_GPIO_Init+0x2c4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00d      	beq.n	8002900 <HAL_GPIO_Init+0x1e8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3e      	ldr	r2, [pc, #248]	; (80029e0 <HAL_GPIO_Init+0x2c8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <HAL_GPIO_Init+0x1e4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3d      	ldr	r2, [pc, #244]	; (80029e4 <HAL_GPIO_Init+0x2cc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_GPIO_Init+0x1e0>
 80028f4:	2303      	movs	r3, #3
 80028f6:	e006      	b.n	8002906 <HAL_GPIO_Init+0x1ee>
 80028f8:	2304      	movs	r3, #4
 80028fa:	e004      	b.n	8002906 <HAL_GPIO_Init+0x1ee>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e002      	b.n	8002906 <HAL_GPIO_Init+0x1ee>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_GPIO_Init+0x1ee>
 8002904:	2300      	movs	r3, #0
 8002906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002908:	f002 0203 	and.w	r2, r2, #3
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	4093      	lsls	r3, r2
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002916:	492f      	ldr	r1, [pc, #188]	; (80029d4 <HAL_GPIO_Init+0x2bc>)
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3302      	adds	r3, #2
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	492c      	ldr	r1, [pc, #176]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	43db      	mvns	r3, r3
 8002946:	4928      	ldr	r1, [pc, #160]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002948:	4013      	ands	r3, r2
 800294a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002958:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	4922      	ldr	r1, [pc, #136]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	43db      	mvns	r3, r3
 800296e:	491e      	ldr	r1, [pc, #120]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002970:	4013      	ands	r3, r2
 8002972:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4918      	ldr	r1, [pc, #96]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	43db      	mvns	r3, r3
 8002996:	4914      	ldr	r1, [pc, #80]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002998:	4013      	ands	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d021      	beq.n	80029ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	490e      	ldr	r1, [pc, #56]	; (80029e8 <HAL_GPIO_Init+0x2d0>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
 80029b4:	e021      	b.n	80029fa <HAL_GPIO_Init+0x2e2>
 80029b6:	bf00      	nop
 80029b8:	10320000 	.word	0x10320000
 80029bc:	10310000 	.word	0x10310000
 80029c0:	10220000 	.word	0x10220000
 80029c4:	10210000 	.word	0x10210000
 80029c8:	10120000 	.word	0x10120000
 80029cc:	10110000 	.word	0x10110000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40010000 	.word	0x40010000
 80029d8:	40010800 	.word	0x40010800
 80029dc:	40010c00 	.word	0x40010c00
 80029e0:	40011000 	.word	0x40011000
 80029e4:	40011400 	.word	0x40011400
 80029e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_GPIO_Init+0x304>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	4909      	ldr	r1, [pc, #36]	; (8002a1c <HAL_GPIO_Init+0x304>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	3301      	adds	r3, #1
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f47f ae8e 	bne.w	800272c <HAL_GPIO_Init+0x14>
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	372c      	adds	r7, #44	; 0x2c
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	40010400 	.word	0x40010400

08002a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e001      	b.n	8002a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	807b      	strh	r3, [r7, #2]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a5e:	787b      	ldrb	r3, [r7, #1]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a64:	887a      	ldrh	r2, [r7, #2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a6a:	e003      	b.n	8002a74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a6c:	887b      	ldrh	r3, [r7, #2]
 8002a6e:	041a      	lsls	r2, r3, #16
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	611a      	str	r2, [r3, #16]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a90:	887a      	ldrh	r2, [r7, #2]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	041a      	lsls	r2, r3, #16
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	400b      	ands	r3, r1
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	611a      	str	r2, [r3, #16]
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f806 	bl	8002ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40010400 	.word	0x40010400

08002ae0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e272      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8087 	beq.w	8002c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b14:	4b92      	ldr	r3, [pc, #584]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d00c      	beq.n	8002b3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b20:	4b8f      	ldr	r3, [pc, #572]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d112      	bne.n	8002b52 <HAL_RCC_OscConfig+0x5e>
 8002b2c:	4b8c      	ldr	r3, [pc, #560]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b38:	d10b      	bne.n	8002b52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3a:	4b89      	ldr	r3, [pc, #548]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d06c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x12c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d168      	bne.n	8002c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e24c      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x76>
 8002b5c:	4b80      	ldr	r3, [pc, #512]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a7f      	ldr	r2, [pc, #508]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	e02e      	b.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x98>
 8002b72:	4b7b      	ldr	r3, [pc, #492]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a7a      	ldr	r2, [pc, #488]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b78      	ldr	r3, [pc, #480]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a77      	ldr	r2, [pc, #476]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e01d      	b.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0xbc>
 8002b96:	4b72      	ldr	r3, [pc, #456]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a71      	ldr	r2, [pc, #452]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6e      	ldr	r2, [pc, #440]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e00b      	b.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
 8002bb0:	4b6b      	ldr	r3, [pc, #428]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a6a      	ldr	r2, [pc, #424]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a67      	ldr	r2, [pc, #412]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7ff fbd8 	bl	8002384 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7ff fbd4 	bl	8002384 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e200      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b5d      	ldr	r3, [pc, #372]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe4>
 8002bf6:	e014      	b.n	8002c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7ff fbc4 	bl	8002384 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c00:	f7ff fbc0 	bl	8002384 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	; 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e1ec      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	4b53      	ldr	r3, [pc, #332]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x10c>
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d063      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c2e:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c3a:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d11c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x18c>
 8002c46:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d116      	bne.n	8002c80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_RCC_OscConfig+0x176>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d001      	beq.n	8002c6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e1c0      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4939      	ldr	r1, [pc, #228]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	e03a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d020      	beq.n	8002cca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c88:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7ff fb79 	bl	8002384 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c96:	f7ff fb75 	bl	8002384 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1a1      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b2a      	ldr	r3, [pc, #168]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4927      	ldr	r1, [pc, #156]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
 8002cc8:	e015      	b.n	8002cf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_RCC_OscConfig+0x270>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7ff fb58 	bl	8002384 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7ff fb54 	bl	8002384 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e180      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d03a      	beq.n	8002d78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d019      	beq.n	8002d3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d10:	f7ff fb38 	bl	8002384 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d18:	f7ff fb34 	bl	8002384 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e160      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d36:	2001      	movs	r0, #1
 8002d38:	f000 face 	bl	80032d8 <RCC_Delay>
 8002d3c:	e01c      	b.n	8002d78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d44:	f7ff fb1e 	bl	8002384 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4a:	e00f      	b.n	8002d6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7ff fb1a 	bl	8002384 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d908      	bls.n	8002d6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e146      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	42420000 	.word	0x42420000
 8002d68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e9      	bne.n	8002d4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a6 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8a:	4b8b      	ldr	r3, [pc, #556]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10d      	bne.n	8002db2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	4b88      	ldr	r3, [pc, #544]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4a87      	ldr	r2, [pc, #540]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da0:	61d3      	str	r3, [r2, #28]
 8002da2:	4b85      	ldr	r3, [pc, #532]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dae:	2301      	movs	r3, #1
 8002db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4b82      	ldr	r3, [pc, #520]	; (8002fbc <HAL_RCC_OscConfig+0x4c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d118      	bne.n	8002df0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x4c8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7e      	ldr	r2, [pc, #504]	; (8002fbc <HAL_RCC_OscConfig+0x4c8>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dca:	f7ff fadb 	bl	8002384 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd2:	f7ff fad7 	bl	8002384 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b64      	cmp	r3, #100	; 0x64
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e103      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	4b75      	ldr	r3, [pc, #468]	; (8002fbc <HAL_RCC_OscConfig+0x4c8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d106      	bne.n	8002e06 <HAL_RCC_OscConfig+0x312>
 8002df8:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6213      	str	r3, [r2, #32]
 8002e04:	e02d      	b.n	8002e62 <HAL_RCC_OscConfig+0x36e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x334>
 8002e0e:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a66      	ldr	r2, [pc, #408]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	f023 0304 	bic.w	r3, r3, #4
 8002e24:	6213      	str	r3, [r2, #32]
 8002e26:	e01c      	b.n	8002e62 <HAL_RCC_OscConfig+0x36e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCC_OscConfig+0x356>
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4a60      	ldr	r2, [pc, #384]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	6213      	str	r3, [r2, #32]
 8002e3c:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4a5d      	ldr	r2, [pc, #372]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6213      	str	r3, [r2, #32]
 8002e48:	e00b      	b.n	8002e62 <HAL_RCC_OscConfig+0x36e>
 8002e4a:	4b5b      	ldr	r3, [pc, #364]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a5a      	ldr	r2, [pc, #360]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6213      	str	r3, [r2, #32]
 8002e56:	4b58      	ldr	r3, [pc, #352]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a57      	ldr	r2, [pc, #348]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d015      	beq.n	8002e96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7ff fa8b 	bl	8002384 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7ff fa87 	bl	8002384 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0b1      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	4b4b      	ldr	r3, [pc, #300]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ee      	beq.n	8002e72 <HAL_RCC_OscConfig+0x37e>
 8002e94:	e014      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7ff fa75 	bl	8002384 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7ff fa71 	bl	8002384 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e09b      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ee      	bne.n	8002e9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4a3b      	ldr	r2, [pc, #236]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8087 	beq.w	8002fea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d061      	beq.n	8002fac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d146      	bne.n	8002f7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef0:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <HAL_RCC_OscConfig+0x4cc>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7ff fa45 	bl	8002384 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7ff fa41 	bl	8002384 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e06d      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f0      	bne.n	8002efe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d108      	bne.n	8002f38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f26:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4921      	ldr	r1, [pc, #132]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f38:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a19      	ldr	r1, [r3, #32]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	491b      	ldr	r1, [pc, #108]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_RCC_OscConfig+0x4cc>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7ff fa15 	bl	8002384 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7ff fa11 	bl	8002384 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e03d      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x46a>
 8002f7c:	e035      	b.n	8002fea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_RCC_OscConfig+0x4cc>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7ff f9fe 	bl	8002384 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7ff f9fa 	bl	8002384 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e026      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x498>
 8002faa:	e01e      	b.n	8002fea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e019      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d0      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b6a      	ldr	r3, [pc, #424]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d910      	bls.n	800303c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b67      	ldr	r3, [pc, #412]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 0207 	bic.w	r2, r3, #7
 8003022:	4965      	ldr	r1, [pc, #404]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b8      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800305e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b53      	ldr	r3, [pc, #332]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a52      	ldr	r2, [pc, #328]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003076:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494d      	ldr	r1, [pc, #308]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d040      	beq.n	8003118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e073      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06b      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4936      	ldr	r1, [pc, #216]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030e8:	f7ff f94c 	bl	8002384 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7ff f948 	bl	8002384 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e053      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d210      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 0207 	bic.w	r2, r3, #7
 800312e:	4922      	ldr	r1, [pc, #136]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4916      	ldr	r1, [pc, #88]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490e      	ldr	r1, [pc, #56]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490a      	ldr	r1, [pc, #40]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1cc>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1d0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff f8aa 	bl	8002300 <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40021000 	.word	0x40021000
 80031c0:	08005874 	.word	0x08005874
 80031c4:	20000030 	.word	0x20000030
 80031c8:	20000064 	.word	0x20000064

080031cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_GetSysClockFreq+0x94>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d002      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x30>
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x36>
 80031fa:	e027      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_RCC_GetSysClockFreq+0x98>)
 80031fe:	613b      	str	r3, [r7, #16]
      break;
 8003200:	e027      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	0c9b      	lsrs	r3, r3, #18
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <HAL_RCC_GetSysClockFreq+0x9c>)
 800320c:	5cd3      	ldrb	r3, [r2, r3]
 800320e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d010      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <HAL_RCC_GetSysClockFreq+0x94>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	0c5b      	lsrs	r3, r3, #17
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	4a11      	ldr	r2, [pc, #68]	; (800326c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_RCC_GetSysClockFreq+0x98>)
 800322e:	fb03 f202 	mul.w	r2, r3, r2
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e004      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a0c      	ldr	r2, [pc, #48]	; (8003270 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	613b      	str	r3, [r7, #16]
      break;
 800324a:	e002      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_GetSysClockFreq+0x98>)
 800324e:	613b      	str	r3, [r7, #16]
      break;
 8003250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003252:	693b      	ldr	r3, [r7, #16]
}
 8003254:	4618      	mov	r0, r3
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	007a1200 	.word	0x007a1200
 8003268:	0800588c 	.word	0x0800588c
 800326c:	0800589c 	.word	0x0800589c
 8003270:	003d0900 	.word	0x003d0900

08003274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003278:	4b02      	ldr	r3, [pc, #8]	; (8003284 <HAL_RCC_GetHCLKFreq+0x10>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	20000030 	.word	0x20000030

08003288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800328c:	f7ff fff2 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4903      	ldr	r1, [pc, #12]	; (80032ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000
 80032ac:	08005884 	.word	0x08005884

080032b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032b4:	f7ff ffde 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0adb      	lsrs	r3, r3, #11
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08005884 	.word	0x08005884

080032d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032e0:	4b0a      	ldr	r3, [pc, #40]	; (800330c <RCC_Delay+0x34>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <RCC_Delay+0x38>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	0a5b      	lsrs	r3, r3, #9
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032f4:	bf00      	nop
  }
  while (Delay --);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1e5a      	subs	r2, r3, #1
 80032fa:	60fa      	str	r2, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f9      	bne.n	80032f4 <RCC_Delay+0x1c>
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	20000030 	.word	0x20000030
 8003310:	10624dd3 	.word	0x10624dd3

08003314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e041      	b.n	80033aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fe fbfe 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f000 fc30 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d001      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e03a      	b.n	8003442 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_TIM_Base_Start_IT+0x98>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x58>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f6:	d009      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x58>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <HAL_TIM_Base_Start_IT+0x9c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x58>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a13      	ldr	r2, [pc, #76]	; (8003454 <HAL_TIM_Base_Start_IT+0xa0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d111      	bne.n	8003430 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d010      	beq.n	8003440 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	e007      	b.n	8003440 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800

08003458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e041      	b.n	80034ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f839 	bl	80034f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f000 fb8e 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <HAL_TIM_PWM_Start+0x24>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e022      	b.n	8003572 <HAL_TIM_PWM_Start+0x6a>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b04      	cmp	r3, #4
 8003530:	d109      	bne.n	8003546 <HAL_TIM_PWM_Start+0x3e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	bf14      	ite	ne
 800353e:	2301      	movne	r3, #1
 8003540:	2300      	moveq	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e015      	b.n	8003572 <HAL_TIM_PWM_Start+0x6a>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d109      	bne.n	8003560 <HAL_TIM_PWM_Start+0x58>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e008      	b.n	8003572 <HAL_TIM_PWM_Start+0x6a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e05e      	b.n	8003638 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d104      	bne.n	800358a <HAL_TIM_PWM_Start+0x82>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003588:	e013      	b.n	80035b2 <HAL_TIM_PWM_Start+0xaa>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b04      	cmp	r3, #4
 800358e:	d104      	bne.n	800359a <HAL_TIM_PWM_Start+0x92>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003598:	e00b      	b.n	80035b2 <HAL_TIM_PWM_Start+0xaa>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d104      	bne.n	80035aa <HAL_TIM_PWM_Start+0xa2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035a8:	e003      	b.n	80035b2 <HAL_TIM_PWM_Start+0xaa>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2201      	movs	r2, #1
 80035b8:	6839      	ldr	r1, [r7, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fd7c 	bl	80040b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <HAL_TIM_PWM_Start+0x138>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d107      	bne.n	80035da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a18      	ldr	r2, [pc, #96]	; (8003640 <HAL_TIM_PWM_Start+0x138>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_TIM_PWM_Start+0xfa>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ec:	d009      	beq.n	8003602 <HAL_TIM_PWM_Start+0xfa>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a14      	ldr	r2, [pc, #80]	; (8003644 <HAL_TIM_PWM_Start+0x13c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_TIM_PWM_Start+0xfa>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a12      	ldr	r2, [pc, #72]	; (8003648 <HAL_TIM_PWM_Start+0x140>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d111      	bne.n	8003626 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b06      	cmp	r3, #6
 8003612:	d010      	beq.n	8003636 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003624:	e007      	b.n	8003636 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0201 	orr.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800

0800364c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d122      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b02      	cmp	r3, #2
 800366e:	d11b      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0202 	mvn.w	r2, #2
 8003678:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fa76 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 8003694:	e005      	b.n	80036a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fa69 	bl	8003b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fa78 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d122      	bne.n	80036fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d11b      	bne.n	80036fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0204 	mvn.w	r2, #4
 80036cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fa4c 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fa3f 	bl	8003b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fa4e 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b08      	cmp	r3, #8
 8003708:	d122      	bne.n	8003750 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b08      	cmp	r3, #8
 8003716:	d11b      	bne.n	8003750 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0208 	mvn.w	r2, #8
 8003720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2204      	movs	r2, #4
 8003726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fa22 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fa15 	bl	8003b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fa24 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b10      	cmp	r3, #16
 800375c:	d122      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b10      	cmp	r3, #16
 800376a:	d11b      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0210 	mvn.w	r2, #16
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2208      	movs	r2, #8
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9f8 	bl	8003b80 <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f9eb 	bl	8003b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f9fa 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10e      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0201 	mvn.w	r2, #1
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd fd16 	bl	80011fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b80      	cmp	r3, #128	; 0x80
 80037dc:	d10e      	bne.n	80037fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b80      	cmp	r3, #128	; 0x80
 80037ea:	d107      	bne.n	80037fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fce9 	bl	80041ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d10e      	bne.n	8003828 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d107      	bne.n	8003828 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9be 	bl	8003ba4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b20      	cmp	r3, #32
 8003834:	d10e      	bne.n	8003854 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b20      	cmp	r3, #32
 8003842:	d107      	bne.n	8003854 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0220 	mvn.w	r2, #32
 800384c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fcb4 	bl	80041bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003876:	2302      	movs	r3, #2
 8003878:	e0ae      	b.n	80039d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b0c      	cmp	r3, #12
 8003886:	f200 809f 	bhi.w	80039c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800388a:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038c5 	.word	0x080038c5
 8003894:	080039c9 	.word	0x080039c9
 8003898:	080039c9 	.word	0x080039c9
 800389c:	080039c9 	.word	0x080039c9
 80038a0:	08003905 	.word	0x08003905
 80038a4:	080039c9 	.word	0x080039c9
 80038a8:	080039c9 	.word	0x080039c9
 80038ac:	080039c9 	.word	0x080039c9
 80038b0:	08003947 	.word	0x08003947
 80038b4:	080039c9 	.word	0x080039c9
 80038b8:	080039c9 	.word	0x080039c9
 80038bc:	080039c9 	.word	0x080039c9
 80038c0:	08003987 	.word	0x08003987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f9d6 	bl	8003c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0208 	orr.w	r2, r2, #8
 80038de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0204 	bic.w	r2, r2, #4
 80038ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6999      	ldr	r1, [r3, #24]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	619a      	str	r2, [r3, #24]
      break;
 8003902:	e064      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fa1c 	bl	8003d48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6999      	ldr	r1, [r3, #24]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	021a      	lsls	r2, r3, #8
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	619a      	str	r2, [r3, #24]
      break;
 8003944:	e043      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fa65 	bl	8003e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0208 	orr.w	r2, r2, #8
 8003960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0204 	bic.w	r2, r2, #4
 8003970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69d9      	ldr	r1, [r3, #28]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	61da      	str	r2, [r3, #28]
      break;
 8003984:	e023      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 faaf 	bl	8003ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69da      	ldr	r2, [r3, #28]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69d9      	ldr	r1, [r3, #28]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	021a      	lsls	r2, r3, #8
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	61da      	str	r2, [r3, #28]
      break;
 80039c6:	e002      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
      break;
 80039cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_TIM_ConfigClockSource+0x1c>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e0b4      	b.n	8003b66 <HAL_TIM_ConfigClockSource+0x186>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a34:	d03e      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0xd4>
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3a:	f200 8087 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	f000 8086 	beq.w	8003b52 <HAL_TIM_ConfigClockSource+0x172>
 8003a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4a:	d87f      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b70      	cmp	r3, #112	; 0x70
 8003a4e:	d01a      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0xa6>
 8003a50:	2b70      	cmp	r3, #112	; 0x70
 8003a52:	d87b      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b60      	cmp	r3, #96	; 0x60
 8003a56:	d050      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x11a>
 8003a58:	2b60      	cmp	r3, #96	; 0x60
 8003a5a:	d877      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a5c:	2b50      	cmp	r3, #80	; 0x50
 8003a5e:	d03c      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0xfa>
 8003a60:	2b50      	cmp	r3, #80	; 0x50
 8003a62:	d873      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d058      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x13a>
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d86f      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a6c:	2b30      	cmp	r3, #48	; 0x30
 8003a6e:	d064      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a70:	2b30      	cmp	r3, #48	; 0x30
 8003a72:	d86b      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d060      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d867      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d05c      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d05a      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a84:	e062      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a96:	f000 faf0 	bl	800407a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	609a      	str	r2, [r3, #8]
      break;
 8003ab2:	e04f      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ac4:	f000 fad9 	bl	800407a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad6:	609a      	str	r2, [r3, #8]
      break;
 8003ad8:	e03c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f000 fa50 	bl	8003f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2150      	movs	r1, #80	; 0x50
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 faa7 	bl	8004046 <TIM_ITRx_SetConfig>
      break;
 8003af8:	e02c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b06:	461a      	mov	r2, r3
 8003b08:	f000 fa6e 	bl	8003fe8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2160      	movs	r1, #96	; 0x60
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fa97 	bl	8004046 <TIM_ITRx_SetConfig>
      break;
 8003b18:	e01c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b26:	461a      	mov	r2, r3
 8003b28:	f000 fa30 	bl	8003f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2140      	movs	r1, #64	; 0x40
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fa87 	bl	8004046 <TIM_ITRx_SetConfig>
      break;
 8003b38:	e00c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f000 fa7e 	bl	8004046 <TIM_ITRx_SetConfig>
      break;
 8003b4a:	e003      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b50:	e000      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
	...

08003bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <TIM_Base_SetConfig+0xb8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <TIM_Base_SetConfig+0x30>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd6:	d007      	beq.n	8003be8 <TIM_Base_SetConfig+0x30>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a26      	ldr	r2, [pc, #152]	; (8003c74 <TIM_Base_SetConfig+0xbc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_Base_SetConfig+0x30>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <TIM_Base_SetConfig+0xc0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <TIM_Base_SetConfig+0xb8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00b      	beq.n	8003c1a <TIM_Base_SetConfig+0x62>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d007      	beq.n	8003c1a <TIM_Base_SetConfig+0x62>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <TIM_Base_SetConfig+0xbc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <TIM_Base_SetConfig+0x62>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <TIM_Base_SetConfig+0xc0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <TIM_Base_SetConfig+0xb8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d103      	bne.n	8003c60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	615a      	str	r2, [r3, #20]
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr
 8003c70:	40012c00 	.word	0x40012c00
 8003c74:	40000400 	.word	0x40000400
 8003c78:	40000800 	.word	0x40000800

08003c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f023 0201 	bic.w	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 0302 	bic.w	r3, r3, #2
 8003cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <TIM_OC1_SetConfig+0xc8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d10c      	bne.n	8003cf2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f023 0308 	bic.w	r3, r3, #8
 8003cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 0304 	bic.w	r3, r3, #4
 8003cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <TIM_OC1_SetConfig+0xc8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d111      	bne.n	8003d1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40012c00 	.word	0x40012c00

08003d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f023 0210 	bic.w	r2, r3, #16
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0320 	bic.w	r3, r3, #32
 8003d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <TIM_OC2_SetConfig+0xd0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10d      	bne.n	8003dc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <TIM_OC2_SetConfig+0xd0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d113      	bne.n	8003df4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	621a      	str	r2, [r3, #32]
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	40012c00 	.word	0x40012c00

08003e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <TIM_OC3_SetConfig+0xd0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10d      	bne.n	8003e96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <TIM_OC3_SetConfig+0xd0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d113      	bne.n	8003ec6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	621a      	str	r2, [r3, #32]
}
 8003ee0:	bf00      	nop
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40012c00 	.word	0x40012c00

08003ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	031b      	lsls	r3, r3, #12
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <TIM_OC4_SetConfig+0x98>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d109      	bne.n	8003f64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	019b      	lsls	r3, r3, #6
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40012c00 	.word	0x40012c00

08003f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f023 0201 	bic.w	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 030a 	bic.w	r3, r3, #10
 8003fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f023 0210 	bic.w	r2, r3, #16
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	031b      	lsls	r3, r3, #12
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004024:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	f043 0307 	orr.w	r3, r3, #7
 8004068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	609a      	str	r2, [r3, #8]
}
 8004070:	bf00      	nop
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800407a:	b480      	push	{r7}
 800407c:	b087      	sub	sp, #28
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004094:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	021a      	lsls	r2, r3, #8
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	431a      	orrs	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	609a      	str	r2, [r3, #8]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 031f 	and.w	r3, r3, #31
 80040ca:	2201      	movs	r2, #1
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1a      	ldr	r2, [r3, #32]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	43db      	mvns	r3, r3
 80040da:	401a      	ands	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a1a      	ldr	r2, [r3, #32]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004114:	2302      	movs	r3, #2
 8004116:	e046      	b.n	80041a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d009      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10c      	bne.n	8004194 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	4313      	orrs	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800

080041bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e042      	b.n	8004278 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fd fd0a 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fdc5 	bl	8004db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af02      	add	r7, sp, #8
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b20      	cmp	r3, #32
 800429e:	d16d      	bne.n	800437c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_UART_Transmit+0x2c>
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e066      	b.n	800437e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2221      	movs	r2, #33	; 0x21
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042be:	f7fe f861 	bl	8002384 <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d8:	d108      	bne.n	80042ec <HAL_UART_Transmit+0x6c>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	e003      	b.n	80042f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042f4:	e02a      	b.n	800434c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2180      	movs	r1, #128	; 0x80
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fb14 	bl	800492e <UART_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e036      	b.n	800437e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3302      	adds	r3, #2
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	e007      	b.n	800433e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1cf      	bne.n	80042f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	2140      	movs	r1, #64	; 0x40
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fae4 	bl	800492e <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e006      	b.n	800437e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	4613      	mov	r3, r2
 8004392:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b20      	cmp	r3, #32
 800439e:	d112      	bne.n	80043c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_UART_Receive_IT+0x26>
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e00b      	b.n	80043c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	461a      	mov	r2, r3
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fb24 	bl	8004a0a <UART_Start_Receive_IT>
 80043c2:	4603      	mov	r3, r0
 80043c4:	e000      	b.n	80043c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
  }
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b0ba      	sub	sp, #232	; 0xe8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800440e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_UART_IRQHandler+0x66>
 8004422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fc01 	bl	8004c36 <UART_Receive_IT>
      return;
 8004434:	e25b      	b.n	80048ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80de 	beq.w	80045fc <HAL_UART_IRQHandler+0x22c>
 8004440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004450:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80d1 	beq.w	80045fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800445a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_UART_IRQHandler+0xae>
 8004466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	f043 0201 	orr.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <HAL_UART_IRQHandler+0xd2>
 800448a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	f043 0202 	orr.w	r2, r3, #2
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <HAL_UART_IRQHandler+0xf6>
 80044ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f043 0204 	orr.w	r2, r3, #4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d011      	beq.n	80044f6 <HAL_UART_IRQHandler+0x126>
 80044d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d105      	bne.n	80044ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	f043 0208 	orr.w	r2, r3, #8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 81f2 	beq.w	80048e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004504:	f003 0320 	and.w	r3, r3, #32
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_UART_IRQHandler+0x14e>
 800450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fb8c 	bl	8004c36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <HAL_UART_IRQHandler+0x17a>
 8004542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d04f      	beq.n	80045ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fa96 	bl	8004a7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d041      	beq.n	80045e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3314      	adds	r3, #20
 8004564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3314      	adds	r3, #20
 8004586:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800458a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800458e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004596:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1d9      	bne.n	800455e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d013      	beq.n	80045da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	4a7e      	ldr	r2, [pc, #504]	; (80047b0 <HAL_UART_IRQHandler+0x3e0>)
 80045b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe f832 	bl	8002628 <HAL_DMA_Abort_IT>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d016      	beq.n	80045f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045d4:	4610      	mov	r0, r2
 80045d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	e00e      	b.n	80045f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f993 	bl	8004906 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	e00a      	b.n	80045f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f98f 	bl	8004906 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e8:	e006      	b.n	80045f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f98b 	bl	8004906 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80045f6:	e175      	b.n	80048e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	bf00      	nop
    return;
 80045fa:	e173      	b.n	80048e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	2b01      	cmp	r3, #1
 8004602:	f040 814f 	bne.w	80048a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8148 	beq.w	80048a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8141 	beq.w	80048a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60bb      	str	r3, [r7, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80b6 	beq.w	80047b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004654:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8145 	beq.w	80048e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004666:	429a      	cmp	r2, r3
 8004668:	f080 813e 	bcs.w	80048e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004672:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b20      	cmp	r3, #32
 800467c:	f000 8088 	beq.w	8004790 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	330c      	adds	r3, #12
 8004686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004696:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800469a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800469e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046ac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1d9      	bne.n	8004680 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046de:	f023 0301 	bic.w	r3, r3, #1
 80046e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3314      	adds	r3, #20
 80046ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e1      	bne.n	80046cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3314      	adds	r3, #20
 800470e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3314      	adds	r3, #20
 8004728:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800472c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800472e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004732:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800473a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e3      	bne.n	8004708 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800475e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004760:	f023 0310 	bic.w	r3, r3, #16
 8004764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004772:	65ba      	str	r2, [r7, #88]	; 0x58
 8004774:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e3      	bne.n	800474e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd ff11 	bl	80025b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8b6 	bl	8004918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047ac:	e09c      	b.n	80048e8 <HAL_UART_IRQHandler+0x518>
 80047ae:	bf00      	nop
 80047b0:	08004b41 	.word	0x08004b41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 808e 	beq.w	80048ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80047d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8089 	beq.w	80048ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004800:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e3      	bne.n	80047da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3314      	adds	r3, #20
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	623b      	str	r3, [r7, #32]
   return(result);
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3314      	adds	r3, #20
 8004832:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004836:	633a      	str	r2, [r7, #48]	; 0x30
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800483c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e3      	bne.n	8004812 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	330c      	adds	r3, #12
 800485e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	60fb      	str	r3, [r7, #12]
   return(result);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0310 	bic.w	r3, r3, #16
 800486e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	330c      	adds	r3, #12
 8004878:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800487c:	61fa      	str	r2, [r7, #28]
 800487e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	69b9      	ldr	r1, [r7, #24]
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	617b      	str	r3, [r7, #20]
   return(result);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e3      	bne.n	8004858 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004896:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f83b 	bl	8004918 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048a2:	e023      	b.n	80048ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d009      	beq.n	80048c4 <HAL_UART_IRQHandler+0x4f4>
 80048b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f953 	bl	8004b68 <UART_Transmit_IT>
    return;
 80048c2:	e014      	b.n	80048ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00e      	beq.n	80048ee <HAL_UART_IRQHandler+0x51e>
 80048d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f992 	bl	8004c06 <UART_EndTransmit_IT>
    return;
 80048e2:	e004      	b.n	80048ee <HAL_UART_IRQHandler+0x51e>
    return;
 80048e4:	bf00      	nop
 80048e6:	e002      	b.n	80048ee <HAL_UART_IRQHandler+0x51e>
      return;
 80048e8:	bf00      	nop
 80048ea:	e000      	b.n	80048ee <HAL_UART_IRQHandler+0x51e>
      return;
 80048ec:	bf00      	nop
  }
}
 80048ee:	37e8      	adds	r7, #232	; 0xe8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr

08004906 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr

08004918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b090      	sub	sp, #64	; 0x40
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493e:	e050      	b.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d04c      	beq.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <UART_WaitOnFlagUntilTimeout+0x30>
 800494e:	f7fd fd19 	bl	8002384 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800495a:	429a      	cmp	r2, r3
 800495c:	d241      	bcs.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	330c      	adds	r3, #12
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800497e:	637a      	str	r2, [r7, #52]	; 0x34
 8004980:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3314      	adds	r3, #20
 8004998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	613b      	str	r3, [r7, #16]
   return(result);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3314      	adds	r3, #20
 80049b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b2:	623a      	str	r2, [r7, #32]
 80049b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	69f9      	ldr	r1, [r7, #28]
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e5      	bne.n	8004992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e00f      	b.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4013      	ands	r3, r2
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	bf0c      	ite	eq
 80049f2:	2301      	moveq	r3, #1
 80049f4:	2300      	movne	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d09f      	beq.n	8004940 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3740      	adds	r7, #64	; 0x40
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	4613      	mov	r3, r2
 8004a16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	88fa      	ldrh	r2, [r7, #6]
 8004a28:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2222      	movs	r2, #34	; 0x22
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a4e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0220 	orr.w	r2, r2, #32
 8004a6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b095      	sub	sp, #84	; 0x54
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aa4:	643a      	str	r2, [r7, #64]	; 0x40
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e5      	bne.n	8004a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3314      	adds	r3, #20
 8004abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3314      	adds	r3, #20
 8004ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e5      	bne.n	8004ab8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d119      	bne.n	8004b28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	e853 3f00 	ldrex	r3, [r3]
 8004b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 0310 	bic.w	r3, r3, #16
 8004b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	330c      	adds	r3, #12
 8004b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b14:	61ba      	str	r2, [r7, #24]
 8004b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b18:	6979      	ldr	r1, [r7, #20]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	e841 2300 	strex	r3, r2, [r1]
 8004b20:	613b      	str	r3, [r7, #16]
   return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e5      	bne.n	8004af4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b36:	bf00      	nop
 8004b38:	3754      	adds	r7, #84	; 0x54
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fed3 	bl	8004906 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b21      	cmp	r3, #33	; 0x21
 8004b7a:	d13e      	bne.n	8004bfa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d114      	bne.n	8004bb0 <UART_Transmit_IT+0x48>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d110      	bne.n	8004bb0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	1c9a      	adds	r2, r3, #2
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]
 8004bae:	e008      	b.n	8004bc2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	1c59      	adds	r1, r3, #1
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6211      	str	r1, [r2, #32]
 8004bba:	781a      	ldrb	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10f      	bne.n	8004bf6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bf4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e000      	b.n	8004bfc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
  }
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr

08004c06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff fe64 	bl	80048f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b08c      	sub	sp, #48	; 0x30
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b22      	cmp	r3, #34	; 0x22
 8004c48:	f040 80ae 	bne.w	8004da8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c54:	d117      	bne.n	8004c86 <UART_Receive_IT+0x50>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d113      	bne.n	8004c86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	1c9a      	adds	r2, r3, #2
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28
 8004c84:	e026      	b.n	8004cd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c98:	d007      	beq.n	8004caa <UART_Receive_IT+0x74>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <UART_Receive_IT+0x82>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e008      	b.n	8004cca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d15d      	bne.n	8004da4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0220 	bic.w	r2, r2, #32
 8004cf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695a      	ldr	r2, [r3, #20]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0201 	bic.w	r2, r2, #1
 8004d16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d135      	bne.n	8004d9a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	613b      	str	r3, [r7, #16]
   return(result);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f023 0310 	bic.w	r3, r3, #16
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d54:	623a      	str	r2, [r7, #32]
 8004d56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	69f9      	ldr	r1, [r7, #28]
 8004d5a:	6a3a      	ldr	r2, [r7, #32]
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d10a      	bne.n	8004d8c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fdc0 	bl	8004918 <HAL_UARTEx_RxEventCallback>
 8004d98:	e002      	b.n	8004da0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fb fffc 	bl	8000d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e002      	b.n	8004daa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3730      	adds	r7, #48	; 0x30
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004dee:	f023 030c 	bic.w	r3, r3, #12
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2c      	ldr	r2, [pc, #176]	; (8004ec8 <UART_SetConfig+0x114>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7fe fa48 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	e002      	b.n	8004e2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fe fa30 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 8004e28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009a      	lsls	r2, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <UART_SetConfig+0x118>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	0119      	lsls	r1, r3, #4
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009a      	lsls	r2, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e60:	4b1a      	ldr	r3, [pc, #104]	; (8004ecc <UART_SetConfig+0x118>)
 8004e62:	fba3 0302 	umull	r0, r3, r3, r2
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	2064      	movs	r0, #100	; 0x64
 8004e6a:	fb00 f303 	mul.w	r3, r0, r3
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	3332      	adds	r3, #50	; 0x32
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <UART_SetConfig+0x118>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e80:	4419      	add	r1, r3
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009a      	lsls	r2, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <UART_SetConfig+0x118>)
 8004e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	2064      	movs	r0, #100	; 0x64
 8004ea2:	fb00 f303 	mul.w	r3, r0, r3
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	3332      	adds	r3, #50	; 0x32
 8004eac:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <UART_SetConfig+0x118>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	f003 020f 	and.w	r2, r3, #15
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40013800 	.word	0x40013800
 8004ecc:	51eb851f 	.word	0x51eb851f

08004ed0 <siprintf>:
 8004ed0:	b40e      	push	{r1, r2, r3}
 8004ed2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ed6:	b500      	push	{lr}
 8004ed8:	b09c      	sub	sp, #112	; 0x70
 8004eda:	ab1d      	add	r3, sp, #116	; 0x74
 8004edc:	9002      	str	r0, [sp, #8]
 8004ede:	9006      	str	r0, [sp, #24]
 8004ee0:	9107      	str	r1, [sp, #28]
 8004ee2:	9104      	str	r1, [sp, #16]
 8004ee4:	4808      	ldr	r0, [pc, #32]	; (8004f08 <siprintf+0x38>)
 8004ee6:	4909      	ldr	r1, [pc, #36]	; (8004f0c <siprintf+0x3c>)
 8004ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eec:	9105      	str	r1, [sp, #20]
 8004eee:	6800      	ldr	r0, [r0, #0]
 8004ef0:	a902      	add	r1, sp, #8
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	f000 f98e 	bl	8005214 <_svfiprintf_r>
 8004ef8:	2200      	movs	r2, #0
 8004efa:	9b02      	ldr	r3, [sp, #8]
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	b01c      	add	sp, #112	; 0x70
 8004f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f04:	b003      	add	sp, #12
 8004f06:	4770      	bx	lr
 8004f08:	200000b8 	.word	0x200000b8
 8004f0c:	ffff0208 	.word	0xffff0208

08004f10 <memset>:
 8004f10:	4603      	mov	r3, r0
 8004f12:	4402      	add	r2, r0
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d100      	bne.n	8004f1a <memset+0xa>
 8004f18:	4770      	bx	lr
 8004f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1e:	e7f9      	b.n	8004f14 <memset+0x4>

08004f20 <__errno>:
 8004f20:	4b01      	ldr	r3, [pc, #4]	; (8004f28 <__errno+0x8>)
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	200000b8 	.word	0x200000b8

08004f2c <__libc_init_array>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	2600      	movs	r6, #0
 8004f30:	4d0c      	ldr	r5, [pc, #48]	; (8004f64 <__libc_init_array+0x38>)
 8004f32:	4c0d      	ldr	r4, [pc, #52]	; (8004f68 <__libc_init_array+0x3c>)
 8004f34:	1b64      	subs	r4, r4, r5
 8004f36:	10a4      	asrs	r4, r4, #2
 8004f38:	42a6      	cmp	r6, r4
 8004f3a:	d109      	bne.n	8004f50 <__libc_init_array+0x24>
 8004f3c:	f000 fc7a 	bl	8005834 <_init>
 8004f40:	2600      	movs	r6, #0
 8004f42:	4d0a      	ldr	r5, [pc, #40]	; (8004f6c <__libc_init_array+0x40>)
 8004f44:	4c0a      	ldr	r4, [pc, #40]	; (8004f70 <__libc_init_array+0x44>)
 8004f46:	1b64      	subs	r4, r4, r5
 8004f48:	10a4      	asrs	r4, r4, #2
 8004f4a:	42a6      	cmp	r6, r4
 8004f4c:	d105      	bne.n	8004f5a <__libc_init_array+0x2e>
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f54:	4798      	blx	r3
 8004f56:	3601      	adds	r6, #1
 8004f58:	e7ee      	b.n	8004f38 <__libc_init_array+0xc>
 8004f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5e:	4798      	blx	r3
 8004f60:	3601      	adds	r6, #1
 8004f62:	e7f2      	b.n	8004f4a <__libc_init_array+0x1e>
 8004f64:	080058d4 	.word	0x080058d4
 8004f68:	080058d4 	.word	0x080058d4
 8004f6c:	080058d4 	.word	0x080058d4
 8004f70:	080058d8 	.word	0x080058d8

08004f74 <__retarget_lock_acquire_recursive>:
 8004f74:	4770      	bx	lr

08004f76 <__retarget_lock_release_recursive>:
 8004f76:	4770      	bx	lr

08004f78 <_free_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d040      	beq.n	8005002 <_free_r+0x8a>
 8004f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f84:	1f0c      	subs	r4, r1, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfb8      	it	lt
 8004f8a:	18e4      	addlt	r4, r4, r3
 8004f8c:	f000 f8dc 	bl	8005148 <__malloc_lock>
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <_free_r+0x8c>)
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	b933      	cbnz	r3, 8004fa4 <_free_r+0x2c>
 8004f96:	6063      	str	r3, [r4, #4]
 8004f98:	6014      	str	r4, [r2, #0]
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fa0:	f000 b8d8 	b.w	8005154 <__malloc_unlock>
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	d908      	bls.n	8004fba <_free_r+0x42>
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	1821      	adds	r1, r4, r0
 8004fac:	428b      	cmp	r3, r1
 8004fae:	bf01      	itttt	eq
 8004fb0:	6819      	ldreq	r1, [r3, #0]
 8004fb2:	685b      	ldreq	r3, [r3, #4]
 8004fb4:	1809      	addeq	r1, r1, r0
 8004fb6:	6021      	streq	r1, [r4, #0]
 8004fb8:	e7ed      	b.n	8004f96 <_free_r+0x1e>
 8004fba:	461a      	mov	r2, r3
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	b10b      	cbz	r3, 8004fc4 <_free_r+0x4c>
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d9fa      	bls.n	8004fba <_free_r+0x42>
 8004fc4:	6811      	ldr	r1, [r2, #0]
 8004fc6:	1850      	adds	r0, r2, r1
 8004fc8:	42a0      	cmp	r0, r4
 8004fca:	d10b      	bne.n	8004fe4 <_free_r+0x6c>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	4401      	add	r1, r0
 8004fd0:	1850      	adds	r0, r2, r1
 8004fd2:	4283      	cmp	r3, r0
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	d1e0      	bne.n	8004f9a <_free_r+0x22>
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4408      	add	r0, r1
 8004fde:	6010      	str	r0, [r2, #0]
 8004fe0:	6053      	str	r3, [r2, #4]
 8004fe2:	e7da      	b.n	8004f9a <_free_r+0x22>
 8004fe4:	d902      	bls.n	8004fec <_free_r+0x74>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	e7d6      	b.n	8004f9a <_free_r+0x22>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	1821      	adds	r1, r4, r0
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	bf01      	itttt	eq
 8004ff4:	6819      	ldreq	r1, [r3, #0]
 8004ff6:	685b      	ldreq	r3, [r3, #4]
 8004ff8:	1809      	addeq	r1, r1, r0
 8004ffa:	6021      	streq	r1, [r4, #0]
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	6054      	str	r4, [r2, #4]
 8005000:	e7cb      	b.n	8004f9a <_free_r+0x22>
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	200004e0 	.word	0x200004e0

08005008 <sbrk_aligned>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	4e0e      	ldr	r6, [pc, #56]	; (8005044 <sbrk_aligned+0x3c>)
 800500c:	460c      	mov	r4, r1
 800500e:	6831      	ldr	r1, [r6, #0]
 8005010:	4605      	mov	r5, r0
 8005012:	b911      	cbnz	r1, 800501a <sbrk_aligned+0x12>
 8005014:	f000 fbaa 	bl	800576c <_sbrk_r>
 8005018:	6030      	str	r0, [r6, #0]
 800501a:	4621      	mov	r1, r4
 800501c:	4628      	mov	r0, r5
 800501e:	f000 fba5 	bl	800576c <_sbrk_r>
 8005022:	1c43      	adds	r3, r0, #1
 8005024:	d00a      	beq.n	800503c <sbrk_aligned+0x34>
 8005026:	1cc4      	adds	r4, r0, #3
 8005028:	f024 0403 	bic.w	r4, r4, #3
 800502c:	42a0      	cmp	r0, r4
 800502e:	d007      	beq.n	8005040 <sbrk_aligned+0x38>
 8005030:	1a21      	subs	r1, r4, r0
 8005032:	4628      	mov	r0, r5
 8005034:	f000 fb9a 	bl	800576c <_sbrk_r>
 8005038:	3001      	adds	r0, #1
 800503a:	d101      	bne.n	8005040 <sbrk_aligned+0x38>
 800503c:	f04f 34ff 	mov.w	r4, #4294967295
 8005040:	4620      	mov	r0, r4
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	200004e4 	.word	0x200004e4

08005048 <_malloc_r>:
 8005048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800504c:	1ccd      	adds	r5, r1, #3
 800504e:	f025 0503 	bic.w	r5, r5, #3
 8005052:	3508      	adds	r5, #8
 8005054:	2d0c      	cmp	r5, #12
 8005056:	bf38      	it	cc
 8005058:	250c      	movcc	r5, #12
 800505a:	2d00      	cmp	r5, #0
 800505c:	4607      	mov	r7, r0
 800505e:	db01      	blt.n	8005064 <_malloc_r+0x1c>
 8005060:	42a9      	cmp	r1, r5
 8005062:	d905      	bls.n	8005070 <_malloc_r+0x28>
 8005064:	230c      	movs	r3, #12
 8005066:	2600      	movs	r6, #0
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	4630      	mov	r0, r6
 800506c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005070:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005144 <_malloc_r+0xfc>
 8005074:	f000 f868 	bl	8005148 <__malloc_lock>
 8005078:	f8d8 3000 	ldr.w	r3, [r8]
 800507c:	461c      	mov	r4, r3
 800507e:	bb5c      	cbnz	r4, 80050d8 <_malloc_r+0x90>
 8005080:	4629      	mov	r1, r5
 8005082:	4638      	mov	r0, r7
 8005084:	f7ff ffc0 	bl	8005008 <sbrk_aligned>
 8005088:	1c43      	adds	r3, r0, #1
 800508a:	4604      	mov	r4, r0
 800508c:	d155      	bne.n	800513a <_malloc_r+0xf2>
 800508e:	f8d8 4000 	ldr.w	r4, [r8]
 8005092:	4626      	mov	r6, r4
 8005094:	2e00      	cmp	r6, #0
 8005096:	d145      	bne.n	8005124 <_malloc_r+0xdc>
 8005098:	2c00      	cmp	r4, #0
 800509a:	d048      	beq.n	800512e <_malloc_r+0xe6>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	4631      	mov	r1, r6
 80050a0:	4638      	mov	r0, r7
 80050a2:	eb04 0903 	add.w	r9, r4, r3
 80050a6:	f000 fb61 	bl	800576c <_sbrk_r>
 80050aa:	4581      	cmp	r9, r0
 80050ac:	d13f      	bne.n	800512e <_malloc_r+0xe6>
 80050ae:	6821      	ldr	r1, [r4, #0]
 80050b0:	4638      	mov	r0, r7
 80050b2:	1a6d      	subs	r5, r5, r1
 80050b4:	4629      	mov	r1, r5
 80050b6:	f7ff ffa7 	bl	8005008 <sbrk_aligned>
 80050ba:	3001      	adds	r0, #1
 80050bc:	d037      	beq.n	800512e <_malloc_r+0xe6>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	442b      	add	r3, r5
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	f8d8 3000 	ldr.w	r3, [r8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d038      	beq.n	800513e <_malloc_r+0xf6>
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	42a2      	cmp	r2, r4
 80050d0:	d12b      	bne.n	800512a <_malloc_r+0xe2>
 80050d2:	2200      	movs	r2, #0
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	e00f      	b.n	80050f8 <_malloc_r+0xb0>
 80050d8:	6822      	ldr	r2, [r4, #0]
 80050da:	1b52      	subs	r2, r2, r5
 80050dc:	d41f      	bmi.n	800511e <_malloc_r+0xd6>
 80050de:	2a0b      	cmp	r2, #11
 80050e0:	d917      	bls.n	8005112 <_malloc_r+0xca>
 80050e2:	1961      	adds	r1, r4, r5
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	6025      	str	r5, [r4, #0]
 80050e8:	bf18      	it	ne
 80050ea:	6059      	strne	r1, [r3, #4]
 80050ec:	6863      	ldr	r3, [r4, #4]
 80050ee:	bf08      	it	eq
 80050f0:	f8c8 1000 	streq.w	r1, [r8]
 80050f4:	5162      	str	r2, [r4, r5]
 80050f6:	604b      	str	r3, [r1, #4]
 80050f8:	4638      	mov	r0, r7
 80050fa:	f104 060b 	add.w	r6, r4, #11
 80050fe:	f000 f829 	bl	8005154 <__malloc_unlock>
 8005102:	f026 0607 	bic.w	r6, r6, #7
 8005106:	1d23      	adds	r3, r4, #4
 8005108:	1af2      	subs	r2, r6, r3
 800510a:	d0ae      	beq.n	800506a <_malloc_r+0x22>
 800510c:	1b9b      	subs	r3, r3, r6
 800510e:	50a3      	str	r3, [r4, r2]
 8005110:	e7ab      	b.n	800506a <_malloc_r+0x22>
 8005112:	42a3      	cmp	r3, r4
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	d1dd      	bne.n	80050d4 <_malloc_r+0x8c>
 8005118:	f8c8 2000 	str.w	r2, [r8]
 800511c:	e7ec      	b.n	80050f8 <_malloc_r+0xb0>
 800511e:	4623      	mov	r3, r4
 8005120:	6864      	ldr	r4, [r4, #4]
 8005122:	e7ac      	b.n	800507e <_malloc_r+0x36>
 8005124:	4634      	mov	r4, r6
 8005126:	6876      	ldr	r6, [r6, #4]
 8005128:	e7b4      	b.n	8005094 <_malloc_r+0x4c>
 800512a:	4613      	mov	r3, r2
 800512c:	e7cc      	b.n	80050c8 <_malloc_r+0x80>
 800512e:	230c      	movs	r3, #12
 8005130:	4638      	mov	r0, r7
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	f000 f80e 	bl	8005154 <__malloc_unlock>
 8005138:	e797      	b.n	800506a <_malloc_r+0x22>
 800513a:	6025      	str	r5, [r4, #0]
 800513c:	e7dc      	b.n	80050f8 <_malloc_r+0xb0>
 800513e:	605b      	str	r3, [r3, #4]
 8005140:	deff      	udf	#255	; 0xff
 8005142:	bf00      	nop
 8005144:	200004e0 	.word	0x200004e0

08005148 <__malloc_lock>:
 8005148:	4801      	ldr	r0, [pc, #4]	; (8005150 <__malloc_lock+0x8>)
 800514a:	f7ff bf13 	b.w	8004f74 <__retarget_lock_acquire_recursive>
 800514e:	bf00      	nop
 8005150:	200004dc 	.word	0x200004dc

08005154 <__malloc_unlock>:
 8005154:	4801      	ldr	r0, [pc, #4]	; (800515c <__malloc_unlock+0x8>)
 8005156:	f7ff bf0e 	b.w	8004f76 <__retarget_lock_release_recursive>
 800515a:	bf00      	nop
 800515c:	200004dc 	.word	0x200004dc

08005160 <__ssputs_r>:
 8005160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	461f      	mov	r7, r3
 8005166:	688e      	ldr	r6, [r1, #8]
 8005168:	4682      	mov	sl, r0
 800516a:	42be      	cmp	r6, r7
 800516c:	460c      	mov	r4, r1
 800516e:	4690      	mov	r8, r2
 8005170:	680b      	ldr	r3, [r1, #0]
 8005172:	d82c      	bhi.n	80051ce <__ssputs_r+0x6e>
 8005174:	898a      	ldrh	r2, [r1, #12]
 8005176:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800517a:	d026      	beq.n	80051ca <__ssputs_r+0x6a>
 800517c:	6965      	ldr	r5, [r4, #20]
 800517e:	6909      	ldr	r1, [r1, #16]
 8005180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005184:	eba3 0901 	sub.w	r9, r3, r1
 8005188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800518c:	1c7b      	adds	r3, r7, #1
 800518e:	444b      	add	r3, r9
 8005190:	106d      	asrs	r5, r5, #1
 8005192:	429d      	cmp	r5, r3
 8005194:	bf38      	it	cc
 8005196:	461d      	movcc	r5, r3
 8005198:	0553      	lsls	r3, r2, #21
 800519a:	d527      	bpl.n	80051ec <__ssputs_r+0x8c>
 800519c:	4629      	mov	r1, r5
 800519e:	f7ff ff53 	bl	8005048 <_malloc_r>
 80051a2:	4606      	mov	r6, r0
 80051a4:	b360      	cbz	r0, 8005200 <__ssputs_r+0xa0>
 80051a6:	464a      	mov	r2, r9
 80051a8:	6921      	ldr	r1, [r4, #16]
 80051aa:	f000 fafd 	bl	80057a8 <memcpy>
 80051ae:	89a3      	ldrh	r3, [r4, #12]
 80051b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	6126      	str	r6, [r4, #16]
 80051bc:	444e      	add	r6, r9
 80051be:	6026      	str	r6, [r4, #0]
 80051c0:	463e      	mov	r6, r7
 80051c2:	6165      	str	r5, [r4, #20]
 80051c4:	eba5 0509 	sub.w	r5, r5, r9
 80051c8:	60a5      	str	r5, [r4, #8]
 80051ca:	42be      	cmp	r6, r7
 80051cc:	d900      	bls.n	80051d0 <__ssputs_r+0x70>
 80051ce:	463e      	mov	r6, r7
 80051d0:	4632      	mov	r2, r6
 80051d2:	4641      	mov	r1, r8
 80051d4:	6820      	ldr	r0, [r4, #0]
 80051d6:	f000 faaf 	bl	8005738 <memmove>
 80051da:	2000      	movs	r0, #0
 80051dc:	68a3      	ldr	r3, [r4, #8]
 80051de:	1b9b      	subs	r3, r3, r6
 80051e0:	60a3      	str	r3, [r4, #8]
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	4433      	add	r3, r6
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ec:	462a      	mov	r2, r5
 80051ee:	f000 fae9 	bl	80057c4 <_realloc_r>
 80051f2:	4606      	mov	r6, r0
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d1e0      	bne.n	80051ba <__ssputs_r+0x5a>
 80051f8:	4650      	mov	r0, sl
 80051fa:	6921      	ldr	r1, [r4, #16]
 80051fc:	f7ff febc 	bl	8004f78 <_free_r>
 8005200:	230c      	movs	r3, #12
 8005202:	f8ca 3000 	str.w	r3, [sl]
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005210:	81a3      	strh	r3, [r4, #12]
 8005212:	e7e9      	b.n	80051e8 <__ssputs_r+0x88>

08005214 <_svfiprintf_r>:
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	4698      	mov	r8, r3
 800521a:	898b      	ldrh	r3, [r1, #12]
 800521c:	4607      	mov	r7, r0
 800521e:	061b      	lsls	r3, r3, #24
 8005220:	460d      	mov	r5, r1
 8005222:	4614      	mov	r4, r2
 8005224:	b09d      	sub	sp, #116	; 0x74
 8005226:	d50e      	bpl.n	8005246 <_svfiprintf_r+0x32>
 8005228:	690b      	ldr	r3, [r1, #16]
 800522a:	b963      	cbnz	r3, 8005246 <_svfiprintf_r+0x32>
 800522c:	2140      	movs	r1, #64	; 0x40
 800522e:	f7ff ff0b 	bl	8005048 <_malloc_r>
 8005232:	6028      	str	r0, [r5, #0]
 8005234:	6128      	str	r0, [r5, #16]
 8005236:	b920      	cbnz	r0, 8005242 <_svfiprintf_r+0x2e>
 8005238:	230c      	movs	r3, #12
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	e0d0      	b.n	80053e4 <_svfiprintf_r+0x1d0>
 8005242:	2340      	movs	r3, #64	; 0x40
 8005244:	616b      	str	r3, [r5, #20]
 8005246:	2300      	movs	r3, #0
 8005248:	9309      	str	r3, [sp, #36]	; 0x24
 800524a:	2320      	movs	r3, #32
 800524c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005250:	2330      	movs	r3, #48	; 0x30
 8005252:	f04f 0901 	mov.w	r9, #1
 8005256:	f8cd 800c 	str.w	r8, [sp, #12]
 800525a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80053fc <_svfiprintf_r+0x1e8>
 800525e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005262:	4623      	mov	r3, r4
 8005264:	469a      	mov	sl, r3
 8005266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800526a:	b10a      	cbz	r2, 8005270 <_svfiprintf_r+0x5c>
 800526c:	2a25      	cmp	r2, #37	; 0x25
 800526e:	d1f9      	bne.n	8005264 <_svfiprintf_r+0x50>
 8005270:	ebba 0b04 	subs.w	fp, sl, r4
 8005274:	d00b      	beq.n	800528e <_svfiprintf_r+0x7a>
 8005276:	465b      	mov	r3, fp
 8005278:	4622      	mov	r2, r4
 800527a:	4629      	mov	r1, r5
 800527c:	4638      	mov	r0, r7
 800527e:	f7ff ff6f 	bl	8005160 <__ssputs_r>
 8005282:	3001      	adds	r0, #1
 8005284:	f000 80a9 	beq.w	80053da <_svfiprintf_r+0x1c6>
 8005288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800528a:	445a      	add	r2, fp
 800528c:	9209      	str	r2, [sp, #36]	; 0x24
 800528e:	f89a 3000 	ldrb.w	r3, [sl]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 80a1 	beq.w	80053da <_svfiprintf_r+0x1c6>
 8005298:	2300      	movs	r3, #0
 800529a:	f04f 32ff 	mov.w	r2, #4294967295
 800529e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a2:	f10a 0a01 	add.w	sl, sl, #1
 80052a6:	9304      	str	r3, [sp, #16]
 80052a8:	9307      	str	r3, [sp, #28]
 80052aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052ae:	931a      	str	r3, [sp, #104]	; 0x68
 80052b0:	4654      	mov	r4, sl
 80052b2:	2205      	movs	r2, #5
 80052b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b8:	4850      	ldr	r0, [pc, #320]	; (80053fc <_svfiprintf_r+0x1e8>)
 80052ba:	f000 fa67 	bl	800578c <memchr>
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	b9d8      	cbnz	r0, 80052fa <_svfiprintf_r+0xe6>
 80052c2:	06d0      	lsls	r0, r2, #27
 80052c4:	bf44      	itt	mi
 80052c6:	2320      	movmi	r3, #32
 80052c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052cc:	0711      	lsls	r1, r2, #28
 80052ce:	bf44      	itt	mi
 80052d0:	232b      	movmi	r3, #43	; 0x2b
 80052d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d6:	f89a 3000 	ldrb.w	r3, [sl]
 80052da:	2b2a      	cmp	r3, #42	; 0x2a
 80052dc:	d015      	beq.n	800530a <_svfiprintf_r+0xf6>
 80052de:	4654      	mov	r4, sl
 80052e0:	2000      	movs	r0, #0
 80052e2:	f04f 0c0a 	mov.w	ip, #10
 80052e6:	9a07      	ldr	r2, [sp, #28]
 80052e8:	4621      	mov	r1, r4
 80052ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ee:	3b30      	subs	r3, #48	; 0x30
 80052f0:	2b09      	cmp	r3, #9
 80052f2:	d94d      	bls.n	8005390 <_svfiprintf_r+0x17c>
 80052f4:	b1b0      	cbz	r0, 8005324 <_svfiprintf_r+0x110>
 80052f6:	9207      	str	r2, [sp, #28]
 80052f8:	e014      	b.n	8005324 <_svfiprintf_r+0x110>
 80052fa:	eba0 0308 	sub.w	r3, r0, r8
 80052fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005302:	4313      	orrs	r3, r2
 8005304:	46a2      	mov	sl, r4
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	e7d2      	b.n	80052b0 <_svfiprintf_r+0x9c>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	1d19      	adds	r1, r3, #4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	9103      	str	r1, [sp, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	bfbb      	ittet	lt
 8005316:	425b      	neglt	r3, r3
 8005318:	f042 0202 	orrlt.w	r2, r2, #2
 800531c:	9307      	strge	r3, [sp, #28]
 800531e:	9307      	strlt	r3, [sp, #28]
 8005320:	bfb8      	it	lt
 8005322:	9204      	strlt	r2, [sp, #16]
 8005324:	7823      	ldrb	r3, [r4, #0]
 8005326:	2b2e      	cmp	r3, #46	; 0x2e
 8005328:	d10c      	bne.n	8005344 <_svfiprintf_r+0x130>
 800532a:	7863      	ldrb	r3, [r4, #1]
 800532c:	2b2a      	cmp	r3, #42	; 0x2a
 800532e:	d134      	bne.n	800539a <_svfiprintf_r+0x186>
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	3402      	adds	r4, #2
 8005334:	1d1a      	adds	r2, r3, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	9203      	str	r2, [sp, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	bfb8      	it	lt
 800533e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005342:	9305      	str	r3, [sp, #20]
 8005344:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005400 <_svfiprintf_r+0x1ec>
 8005348:	2203      	movs	r2, #3
 800534a:	4650      	mov	r0, sl
 800534c:	7821      	ldrb	r1, [r4, #0]
 800534e:	f000 fa1d 	bl	800578c <memchr>
 8005352:	b138      	cbz	r0, 8005364 <_svfiprintf_r+0x150>
 8005354:	2240      	movs	r2, #64	; 0x40
 8005356:	9b04      	ldr	r3, [sp, #16]
 8005358:	eba0 000a 	sub.w	r0, r0, sl
 800535c:	4082      	lsls	r2, r0
 800535e:	4313      	orrs	r3, r2
 8005360:	3401      	adds	r4, #1
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005368:	2206      	movs	r2, #6
 800536a:	4826      	ldr	r0, [pc, #152]	; (8005404 <_svfiprintf_r+0x1f0>)
 800536c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005370:	f000 fa0c 	bl	800578c <memchr>
 8005374:	2800      	cmp	r0, #0
 8005376:	d038      	beq.n	80053ea <_svfiprintf_r+0x1d6>
 8005378:	4b23      	ldr	r3, [pc, #140]	; (8005408 <_svfiprintf_r+0x1f4>)
 800537a:	bb1b      	cbnz	r3, 80053c4 <_svfiprintf_r+0x1b0>
 800537c:	9b03      	ldr	r3, [sp, #12]
 800537e:	3307      	adds	r3, #7
 8005380:	f023 0307 	bic.w	r3, r3, #7
 8005384:	3308      	adds	r3, #8
 8005386:	9303      	str	r3, [sp, #12]
 8005388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800538a:	4433      	add	r3, r6
 800538c:	9309      	str	r3, [sp, #36]	; 0x24
 800538e:	e768      	b.n	8005262 <_svfiprintf_r+0x4e>
 8005390:	460c      	mov	r4, r1
 8005392:	2001      	movs	r0, #1
 8005394:	fb0c 3202 	mla	r2, ip, r2, r3
 8005398:	e7a6      	b.n	80052e8 <_svfiprintf_r+0xd4>
 800539a:	2300      	movs	r3, #0
 800539c:	f04f 0c0a 	mov.w	ip, #10
 80053a0:	4619      	mov	r1, r3
 80053a2:	3401      	adds	r4, #1
 80053a4:	9305      	str	r3, [sp, #20]
 80053a6:	4620      	mov	r0, r4
 80053a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ac:	3a30      	subs	r2, #48	; 0x30
 80053ae:	2a09      	cmp	r2, #9
 80053b0:	d903      	bls.n	80053ba <_svfiprintf_r+0x1a6>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0c6      	beq.n	8005344 <_svfiprintf_r+0x130>
 80053b6:	9105      	str	r1, [sp, #20]
 80053b8:	e7c4      	b.n	8005344 <_svfiprintf_r+0x130>
 80053ba:	4604      	mov	r4, r0
 80053bc:	2301      	movs	r3, #1
 80053be:	fb0c 2101 	mla	r1, ip, r1, r2
 80053c2:	e7f0      	b.n	80053a6 <_svfiprintf_r+0x192>
 80053c4:	ab03      	add	r3, sp, #12
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	462a      	mov	r2, r5
 80053ca:	4638      	mov	r0, r7
 80053cc:	4b0f      	ldr	r3, [pc, #60]	; (800540c <_svfiprintf_r+0x1f8>)
 80053ce:	a904      	add	r1, sp, #16
 80053d0:	f3af 8000 	nop.w
 80053d4:	1c42      	adds	r2, r0, #1
 80053d6:	4606      	mov	r6, r0
 80053d8:	d1d6      	bne.n	8005388 <_svfiprintf_r+0x174>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	065b      	lsls	r3, r3, #25
 80053de:	f53f af2d 	bmi.w	800523c <_svfiprintf_r+0x28>
 80053e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053e4:	b01d      	add	sp, #116	; 0x74
 80053e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ea:	ab03      	add	r3, sp, #12
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	462a      	mov	r2, r5
 80053f0:	4638      	mov	r0, r7
 80053f2:	4b06      	ldr	r3, [pc, #24]	; (800540c <_svfiprintf_r+0x1f8>)
 80053f4:	a904      	add	r1, sp, #16
 80053f6:	f000 f87d 	bl	80054f4 <_printf_i>
 80053fa:	e7eb      	b.n	80053d4 <_svfiprintf_r+0x1c0>
 80053fc:	0800589e 	.word	0x0800589e
 8005400:	080058a4 	.word	0x080058a4
 8005404:	080058a8 	.word	0x080058a8
 8005408:	00000000 	.word	0x00000000
 800540c:	08005161 	.word	0x08005161

08005410 <_printf_common>:
 8005410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005414:	4616      	mov	r6, r2
 8005416:	4699      	mov	r9, r3
 8005418:	688a      	ldr	r2, [r1, #8]
 800541a:	690b      	ldr	r3, [r1, #16]
 800541c:	4607      	mov	r7, r0
 800541e:	4293      	cmp	r3, r2
 8005420:	bfb8      	it	lt
 8005422:	4613      	movlt	r3, r2
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800542a:	460c      	mov	r4, r1
 800542c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005430:	b10a      	cbz	r2, 8005436 <_printf_common+0x26>
 8005432:	3301      	adds	r3, #1
 8005434:	6033      	str	r3, [r6, #0]
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	0699      	lsls	r1, r3, #26
 800543a:	bf42      	ittt	mi
 800543c:	6833      	ldrmi	r3, [r6, #0]
 800543e:	3302      	addmi	r3, #2
 8005440:	6033      	strmi	r3, [r6, #0]
 8005442:	6825      	ldr	r5, [r4, #0]
 8005444:	f015 0506 	ands.w	r5, r5, #6
 8005448:	d106      	bne.n	8005458 <_printf_common+0x48>
 800544a:	f104 0a19 	add.w	sl, r4, #25
 800544e:	68e3      	ldr	r3, [r4, #12]
 8005450:	6832      	ldr	r2, [r6, #0]
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	42ab      	cmp	r3, r5
 8005456:	dc2b      	bgt.n	80054b0 <_printf_common+0xa0>
 8005458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800545c:	1e13      	subs	r3, r2, #0
 800545e:	6822      	ldr	r2, [r4, #0]
 8005460:	bf18      	it	ne
 8005462:	2301      	movne	r3, #1
 8005464:	0692      	lsls	r2, r2, #26
 8005466:	d430      	bmi.n	80054ca <_printf_common+0xba>
 8005468:	4649      	mov	r1, r9
 800546a:	4638      	mov	r0, r7
 800546c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005470:	47c0      	blx	r8
 8005472:	3001      	adds	r0, #1
 8005474:	d023      	beq.n	80054be <_printf_common+0xae>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	6922      	ldr	r2, [r4, #16]
 800547a:	f003 0306 	and.w	r3, r3, #6
 800547e:	2b04      	cmp	r3, #4
 8005480:	bf14      	ite	ne
 8005482:	2500      	movne	r5, #0
 8005484:	6833      	ldreq	r3, [r6, #0]
 8005486:	f04f 0600 	mov.w	r6, #0
 800548a:	bf08      	it	eq
 800548c:	68e5      	ldreq	r5, [r4, #12]
 800548e:	f104 041a 	add.w	r4, r4, #26
 8005492:	bf08      	it	eq
 8005494:	1aed      	subeq	r5, r5, r3
 8005496:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800549a:	bf08      	it	eq
 800549c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054a0:	4293      	cmp	r3, r2
 80054a2:	bfc4      	itt	gt
 80054a4:	1a9b      	subgt	r3, r3, r2
 80054a6:	18ed      	addgt	r5, r5, r3
 80054a8:	42b5      	cmp	r5, r6
 80054aa:	d11a      	bne.n	80054e2 <_printf_common+0xd2>
 80054ac:	2000      	movs	r0, #0
 80054ae:	e008      	b.n	80054c2 <_printf_common+0xb2>
 80054b0:	2301      	movs	r3, #1
 80054b2:	4652      	mov	r2, sl
 80054b4:	4649      	mov	r1, r9
 80054b6:	4638      	mov	r0, r7
 80054b8:	47c0      	blx	r8
 80054ba:	3001      	adds	r0, #1
 80054bc:	d103      	bne.n	80054c6 <_printf_common+0xb6>
 80054be:	f04f 30ff 	mov.w	r0, #4294967295
 80054c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c6:	3501      	adds	r5, #1
 80054c8:	e7c1      	b.n	800544e <_printf_common+0x3e>
 80054ca:	2030      	movs	r0, #48	; 0x30
 80054cc:	18e1      	adds	r1, r4, r3
 80054ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054d8:	4422      	add	r2, r4
 80054da:	3302      	adds	r3, #2
 80054dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054e0:	e7c2      	b.n	8005468 <_printf_common+0x58>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4622      	mov	r2, r4
 80054e6:	4649      	mov	r1, r9
 80054e8:	4638      	mov	r0, r7
 80054ea:	47c0      	blx	r8
 80054ec:	3001      	adds	r0, #1
 80054ee:	d0e6      	beq.n	80054be <_printf_common+0xae>
 80054f0:	3601      	adds	r6, #1
 80054f2:	e7d9      	b.n	80054a8 <_printf_common+0x98>

080054f4 <_printf_i>:
 80054f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054f8:	7e0f      	ldrb	r7, [r1, #24]
 80054fa:	4691      	mov	r9, r2
 80054fc:	2f78      	cmp	r7, #120	; 0x78
 80054fe:	4680      	mov	r8, r0
 8005500:	460c      	mov	r4, r1
 8005502:	469a      	mov	sl, r3
 8005504:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800550a:	d807      	bhi.n	800551c <_printf_i+0x28>
 800550c:	2f62      	cmp	r7, #98	; 0x62
 800550e:	d80a      	bhi.n	8005526 <_printf_i+0x32>
 8005510:	2f00      	cmp	r7, #0
 8005512:	f000 80d5 	beq.w	80056c0 <_printf_i+0x1cc>
 8005516:	2f58      	cmp	r7, #88	; 0x58
 8005518:	f000 80c1 	beq.w	800569e <_printf_i+0x1aa>
 800551c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005524:	e03a      	b.n	800559c <_printf_i+0xa8>
 8005526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800552a:	2b15      	cmp	r3, #21
 800552c:	d8f6      	bhi.n	800551c <_printf_i+0x28>
 800552e:	a101      	add	r1, pc, #4	; (adr r1, 8005534 <_printf_i+0x40>)
 8005530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005534:	0800558d 	.word	0x0800558d
 8005538:	080055a1 	.word	0x080055a1
 800553c:	0800551d 	.word	0x0800551d
 8005540:	0800551d 	.word	0x0800551d
 8005544:	0800551d 	.word	0x0800551d
 8005548:	0800551d 	.word	0x0800551d
 800554c:	080055a1 	.word	0x080055a1
 8005550:	0800551d 	.word	0x0800551d
 8005554:	0800551d 	.word	0x0800551d
 8005558:	0800551d 	.word	0x0800551d
 800555c:	0800551d 	.word	0x0800551d
 8005560:	080056a7 	.word	0x080056a7
 8005564:	080055cd 	.word	0x080055cd
 8005568:	08005661 	.word	0x08005661
 800556c:	0800551d 	.word	0x0800551d
 8005570:	0800551d 	.word	0x0800551d
 8005574:	080056c9 	.word	0x080056c9
 8005578:	0800551d 	.word	0x0800551d
 800557c:	080055cd 	.word	0x080055cd
 8005580:	0800551d 	.word	0x0800551d
 8005584:	0800551d 	.word	0x0800551d
 8005588:	08005669 	.word	0x08005669
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	1d1a      	adds	r2, r3, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	602a      	str	r2, [r5, #0]
 8005594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800559c:	2301      	movs	r3, #1
 800559e:	e0a0      	b.n	80056e2 <_printf_i+0x1ee>
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	682b      	ldr	r3, [r5, #0]
 80055a4:	0607      	lsls	r7, r0, #24
 80055a6:	f103 0104 	add.w	r1, r3, #4
 80055aa:	6029      	str	r1, [r5, #0]
 80055ac:	d501      	bpl.n	80055b2 <_printf_i+0xbe>
 80055ae:	681e      	ldr	r6, [r3, #0]
 80055b0:	e003      	b.n	80055ba <_printf_i+0xc6>
 80055b2:	0646      	lsls	r6, r0, #25
 80055b4:	d5fb      	bpl.n	80055ae <_printf_i+0xba>
 80055b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055ba:	2e00      	cmp	r6, #0
 80055bc:	da03      	bge.n	80055c6 <_printf_i+0xd2>
 80055be:	232d      	movs	r3, #45	; 0x2d
 80055c0:	4276      	negs	r6, r6
 80055c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c6:	230a      	movs	r3, #10
 80055c8:	4859      	ldr	r0, [pc, #356]	; (8005730 <_printf_i+0x23c>)
 80055ca:	e012      	b.n	80055f2 <_printf_i+0xfe>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	1d19      	adds	r1, r3, #4
 80055d2:	6029      	str	r1, [r5, #0]
 80055d4:	0605      	lsls	r5, r0, #24
 80055d6:	d501      	bpl.n	80055dc <_printf_i+0xe8>
 80055d8:	681e      	ldr	r6, [r3, #0]
 80055da:	e002      	b.n	80055e2 <_printf_i+0xee>
 80055dc:	0641      	lsls	r1, r0, #25
 80055de:	d5fb      	bpl.n	80055d8 <_printf_i+0xe4>
 80055e0:	881e      	ldrh	r6, [r3, #0]
 80055e2:	2f6f      	cmp	r7, #111	; 0x6f
 80055e4:	bf0c      	ite	eq
 80055e6:	2308      	moveq	r3, #8
 80055e8:	230a      	movne	r3, #10
 80055ea:	4851      	ldr	r0, [pc, #324]	; (8005730 <_printf_i+0x23c>)
 80055ec:	2100      	movs	r1, #0
 80055ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055f2:	6865      	ldr	r5, [r4, #4]
 80055f4:	2d00      	cmp	r5, #0
 80055f6:	bfa8      	it	ge
 80055f8:	6821      	ldrge	r1, [r4, #0]
 80055fa:	60a5      	str	r5, [r4, #8]
 80055fc:	bfa4      	itt	ge
 80055fe:	f021 0104 	bicge.w	r1, r1, #4
 8005602:	6021      	strge	r1, [r4, #0]
 8005604:	b90e      	cbnz	r6, 800560a <_printf_i+0x116>
 8005606:	2d00      	cmp	r5, #0
 8005608:	d04b      	beq.n	80056a2 <_printf_i+0x1ae>
 800560a:	4615      	mov	r5, r2
 800560c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005610:	fb03 6711 	mls	r7, r3, r1, r6
 8005614:	5dc7      	ldrb	r7, [r0, r7]
 8005616:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800561a:	4637      	mov	r7, r6
 800561c:	42bb      	cmp	r3, r7
 800561e:	460e      	mov	r6, r1
 8005620:	d9f4      	bls.n	800560c <_printf_i+0x118>
 8005622:	2b08      	cmp	r3, #8
 8005624:	d10b      	bne.n	800563e <_printf_i+0x14a>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	07de      	lsls	r6, r3, #31
 800562a:	d508      	bpl.n	800563e <_printf_i+0x14a>
 800562c:	6923      	ldr	r3, [r4, #16]
 800562e:	6861      	ldr	r1, [r4, #4]
 8005630:	4299      	cmp	r1, r3
 8005632:	bfde      	ittt	le
 8005634:	2330      	movle	r3, #48	; 0x30
 8005636:	f805 3c01 	strble.w	r3, [r5, #-1]
 800563a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800563e:	1b52      	subs	r2, r2, r5
 8005640:	6122      	str	r2, [r4, #16]
 8005642:	464b      	mov	r3, r9
 8005644:	4621      	mov	r1, r4
 8005646:	4640      	mov	r0, r8
 8005648:	f8cd a000 	str.w	sl, [sp]
 800564c:	aa03      	add	r2, sp, #12
 800564e:	f7ff fedf 	bl	8005410 <_printf_common>
 8005652:	3001      	adds	r0, #1
 8005654:	d14a      	bne.n	80056ec <_printf_i+0x1f8>
 8005656:	f04f 30ff 	mov.w	r0, #4294967295
 800565a:	b004      	add	sp, #16
 800565c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	f043 0320 	orr.w	r3, r3, #32
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	2778      	movs	r7, #120	; 0x78
 800566a:	4832      	ldr	r0, [pc, #200]	; (8005734 <_printf_i+0x240>)
 800566c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	6829      	ldr	r1, [r5, #0]
 8005674:	061f      	lsls	r7, r3, #24
 8005676:	f851 6b04 	ldr.w	r6, [r1], #4
 800567a:	d402      	bmi.n	8005682 <_printf_i+0x18e>
 800567c:	065f      	lsls	r7, r3, #25
 800567e:	bf48      	it	mi
 8005680:	b2b6      	uxthmi	r6, r6
 8005682:	07df      	lsls	r7, r3, #31
 8005684:	bf48      	it	mi
 8005686:	f043 0320 	orrmi.w	r3, r3, #32
 800568a:	6029      	str	r1, [r5, #0]
 800568c:	bf48      	it	mi
 800568e:	6023      	strmi	r3, [r4, #0]
 8005690:	b91e      	cbnz	r6, 800569a <_printf_i+0x1a6>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	f023 0320 	bic.w	r3, r3, #32
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	2310      	movs	r3, #16
 800569c:	e7a6      	b.n	80055ec <_printf_i+0xf8>
 800569e:	4824      	ldr	r0, [pc, #144]	; (8005730 <_printf_i+0x23c>)
 80056a0:	e7e4      	b.n	800566c <_printf_i+0x178>
 80056a2:	4615      	mov	r5, r2
 80056a4:	e7bd      	b.n	8005622 <_printf_i+0x12e>
 80056a6:	682b      	ldr	r3, [r5, #0]
 80056a8:	6826      	ldr	r6, [r4, #0]
 80056aa:	1d18      	adds	r0, r3, #4
 80056ac:	6961      	ldr	r1, [r4, #20]
 80056ae:	6028      	str	r0, [r5, #0]
 80056b0:	0635      	lsls	r5, r6, #24
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	d501      	bpl.n	80056ba <_printf_i+0x1c6>
 80056b6:	6019      	str	r1, [r3, #0]
 80056b8:	e002      	b.n	80056c0 <_printf_i+0x1cc>
 80056ba:	0670      	lsls	r0, r6, #25
 80056bc:	d5fb      	bpl.n	80056b6 <_printf_i+0x1c2>
 80056be:	8019      	strh	r1, [r3, #0]
 80056c0:	2300      	movs	r3, #0
 80056c2:	4615      	mov	r5, r2
 80056c4:	6123      	str	r3, [r4, #16]
 80056c6:	e7bc      	b.n	8005642 <_printf_i+0x14e>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	2100      	movs	r1, #0
 80056cc:	1d1a      	adds	r2, r3, #4
 80056ce:	602a      	str	r2, [r5, #0]
 80056d0:	681d      	ldr	r5, [r3, #0]
 80056d2:	6862      	ldr	r2, [r4, #4]
 80056d4:	4628      	mov	r0, r5
 80056d6:	f000 f859 	bl	800578c <memchr>
 80056da:	b108      	cbz	r0, 80056e0 <_printf_i+0x1ec>
 80056dc:	1b40      	subs	r0, r0, r5
 80056de:	6060      	str	r0, [r4, #4]
 80056e0:	6863      	ldr	r3, [r4, #4]
 80056e2:	6123      	str	r3, [r4, #16]
 80056e4:	2300      	movs	r3, #0
 80056e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ea:	e7aa      	b.n	8005642 <_printf_i+0x14e>
 80056ec:	462a      	mov	r2, r5
 80056ee:	4649      	mov	r1, r9
 80056f0:	4640      	mov	r0, r8
 80056f2:	6923      	ldr	r3, [r4, #16]
 80056f4:	47d0      	blx	sl
 80056f6:	3001      	adds	r0, #1
 80056f8:	d0ad      	beq.n	8005656 <_printf_i+0x162>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	079b      	lsls	r3, r3, #30
 80056fe:	d413      	bmi.n	8005728 <_printf_i+0x234>
 8005700:	68e0      	ldr	r0, [r4, #12]
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	4298      	cmp	r0, r3
 8005706:	bfb8      	it	lt
 8005708:	4618      	movlt	r0, r3
 800570a:	e7a6      	b.n	800565a <_printf_i+0x166>
 800570c:	2301      	movs	r3, #1
 800570e:	4632      	mov	r2, r6
 8005710:	4649      	mov	r1, r9
 8005712:	4640      	mov	r0, r8
 8005714:	47d0      	blx	sl
 8005716:	3001      	adds	r0, #1
 8005718:	d09d      	beq.n	8005656 <_printf_i+0x162>
 800571a:	3501      	adds	r5, #1
 800571c:	68e3      	ldr	r3, [r4, #12]
 800571e:	9903      	ldr	r1, [sp, #12]
 8005720:	1a5b      	subs	r3, r3, r1
 8005722:	42ab      	cmp	r3, r5
 8005724:	dcf2      	bgt.n	800570c <_printf_i+0x218>
 8005726:	e7eb      	b.n	8005700 <_printf_i+0x20c>
 8005728:	2500      	movs	r5, #0
 800572a:	f104 0619 	add.w	r6, r4, #25
 800572e:	e7f5      	b.n	800571c <_printf_i+0x228>
 8005730:	080058af 	.word	0x080058af
 8005734:	080058c0 	.word	0x080058c0

08005738 <memmove>:
 8005738:	4288      	cmp	r0, r1
 800573a:	b510      	push	{r4, lr}
 800573c:	eb01 0402 	add.w	r4, r1, r2
 8005740:	d902      	bls.n	8005748 <memmove+0x10>
 8005742:	4284      	cmp	r4, r0
 8005744:	4623      	mov	r3, r4
 8005746:	d807      	bhi.n	8005758 <memmove+0x20>
 8005748:	1e43      	subs	r3, r0, #1
 800574a:	42a1      	cmp	r1, r4
 800574c:	d008      	beq.n	8005760 <memmove+0x28>
 800574e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005756:	e7f8      	b.n	800574a <memmove+0x12>
 8005758:	4601      	mov	r1, r0
 800575a:	4402      	add	r2, r0
 800575c:	428a      	cmp	r2, r1
 800575e:	d100      	bne.n	8005762 <memmove+0x2a>
 8005760:	bd10      	pop	{r4, pc}
 8005762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800576a:	e7f7      	b.n	800575c <memmove+0x24>

0800576c <_sbrk_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	2300      	movs	r3, #0
 8005770:	4d05      	ldr	r5, [pc, #20]	; (8005788 <_sbrk_r+0x1c>)
 8005772:	4604      	mov	r4, r0
 8005774:	4608      	mov	r0, r1
 8005776:	602b      	str	r3, [r5, #0]
 8005778:	f7fc fae6 	bl	8001d48 <_sbrk>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_sbrk_r+0x1a>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_sbrk_r+0x1a>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	200004d8 	.word	0x200004d8

0800578c <memchr>:
 800578c:	4603      	mov	r3, r0
 800578e:	b510      	push	{r4, lr}
 8005790:	b2c9      	uxtb	r1, r1
 8005792:	4402      	add	r2, r0
 8005794:	4293      	cmp	r3, r2
 8005796:	4618      	mov	r0, r3
 8005798:	d101      	bne.n	800579e <memchr+0x12>
 800579a:	2000      	movs	r0, #0
 800579c:	e003      	b.n	80057a6 <memchr+0x1a>
 800579e:	7804      	ldrb	r4, [r0, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	428c      	cmp	r4, r1
 80057a4:	d1f6      	bne.n	8005794 <memchr+0x8>
 80057a6:	bd10      	pop	{r4, pc}

080057a8 <memcpy>:
 80057a8:	440a      	add	r2, r1
 80057aa:	4291      	cmp	r1, r2
 80057ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80057b0:	d100      	bne.n	80057b4 <memcpy+0xc>
 80057b2:	4770      	bx	lr
 80057b4:	b510      	push	{r4, lr}
 80057b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ba:	4291      	cmp	r1, r2
 80057bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057c0:	d1f9      	bne.n	80057b6 <memcpy+0xe>
 80057c2:	bd10      	pop	{r4, pc}

080057c4 <_realloc_r>:
 80057c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c8:	4680      	mov	r8, r0
 80057ca:	4614      	mov	r4, r2
 80057cc:	460e      	mov	r6, r1
 80057ce:	b921      	cbnz	r1, 80057da <_realloc_r+0x16>
 80057d0:	4611      	mov	r1, r2
 80057d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d6:	f7ff bc37 	b.w	8005048 <_malloc_r>
 80057da:	b92a      	cbnz	r2, 80057e8 <_realloc_r+0x24>
 80057dc:	f7ff fbcc 	bl	8004f78 <_free_r>
 80057e0:	4625      	mov	r5, r4
 80057e2:	4628      	mov	r0, r5
 80057e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e8:	f000 f81b 	bl	8005822 <_malloc_usable_size_r>
 80057ec:	4284      	cmp	r4, r0
 80057ee:	4607      	mov	r7, r0
 80057f0:	d802      	bhi.n	80057f8 <_realloc_r+0x34>
 80057f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057f6:	d812      	bhi.n	800581e <_realloc_r+0x5a>
 80057f8:	4621      	mov	r1, r4
 80057fa:	4640      	mov	r0, r8
 80057fc:	f7ff fc24 	bl	8005048 <_malloc_r>
 8005800:	4605      	mov	r5, r0
 8005802:	2800      	cmp	r0, #0
 8005804:	d0ed      	beq.n	80057e2 <_realloc_r+0x1e>
 8005806:	42bc      	cmp	r4, r7
 8005808:	4622      	mov	r2, r4
 800580a:	4631      	mov	r1, r6
 800580c:	bf28      	it	cs
 800580e:	463a      	movcs	r2, r7
 8005810:	f7ff ffca 	bl	80057a8 <memcpy>
 8005814:	4631      	mov	r1, r6
 8005816:	4640      	mov	r0, r8
 8005818:	f7ff fbae 	bl	8004f78 <_free_r>
 800581c:	e7e1      	b.n	80057e2 <_realloc_r+0x1e>
 800581e:	4635      	mov	r5, r6
 8005820:	e7df      	b.n	80057e2 <_realloc_r+0x1e>

08005822 <_malloc_usable_size_r>:
 8005822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005826:	1f18      	subs	r0, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	bfbc      	itt	lt
 800582c:	580b      	ldrlt	r3, [r1, r0]
 800582e:	18c0      	addlt	r0, r0, r3
 8005830:	4770      	bx	lr
	...

08005834 <_init>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	bf00      	nop
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr

08005840 <_fini>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	bf00      	nop
 8005844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005846:	bc08      	pop	{r3}
 8005848:	469e      	mov	lr, r3
 800584a:	4770      	bx	lr
