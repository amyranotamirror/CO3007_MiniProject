
PEDESTRIAN_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000520c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005318  08005318  00015318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005398  08005398  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08005398  08005398  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005398  08005398  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080053a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  200000b0  08005450  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08005450  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d154  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000242c  00000000  00000000  0002d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad0  00000000  00000000  00030498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019094  00000000  00000000  00030f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010df9  00000000  00000000  00049ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a3ff  00000000  00000000  0005adf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041c8  00000000  00000000  000e51f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e93bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005300 	.word	0x08005300

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08005300 	.word	0x08005300

0800014c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	; (8000240 <buttonReading+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	; (8000244 <buttonReading+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	; (8000248 <buttonReading+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	; (8000240 <buttonReading+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <buttonReading+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	; (8000250 <buttonReading+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f001 fe4b 	bl	8001e20 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <buttonReading+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2c      	ldr	r2, [pc, #176]	; (8000248 <buttonReading+0xfc>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	; (8000240 <buttonReading+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d143      	bne.n	800022a <buttonReading+0xde>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a28      	ldr	r2, [pc, #160]	; (8000248 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <buttonReading+0xf8>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d13b      	bne.n	800022a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a27      	ldr	r2, [pc, #156]	; (8000254 <buttonReading+0x108>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4923      	ldr	r1, [pc, #140]	; (8000248 <buttonReading+0xfc>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	; (8000248 <buttonReading+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	; (8000254 <buttonReading+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a20      	ldr	r2, [pc, #128]	; (8000254 <buttonReading+0x108>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d128      	bne.n	800022a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <buttonReading+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / SCH_TIMERTICK;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <buttonReading+0x110>)
 80001e4:	2164      	movs	r1, #100	; 0x64
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001ea:	e01e      	b.n	800022a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <buttonReading+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d119      	bne.n	800022a <buttonReading+0xde>
					buttonCounters[i] --;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <buttonReading+0x110>)
 80001fa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80001fe:	b292      	uxth	r2, r2
 8000200:	3a01      	subs	r2, #1
 8000202:	b292      	uxth	r2, r2
 8000204:	b211      	sxth	r1, r2
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <buttonReading+0x110>)
 8000208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <buttonReading+0x110>)
 8000210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dc08      	bgt.n	800022a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <buttonReading+0x10c>)
 800021c:	2101      	movs	r1, #1
 800021e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / SCH_TIMERTICK;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a0e      	ldr	r2, [pc, #56]	; (800025c <buttonReading+0x110>)
 8000224:	2132      	movs	r1, #50	; 0x32
 8000226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d990      	bls.n	8000158 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	200000d4 	.word	0x200000d4
 8000244:	200000d8 	.word	0x200000d8
 8000248:	200000d0 	.word	0x200000d0
 800024c:	20000000 	.word	0x20000000
 8000250:	20000010 	.word	0x20000010
 8000254:	200000cc 	.word	0x200000cc
 8000258:	200000dc 	.word	0x200000dc
 800025c:	200000e0 	.word	0x200000e0

08000260 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d901      	bls.n	8000274 <buttonPressed+0x14>
 8000270:	2300      	movs	r3, #0
 8000272:	e00b      	b.n	800028c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <buttonPressed+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d105      	bne.n	800028a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a05      	ldr	r2, [pc, #20]	; (8000298 <buttonPressed+0x38>)
 8000282:	2100      	movs	r1, #0
 8000284:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <buttonPressed+0x2c>
	}
	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	200000dc 	.word	0x200000dc

0800029c <fsmAuto>:

static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmAuto(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	fsmAutoIDs[0] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80002a0:	4b3a      	ldr	r3, [pc, #232]	; (800038c <fsmAuto+0xf0>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b3a      	ldr	r3, [pc, #232]	; (8000390 <fsmAuto+0xf4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	441a      	add	r2, r3
 80002aa:	4b3a      	ldr	r3, [pc, #232]	; (8000394 <fsmAuto+0xf8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4413      	add	r3, r2
 80002b0:	461a      	mov	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	4838      	ldr	r0, [pc, #224]	; (8000398 <fsmAuto+0xfc>)
 80002b6:	f000 fc2d 	bl	8000b14 <SCH_AddTask>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4b37      	ldr	r3, [pc, #220]	; (800039c <fsmAuto+0x100>)
 80002c0:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80002c2:	4b32      	ldr	r3, [pc, #200]	; (800038c <fsmAuto+0xf0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4619      	mov	r1, r3
 80002c8:	4b30      	ldr	r3, [pc, #192]	; (800038c <fsmAuto+0xf0>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b30      	ldr	r3, [pc, #192]	; (8000390 <fsmAuto+0xf4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	441a      	add	r2, r3
 80002d2:	4b30      	ldr	r3, [pc, #192]	; (8000394 <fsmAuto+0xf8>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4413      	add	r3, r2
 80002d8:	461a      	mov	r2, r3
 80002da:	4831      	ldr	r0, [pc, #196]	; (80003a0 <fsmAuto+0x104>)
 80002dc:	f000 fc1a 	bl	8000b14 <SCH_AddTask>
 80002e0:	4603      	mov	r3, r0
 80002e2:	461a      	mov	r2, r3
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <fsmAuto+0x100>)
 80002e6:	705a      	strb	r2, [r3, #1]
	fsmAutoIDs[2] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <fsmAuto+0xf0>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	4b28      	ldr	r3, [pc, #160]	; (8000390 <fsmAuto+0xf4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4413      	add	r3, r2
 80002f2:	4619      	mov	r1, r3
 80002f4:	4b25      	ldr	r3, [pc, #148]	; (800038c <fsmAuto+0xf0>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b25      	ldr	r3, [pc, #148]	; (8000390 <fsmAuto+0xf4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	441a      	add	r2, r3
 80002fe:	4b25      	ldr	r3, [pc, #148]	; (8000394 <fsmAuto+0xf8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4413      	add	r3, r2
 8000304:	461a      	mov	r2, r3
 8000306:	4827      	ldr	r0, [pc, #156]	; (80003a4 <fsmAuto+0x108>)
 8000308:	f000 fc04 	bl	8000b14 <SCH_AddTask>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <fsmAuto+0x100>)
 8000312:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000314:	4b1d      	ldr	r3, [pc, #116]	; (800038c <fsmAuto+0xf0>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <fsmAuto+0xf4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	441a      	add	r2, r3
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <fsmAuto+0xf8>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4413      	add	r3, r2
 8000324:	461a      	mov	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	481f      	ldr	r0, [pc, #124]	; (80003a8 <fsmAuto+0x10c>)
 800032a:	f000 fbf3 	bl	8000b14 <SCH_AddTask>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <fsmAuto+0x100>)
 8000334:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <fsmAuto+0xf8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4619      	mov	r1, r3
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <fsmAuto+0xf0>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <fsmAuto+0xf4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	441a      	add	r2, r3
 8000346:	4b13      	ldr	r3, [pc, #76]	; (8000394 <fsmAuto+0xf8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4413      	add	r3, r2
 800034c:	461a      	mov	r2, r3
 800034e:	4817      	ldr	r0, [pc, #92]	; (80003ac <fsmAuto+0x110>)
 8000350:	f000 fbe0 	bl	8000b14 <SCH_AddTask>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <fsmAuto+0x100>)
 800035a:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <fsmAuto+0xf8>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <fsmAuto+0xf4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4413      	add	r3, r2
 8000366:	4619      	mov	r1, r3
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <fsmAuto+0xf0>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <fsmAuto+0xf4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	441a      	add	r2, r3
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <fsmAuto+0xf8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4413      	add	r3, r2
 8000378:	461a      	mov	r2, r3
 800037a:	480d      	ldr	r0, [pc, #52]	; (80003b0 <fsmAuto+0x114>)
 800037c:	f000 fbca 	bl	8000b14 <SCH_AddTask>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <fsmAuto+0x100>)
 8000386:	715a      	strb	r2, [r3, #5]
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000001c 	.word	0x2000001c
 8000390:	20000020 	.word	0x20000020
 8000394:	20000024 	.word	0x20000024
 8000398:	08001639 	.word	0x08001639
 800039c:	200000ec 	.word	0x200000ec
 80003a0:	08001659 	.word	0x08001659
 80003a4:	08001649 	.word	0x08001649
 80003a8:	08001689 	.word	0x08001689
 80003ac:	08001679 	.word	0x08001679
 80003b0:	08001669 	.word	0x08001669

080003b4 <fsmManual>:

void fsmManual(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff ff51 	bl	8000260 <buttonPressed>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d022      	beq.n	800040a <fsmManual+0x56>
		switch (trafficState[0]) {
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <fsmManual+0xac>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	d012      	beq.n	80003f2 <fsmManual+0x3e>
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	dc16      	bgt.n	80003fe <fsmManual+0x4a>
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d002      	beq.n	80003da <fsmManual+0x26>
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d006      	beq.n	80003e6 <fsmManual+0x32>
 80003d8:	e011      	b.n	80003fe <fsmManual+0x4a>
		case TRAFFIC_RED:
			SCH_AddTask(traffic0Yellow, 0, 0);
 80003da:	2200      	movs	r2, #0
 80003dc:	2100      	movs	r1, #0
 80003de:	4821      	ldr	r0, [pc, #132]	; (8000464 <fsmManual+0xb0>)
 80003e0:	f000 fb98 	bl	8000b14 <SCH_AddTask>
			break;
 80003e4:	e011      	b.n	800040a <fsmManual+0x56>
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Green, 0, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2100      	movs	r1, #0
 80003ea:	481f      	ldr	r0, [pc, #124]	; (8000468 <fsmManual+0xb4>)
 80003ec:	f000 fb92 	bl	8000b14 <SCH_AddTask>
			break;
 80003f0:	e00b      	b.n	800040a <fsmManual+0x56>
		case TRAFFIC_GREEN:
			SCH_AddTask(traffic0Red, 0, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2100      	movs	r1, #0
 80003f6:	481d      	ldr	r0, [pc, #116]	; (800046c <fsmManual+0xb8>)
 80003f8:	f000 fb8c 	bl	8000b14 <SCH_AddTask>
			break;
 80003fc:	e005      	b.n	800040a <fsmManual+0x56>
		default:
			SCH_AddTask(traffic0Red, 0, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	481a      	ldr	r0, [pc, #104]	; (800046c <fsmManual+0xb8>)
 8000404:	f000 fb86 	bl	8000b14 <SCH_AddTask>
			break;
 8000408:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 800040a:	2002      	movs	r0, #2
 800040c:	f7ff ff28 	bl	8000260 <buttonPressed>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d022      	beq.n	800045c <fsmManual+0xa8>
		switch (trafficState[1]) {
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <fsmManual+0xac>)
 8000418:	785b      	ldrb	r3, [r3, #1]
 800041a:	2b03      	cmp	r3, #3
 800041c:	d012      	beq.n	8000444 <fsmManual+0x90>
 800041e:	2b03      	cmp	r3, #3
 8000420:	dc16      	bgt.n	8000450 <fsmManual+0x9c>
 8000422:	2b01      	cmp	r3, #1
 8000424:	d002      	beq.n	800042c <fsmManual+0x78>
 8000426:	2b02      	cmp	r3, #2
 8000428:	d006      	beq.n	8000438 <fsmManual+0x84>
 800042a:	e011      	b.n	8000450 <fsmManual+0x9c>
		case TRAFFIC_RED:
			SCH_AddTask(traffic1Yellow, 0, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	2100      	movs	r1, #0
 8000430:	480f      	ldr	r0, [pc, #60]	; (8000470 <fsmManual+0xbc>)
 8000432:	f000 fb6f 	bl	8000b14 <SCH_AddTask>
			break;
 8000436:	e011      	b.n	800045c <fsmManual+0xa8>
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Green, 0, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	2100      	movs	r1, #0
 800043c:	480d      	ldr	r0, [pc, #52]	; (8000474 <fsmManual+0xc0>)
 800043e:	f000 fb69 	bl	8000b14 <SCH_AddTask>
			break;
 8000442:	e00b      	b.n	800045c <fsmManual+0xa8>
		case TRAFFIC_GREEN:
			SCH_AddTask(traffic1Red, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <fsmManual+0xc4>)
 800044a:	f000 fb63 	bl	8000b14 <SCH_AddTask>
			break;
 800044e:	e005      	b.n	800045c <fsmManual+0xa8>
		default:
			SCH_AddTask(traffic1Green, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	4807      	ldr	r0, [pc, #28]	; (8000474 <fsmManual+0xc0>)
 8000456:	f000 fb5d 	bl	8000b14 <SCH_AddTask>
			break;
 800045a:	bf00      	nop
		}
	}
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	2000031c 	.word	0x2000031c
 8000464:	08001649 	.word	0x08001649
 8000468:	08001659 	.word	0x08001659
 800046c:	08001639 	.word	0x08001639
 8000470:	08001679 	.word	0x08001679
 8000474:	08001689 	.word	0x08001689
 8000478:	08001669 	.word	0x08001669

0800047c <fsmTunning>:

void fsmTunning(void) {}
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <fsmProcessing>:

void fsmProcessing(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
	if (buttonPressed(0)) {
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff fee6 	bl	8000260 <buttonPressed>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d05b      	beq.n	8000552 <fsmProcessing+0xca>
		switch (fsmState) {
 800049a:	4b30      	ldr	r3, [pc, #192]	; (800055c <fsmProcessing+0xd4>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d03e      	beq.n	8000520 <fsmProcessing+0x98>
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	dc54      	bgt.n	8000550 <fsmProcessing+0xc8>
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d002      	beq.n	80004b0 <fsmProcessing+0x28>
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d01c      	beq.n	80004e8 <fsmProcessing+0x60>
			}
			SCH_AddTask(fsmAuto, 0, 0);
			fsmState = FSM_AUTO;
			break;
		default:
			break;
 80004ae:	e04f      	b.n	8000550 <fsmProcessing+0xc8>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 80004b0:	2300      	movs	r3, #0
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	e008      	b.n	80004c8 <fsmProcessing+0x40>
				SCH_DeleteTask(fsmAutoIDs[i]);
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	4a29      	ldr	r2, [pc, #164]	; (8000560 <fsmProcessing+0xd8>)
 80004ba:	5cd3      	ldrb	r3, [r2, r3]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fc2f 	bl	8000d20 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	3301      	adds	r3, #1
 80004c6:	71fb      	strb	r3, [r7, #7]
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b05      	cmp	r3, #5
 80004cc:	d9f3      	bls.n	80004b6 <fsmProcessing+0x2e>
			fsmManualIDs[0] = SCH_AddTask(fsmManual, 0, 10);
 80004ce:	220a      	movs	r2, #10
 80004d0:	2100      	movs	r1, #0
 80004d2:	4824      	ldr	r0, [pc, #144]	; (8000564 <fsmProcessing+0xdc>)
 80004d4:	f000 fb1e 	bl	8000b14 <SCH_AddTask>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4b22      	ldr	r3, [pc, #136]	; (8000568 <fsmProcessing+0xe0>)
 80004de:	701a      	strb	r2, [r3, #0]
			fsmState = FSM_MANUAL;
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <fsmProcessing+0xd4>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
			break;
 80004e6:	e034      	b.n	8000552 <fsmProcessing+0xca>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 80004e8:	2300      	movs	r3, #0
 80004ea:	71bb      	strb	r3, [r7, #6]
 80004ec:	e008      	b.n	8000500 <fsmProcessing+0x78>
				SCH_DeleteTask(fsmManualIDs[i]);
 80004ee:	79bb      	ldrb	r3, [r7, #6]
 80004f0:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <fsmProcessing+0xe0>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fc13 	bl	8000d20 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 80004fa:	79bb      	ldrb	r3, [r7, #6]
 80004fc:	3301      	adds	r3, #1
 80004fe:	71bb      	strb	r3, [r7, #6]
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f3      	beq.n	80004ee <fsmProcessing+0x66>
			fsmTunningIDs[0] = SCH_AddTask(fsmTunning, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	4818      	ldr	r0, [pc, #96]	; (800056c <fsmProcessing+0xe4>)
 800050c:	f000 fb02 	bl	8000b14 <SCH_AddTask>
 8000510:	4603      	mov	r3, r0
 8000512:	461a      	mov	r2, r3
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <fsmProcessing+0xe8>)
 8000516:	701a      	strb	r2, [r3, #0]
			fsmState = FSM_TUNNING;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <fsmProcessing+0xd4>)
 800051a:	2202      	movs	r2, #2
 800051c:	701a      	strb	r2, [r3, #0]
			break;
 800051e:	e018      	b.n	8000552 <fsmProcessing+0xca>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000520:	2300      	movs	r3, #0
 8000522:	717b      	strb	r3, [r7, #5]
 8000524:	e008      	b.n	8000538 <fsmProcessing+0xb0>
				SCH_DeleteTask(fsmTunningIDs[i]);
 8000526:	797b      	ldrb	r3, [r7, #5]
 8000528:	4a11      	ldr	r2, [pc, #68]	; (8000570 <fsmProcessing+0xe8>)
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fbf7 	bl	8000d20 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000532:	797b      	ldrb	r3, [r7, #5]
 8000534:	3301      	adds	r3, #1
 8000536:	717b      	strb	r3, [r7, #5]
 8000538:	797b      	ldrb	r3, [r7, #5]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f3      	beq.n	8000526 <fsmProcessing+0x9e>
			SCH_AddTask(fsmAuto, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <fsmProcessing+0xec>)
 8000544:	f000 fae6 	bl	8000b14 <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <fsmProcessing+0xd4>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
			break;
 800054e:	e000      	b.n	8000552 <fsmProcessing+0xca>
			break;
 8000550:	bf00      	nop
		}
	}
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000e8 	.word	0x200000e8
 8000560:	200000ec 	.word	0x200000ec
 8000564:	080003b5 	.word	0x080003b5
 8000568:	200000f4 	.word	0x200000f4
 800056c:	0800047d 	.word	0x0800047d
 8000570:	200000f8 	.word	0x200000f8
 8000574:	0800029d 	.word	0x0800029d

08000578 <ledBlink>:
 *      Author: Nhat Khai
 */

#include "led.h"

void ledBlink(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800057c:	2120      	movs	r1, #32
 800057e:	4802      	ldr	r0, [pc, #8]	; (8000588 <ledBlink+0x10>)
 8000580:	f001 fc7d 	bl	8001e7e <HAL_GPIO_TogglePin>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40010800 	.word	0x40010800

0800058c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a08      	ldr	r2, [pc, #32]	; (80005bc <HAL_UART_RxCpltCallback+0x30>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d10a      	bne.n	80005b4 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	4907      	ldr	r1, [pc, #28]	; (80005c0 <HAL_UART_RxCpltCallback+0x34>)
 80005a2:	4808      	ldr	r0, [pc, #32]	; (80005c4 <HAL_UART_RxCpltCallback+0x38>)
 80005a4:	f002 fff1 	bl	800358a <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 80005a8:	2332      	movs	r3, #50	; 0x32
 80005aa:	2201      	movs	r2, #1
 80005ac:	4904      	ldr	r1, [pc, #16]	; (80005c0 <HAL_UART_RxCpltCallback+0x34>)
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <HAL_UART_RxCpltCallback+0x38>)
 80005b0:	f002 ff68 	bl	8003484 <HAL_UART_Transmit>
	}
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40004400 	.word	0x40004400
 80005c0:	200001d4 	.word	0x200001d4
 80005c4:	2000018c 	.word	0x2000018c

080005c8 <reportPrint>:
void reportPrint(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
	char str[10];
	uint8_t count = SCH_Report();
 80005ce:	f000 fd6f 	bl	80010b0 <SCH_Report>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tasks: %u\r\n", count), 100);
 80005d6:	7bfa      	ldrb	r2, [r7, #15]
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4907      	ldr	r1, [pc, #28]	; (80005f8 <reportPrint+0x30>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fe4d 	bl	800427c <siprintf>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	1d39      	adds	r1, r7, #4
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <reportPrint+0x34>)
 80005ec:	f002 ff4a 	bl	8003484 <HAL_UART_Transmit>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08005318 	.word	0x08005318
 80005fc:	2000018c 	.word	0x2000018c

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f001 f86e 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f83a 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f96c 	bl	80008e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000610:	f000 f872 	bl	80006f8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000614:	f000 f93e 	bl	8000894 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000618:	f000 f8ba 	bl	8000790 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800061c:	4811      	ldr	r0, [pc, #68]	; (8000664 <main+0x64>)
 800061e:	f002 f8a7 	bl	8002770 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000622:	2201      	movs	r2, #1
 8000624:	4910      	ldr	r1, [pc, #64]	; (8000668 <main+0x68>)
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <main+0x6c>)
 8000628:	f002 ffaf 	bl	800358a <HAL_UART_Receive_IT>
  SCH_Init();
 800062c:	f000 f9e0 	bl	80009f0 <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(ledBlink, 0, 1000);
 8000630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000634:	2100      	movs	r1, #0
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <main+0x70>)
 8000638:	f000 fa6c 	bl	8000b14 <SCH_AddTask>
  SCH_AddTask(buttonReading, 0, 10);
 800063c:	220a      	movs	r2, #10
 800063e:	2100      	movs	r1, #0
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <main+0x74>)
 8000642:	f000 fa67 	bl	8000b14 <SCH_AddTask>
  SCH_AddTask(fsmProcessing, 0, 10);
 8000646:	220a      	movs	r2, #10
 8000648:	2100      	movs	r1, #0
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <main+0x78>)
 800064c:	f000 fa62 	bl	8000b14 <SCH_AddTask>
  SCH_AddTask(reportPrint, 500, 1000);
 8000650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000654:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <main+0x7c>)
 800065a:	f000 fa5b 	bl	8000b14 <SCH_AddTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch();
 800065e:	f000 fa37 	bl	8000ad0 <SCH_Dispatch>
 8000662:	e7fc      	b.n	800065e <main+0x5e>
 8000664:	200000fc 	.word	0x200000fc
 8000668:	200001d4 	.word	0x200001d4
 800066c:	2000018c 	.word	0x2000018c
 8000670:	08000579 	.word	0x08000579
 8000674:	0800014d 	.word	0x0800014d
 8000678:	08000489 	.word	0x08000489
 800067c:	080005c9 	.word	0x080005c9

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	; 0x40
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2228      	movs	r2, #40	; 0x28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fe57 	bl	8004342 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	2310      	movs	r3, #16
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fbfa 	bl	8001eb0 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006c2:	f000 f990 	bl	80009e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fe68 	bl	80023b4 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f97c 	bl	80009e6 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3740      	adds	r7, #64	; 0x40
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_TIM2_Init+0x94>)
 8000716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_TIM2_Init+0x94>)
 800071e:	2201      	movs	r2, #1
 8000720:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_TIM2_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_TIM2_Init+0x94>)
 800072a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800072e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_TIM2_Init+0x94>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_TIM2_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <MX_TIM2_Init+0x94>)
 800073e:	f001 ffc7 	bl	80026d0 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000748:	f000 f94d 	bl	80009e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4619      	mov	r1, r3
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_TIM2_Init+0x94>)
 800075a:	f002 fa77 	bl	8002c4c <HAL_TIM_ConfigClockSource>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000764:	f000 f93f 	bl	80009e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_TIM2_Init+0x94>)
 8000776:	f002 fdcb 	bl	8003310 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f931 	bl	80009e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000fc 	.word	0x200000fc

08000790 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	; 0x38
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007c0:	4b32      	ldr	r3, [pc, #200]	; (800088c <MX_TIM3_Init+0xfc>)
 80007c2:	4a33      	ldr	r2, [pc, #204]	; (8000890 <MX_TIM3_Init+0x100>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_TIM3_Init+0xfc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_TIM3_Init+0xfc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <MX_TIM3_Init+0xfc>)
 80007d4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80007d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_TIM3_Init+0xfc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_TIM3_Init+0xfc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007e6:	4829      	ldr	r0, [pc, #164]	; (800088c <MX_TIM3_Init+0xfc>)
 80007e8:	f001 ff72 	bl	80026d0 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80007f2:	f000 f8f8 	bl	80009e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000800:	4619      	mov	r1, r3
 8000802:	4822      	ldr	r0, [pc, #136]	; (800088c <MX_TIM3_Init+0xfc>)
 8000804:	f002 fa22 	bl	8002c4c <HAL_TIM_ConfigClockSource>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800080e:	f000 f8ea 	bl	80009e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000812:	481e      	ldr	r0, [pc, #120]	; (800088c <MX_TIM3_Init+0xfc>)
 8000814:	f001 fff8 	bl	8002808 <HAL_TIM_PWM_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800081e:	f000 f8e2 	bl	80009e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	4619      	mov	r1, r3
 8000830:	4816      	ldr	r0, [pc, #88]	; (800088c <MX_TIM3_Init+0xfc>)
 8000832:	f002 fd6d 	bl	8003310 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800083c:	f000 f8d3 	bl	80009e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000840:	2360      	movs	r3, #96	; 0x60
 8000842:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_TIM3_Init+0xfc>)
 8000858:	f002 f936 	bl	8002ac8 <HAL_TIM_PWM_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000862:	f000 f8c0 	bl	80009e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2204      	movs	r2, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM3_Init+0xfc>)
 800086e:	f002 f92b 	bl	8002ac8 <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000878:	f000 f8b5 	bl	80009e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM3_Init+0xfc>)
 800087e:	f000 fc9d 	bl	80011bc <HAL_TIM_MspPostInit>

}
 8000882:	bf00      	nop
 8000884:	3738      	adds	r7, #56	; 0x38
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000144 	.word	0x20000144
 8000890:	40000400 	.word	0x40000400

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f002 fd8a 	bl	80033e4 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f886 	bl	80009e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000018c 	.word	0x2000018c
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <MX_GPIO_Init+0xd4>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a2e      	ldr	r2, [pc, #184]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_GPIO_Init+0xd4>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a28      	ldr	r2, [pc, #160]	; (80009bc <MX_GPIO_Init+0xd4>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_GPIO_Init+0xd4>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2120      	movs	r1, #32
 8000930:	4823      	ldr	r0, [pc, #140]	; (80009c0 <MX_GPIO_Init+0xd8>)
 8000932:	f001 fa8c 	bl	8001e4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|GPIO_PIN_2|GPIO_PIN_10
 8000936:	2200      	movs	r2, #0
 8000938:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800093c:	4821      	ldr	r0, [pc, #132]	; (80009c4 <MX_GPIO_Init+0xdc>)
 800093e:	f001 fa86 	bl	8001e4e <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin|TRAFFIC1_GREEN_Pin
                          |GPIO_PIN_15|GPIO_PIN_3|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin
                          |TRAFFIC0_GREEN_Pin|GPIO_PIN_7|PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000942:	2320      	movs	r3, #32
 8000944:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094a:	2301      	movs	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2302      	movs	r3, #2
 8000950:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	4619      	mov	r1, r3
 8000958:	4819      	ldr	r0, [pc, #100]	; (80009c0 <MX_GPIO_Init+0xd8>)
 800095a:	f001 f8e5 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDESTRIAN0_RED_Pin PEDESTRIAN0_GREEN_Pin TRAFFIC1_RED_Pin TRAFFIC1_YELLOW_Pin
                           TRAFFIC1_GREEN_Pin TRAFFIC0_RED_Pin TRAFFIC0_YELLOW_Pin TRAFFIC0_GREEN_Pin
                           PEDESTRIAN1_RED_Pin PEDESTRIAN1_GREEN_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin
 800095e:	f247 3373 	movw	r3, #29555	; 0x7373
 8000962:	60bb      	str	r3, [r7, #8]
                          |TRAFFIC1_GREEN_Pin|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin|TRAFFIC0_GREEN_Pin
                          |PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000968:	2301      	movs	r3, #1
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2302      	movs	r3, #2
 800096e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4619      	mov	r1, r3
 8000976:	4813      	ldr	r0, [pc, #76]	; (80009c4 <MX_GPIO_Init+0xdc>)
 8000978:	f001 f8d6 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB15
                           PB3 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 800097c:	f648 438c 	movw	r3, #35980	; 0x8c8c
 8000980:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000986:	2302      	movs	r3, #2
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2302      	movs	r3, #2
 800098c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	4619      	mov	r1, r3
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <MX_GPIO_Init+0xdc>)
 8000996:	f001 f8c7 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 800099a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800099e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	4619      	mov	r1, r3
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0xd8>)
 80009b0:	f001 f8ba 	bl	8001b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b4:	bf00      	nop
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d8:	d101      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 80009da:	f000 f853 	bl	8000a84 <SCH_Update>
	}
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ea:	b672      	cpsid	i
}
 80009ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ee:	e7fe      	b.n	80009ee <Error_Handler+0x8>

080009f0 <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	e037      	b.n	8000a6c <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 80009fc:	79fa      	ldrb	r2, [r7, #7]
 80009fe:	4920      	ldr	r1, [pc, #128]	; (8000a80 <SCH_Init+0x90>)
 8000a00:	4613      	mov	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i - 1;
 8000a0e:	79fa      	ldrb	r2, [r7, #7]
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f1c3 030f 	rsb	r3, r3, #15
 8000a16:	b2d8      	uxtb	r0, r3
 8000a18:	4919      	ldr	r1, [pc, #100]	; (8000a80 <SCH_Init+0x90>)
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	440b      	add	r3, r1
 8000a24:	3304      	adds	r3, #4
 8000a26:	4602      	mov	r2, r0
 8000a28:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	4914      	ldr	r1, [pc, #80]	; (8000a80 <SCH_Init+0x90>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 8000a3e:	79fa      	ldrb	r2, [r7, #7]
 8000a40:	490f      	ldr	r1, [pc, #60]	; (8000a80 <SCH_Init+0x90>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	330c      	adds	r3, #12
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	490a      	ldr	r1, [pc, #40]	; (8000a80 <SCH_Init+0x90>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	440b      	add	r3, r1
 8000a60:	3310      	adds	r3, #16
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b0f      	cmp	r3, #15
 8000a70:	d9c4      	bls.n	80009fc <SCH_Init+0xc>
    }
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200001d8 	.word	0x200001d8

08000a84 <SCH_Update>:

void SCH_Update(void) {
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <SCH_Update+0x48>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d018      	beq.n	8000ac2 <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <SCH_Update+0x48>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00c      	beq.n	8000ab2 <SCH_Update+0x2e>
		if (tasks[0].delay > SCH_TIMERTICK) {
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <SCH_Update+0x48>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	2b0a      	cmp	r3, #10
 8000a9e:	d905      	bls.n	8000aac <SCH_Update+0x28>
			tasks[0].delay -= SCH_TIMERTICK;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <SCH_Update+0x48>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	3b0a      	subs	r3, #10
 8000aa6:	4a09      	ldr	r2, [pc, #36]	; (8000acc <SCH_Update+0x48>)
 8000aa8:	6093      	str	r3, [r2, #8]
 8000aaa:	e002      	b.n	8000ab2 <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <SCH_Update+0x48>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SCH_Update+0x48>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d104      	bne.n	8000ac4 <SCH_Update+0x40>
		tasks[0].flag = 1;
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SCH_Update+0x48>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	741a      	strb	r2, [r3, #16]
 8000ac0:	e000      	b.n	8000ac4 <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 8000ac2:	bf00      	nop
	}
}
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200001d8 	.word	0x200001d8

08000ad0 <SCH_Dispatch>:

void SCH_Dispatch(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <SCH_Dispatch+0x3c>)
 8000ad6:	7c1b      	ldrb	r3, [r3, #16]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d015      	beq.n	8000b08 <SCH_Dispatch+0x38>
    printf("Dispatch Task %d\n", tasks[0].id);
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <SCH_Dispatch+0x3c>)
 8000ade:	791b      	ldrb	r3, [r3, #4]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <SCH_Dispatch+0x40>)
 8000ae4:	f003 fbb8 	bl	8004258 <iprintf>
    (*tasks[0].functionPointer)();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <SCH_Dispatch+0x3c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4798      	blx	r3
    if (tasks[0].period > 0) {
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <SCH_Dispatch+0x3c>)
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <SCH_Dispatch+0x2c>
        SCH_RefreshTask();
 8000af6:	f000 f9a5 	bl	8000e44 <SCH_RefreshTask>
 8000afa:	e006      	b.n	8000b0a <SCH_Dispatch+0x3a>
    }
    else {
        SCH_DeleteTask(tasks[0].id);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <SCH_Dispatch+0x3c>)
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f90d 	bl	8000d20 <SCH_DeleteTask>
 8000b06:	e000      	b.n	8000b0a <SCH_Dispatch+0x3a>
    if (tasks[0].flag == 0) return;
 8000b08:	bf00      	nop
    }
}
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200001d8 	.word	0x200001d8
 8000b10:	08005324 	.word	0x08005324

08000b14 <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 8000b14:	b4b0      	push	{r4, r5, r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return SCH_TASKNUMBER;
 8000b20:	4b7e      	ldr	r3, [pc, #504]	; (8000d1c <SCH_AddTask+0x208>)
 8000b22:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SCH_AddTask+0x1a>
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	e0f1      	b.n	8000d12 <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 8000b2e:	4b7b      	ldr	r3, [pc, #492]	; (8000d1c <SCH_AddTask+0x208>)
 8000b30:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8000b34:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	76fb      	strb	r3, [r7, #27]
 8000b3e:	e0e3      	b.n	8000d08 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 8000b40:	7efa      	ldrb	r2, [r7, #27]
 8000b42:	4976      	ldr	r1, [pc, #472]	; (8000d1c <SCH_AddTask+0x208>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	3308      	adds	r3, #8
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	69fa      	ldr	r2, [r7, #28]
 8000b54:	4413      	add	r3, r2
 8000b56:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8000b58:	69fa      	ldr	r2, [r7, #28]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d80a      	bhi.n	8000b76 <SCH_AddTask+0x62>
 8000b60:	7efa      	ldrb	r2, [r7, #27]
 8000b62:	496e      	ldr	r1, [pc, #440]	; (8000d1c <SCH_AddTask+0x208>)
 8000b64:	4613      	mov	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f040 80c6 	bne.w	8000d02 <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8000b76:	230f      	movs	r3, #15
 8000b78:	76bb      	strb	r3, [r7, #26]
 8000b7a:	e017      	b.n	8000bac <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 8000b7c:	7ebb      	ldrb	r3, [r7, #26]
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	7eb9      	ldrb	r1, [r7, #26]
 8000b82:	4866      	ldr	r0, [pc, #408]	; (8000d1c <SCH_AddTask+0x208>)
 8000b84:	460b      	mov	r3, r1
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	440b      	add	r3, r1
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4418      	add	r0, r3
 8000b8e:	4963      	ldr	r1, [pc, #396]	; (8000d1c <SCH_AddTask+0x208>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	440b      	add	r3, r1
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	461d      	mov	r5, r3
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba2:	682b      	ldr	r3, [r5, #0]
 8000ba4:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8000ba6:	7ebb      	ldrb	r3, [r7, #26]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	76bb      	strb	r3, [r7, #26]
 8000bac:	7eba      	ldrb	r2, [r7, #26]
 8000bae:	7efb      	ldrb	r3, [r7, #27]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d8e3      	bhi.n	8000b7c <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 8000bb4:	7efa      	ldrb	r2, [r7, #27]
 8000bb6:	4959      	ldr	r1, [pc, #356]	; (8000d1c <SCH_AddTask+0x208>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 8000bc6:	7efa      	ldrb	r2, [r7, #27]
 8000bc8:	4954      	ldr	r1, [pc, #336]	; (8000d1c <SCH_AddTask+0x208>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	7e7a      	ldrb	r2, [r7, #25]
 8000bd8:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 8000bda:	7efa      	ldrb	r2, [r7, #27]
 8000bdc:	494f      	ldr	r1, [pc, #316]	; (8000d1c <SCH_AddTask+0x208>)
 8000bde:	4613      	mov	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	330c      	adds	r3, #12
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 8000bee:	7efa      	ldrb	r2, [r7, #27]
 8000bf0:	494a      	ldr	r1, [pc, #296]	; (8000d1c <SCH_AddTask+0x208>)
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3310      	adds	r3, #16
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d950      	bls.n	8000cac <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 8000c12:	7efb      	ldrb	r3, [r7, #27]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	4941      	ldr	r1, [pc, #260]	; (8000d1c <SCH_AddTask+0x208>)
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	3308      	adds	r3, #8
 8000c24:	6819      	ldr	r1, [r3, #0]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	7efa      	ldrb	r2, [r7, #27]
 8000c2a:	1ac9      	subs	r1, r1, r3
 8000c2c:	483b      	ldr	r0, [pc, #236]	; (8000d1c <SCH_AddTask+0x208>)
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4403      	add	r3, r0
 8000c38:	3308      	adds	r3, #8
 8000c3a:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000c3c:	7efa      	ldrb	r2, [r7, #27]
 8000c3e:	4937      	ldr	r1, [pc, #220]	; (8000d1c <SCH_AddTask+0x208>)
 8000c40:	4613      	mov	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	440b      	add	r3, r1
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d109      	bne.n	8000c66 <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 8000c52:	7efa      	ldrb	r2, [r7, #27]
 8000c54:	4931      	ldr	r1, [pc, #196]	; (8000d1c <SCH_AddTask+0x208>)
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	440b      	add	r3, r1
 8000c60:	3310      	adds	r3, #16
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8000c66:	7efb      	ldrb	r3, [r7, #27]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	6979      	ldr	r1, [r7, #20]
 8000c6c:	482b      	ldr	r0, [pc, #172]	; (8000d1c <SCH_AddTask+0x208>)
 8000c6e:	4613      	mov	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4403      	add	r3, r0
 8000c78:	3308      	adds	r3, #8
 8000c7a:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 8000c7c:	7efb      	ldrb	r3, [r7, #27]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	4926      	ldr	r1, [pc, #152]	; (8000d1c <SCH_AddTask+0x208>)
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d12c      	bne.n	8000cee <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 8000c94:	7efb      	ldrb	r3, [r7, #27]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	4920      	ldr	r1, [pc, #128]	; (8000d1c <SCH_AddTask+0x208>)
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e020      	b.n	8000cee <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 8000cac:	7efa      	ldrb	r2, [r7, #27]
 8000cae:	68b9      	ldr	r1, [r7, #8]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	1ac9      	subs	r1, r1, r3
 8000cb4:	4819      	ldr	r0, [pc, #100]	; (8000d1c <SCH_AddTask+0x208>)
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4403      	add	r3, r0
 8000cc0:	3308      	adds	r3, #8
 8000cc2:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000cc4:	7efa      	ldrb	r2, [r7, #27]
 8000cc6:	4915      	ldr	r1, [pc, #84]	; (8000d1c <SCH_AddTask+0x208>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3308      	adds	r3, #8
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d109      	bne.n	8000cee <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 8000cda:	7efa      	ldrb	r2, [r7, #27]
 8000cdc:	490f      	ldr	r1, [pc, #60]	; (8000d1c <SCH_AddTask+0x208>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3310      	adds	r3, #16
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 8000cee:	7efa      	ldrb	r2, [r7, #27]
 8000cf0:	490a      	ldr	r1, [pc, #40]	; (8000d1c <SCH_AddTask+0x208>)
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	e007      	b.n	8000d12 <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000d02:	7efb      	ldrb	r3, [r7, #27]
 8000d04:	3301      	adds	r3, #1
 8000d06:	76fb      	strb	r3, [r7, #27]
 8000d08:	7efb      	ldrb	r3, [r7, #27]
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	f67f af18 	bls.w	8000b40 <SCH_AddTask+0x2c>
        }
    }
    return SCH_TASKNUMBER;
 8000d10:	2310      	movs	r3, #16
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bcb0      	pop	{r4, r5, r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	200001d8 	.word	0x200001d8

08000d20 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 8000d20:	b4b0      	push	{r4, r5, r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e07c      	b.n	8000e2a <SCH_DeleteTask+0x10a>
        if (tasks[i].id == id) {
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	4943      	ldr	r1, [pc, #268]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	3304      	adds	r3, #4
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d16d      	bne.n	8000e24 <SCH_DeleteTask+0x104>
            uint8_t currentID = tasks[i].id;
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	493d      	ldr	r1, [pc, #244]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	440b      	add	r3, r1
 8000d56:	3304      	adds	r3, #4
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	4937      	ldr	r1, [pc, #220]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d01d      	beq.n	8000dae <SCH_DeleteTask+0x8e>
                tasks[i + 1].delay += tasks[i].delay;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	4932      	ldr	r1, [pc, #200]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	3308      	adds	r3, #8
 8000d84:	6819      	ldr	r1, [r3, #0]
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	482d      	ldr	r0, [pc, #180]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4403      	add	r3, r0
 8000d94:	3308      	adds	r3, #8
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	7bfa      	ldrb	r2, [r7, #15]
 8000d9a:	3201      	adds	r2, #1
 8000d9c:	4419      	add	r1, r3
 8000d9e:	4828      	ldr	r0, [pc, #160]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000da0:	4613      	mov	r3, r2
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	4413      	add	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4403      	add	r3, r0
 8000daa:	3308      	adds	r3, #8
 8000dac:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	73bb      	strb	r3, [r7, #14]
 8000db2:	e017      	b.n	8000de4 <SCH_DeleteTask+0xc4>
                tasks[j] = tasks[j + 1];
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	7bb9      	ldrb	r1, [r7, #14]
 8000dba:	4821      	ldr	r0, [pc, #132]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4418      	add	r0, r3
 8000dc6:	491e      	ldr	r1, [pc, #120]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	461d      	mov	r5, r3
 8000dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	3301      	adds	r3, #1
 8000de2:	73bb      	strb	r3, [r7, #14]
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
 8000de6:	2b0e      	cmp	r3, #14
 8000de8:	d9e4      	bls.n	8000db4 <SCH_DeleteTask+0x94>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 8000df2:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000df4:	7b7b      	ldrb	r3, [r7, #13]
 8000df6:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            tasks[SCH_TASKNUMBER - 1].period = 0;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <SCH_DeleteTask+0x120>)
 8000e14:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	e007      	b.n	8000e34 <SCH_DeleteTask+0x114>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	3301      	adds	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	f67f af7f 	bls.w	8000d30 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bcb0      	pop	{r4, r5, r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200001d8 	.word	0x200001d8

08000e44 <SCH_RefreshTask>:

unsigned char SCH_RefreshTask(void) {
 8000e44:	b4b0      	push	{r4, r5, r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0 || tasks[0].delay != 0) return 0;
 8000e4a:	4b98      	ldr	r3, [pc, #608]	; (80010ac <SCH_RefreshTask+0x268>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <SCH_RefreshTask+0x16>
 8000e52:	4b96      	ldr	r3, [pc, #600]	; (80010ac <SCH_RefreshTask+0x268>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SCH_RefreshTask+0x1a>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e120      	b.n	80010a0 <SCH_RefreshTask+0x25c>
    SCH_Task currentTask = tasks[0];
 8000e5e:	4b93      	ldr	r3, [pc, #588]	; (80010ac <SCH_RefreshTask+0x268>)
 8000e60:	463c      	mov	r4, r7
 8000e62:	461d      	mov	r5, r3
 8000e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e68:	682b      	ldr	r3, [r5, #0]
 8000e6a:	6023      	str	r3, [r4, #0]
    uint32_t currentDelay = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	76fb      	strb	r3, [r7, #27]
 8000e74:	e10f      	b.n	8001096 <SCH_RefreshTask+0x252>
        if (i + 1 == SCH_TASKNUMBER || tasks[i + 1].functionPointer == NULL) {
 8000e76:	7efb      	ldrb	r3, [r7, #27]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d00a      	beq.n	8000e92 <SCH_RefreshTask+0x4e>
 8000e7c:	7efb      	ldrb	r3, [r7, #27]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	498a      	ldr	r1, [pc, #552]	; (80010ac <SCH_RefreshTask+0x268>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d14a      	bne.n	8000f28 <SCH_RefreshTask+0xe4>
            tasks[i].functionPointer = currentTask.functionPointer;
 8000e92:	7efa      	ldrb	r2, [r7, #27]
 8000e94:	6839      	ldr	r1, [r7, #0]
 8000e96:	4885      	ldr	r0, [pc, #532]	; (80010ac <SCH_RefreshTask+0x268>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4403      	add	r3, r0
 8000ea2:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8000ea4:	7efa      	ldrb	r2, [r7, #27]
 8000ea6:	7938      	ldrb	r0, [r7, #4]
 8000ea8:	4980      	ldr	r1, [pc, #512]	; (80010ac <SCH_RefreshTask+0x268>)
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 8000eba:	7efa      	ldrb	r2, [r7, #27]
 8000ebc:	68f9      	ldr	r1, [r7, #12]
 8000ebe:	487b      	ldr	r0, [pc, #492]	; (80010ac <SCH_RefreshTask+0x268>)
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4403      	add	r3, r0
 8000eca:	330c      	adds	r3, #12
 8000ecc:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8000ece:	7efa      	ldrb	r2, [r7, #27]
 8000ed0:	4976      	ldr	r1, [pc, #472]	; (80010ac <SCH_RefreshTask+0x268>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	3310      	adds	r3, #16
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 8000ee2:	68f9      	ldr	r1, [r7, #12]
 8000ee4:	7efa      	ldrb	r2, [r7, #27]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	4870      	ldr	r0, [pc, #448]	; (80010ac <SCH_RefreshTask+0x268>)
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4403      	add	r3, r0
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8000efa:	7efa      	ldrb	r2, [r7, #27]
 8000efc:	496b      	ldr	r1, [pc, #428]	; (80010ac <SCH_RefreshTask+0x268>)
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	3308      	adds	r3, #8
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <SCH_RefreshTask+0xe0>
                tasks[i].flag = 1;
 8000f10:	7efa      	ldrb	r2, [r7, #27]
 8000f12:	4966      	ldr	r1, [pc, #408]	; (80010ac <SCH_RefreshTask+0x268>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3310      	adds	r3, #16
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0bb      	b.n	80010a0 <SCH_RefreshTask+0x25c>
        }
        currentDelay += tasks[i + 1].delay;
 8000f28:	7efb      	ldrb	r3, [r7, #27]
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	495f      	ldr	r1, [pc, #380]	; (80010ac <SCH_RefreshTask+0x268>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	3308      	adds	r3, #8
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	69fa      	ldr	r2, [r7, #28]
 8000f3e:	4413      	add	r3, r2
 8000f40:	61fb      	str	r3, [r7, #28]
        if (currentDelay > currentTask.period) {
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	f240 808d 	bls.w	8001066 <SCH_RefreshTask+0x222>
            tasks[i].functionPointer = currentTask.functionPointer;
 8000f4c:	7efa      	ldrb	r2, [r7, #27]
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	4856      	ldr	r0, [pc, #344]	; (80010ac <SCH_RefreshTask+0x268>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4403      	add	r3, r0
 8000f5c:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8000f5e:	7efa      	ldrb	r2, [r7, #27]
 8000f60:	7938      	ldrb	r0, [r7, #4]
 8000f62:	4952      	ldr	r1, [pc, #328]	; (80010ac <SCH_RefreshTask+0x268>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3304      	adds	r3, #4
 8000f70:	4602      	mov	r2, r0
 8000f72:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 8000f74:	7efa      	ldrb	r2, [r7, #27]
 8000f76:	68f9      	ldr	r1, [r7, #12]
 8000f78:	484c      	ldr	r0, [pc, #304]	; (80010ac <SCH_RefreshTask+0x268>)
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4403      	add	r3, r0
 8000f84:	330c      	adds	r3, #12
 8000f86:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8000f88:	7efa      	ldrb	r2, [r7, #27]
 8000f8a:	4948      	ldr	r1, [pc, #288]	; (80010ac <SCH_RefreshTask+0x268>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	3310      	adds	r3, #16
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 8000fa4:	7efb      	ldrb	r3, [r7, #27]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	4940      	ldr	r1, [pc, #256]	; (80010ac <SCH_RefreshTask+0x268>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	6819      	ldr	r1, [r3, #0]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	7efa      	ldrb	r2, [r7, #27]
 8000fbc:	1ac9      	subs	r1, r1, r3
 8000fbe:	483b      	ldr	r0, [pc, #236]	; (80010ac <SCH_RefreshTask+0x268>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4403      	add	r3, r0
 8000fca:	3308      	adds	r3, #8
 8000fcc:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8000fce:	7efa      	ldrb	r2, [r7, #27]
 8000fd0:	4936      	ldr	r1, [pc, #216]	; (80010ac <SCH_RefreshTask+0x268>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3308      	adds	r3, #8
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <SCH_RefreshTask+0x1b4>
                tasks[i].flag = 1;
 8000fe4:	7efa      	ldrb	r2, [r7, #27]
 8000fe6:	4931      	ldr	r1, [pc, #196]	; (80010ac <SCH_RefreshTask+0x268>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3310      	adds	r3, #16
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 8000ff8:	7efb      	ldrb	r3, [r7, #27]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	492b      	ldr	r1, [pc, #172]	; (80010ac <SCH_RefreshTask+0x268>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3308      	adds	r3, #8
 800100a:	6819      	ldr	r1, [r3, #0]
 800100c:	7efa      	ldrb	r2, [r7, #27]
 800100e:	4827      	ldr	r0, [pc, #156]	; (80010ac <SCH_RefreshTask+0x268>)
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4403      	add	r3, r0
 800101a:	3308      	adds	r3, #8
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	7efa      	ldrb	r2, [r7, #27]
 8001020:	3201      	adds	r2, #1
 8001022:	1ac9      	subs	r1, r1, r3
 8001024:	4821      	ldr	r0, [pc, #132]	; (80010ac <SCH_RefreshTask+0x268>)
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4403      	add	r3, r0
 8001030:	3308      	adds	r3, #8
 8001032:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 8001034:	7efb      	ldrb	r3, [r7, #27]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	491c      	ldr	r1, [pc, #112]	; (80010ac <SCH_RefreshTask+0x268>)
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	3308      	adds	r3, #8
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10a      	bne.n	8001062 <SCH_RefreshTask+0x21e>
                tasks[i + 1].flag = 1;
 800104c:	7efb      	ldrb	r3, [r7, #27]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	4916      	ldr	r1, [pc, #88]	; (80010ac <SCH_RefreshTask+0x268>)
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3310      	adds	r3, #16
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001062:	2301      	movs	r3, #1
 8001064:	e01c      	b.n	80010a0 <SCH_RefreshTask+0x25c>
        }
        else {
            tasks[i] = tasks[i + 1];
 8001066:	7efb      	ldrb	r3, [r7, #27]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	7ef9      	ldrb	r1, [r7, #27]
 800106c:	480f      	ldr	r0, [pc, #60]	; (80010ac <SCH_RefreshTask+0x268>)
 800106e:	460b      	mov	r3, r1
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4418      	add	r0, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <SCH_RefreshTask+0x268>)
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	4604      	mov	r4, r0
 8001086:	461d      	mov	r5, r3
 8001088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108c:	682b      	ldr	r3, [r5, #0]
 800108e:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001090:	7efb      	ldrb	r3, [r7, #27]
 8001092:	3301      	adds	r3, #1
 8001094:	76fb      	strb	r3, [r7, #27]
 8001096:	7efb      	ldrb	r3, [r7, #27]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	f67f aeec 	bls.w	8000e76 <SCH_RefreshTask+0x32>
        }
    }
    return 0;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3724      	adds	r7, #36	; 0x24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bcb0      	pop	{r4, r5, r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200001d8 	.word	0x200001d8

080010b0 <SCH_Report>:

uint8_t SCH_Report(void) {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80010ba:	2300      	movs	r3, #0
 80010bc:	71bb      	strb	r3, [r7, #6]
 80010be:	e00f      	b.n	80010e0 <SCH_Report+0x30>
		if (tasks[i].functionPointer != 0) {
 80010c0:	79ba      	ldrb	r2, [r7, #6]
 80010c2:	490c      	ldr	r1, [pc, #48]	; (80010f4 <SCH_Report+0x44>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <SCH_Report+0x2a>
			count ++;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	3301      	adds	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	3301      	adds	r3, #1
 80010de:	71bb      	strb	r3, [r7, #6]
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	2b0f      	cmp	r3, #15
 80010e4:	d9ec      	bls.n	80010c0 <SCH_Report+0x10>
		}
	}
	return count;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200001d8 	.word	0x200001d8

080010f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_MspInit+0x40>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_MspInit+0x40>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_MspInit+0x40>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_MspInit+0x40>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_MspInit+0x40>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_MspInit+0x40>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d114      	bne.n	8001178 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_TIM_Base_MspInit+0x78>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <HAL_TIM_Base_MspInit+0x78>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_TIM_Base_MspInit+0x78>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	201c      	movs	r0, #28
 800116c:	f000 fbf3 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001170:	201c      	movs	r0, #28
 8001172:	f000 fc0c 	bl	800198e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001176:	e018      	b.n	80011aa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_TIM_Base_MspInit+0x7c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d113      	bne.n	80011aa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_TIM_Base_MspInit+0x78>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_TIM_Base_MspInit+0x78>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_TIM_Base_MspInit+0x78>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	201d      	movs	r0, #29
 80011a0:	f000 fbd9 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011a4:	201d      	movs	r0, #29
 80011a6:	f000 fbf2 	bl	800198e <HAL_NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40000400 	.word	0x40000400

080011bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_TIM_MspPostInit+0x58>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d117      	bne.n	800120c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_TIM_MspPostInit+0x5c>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_TIM_MspPostInit+0x5c>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_TIM_MspPostInit+0x5c>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f4:	23c0      	movs	r3, #192	; 0xc0
 80011f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <HAL_TIM_MspPostInit+0x60>)
 8001208:	f000 fc8e 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40000400 	.word	0x40000400
 8001218:	40021000 	.word	0x40021000
 800121c:	40010800 	.word	0x40010800

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1f      	ldr	r2, [pc, #124]	; (80012b8 <HAL_UART_MspInit+0x98>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d137      	bne.n	80012b0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_UART_MspInit+0x9c>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <HAL_UART_MspInit+0x9c>)
 8001246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124a:	61d3      	str	r3, [r2, #28]
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <HAL_UART_MspInit+0x9c>)
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_UART_MspInit+0x9c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <HAL_UART_MspInit+0x9c>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_UART_MspInit+0x9c>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001270:	2304      	movs	r3, #4
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	480f      	ldr	r0, [pc, #60]	; (80012c0 <HAL_UART_MspInit+0xa0>)
 8001284:	f000 fc50 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001288:	2308      	movs	r3, #8
 800128a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <HAL_UART_MspInit+0xa0>)
 800129c:	f000 fc44 	bl	8001b28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2026      	movs	r0, #38	; 0x26
 80012a6:	f000 fb56 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012aa:	2026      	movs	r0, #38	; 0x26
 80012ac:	f000 fb6f 	bl	800198e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40004400 	.word	0x40004400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010800 	.word	0x40010800

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130a:	f000 fa31 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TIM2_IRQHandler+0x10>)
 800131a:	f001 facd 	bl	80028b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200000fc 	.word	0x200000fc

08001328 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <TIM3_IRQHandler+0x10>)
 800132e:	f001 fac3 	bl	80028b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000144 	.word	0x20000144

0800133c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <USART2_IRQHandler+0x10>)
 8001342:	f002 f947 	bl	80035d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000018c 	.word	0x2000018c

08001350 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	e00a      	b.n	8001378 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001362:	f3af 8000 	nop.w
 8001366:	4601      	mov	r1, r0
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	60ba      	str	r2, [r7, #8]
 800136e:	b2ca      	uxtb	r2, r1
 8001370:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	dbf0      	blt.n	8001362 <_read+0x12>
  }

  return len;
 8001380:	687b      	ldr	r3, [r7, #4]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e009      	b.n	80013b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	60ba      	str	r2, [r7, #8]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dbf1      	blt.n	800139c <_write+0x12>
  }
  return len;
 80013b8:	687b      	ldr	r3, [r7, #4]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_close>:

int _close(int file)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e8:	605a      	str	r2, [r3, #4]
  return 0;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <_isatty>:

int _isatty(int file)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
	...

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f002 ffc4 	bl	80043e0 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20002800 	.word	0x20002800
 8001484:	00000400 	.word	0x00000400
 8001488:	20000318 	.word	0x20000318
 800148c:	20000470 	.word	0x20000470

08001490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <trafficToggle>:

static uint16_t trafficRedPins[TRAFFIC_NUMBER] = {TRAFFIC0_RED_Pin, TRAFFIC1_RED_Pin};
static uint16_t trafficYellowPins[TRAFFIC_NUMBER] = {TRAFFIC0_YELLOW_Pin, TRAFFIC1_YELLOW_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMBER] = {TRAFFIC0_GREEN_Pin, TRAFFIC1_GREEN_Pin};

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 80014ac:	79bb      	ldrb	r3, [r7, #6]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	f200 80b0 	bhi.w	8001614 <trafficToggle+0x178>
 80014b4:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <trafficToggle+0x20>)
 80014b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ba:	bf00      	nop
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	0800151f 	.word	0x0800151f
 80014c4:	08001571 	.word	0x08001571
 80014c8:	080015c3 	.word	0x080015c3
	case TRAFFIC_OFF:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4a53      	ldr	r2, [pc, #332]	; (800161c <trafficToggle+0x180>)
 80014d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4a52      	ldr	r2, [pc, #328]	; (8001620 <trafficToggle+0x184>)
 80014d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014dc:	2201      	movs	r2, #1
 80014de:	4619      	mov	r1, r3
 80014e0:	f000 fcb5 	bl	8001e4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4a4f      	ldr	r2, [pc, #316]	; (8001624 <trafficToggle+0x188>)
 80014e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4a4e      	ldr	r2, [pc, #312]	; (8001628 <trafficToggle+0x18c>)
 80014f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4619      	mov	r1, r3
 80014f8:	f000 fca9 	bl	8001e4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4a4b      	ldr	r2, [pc, #300]	; (800162c <trafficToggle+0x190>)
 8001500:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	4a4a      	ldr	r2, [pc, #296]	; (8001630 <trafficToggle+0x194>)
 8001508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800150c:	2201      	movs	r2, #1
 800150e:	4619      	mov	r1, r3
 8001510:	f000 fc9d 	bl	8001e4e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_OFF;
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	4a47      	ldr	r2, [pc, #284]	; (8001634 <trafficToggle+0x198>)
 8001518:	2100      	movs	r1, #0
 800151a:	54d1      	strb	r1, [r2, r3]
		break;
 800151c:	e07a      	b.n	8001614 <trafficToggle+0x178>
	case TRAFFIC_RED:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_RESET);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4a3e      	ldr	r2, [pc, #248]	; (800161c <trafficToggle+0x180>)
 8001522:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	4a3d      	ldr	r2, [pc, #244]	; (8001620 <trafficToggle+0x184>)
 800152a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800152e:	2200      	movs	r2, #0
 8001530:	4619      	mov	r1, r3
 8001532:	f000 fc8c 	bl	8001e4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4a3a      	ldr	r2, [pc, #232]	; (8001624 <trafficToggle+0x188>)
 800153a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4a39      	ldr	r2, [pc, #228]	; (8001628 <trafficToggle+0x18c>)
 8001542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	f000 fc80 	bl	8001e4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4a36      	ldr	r2, [pc, #216]	; (800162c <trafficToggle+0x190>)
 8001552:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	4a35      	ldr	r2, [pc, #212]	; (8001630 <trafficToggle+0x194>)
 800155a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800155e:	2201      	movs	r2, #1
 8001560:	4619      	mov	r1, r3
 8001562:	f000 fc74 	bl	8001e4e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_RED;
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	4a32      	ldr	r2, [pc, #200]	; (8001634 <trafficToggle+0x198>)
 800156a:	2101      	movs	r1, #1
 800156c:	54d1      	strb	r1, [r2, r3]
		break;
 800156e:	e051      	b.n	8001614 <trafficToggle+0x178>
	case TRAFFIC_YELLOW:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4a2a      	ldr	r2, [pc, #168]	; (800161c <trafficToggle+0x180>)
 8001574:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <trafficToggle+0x184>)
 800157c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001580:	2201      	movs	r2, #1
 8001582:	4619      	mov	r1, r3
 8001584:	f000 fc63 	bl	8001e4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_RESET);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a26      	ldr	r2, [pc, #152]	; (8001624 <trafficToggle+0x188>)
 800158c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4a25      	ldr	r2, [pc, #148]	; (8001628 <trafficToggle+0x18c>)
 8001594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	f000 fc57 	bl	8001e4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	4a22      	ldr	r2, [pc, #136]	; (800162c <trafficToggle+0x190>)
 80015a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	4a21      	ldr	r2, [pc, #132]	; (8001630 <trafficToggle+0x194>)
 80015ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015b0:	2201      	movs	r2, #1
 80015b2:	4619      	mov	r1, r3
 80015b4:	f000 fc4b 	bl	8001e4e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_YELLOW;
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <trafficToggle+0x198>)
 80015bc:	2102      	movs	r1, #2
 80015be:	54d1      	strb	r1, [r2, r3]
		break;
 80015c0:	e028      	b.n	8001614 <trafficToggle+0x178>
	case TRAFFIC_GREEN:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4a15      	ldr	r2, [pc, #84]	; (800161c <trafficToggle+0x180>)
 80015c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <trafficToggle+0x184>)
 80015ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015d2:	2201      	movs	r2, #1
 80015d4:	4619      	mov	r1, r3
 80015d6:	f000 fc3a 	bl	8001e4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <trafficToggle+0x188>)
 80015de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4a10      	ldr	r2, [pc, #64]	; (8001628 <trafficToggle+0x18c>)
 80015e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4619      	mov	r1, r3
 80015ee:	f000 fc2e 	bl	8001e4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_RESET);
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <trafficToggle+0x190>)
 80015f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <trafficToggle+0x194>)
 80015fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001602:	2200      	movs	r2, #0
 8001604:	4619      	mov	r1, r3
 8001606:	f000 fc22 	bl	8001e4e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_GREEN;
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4a09      	ldr	r2, [pc, #36]	; (8001634 <trafficToggle+0x198>)
 800160e:	2103      	movs	r1, #3
 8001610:	54d1      	strb	r1, [r2, r3]
		break;
 8001612:	bf00      	nop
	}
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000028 	.word	0x20000028
 8001620:	20000040 	.word	0x20000040
 8001624:	20000030 	.word	0x20000030
 8001628:	20000044 	.word	0x20000044
 800162c:	20000038 	.word	0x20000038
 8001630:	20000048 	.word	0x20000048
 8001634:	2000031c 	.word	0x2000031c

08001638 <traffic0Red>:

void traffic0Off(void) {
	trafficToggle(0, TRAFFIC_OFF);
}
void traffic0Red(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 800163c:	2101      	movs	r1, #1
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff ff2c 	bl	800149c <trafficToggle>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <traffic0Yellow>:
void traffic0Yellow(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 800164c:	2102      	movs	r1, #2
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff ff24 	bl	800149c <trafficToggle>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <traffic0Green>:
void traffic0Green(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 800165c:	2103      	movs	r1, #3
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff ff1c 	bl	800149c <trafficToggle>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <traffic1Red>:

void traffic1Off(void) {
	trafficToggle(1, TRAFFIC_OFF);
}
void traffic1Red(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 800166c:	2101      	movs	r1, #1
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff ff14 	bl	800149c <trafficToggle>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}

08001678 <traffic1Yellow>:
void traffic1Yellow(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 800167c:	2102      	movs	r1, #2
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff ff0c 	bl	800149c <trafficToggle>
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <traffic1Green>:
void traffic1Green(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 800168c:	2103      	movs	r1, #3
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff ff04 	bl	800149c <trafficToggle>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001698:	f7ff fefa 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800169e:	490c      	ldr	r1, [pc, #48]	; (80016d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016a0:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016b4:	4c09      	ldr	r4, [pc, #36]	; (80016dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c2:	f002 fe93 	bl	80043ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c6:	f7fe ff9b 	bl	8000600 <main>
  bx lr
 80016ca:	4770      	bx	lr
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80016d4:	080053a0 	.word	0x080053a0
  ldr r2, =_sbss
 80016d8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80016dc:	20000470 	.word	0x20000470

080016e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC1_2_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_Init+0x28>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_Init+0x28>)
 80016ee:	f043 0310 	orr.w	r3, r3, #16
 80016f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f000 f923 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fa:	200f      	movs	r0, #15
 80016fc:	f000 f808 	bl	8001710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001700:	f7ff fcfa 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40022000 	.word	0x40022000

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x54>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_InitTick+0x58>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001726:	fbb3 f3f1 	udiv	r3, r3, r1
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f93b 	bl	80019aa <HAL_SYSTICK_Config>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00e      	b.n	800175c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d80a      	bhi.n	800175a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f000 f903 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001750:	4a06      	ldr	r2, [pc, #24]	; (800176c <HAL_InitTick+0x5c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e000      	b.n	800175c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000018 	.word	0x20000018
 8001768:	20000050 	.word	0x20000050
 800176c:	2000004c 	.word	0x2000004c

08001770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_IncTick+0x1c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_IncTick+0x20>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <HAL_IncTick+0x20>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	20000050 	.word	0x20000050
 8001790:	20000320 	.word	0x20000320

08001794 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <HAL_GetTick+0x10>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	20000320 	.word	0x20000320

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4906      	ldr	r1, [pc, #24]	; (8001840 <__NVIC_EnableIRQ+0x34>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff90 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff2d 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff42 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff90 	bl	8001898 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5f 	bl	8001844 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff35 	bl	800180c <__NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffa2 	bl	80018fc <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d008      	beq.n	80019ec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2204      	movs	r2, #4
 80019de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e020      	b.n	8001a2e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 020e 	bic.w	r2, r2, #14
 80019fa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d005      	beq.n	8001a5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2204      	movs	r2, #4
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	e051      	b.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 020e 	bic.w	r2, r2, #14
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_DMA_Abort_IT+0xd4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d029      	beq.n	8001ada <HAL_DMA_Abort_IT+0xa2>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <HAL_DMA_Abort_IT+0xd8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d022      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x9e>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <HAL_DMA_Abort_IT+0xdc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01a      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0x98>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_DMA_Abort_IT+0xe0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d012      	beq.n	8001aca <HAL_DMA_Abort_IT+0x92>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <HAL_DMA_Abort_IT+0xe4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00a      	beq.n	8001ac4 <HAL_DMA_Abort_IT+0x8c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_DMA_Abort_IT+0xe8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d102      	bne.n	8001abe <HAL_DMA_Abort_IT+0x86>
 8001ab8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001abc:	e00e      	b.n	8001adc <HAL_DMA_Abort_IT+0xa4>
 8001abe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ac2:	e00b      	b.n	8001adc <HAL_DMA_Abort_IT+0xa4>
 8001ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac8:	e008      	b.n	8001adc <HAL_DMA_Abort_IT+0xa4>
 8001aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ace:	e005      	b.n	8001adc <HAL_DMA_Abort_IT+0xa4>
 8001ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad4:	e002      	b.n	8001adc <HAL_DMA_Abort_IT+0xa4>
 8001ad6:	2310      	movs	r3, #16
 8001ad8:	e000      	b.n	8001adc <HAL_DMA_Abort_IT+0xa4>
 8001ada:	2301      	movs	r3, #1
 8001adc:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <HAL_DMA_Abort_IT+0xec>)
 8001ade:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	4798      	blx	r3
    } 
  }
  return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40020008 	.word	0x40020008
 8001b10:	4002001c 	.word	0x4002001c
 8001b14:	40020030 	.word	0x40020030
 8001b18:	40020044 	.word	0x40020044
 8001b1c:	40020058 	.word	0x40020058
 8001b20:	4002006c 	.word	0x4002006c
 8001b24:	40020000 	.word	0x40020000

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b08b      	sub	sp, #44	; 0x2c
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3a:	e161      	b.n	8001e00 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	f040 8150 	bne.w	8001dfa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4a97      	ldr	r2, [pc, #604]	; (8001dbc <HAL_GPIO_Init+0x294>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d05e      	beq.n	8001c22 <HAL_GPIO_Init+0xfa>
 8001b64:	4a95      	ldr	r2, [pc, #596]	; (8001dbc <HAL_GPIO_Init+0x294>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d875      	bhi.n	8001c56 <HAL_GPIO_Init+0x12e>
 8001b6a:	4a95      	ldr	r2, [pc, #596]	; (8001dc0 <HAL_GPIO_Init+0x298>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d058      	beq.n	8001c22 <HAL_GPIO_Init+0xfa>
 8001b70:	4a93      	ldr	r2, [pc, #588]	; (8001dc0 <HAL_GPIO_Init+0x298>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d86f      	bhi.n	8001c56 <HAL_GPIO_Init+0x12e>
 8001b76:	4a93      	ldr	r2, [pc, #588]	; (8001dc4 <HAL_GPIO_Init+0x29c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d052      	beq.n	8001c22 <HAL_GPIO_Init+0xfa>
 8001b7c:	4a91      	ldr	r2, [pc, #580]	; (8001dc4 <HAL_GPIO_Init+0x29c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d869      	bhi.n	8001c56 <HAL_GPIO_Init+0x12e>
 8001b82:	4a91      	ldr	r2, [pc, #580]	; (8001dc8 <HAL_GPIO_Init+0x2a0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d04c      	beq.n	8001c22 <HAL_GPIO_Init+0xfa>
 8001b88:	4a8f      	ldr	r2, [pc, #572]	; (8001dc8 <HAL_GPIO_Init+0x2a0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d863      	bhi.n	8001c56 <HAL_GPIO_Init+0x12e>
 8001b8e:	4a8f      	ldr	r2, [pc, #572]	; (8001dcc <HAL_GPIO_Init+0x2a4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d046      	beq.n	8001c22 <HAL_GPIO_Init+0xfa>
 8001b94:	4a8d      	ldr	r2, [pc, #564]	; (8001dcc <HAL_GPIO_Init+0x2a4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d85d      	bhi.n	8001c56 <HAL_GPIO_Init+0x12e>
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d82a      	bhi.n	8001bf4 <HAL_GPIO_Init+0xcc>
 8001b9e:	2b12      	cmp	r3, #18
 8001ba0:	d859      	bhi.n	8001c56 <HAL_GPIO_Init+0x12e>
 8001ba2:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <HAL_GPIO_Init+0x80>)
 8001ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba8:	08001c23 	.word	0x08001c23
 8001bac:	08001bfd 	.word	0x08001bfd
 8001bb0:	08001c0f 	.word	0x08001c0f
 8001bb4:	08001c51 	.word	0x08001c51
 8001bb8:	08001c57 	.word	0x08001c57
 8001bbc:	08001c57 	.word	0x08001c57
 8001bc0:	08001c57 	.word	0x08001c57
 8001bc4:	08001c57 	.word	0x08001c57
 8001bc8:	08001c57 	.word	0x08001c57
 8001bcc:	08001c57 	.word	0x08001c57
 8001bd0:	08001c57 	.word	0x08001c57
 8001bd4:	08001c57 	.word	0x08001c57
 8001bd8:	08001c57 	.word	0x08001c57
 8001bdc:	08001c57 	.word	0x08001c57
 8001be0:	08001c57 	.word	0x08001c57
 8001be4:	08001c57 	.word	0x08001c57
 8001be8:	08001c57 	.word	0x08001c57
 8001bec:	08001c05 	.word	0x08001c05
 8001bf0:	08001c19 	.word	0x08001c19
 8001bf4:	4a76      	ldr	r2, [pc, #472]	; (8001dd0 <HAL_GPIO_Init+0x2a8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d013      	beq.n	8001c22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bfa:	e02c      	b.n	8001c56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	623b      	str	r3, [r7, #32]
          break;
 8001c02:	e029      	b.n	8001c58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	623b      	str	r3, [r7, #32]
          break;
 8001c0c:	e024      	b.n	8001c58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	3308      	adds	r3, #8
 8001c14:	623b      	str	r3, [r7, #32]
          break;
 8001c16:	e01f      	b.n	8001c58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	330c      	adds	r3, #12
 8001c1e:	623b      	str	r3, [r7, #32]
          break;
 8001c20:	e01a      	b.n	8001c58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	623b      	str	r3, [r7, #32]
          break;
 8001c2e:	e013      	b.n	8001c58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	611a      	str	r2, [r3, #16]
          break;
 8001c42:	e009      	b.n	8001c58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c44:	2308      	movs	r3, #8
 8001c46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	615a      	str	r2, [r3, #20]
          break;
 8001c4e:	e003      	b.n	8001c58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
          break;
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_Init+0x130>
          break;
 8001c56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2bff      	cmp	r3, #255	; 0xff
 8001c5c:	d801      	bhi.n	8001c62 <HAL_GPIO_Init+0x13a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	e001      	b.n	8001c66 <HAL_GPIO_Init+0x13e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3304      	adds	r3, #4
 8001c66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2bff      	cmp	r3, #255	; 0xff
 8001c6c:	d802      	bhi.n	8001c74 <HAL_GPIO_Init+0x14c>
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	e002      	b.n	8001c7a <HAL_GPIO_Init+0x152>
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	3b08      	subs	r3, #8
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	210f      	movs	r1, #15
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	6a39      	ldr	r1, [r7, #32]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	431a      	orrs	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80a9 	beq.w	8001dfa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	; (8001dd4 <HAL_GPIO_Init+0x2ac>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	4a49      	ldr	r2, [pc, #292]	; (8001dd4 <HAL_GPIO_Init+0x2ac>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6193      	str	r3, [r2, #24]
 8001cb4:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_GPIO_Init+0x2ac>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cc0:	4a45      	ldr	r2, [pc, #276]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ccc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3d      	ldr	r2, [pc, #244]	; (8001ddc <HAL_GPIO_Init+0x2b4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d00d      	beq.n	8001d08 <HAL_GPIO_Init+0x1e0>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3c      	ldr	r2, [pc, #240]	; (8001de0 <HAL_GPIO_Init+0x2b8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d007      	beq.n	8001d04 <HAL_GPIO_Init+0x1dc>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3b      	ldr	r2, [pc, #236]	; (8001de4 <HAL_GPIO_Init+0x2bc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <HAL_GPIO_Init+0x1d8>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e004      	b.n	8001d0a <HAL_GPIO_Init+0x1e2>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e002      	b.n	8001d0a <HAL_GPIO_Init+0x1e2>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_GPIO_Init+0x1e2>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0c:	f002 0203 	and.w	r2, r2, #3
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	4093      	lsls	r3, r2
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d1a:	492f      	ldr	r1, [pc, #188]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d34:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	492b      	ldr	r1, [pc, #172]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4927      	ldr	r1, [pc, #156]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4921      	ldr	r1, [pc, #132]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60cb      	str	r3, [r1, #12]
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d6a:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	491d      	ldr	r1, [pc, #116]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4917      	ldr	r1, [pc, #92]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	4913      	ldr	r1, [pc, #76]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01f      	beq.n	8001dec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	490d      	ldr	r1, [pc, #52]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e01f      	b.n	8001dfa <HAL_GPIO_Init+0x2d2>
 8001dba:	bf00      	nop
 8001dbc:	10320000 	.word	0x10320000
 8001dc0:	10310000 	.word	0x10310000
 8001dc4:	10220000 	.word	0x10220000
 8001dc8:	10210000 	.word	0x10210000
 8001dcc:	10120000 	.word	0x10120000
 8001dd0:	10110000 	.word	0x10110000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	40010c00 	.word	0x40010c00
 8001de4:	40011000 	.word	0x40011000
 8001de8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_GPIO_Init+0x2f4>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	4909      	ldr	r1, [pc, #36]	; (8001e1c <HAL_GPIO_Init+0x2f4>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f47f ae96 	bne.w	8001b3c <HAL_GPIO_Init+0x14>
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	372c      	adds	r7, #44	; 0x2c
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40010400 	.word	0x40010400

08001e20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e001      	b.n	8001e42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	807b      	strh	r3, [r7, #2]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e5e:	787b      	ldrb	r3, [r7, #1]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e64:	887a      	ldrh	r2, [r7, #2]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	041a      	lsls	r2, r3, #16
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	611a      	str	r2, [r3, #16]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e90:	887a      	ldrh	r2, [r7, #2]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	041a      	lsls	r2, r3, #16
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	611a      	str	r2, [r3, #16]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e272      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8087 	beq.w	8001fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed0:	4b92      	ldr	r3, [pc, #584]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d00c      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001edc:	4b8f      	ldr	r3, [pc, #572]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d112      	bne.n	8001f0e <HAL_RCC_OscConfig+0x5e>
 8001ee8:	4b8c      	ldr	r3, [pc, #560]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef4:	d10b      	bne.n	8001f0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef6:	4b89      	ldr	r3, [pc, #548]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d06c      	beq.n	8001fdc <HAL_RCC_OscConfig+0x12c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d168      	bne.n	8001fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e24c      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x76>
 8001f18:	4b80      	ldr	r3, [pc, #512]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a7f      	ldr	r2, [pc, #508]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	e02e      	b.n	8001f84 <HAL_RCC_OscConfig+0xd4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x98>
 8001f2e:	4b7b      	ldr	r3, [pc, #492]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a7a      	ldr	r2, [pc, #488]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b78      	ldr	r3, [pc, #480]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a77      	ldr	r2, [pc, #476]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e01d      	b.n	8001f84 <HAL_RCC_OscConfig+0xd4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0xbc>
 8001f52:	4b72      	ldr	r3, [pc, #456]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a71      	ldr	r2, [pc, #452]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b6f      	ldr	r3, [pc, #444]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6e      	ldr	r2, [pc, #440]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0xd4>
 8001f6c:	4b6b      	ldr	r3, [pc, #428]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a6a      	ldr	r2, [pc, #424]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b68      	ldr	r3, [pc, #416]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a67      	ldr	r2, [pc, #412]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fc02 	bl	8001794 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff fbfe 	bl	8001794 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e200      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0xe4>
 8001fb2:	e014      	b.n	8001fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fbee 	bl	8001794 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fbea 	bl	8001794 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1ec      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	4b53      	ldr	r3, [pc, #332]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x10c>
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d063      	beq.n	80020b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fea:	4b4c      	ldr	r3, [pc, #304]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ff6:	4b49      	ldr	r3, [pc, #292]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d11c      	bne.n	800203c <HAL_RCC_OscConfig+0x18c>
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	4b43      	ldr	r3, [pc, #268]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x176>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1c0      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4939      	ldr	r1, [pc, #228]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	e03a      	b.n	80020b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002044:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff fba3 	bl	8001794 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002052:	f7ff fb9f 	bl	8001794 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1a1      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4927      	ldr	r1, [pc, #156]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCC_OscConfig+0x270>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fb82 	bl	8001794 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002094:	f7ff fb7e 	bl	8001794 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e180      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03a      	beq.n	8002134 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d019      	beq.n	80020fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <HAL_RCC_OscConfig+0x274>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020cc:	f7ff fb62 	bl	8001794 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff fb5e 	bl	8001794 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e160      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f000 face 	bl	8002694 <RCC_Delay>
 80020f8:	e01c      	b.n	8002134 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_RCC_OscConfig+0x274>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7ff fb48 	bl	8001794 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002106:	e00f      	b.n	8002128 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002108:	f7ff fb44 	bl	8001794 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d908      	bls.n	8002128 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e146      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	42420000 	.word	0x42420000
 8002124:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	4b92      	ldr	r3, [pc, #584]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e9      	bne.n	8002108 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a6 	beq.w	800228e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b8b      	ldr	r3, [pc, #556]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b88      	ldr	r3, [pc, #544]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a87      	ldr	r2, [pc, #540]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b85      	ldr	r3, [pc, #532]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216a:	2301      	movs	r3, #1
 800216c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4b82      	ldr	r3, [pc, #520]	; (8002378 <HAL_RCC_OscConfig+0x4c8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d118      	bne.n	80021ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217a:	4b7f      	ldr	r3, [pc, #508]	; (8002378 <HAL_RCC_OscConfig+0x4c8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7e      	ldr	r2, [pc, #504]	; (8002378 <HAL_RCC_OscConfig+0x4c8>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002186:	f7ff fb05 	bl	8001794 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218e:	f7ff fb01 	bl	8001794 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	; 0x64
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e103      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	4b75      	ldr	r3, [pc, #468]	; (8002378 <HAL_RCC_OscConfig+0x4c8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x312>
 80021b4:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a6e      	ldr	r2, [pc, #440]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	e02d      	b.n	800221e <HAL_RCC_OscConfig+0x36e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x334>
 80021ca:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a69      	ldr	r2, [pc, #420]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a66      	ldr	r2, [pc, #408]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	e01c      	b.n	800221e <HAL_RCC_OscConfig+0x36e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d10c      	bne.n	8002206 <HAL_RCC_OscConfig+0x356>
 80021ec:	4b61      	ldr	r3, [pc, #388]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4a60      	ldr	r2, [pc, #384]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	4b5e      	ldr	r3, [pc, #376]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a5d      	ldr	r2, [pc, #372]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e00b      	b.n	800221e <HAL_RCC_OscConfig+0x36e>
 8002206:	4b5b      	ldr	r3, [pc, #364]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a5a      	ldr	r2, [pc, #360]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	4b58      	ldr	r3, [pc, #352]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a57      	ldr	r2, [pc, #348]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d015      	beq.n	8002252 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7ff fab5 	bl	8001794 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7ff fab1 	bl	8001794 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	; 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0b1      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	4b4b      	ldr	r3, [pc, #300]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ee      	beq.n	800222e <HAL_RCC_OscConfig+0x37e>
 8002250:	e014      	b.n	800227c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7ff fa9f 	bl	8001794 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff fa9b 	bl	8001794 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e09b      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	4b40      	ldr	r3, [pc, #256]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ee      	bne.n	800225a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4a3b      	ldr	r2, [pc, #236]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8087 	beq.w	80023a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d061      	beq.n	8002368 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d146      	bne.n	800233a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ac:	4b33      	ldr	r3, [pc, #204]	; (800237c <HAL_RCC_OscConfig+0x4cc>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff fa6f 	bl	8001794 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff fa6b 	bl	8001794 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e06d      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e0:	d108      	bne.n	80022f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4921      	ldr	r1, [pc, #132]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a19      	ldr	r1, [r3, #32]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	430b      	orrs	r3, r1
 8002306:	491b      	ldr	r1, [pc, #108]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_RCC_OscConfig+0x4cc>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7ff fa3f 	bl	8001794 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231a:	f7ff fa3b 	bl	8001794 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e03d      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x46a>
 8002338:	e035      	b.n	80023a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_RCC_OscConfig+0x4cc>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7ff fa28 	bl	8001794 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7ff fa24 	bl	8001794 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e026      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x498>
 8002366:	e01e      	b.n	80023a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e019      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_OscConfig+0x500>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0d0      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d910      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b67      	ldr	r3, [pc, #412]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4965      	ldr	r1, [pc, #404]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0b8      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002410:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a58      	ldr	r2, [pc, #352]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800241a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002428:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a52      	ldr	r2, [pc, #328]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002432:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	494d      	ldr	r1, [pc, #308]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d040      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d115      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07f      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e073      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e06b      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4936      	ldr	r1, [pc, #216]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7ff f976 	bl	8001794 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7ff f972 	bl	8001794 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e053      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d210      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 0207 	bic.w	r2, r3, #7
 80024ea:	4922      	ldr	r1, [pc, #136]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e032      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4916      	ldr	r1, [pc, #88]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	490e      	ldr	r1, [pc, #56]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002542:	f000 f821 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002546:	4602      	mov	r2, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	490a      	ldr	r1, [pc, #40]	; (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	5ccb      	ldrb	r3, [r1, r3]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x1cc>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1d0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f8d4 	bl	8001710 <HAL_InitTick>

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40022000 	.word	0x40022000
 8002578:	40021000 	.word	0x40021000
 800257c:	08005338 	.word	0x08005338
 8002580:	20000018 	.word	0x20000018
 8002584:	2000004c 	.word	0x2000004c

08002588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_RCC_GetSysClockFreq+0x94>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x30>
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d003      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x36>
 80025b6:	e027      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ba:	613b      	str	r3, [r7, #16]
      break;
 80025bc:	e027      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025c8:	5cd3      	ldrb	r3, [r2, r3]
 80025ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d010      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_RCC_GetSysClockFreq+0x94>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0c5b      	lsrs	r3, r3, #17
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ea:	fb03 f202 	mul.w	r2, r3, r2
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e004      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0c      	ldr	r2, [pc, #48]	; (800262c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	613b      	str	r3, [r7, #16]
      break;
 8002606:	e002      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 800260a:	613b      	str	r3, [r7, #16]
      break;
 800260c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260e:	693b      	ldr	r3, [r7, #16]
}
 8002610:	4618      	mov	r0, r3
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	007a1200 	.word	0x007a1200
 8002624:	08005350 	.word	0x08005350
 8002628:	08005360 	.word	0x08005360
 800262c:	003d0900 	.word	0x003d0900

08002630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002634:	4b02      	ldr	r3, [pc, #8]	; (8002640 <HAL_RCC_GetHCLKFreq+0x10>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	20000018 	.word	0x20000018

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002648:	f7ff fff2 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	08005348 	.word	0x08005348

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002670:	f7ff ffde 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0adb      	lsrs	r3, r3, #11
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08005348 	.word	0x08005348

08002694 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <RCC_Delay+0x34>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <RCC_Delay+0x38>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	0a5b      	lsrs	r3, r3, #9
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026b0:	bf00      	nop
  }
  while (Delay --);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	60fa      	str	r2, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f9      	bne.n	80026b0 <RCC_Delay+0x1c>
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	20000018 	.word	0x20000018
 80026cc:	10624dd3 	.word	0x10624dd3

080026d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e041      	b.n	8002766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fe fd20 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3304      	adds	r3, #4
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f000 fb88 	bl	8002e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d001      	beq.n	8002788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e035      	b.n	80027f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a16      	ldr	r2, [pc, #88]	; (8002800 <HAL_TIM_Base_Start_IT+0x90>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d009      	beq.n	80027be <HAL_TIM_Base_Start_IT+0x4e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b2:	d004      	beq.n	80027be <HAL_TIM_Base_Start_IT+0x4e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_TIM_Base_Start_IT+0x94>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d111      	bne.n	80027e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d010      	beq.n	80027f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e0:	e007      	b.n	80027f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40000400 	.word	0x40000400

08002808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e041      	b.n	800289e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f839 	bl	80028a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 faec 	bl	8002e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d122      	bne.n	8002914 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d11b      	bne.n	8002914 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0202 	mvn.w	r2, #2
 80028e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa76 	bl	8002dec <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fa69 	bl	8002dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fa78 	bl	8002dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b04      	cmp	r3, #4
 8002920:	d122      	bne.n	8002968 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b04      	cmp	r3, #4
 800292e:	d11b      	bne.n	8002968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0204 	mvn.w	r2, #4
 8002938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2202      	movs	r2, #2
 800293e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa4c 	bl	8002dec <HAL_TIM_IC_CaptureCallback>
 8002954:	e005      	b.n	8002962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fa3f 	bl	8002dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fa4e 	bl	8002dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b08      	cmp	r3, #8
 8002974:	d122      	bne.n	80029bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b08      	cmp	r3, #8
 8002982:	d11b      	bne.n	80029bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0208 	mvn.w	r2, #8
 800298c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2204      	movs	r2, #4
 8002992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa22 	bl	8002dec <HAL_TIM_IC_CaptureCallback>
 80029a8:	e005      	b.n	80029b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa15 	bl	8002dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fa24 	bl	8002dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0210 	mvn.w	r2, #16
 80029e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2208      	movs	r2, #8
 80029e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9f8 	bl	8002dec <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f9eb 	bl	8002dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f9fa 	bl	8002dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10e      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d107      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0201 	mvn.w	r2, #1
 8002a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fd ffc6 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b80      	cmp	r3, #128	; 0x80
 8002a48:	d10e      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d107      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fcb5 	bl	80033d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d10e      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	d107      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9be 	bl	8002e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d107      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0220 	mvn.w	r2, #32
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fc80 	bl	80033c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0ae      	b.n	8002c44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	f200 809f 	bhi.w	8002c34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b31 	.word	0x08002b31
 8002b00:	08002c35 	.word	0x08002c35
 8002b04:	08002c35 	.word	0x08002c35
 8002b08:	08002c35 	.word	0x08002c35
 8002b0c:	08002b71 	.word	0x08002b71
 8002b10:	08002c35 	.word	0x08002c35
 8002b14:	08002c35 	.word	0x08002c35
 8002b18:	08002c35 	.word	0x08002c35
 8002b1c:	08002bb3 	.word	0x08002bb3
 8002b20:	08002c35 	.word	0x08002c35
 8002b24:	08002c35 	.word	0x08002c35
 8002b28:	08002c35 	.word	0x08002c35
 8002b2c:	08002bf3 	.word	0x08002bf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f9cc 	bl	8002ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0208 	orr.w	r2, r2, #8
 8002b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0204 	bic.w	r2, r2, #4
 8002b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6999      	ldr	r1, [r3, #24]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	619a      	str	r2, [r3, #24]
      break;
 8002b6e:	e064      	b.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fa12 	bl	8002fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6999      	ldr	r1, [r3, #24]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	021a      	lsls	r2, r3, #8
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	619a      	str	r2, [r3, #24]
      break;
 8002bb0:	e043      	b.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68b9      	ldr	r1, [r7, #8]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fa5b 	bl	8003074 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0208 	orr.w	r2, r2, #8
 8002bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0204 	bic.w	r2, r2, #4
 8002bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69d9      	ldr	r1, [r3, #28]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	61da      	str	r2, [r3, #28]
      break;
 8002bf0:	e023      	b.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 faa5 	bl	8003148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69da      	ldr	r2, [r3, #28]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69d9      	ldr	r1, [r3, #28]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	021a      	lsls	r2, r3, #8
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	61da      	str	r2, [r3, #28]
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	75fb      	strb	r3, [r7, #23]
      break;
 8002c38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_TIM_ConfigClockSource+0x1c>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e0b4      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x186>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca0:	d03e      	beq.n	8002d20 <HAL_TIM_ConfigClockSource+0xd4>
 8002ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca6:	f200 8087 	bhi.w	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cae:	f000 8086 	beq.w	8002dbe <HAL_TIM_ConfigClockSource+0x172>
 8002cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb6:	d87f      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b70      	cmp	r3, #112	; 0x70
 8002cba:	d01a      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0xa6>
 8002cbc:	2b70      	cmp	r3, #112	; 0x70
 8002cbe:	d87b      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc0:	2b60      	cmp	r3, #96	; 0x60
 8002cc2:	d050      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0x11a>
 8002cc4:	2b60      	cmp	r3, #96	; 0x60
 8002cc6:	d877      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc8:	2b50      	cmp	r3, #80	; 0x50
 8002cca:	d03c      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0xfa>
 8002ccc:	2b50      	cmp	r3, #80	; 0x50
 8002cce:	d873      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd0:	2b40      	cmp	r3, #64	; 0x40
 8002cd2:	d058      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x13a>
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d86f      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd8:	2b30      	cmp	r3, #48	; 0x30
 8002cda:	d064      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cdc:	2b30      	cmp	r3, #48	; 0x30
 8002cde:	d86b      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d060      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d867      	bhi.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d05c      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d05a      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x15a>
 8002cf0:	e062      	b.n	8002db8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d02:	f000 fae6 	bl	80032d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	609a      	str	r2, [r3, #8]
      break;
 8002d1e:	e04f      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d30:	f000 facf 	bl	80032d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d42:	609a      	str	r2, [r3, #8]
      break;
 8002d44:	e03c      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d52:	461a      	mov	r2, r3
 8002d54:	f000 fa46 	bl	80031e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2150      	movs	r1, #80	; 0x50
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fa9d 	bl	800329e <TIM_ITRx_SetConfig>
      break;
 8002d64:	e02c      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d72:	461a      	mov	r2, r3
 8002d74:	f000 fa64 	bl	8003240 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2160      	movs	r1, #96	; 0x60
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fa8d 	bl	800329e <TIM_ITRx_SetConfig>
      break;
 8002d84:	e01c      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d92:	461a      	mov	r2, r3
 8002d94:	f000 fa26 	bl	80031e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2140      	movs	r1, #64	; 0x40
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fa7d 	bl	800329e <TIM_ITRx_SetConfig>
      break;
 8002da4:	e00c      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f000 fa74 	bl	800329e <TIM_ITRx_SetConfig>
      break;
 8002db6:	e003      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbc:	e000      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
	...

08002e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <TIM_Base_SetConfig+0xa8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <TIM_Base_SetConfig+0x28>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e42:	d003      	beq.n	8002e4c <TIM_Base_SetConfig+0x28>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <TIM_Base_SetConfig+0xac>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d108      	bne.n	8002e5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <TIM_Base_SetConfig+0xa8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <TIM_Base_SetConfig+0x52>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6c:	d003      	beq.n	8002e76 <TIM_Base_SetConfig+0x52>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <TIM_Base_SetConfig+0xac>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d108      	bne.n	8002e88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a07      	ldr	r2, [pc, #28]	; (8002ecc <TIM_Base_SetConfig+0xa8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d103      	bne.n	8002ebc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	615a      	str	r2, [r3, #20]
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400

08002ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f023 0201 	bic.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0303 	bic.w	r3, r3, #3
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 0302 	bic.w	r3, r3, #2
 8002f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <TIM_OC1_SetConfig+0xc8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d10c      	bne.n	8002f4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f023 0308 	bic.w	r3, r3, #8
 8002f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <TIM_OC1_SetConfig+0xc8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d111      	bne.n	8002f76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	621a      	str	r2, [r3, #32]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40012c00 	.word	0x40012c00

08002fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f023 0210 	bic.w	r2, r3, #16
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f023 0320 	bic.w	r3, r3, #32
 8002fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <TIM_OC2_SetConfig+0xd0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10d      	bne.n	800301c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800301a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a14      	ldr	r2, [pc, #80]	; (8003070 <TIM_OC2_SetConfig+0xd0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d113      	bne.n	800304c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800302a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40012c00 	.word	0x40012c00

08003074 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0303 	bic.w	r3, r3, #3
 80030aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <TIM_OC3_SetConfig+0xd0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10d      	bne.n	80030ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	021b      	lsls	r3, r3, #8
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <TIM_OC3_SetConfig+0xd0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d113      	bne.n	800311e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	621a      	str	r2, [r3, #32]
}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40012c00 	.word	0x40012c00

08003148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	031b      	lsls	r3, r3, #12
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a0f      	ldr	r2, [pc, #60]	; (80031e0 <TIM_OC4_SetConfig+0x98>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d109      	bne.n	80031bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	40012c00 	.word	0x40012c00

080031e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f023 0201 	bic.w	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800320e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 030a 	bic.w	r3, r3, #10
 8003220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4313      	orrs	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	621a      	str	r2, [r3, #32]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f023 0210 	bic.w	r2, r3, #16
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800326a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	031b      	lsls	r3, r3, #12
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800327c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	621a      	str	r2, [r3, #32]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f043 0307 	orr.w	r3, r3, #7
 80032c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	609a      	str	r2, [r3, #8]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b087      	sub	sp, #28
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	021a      	lsls	r2, r3, #8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	609a      	str	r2, [r3, #8]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003324:	2302      	movs	r3, #2
 8003326:	e041      	b.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d009      	beq.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003374:	d004      	beq.n	8003380 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a10      	ldr	r2, [pc, #64]	; (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10c      	bne.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003386:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	4313      	orrs	r3, r2
 8003390:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40000400 	.word	0x40000400

080033c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e042      	b.n	800347c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd ff08 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fdc5 	bl	8003fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800343c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800344c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800345c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d16d      	bne.n	8003580 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_UART_Transmit+0x2c>
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e066      	b.n	8003582 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2221      	movs	r2, #33	; 0x21
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034c2:	f7fe f967 	bl	8001794 <HAL_GetTick>
 80034c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	88fa      	ldrh	r2, [r7, #6]
 80034d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034dc:	d108      	bne.n	80034f0 <HAL_UART_Transmit+0x6c>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e003      	b.n	80034f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034f8:	e02a      	b.n	8003550 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2200      	movs	r2, #0
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fb14 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e036      	b.n	8003582 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10b      	bne.n	8003532 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003528:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	3302      	adds	r3, #2
 800352e:	61bb      	str	r3, [r7, #24]
 8003530:	e007      	b.n	8003542 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	781a      	ldrb	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	3301      	adds	r3, #1
 8003540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1cf      	bne.n	80034fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2200      	movs	r2, #0
 8003562:	2140      	movs	r1, #64	; 0x40
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fae4 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e006      	b.n	8003582 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	4613      	mov	r3, r2
 8003596:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d112      	bne.n	80035ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_UART_Receive_IT+0x26>
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e00b      	b.n	80035cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	461a      	mov	r2, r3
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 fb24 	bl	8003c0e <UART_Start_Receive_IT>
 80035c6:	4603      	mov	r3, r0
 80035c8:	e000      	b.n	80035cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
  }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b0ba      	sub	sp, #232	; 0xe8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003600:	2300      	movs	r3, #0
 8003602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_UART_IRQHandler+0x66>
 8003626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fc01 	bl	8003e3a <UART_Receive_IT>
      return;
 8003638:	e25b      	b.n	8003af2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800363a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80de 	beq.w	8003800 <HAL_UART_IRQHandler+0x22c>
 8003644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003654:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80d1 	beq.w	8003800 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800365e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_UART_IRQHandler+0xae>
 800366a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <HAL_UART_IRQHandler+0xd2>
 800368e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f043 0202 	orr.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_UART_IRQHandler+0xf6>
 80036b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d011      	beq.n	80036fa <HAL_UART_IRQHandler+0x126>
 80036d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f043 0208 	orr.w	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 81f2 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_UART_IRQHandler+0x14e>
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fb8c 	bl	8003e3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <HAL_UART_IRQHandler+0x17a>
 8003746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04f      	beq.n	80037ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa96 	bl	8003c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d041      	beq.n	80037e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3314      	adds	r3, #20
 8003768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800377c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800378e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800379a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1d9      	bne.n	8003762 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d013      	beq.n	80037de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	4a7e      	ldr	r2, [pc, #504]	; (80039b4 <HAL_UART_IRQHandler+0x3e0>)
 80037bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe f938 	bl	8001a38 <HAL_DMA_Abort_IT>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d016      	beq.n	80037fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037d8:	4610      	mov	r0, r2
 80037da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e00e      	b.n	80037fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f993 	bl	8003b0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e00a      	b.n	80037fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f98f 	bl	8003b0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ec:	e006      	b.n	80037fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f98b 	bl	8003b0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80037fa:	e175      	b.n	8003ae8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	bf00      	nop
    return;
 80037fe:	e173      	b.n	8003ae8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	2b01      	cmp	r3, #1
 8003806:	f040 814f 	bne.w	8003aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 8148 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8141 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80b6 	beq.w	80039b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003858:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8145 	beq.w	8003aec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800386a:	429a      	cmp	r2, r3
 800386c:	f080 813e 	bcs.w	8003aec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003876:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b20      	cmp	r3, #32
 8003880:	f000 8088 	beq.w	8003994 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	330c      	adds	r3, #12
 800388a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800389a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800389e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038b0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1d9      	bne.n	8003884 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3314      	adds	r3, #20
 80038f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e1      	bne.n	80038d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3314      	adds	r3, #20
 8003912:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800391c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3314      	adds	r3, #20
 800392c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003930:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003932:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003936:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800393e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e3      	bne.n	800390c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	330c      	adds	r3, #12
 8003958:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003964:	f023 0310 	bic.w	r3, r3, #16
 8003968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003976:	65ba      	str	r2, [r7, #88]	; 0x58
 8003978:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800397c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e3      	bne.n	8003952 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe f817 	bl	80019c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8b6 	bl	8003b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039b0:	e09c      	b.n	8003aec <HAL_UART_IRQHandler+0x518>
 80039b2:	bf00      	nop
 80039b4:	08003d45 	.word	0x08003d45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 808e 	beq.w	8003af0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8089 	beq.w	8003af0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a02:	647a      	str	r2, [r7, #68]	; 0x44
 8003a04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e3      	bne.n	80039de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3314      	adds	r3, #20
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	623b      	str	r3, [r7, #32]
   return(result);
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3314      	adds	r3, #20
 8003a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0310 	bic.w	r3, r3, #16
 8003a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a80:	61fa      	str	r2, [r7, #28]
 8003a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e3      	bne.n	8003a5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f83b 	bl	8003b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aa6:	e023      	b.n	8003af0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x4f4>
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f953 	bl	8003d6c <UART_Transmit_IT>
    return;
 8003ac6:	e014      	b.n	8003af2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <HAL_UART_IRQHandler+0x51e>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f992 	bl	8003e0a <UART_EndTransmit_IT>
    return;
 8003ae6:	e004      	b.n	8003af2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ae8:	bf00      	nop
 8003aea:	e002      	b.n	8003af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003aec:	bf00      	nop
 8003aee:	e000      	b.n	8003af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003af0:	bf00      	nop
  }
}
 8003af2:	37e8      	adds	r7, #232	; 0xe8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b090      	sub	sp, #64	; 0x40
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b42:	e050      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d04c      	beq.n	8003be6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b52:	f7fd fe1f 	bl	8001794 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d241      	bcs.n	8003be6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	330c      	adds	r3, #12
 8003b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b82:	637a      	str	r2, [r7, #52]	; 0x34
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e5      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3314      	adds	r3, #20
 8003b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb6:	623a      	str	r2, [r7, #32]
 8003bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	69f9      	ldr	r1, [r7, #28]
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e5      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e00f      	b.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2301      	moveq	r3, #1
 8003bf8:	2300      	movne	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d09f      	beq.n	8003b44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3740      	adds	r7, #64	; 0x40
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b085      	sub	sp, #20
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2222      	movs	r2, #34	; 0x22
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695a      	ldr	r2, [r3, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0220 	orr.w	r2, r2, #32
 8003c72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b095      	sub	sp, #84	; 0x54
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ca8:	643a      	str	r2, [r7, #64]	; 0x40
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d119      	bne.n	8003d2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d18:	61ba      	str	r2, [r7, #24]
 8003d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6979      	ldr	r1, [r7, #20]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	613b      	str	r3, [r7, #16]
   return(result);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d3a:	bf00      	nop
 8003d3c:	3754      	adds	r7, #84	; 0x54
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff fed3 	bl	8003b0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b21      	cmp	r3, #33	; 0x21
 8003d7e:	d13e      	bne.n	8003dfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d88:	d114      	bne.n	8003db4 <UART_Transmit_IT+0x48>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d110      	bne.n	8003db4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	1c9a      	adds	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]
 8003db2:	e008      	b.n	8003dc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	1c59      	adds	r1, r3, #1
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6211      	str	r1, [r2, #32]
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10f      	bne.n	8003dfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003de8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e000      	b.n	8003e00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dfe:	2302      	movs	r3, #2
  }
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fe64 	bl	8003af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b08c      	sub	sp, #48	; 0x30
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b22      	cmp	r3, #34	; 0x22
 8003e4c:	f040 80ae 	bne.w	8003fac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e58:	d117      	bne.n	8003e8a <UART_Receive_IT+0x50>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d113      	bne.n	8003e8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	1c9a      	adds	r2, r3, #2
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
 8003e88:	e026      	b.n	8003ed8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9c:	d007      	beq.n	8003eae <UART_Receive_IT+0x74>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <UART_Receive_IT+0x82>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e008      	b.n	8003ece <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d15d      	bne.n	8003fa8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0220 	bic.w	r2, r2, #32
 8003efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d135      	bne.n	8003f9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	613b      	str	r3, [r7, #16]
   return(result);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 0310 	bic.w	r3, r3, #16
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	623a      	str	r2, [r7, #32]
 8003f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	69f9      	ldr	r1, [r7, #28]
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d10a      	bne.n	8003f90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f94:	4619      	mov	r1, r3
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7ff fdc0 	bl	8003b1c <HAL_UARTEx_RxEventCallback>
 8003f9c:	e002      	b.n	8003fa4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fc faf4 	bl	800058c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e002      	b.n	8003fae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e000      	b.n	8003fae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3730      	adds	r7, #48	; 0x30
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ff2:	f023 030c 	bic.w	r3, r3, #12
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <UART_SetConfig+0x114>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d103      	bne.n	8004028 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fe fb24 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	e002      	b.n	800402e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe fb0c 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 800402c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009a      	lsls	r2, r3, #2
 8004038:	441a      	add	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	fbb2 f3f3 	udiv	r3, r2, r3
 8004044:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <UART_SetConfig+0x118>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	0119      	lsls	r1, r3, #4
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009a      	lsls	r2, r3, #2
 8004058:	441a      	add	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	fbb2 f2f3 	udiv	r2, r2, r3
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <UART_SetConfig+0x118>)
 8004066:	fba3 0302 	umull	r0, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2064      	movs	r0, #100	; 0x64
 800406e:	fb00 f303 	mul.w	r3, r0, r3
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	3332      	adds	r3, #50	; 0x32
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <UART_SetConfig+0x118>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004084:	4419      	add	r1, r3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009a      	lsls	r2, r3, #2
 8004090:	441a      	add	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	fbb2 f2f3 	udiv	r2, r2, r3
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <UART_SetConfig+0x118>)
 800409e:	fba3 0302 	umull	r0, r3, r3, r2
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2064      	movs	r0, #100	; 0x64
 80040a6:	fb00 f303 	mul.w	r3, r0, r3
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	3332      	adds	r3, #50	; 0x32
 80040b0:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <UART_SetConfig+0x118>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	f003 020f 	and.w	r2, r3, #15
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	440a      	add	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40013800 	.word	0x40013800
 80040d0:	51eb851f 	.word	0x51eb851f

080040d4 <std>:
 80040d4:	2300      	movs	r3, #0
 80040d6:	b510      	push	{r4, lr}
 80040d8:	4604      	mov	r4, r0
 80040da:	e9c0 3300 	strd	r3, r3, [r0]
 80040de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040e2:	6083      	str	r3, [r0, #8]
 80040e4:	8181      	strh	r1, [r0, #12]
 80040e6:	6643      	str	r3, [r0, #100]	; 0x64
 80040e8:	81c2      	strh	r2, [r0, #14]
 80040ea:	6183      	str	r3, [r0, #24]
 80040ec:	4619      	mov	r1, r3
 80040ee:	2208      	movs	r2, #8
 80040f0:	305c      	adds	r0, #92	; 0x5c
 80040f2:	f000 f926 	bl	8004342 <memset>
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <std+0x58>)
 80040f8:	6224      	str	r4, [r4, #32]
 80040fa:	6263      	str	r3, [r4, #36]	; 0x24
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <std+0x5c>)
 80040fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <std+0x60>)
 8004102:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <std+0x64>)
 8004106:	6323      	str	r3, [r4, #48]	; 0x30
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <std+0x68>)
 800410a:	429c      	cmp	r4, r3
 800410c:	d006      	beq.n	800411c <std+0x48>
 800410e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004112:	4294      	cmp	r4, r2
 8004114:	d002      	beq.n	800411c <std+0x48>
 8004116:	33d0      	adds	r3, #208	; 0xd0
 8004118:	429c      	cmp	r4, r3
 800411a:	d105      	bne.n	8004128 <std+0x54>
 800411c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004124:	f000 b986 	b.w	8004434 <__retarget_lock_init_recursive>
 8004128:	bd10      	pop	{r4, pc}
 800412a:	bf00      	nop
 800412c:	080042bd 	.word	0x080042bd
 8004130:	080042df 	.word	0x080042df
 8004134:	08004317 	.word	0x08004317
 8004138:	0800433b 	.word	0x0800433b
 800413c:	20000324 	.word	0x20000324

08004140 <stdio_exit_handler>:
 8004140:	4a02      	ldr	r2, [pc, #8]	; (800414c <stdio_exit_handler+0xc>)
 8004142:	4903      	ldr	r1, [pc, #12]	; (8004150 <stdio_exit_handler+0x10>)
 8004144:	4803      	ldr	r0, [pc, #12]	; (8004154 <stdio_exit_handler+0x14>)
 8004146:	f000 b869 	b.w	800421c <_fwalk_sglue>
 800414a:	bf00      	nop
 800414c:	20000054 	.word	0x20000054
 8004150:	08004f85 	.word	0x08004f85
 8004154:	20000060 	.word	0x20000060

08004158 <cleanup_stdio>:
 8004158:	6841      	ldr	r1, [r0, #4]
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <cleanup_stdio+0x34>)
 800415c:	b510      	push	{r4, lr}
 800415e:	4299      	cmp	r1, r3
 8004160:	4604      	mov	r4, r0
 8004162:	d001      	beq.n	8004168 <cleanup_stdio+0x10>
 8004164:	f000 ff0e 	bl	8004f84 <_fflush_r>
 8004168:	68a1      	ldr	r1, [r4, #8]
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <cleanup_stdio+0x38>)
 800416c:	4299      	cmp	r1, r3
 800416e:	d002      	beq.n	8004176 <cleanup_stdio+0x1e>
 8004170:	4620      	mov	r0, r4
 8004172:	f000 ff07 	bl	8004f84 <_fflush_r>
 8004176:	68e1      	ldr	r1, [r4, #12]
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <cleanup_stdio+0x3c>)
 800417a:	4299      	cmp	r1, r3
 800417c:	d004      	beq.n	8004188 <cleanup_stdio+0x30>
 800417e:	4620      	mov	r0, r4
 8004180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004184:	f000 befe 	b.w	8004f84 <_fflush_r>
 8004188:	bd10      	pop	{r4, pc}
 800418a:	bf00      	nop
 800418c:	20000324 	.word	0x20000324
 8004190:	2000038c 	.word	0x2000038c
 8004194:	200003f4 	.word	0x200003f4

08004198 <global_stdio_init.part.0>:
 8004198:	b510      	push	{r4, lr}
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <global_stdio_init.part.0+0x30>)
 800419c:	4c0b      	ldr	r4, [pc, #44]	; (80041cc <global_stdio_init.part.0+0x34>)
 800419e:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <global_stdio_init.part.0+0x38>)
 80041a0:	4620      	mov	r0, r4
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	2104      	movs	r1, #4
 80041a6:	2200      	movs	r2, #0
 80041a8:	f7ff ff94 	bl	80040d4 <std>
 80041ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80041b0:	2201      	movs	r2, #1
 80041b2:	2109      	movs	r1, #9
 80041b4:	f7ff ff8e 	bl	80040d4 <std>
 80041b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80041bc:	2202      	movs	r2, #2
 80041be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c2:	2112      	movs	r1, #18
 80041c4:	f7ff bf86 	b.w	80040d4 <std>
 80041c8:	2000045c 	.word	0x2000045c
 80041cc:	20000324 	.word	0x20000324
 80041d0:	08004141 	.word	0x08004141

080041d4 <__sfp_lock_acquire>:
 80041d4:	4801      	ldr	r0, [pc, #4]	; (80041dc <__sfp_lock_acquire+0x8>)
 80041d6:	f000 b92e 	b.w	8004436 <__retarget_lock_acquire_recursive>
 80041da:	bf00      	nop
 80041dc:	20000465 	.word	0x20000465

080041e0 <__sfp_lock_release>:
 80041e0:	4801      	ldr	r0, [pc, #4]	; (80041e8 <__sfp_lock_release+0x8>)
 80041e2:	f000 b929 	b.w	8004438 <__retarget_lock_release_recursive>
 80041e6:	bf00      	nop
 80041e8:	20000465 	.word	0x20000465

080041ec <__sinit>:
 80041ec:	b510      	push	{r4, lr}
 80041ee:	4604      	mov	r4, r0
 80041f0:	f7ff fff0 	bl	80041d4 <__sfp_lock_acquire>
 80041f4:	6a23      	ldr	r3, [r4, #32]
 80041f6:	b11b      	cbz	r3, 8004200 <__sinit+0x14>
 80041f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041fc:	f7ff bff0 	b.w	80041e0 <__sfp_lock_release>
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <__sinit+0x28>)
 8004202:	6223      	str	r3, [r4, #32]
 8004204:	4b04      	ldr	r3, [pc, #16]	; (8004218 <__sinit+0x2c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f5      	bne.n	80041f8 <__sinit+0xc>
 800420c:	f7ff ffc4 	bl	8004198 <global_stdio_init.part.0>
 8004210:	e7f2      	b.n	80041f8 <__sinit+0xc>
 8004212:	bf00      	nop
 8004214:	08004159 	.word	0x08004159
 8004218:	2000045c 	.word	0x2000045c

0800421c <_fwalk_sglue>:
 800421c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004220:	4607      	mov	r7, r0
 8004222:	4688      	mov	r8, r1
 8004224:	4614      	mov	r4, r2
 8004226:	2600      	movs	r6, #0
 8004228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800422c:	f1b9 0901 	subs.w	r9, r9, #1
 8004230:	d505      	bpl.n	800423e <_fwalk_sglue+0x22>
 8004232:	6824      	ldr	r4, [r4, #0]
 8004234:	2c00      	cmp	r4, #0
 8004236:	d1f7      	bne.n	8004228 <_fwalk_sglue+0xc>
 8004238:	4630      	mov	r0, r6
 800423a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800423e:	89ab      	ldrh	r3, [r5, #12]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d907      	bls.n	8004254 <_fwalk_sglue+0x38>
 8004244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004248:	3301      	adds	r3, #1
 800424a:	d003      	beq.n	8004254 <_fwalk_sglue+0x38>
 800424c:	4629      	mov	r1, r5
 800424e:	4638      	mov	r0, r7
 8004250:	47c0      	blx	r8
 8004252:	4306      	orrs	r6, r0
 8004254:	3568      	adds	r5, #104	; 0x68
 8004256:	e7e9      	b.n	800422c <_fwalk_sglue+0x10>

08004258 <iprintf>:
 8004258:	b40f      	push	{r0, r1, r2, r3}
 800425a:	b507      	push	{r0, r1, r2, lr}
 800425c:	4906      	ldr	r1, [pc, #24]	; (8004278 <iprintf+0x20>)
 800425e:	ab04      	add	r3, sp, #16
 8004260:	6808      	ldr	r0, [r1, #0]
 8004262:	f853 2b04 	ldr.w	r2, [r3], #4
 8004266:	6881      	ldr	r1, [r0, #8]
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	f000 fb5b 	bl	8004924 <_vfiprintf_r>
 800426e:	b003      	add	sp, #12
 8004270:	f85d eb04 	ldr.w	lr, [sp], #4
 8004274:	b004      	add	sp, #16
 8004276:	4770      	bx	lr
 8004278:	200000ac 	.word	0x200000ac

0800427c <siprintf>:
 800427c:	b40e      	push	{r1, r2, r3}
 800427e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004282:	b500      	push	{lr}
 8004284:	b09c      	sub	sp, #112	; 0x70
 8004286:	ab1d      	add	r3, sp, #116	; 0x74
 8004288:	9002      	str	r0, [sp, #8]
 800428a:	9006      	str	r0, [sp, #24]
 800428c:	9107      	str	r1, [sp, #28]
 800428e:	9104      	str	r1, [sp, #16]
 8004290:	4808      	ldr	r0, [pc, #32]	; (80042b4 <siprintf+0x38>)
 8004292:	4909      	ldr	r1, [pc, #36]	; (80042b8 <siprintf+0x3c>)
 8004294:	f853 2b04 	ldr.w	r2, [r3], #4
 8004298:	9105      	str	r1, [sp, #20]
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	a902      	add	r1, sp, #8
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	f000 fa1a 	bl	80046d8 <_svfiprintf_r>
 80042a4:	2200      	movs	r2, #0
 80042a6:	9b02      	ldr	r3, [sp, #8]
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	b01c      	add	sp, #112	; 0x70
 80042ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80042b0:	b003      	add	sp, #12
 80042b2:	4770      	bx	lr
 80042b4:	200000ac 	.word	0x200000ac
 80042b8:	ffff0208 	.word	0xffff0208

080042bc <__sread>:
 80042bc:	b510      	push	{r4, lr}
 80042be:	460c      	mov	r4, r1
 80042c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c4:	f000 f868 	bl	8004398 <_read_r>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	bfab      	itete	ge
 80042cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042ce:	89a3      	ldrhlt	r3, [r4, #12]
 80042d0:	181b      	addge	r3, r3, r0
 80042d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042d6:	bfac      	ite	ge
 80042d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042da:	81a3      	strhlt	r3, [r4, #12]
 80042dc:	bd10      	pop	{r4, pc}

080042de <__swrite>:
 80042de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e2:	461f      	mov	r7, r3
 80042e4:	898b      	ldrh	r3, [r1, #12]
 80042e6:	4605      	mov	r5, r0
 80042e8:	05db      	lsls	r3, r3, #23
 80042ea:	460c      	mov	r4, r1
 80042ec:	4616      	mov	r6, r2
 80042ee:	d505      	bpl.n	80042fc <__swrite+0x1e>
 80042f0:	2302      	movs	r3, #2
 80042f2:	2200      	movs	r2, #0
 80042f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f8:	f000 f83c 	bl	8004374 <_lseek_r>
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	4632      	mov	r2, r6
 8004300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	4628      	mov	r0, r5
 8004308:	463b      	mov	r3, r7
 800430a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800430e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004312:	f000 b853 	b.w	80043bc <_write_r>

08004316 <__sseek>:
 8004316:	b510      	push	{r4, lr}
 8004318:	460c      	mov	r4, r1
 800431a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431e:	f000 f829 	bl	8004374 <_lseek_r>
 8004322:	1c43      	adds	r3, r0, #1
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	bf15      	itete	ne
 8004328:	6560      	strne	r0, [r4, #84]	; 0x54
 800432a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800432e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004332:	81a3      	strheq	r3, [r4, #12]
 8004334:	bf18      	it	ne
 8004336:	81a3      	strhne	r3, [r4, #12]
 8004338:	bd10      	pop	{r4, pc}

0800433a <__sclose>:
 800433a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433e:	f000 b809 	b.w	8004354 <_close_r>

08004342 <memset>:
 8004342:	4603      	mov	r3, r0
 8004344:	4402      	add	r2, r0
 8004346:	4293      	cmp	r3, r2
 8004348:	d100      	bne.n	800434c <memset+0xa>
 800434a:	4770      	bx	lr
 800434c:	f803 1b01 	strb.w	r1, [r3], #1
 8004350:	e7f9      	b.n	8004346 <memset+0x4>
	...

08004354 <_close_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	2300      	movs	r3, #0
 8004358:	4d05      	ldr	r5, [pc, #20]	; (8004370 <_close_r+0x1c>)
 800435a:	4604      	mov	r4, r0
 800435c:	4608      	mov	r0, r1
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	f7fd f82f 	bl	80013c2 <_close>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_close_r+0x1a>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	b103      	cbz	r3, 800436e <_close_r+0x1a>
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	20000460 	.word	0x20000460

08004374 <_lseek_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	2200      	movs	r2, #0
 800437e:	4d05      	ldr	r5, [pc, #20]	; (8004394 <_lseek_r+0x20>)
 8004380:	602a      	str	r2, [r5, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	f7fd f841 	bl	800140a <_lseek>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_lseek_r+0x1e>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	b103      	cbz	r3, 8004392 <_lseek_r+0x1e>
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	20000460 	.word	0x20000460

08004398 <_read_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	2200      	movs	r2, #0
 80043a2:	4d05      	ldr	r5, [pc, #20]	; (80043b8 <_read_r+0x20>)
 80043a4:	602a      	str	r2, [r5, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f7fc ffd2 	bl	8001350 <_read>
 80043ac:	1c43      	adds	r3, r0, #1
 80043ae:	d102      	bne.n	80043b6 <_read_r+0x1e>
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	b103      	cbz	r3, 80043b6 <_read_r+0x1e>
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	bd38      	pop	{r3, r4, r5, pc}
 80043b8:	20000460 	.word	0x20000460

080043bc <_write_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4604      	mov	r4, r0
 80043c0:	4608      	mov	r0, r1
 80043c2:	4611      	mov	r1, r2
 80043c4:	2200      	movs	r2, #0
 80043c6:	4d05      	ldr	r5, [pc, #20]	; (80043dc <_write_r+0x20>)
 80043c8:	602a      	str	r2, [r5, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f7fc ffdd 	bl	800138a <_write>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d102      	bne.n	80043da <_write_r+0x1e>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	b103      	cbz	r3, 80043da <_write_r+0x1e>
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	bd38      	pop	{r3, r4, r5, pc}
 80043dc:	20000460 	.word	0x20000460

080043e0 <__errno>:
 80043e0:	4b01      	ldr	r3, [pc, #4]	; (80043e8 <__errno+0x8>)
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	200000ac 	.word	0x200000ac

080043ec <__libc_init_array>:
 80043ec:	b570      	push	{r4, r5, r6, lr}
 80043ee:	2600      	movs	r6, #0
 80043f0:	4d0c      	ldr	r5, [pc, #48]	; (8004424 <__libc_init_array+0x38>)
 80043f2:	4c0d      	ldr	r4, [pc, #52]	; (8004428 <__libc_init_array+0x3c>)
 80043f4:	1b64      	subs	r4, r4, r5
 80043f6:	10a4      	asrs	r4, r4, #2
 80043f8:	42a6      	cmp	r6, r4
 80043fa:	d109      	bne.n	8004410 <__libc_init_array+0x24>
 80043fc:	f000 ff80 	bl	8005300 <_init>
 8004400:	2600      	movs	r6, #0
 8004402:	4d0a      	ldr	r5, [pc, #40]	; (800442c <__libc_init_array+0x40>)
 8004404:	4c0a      	ldr	r4, [pc, #40]	; (8004430 <__libc_init_array+0x44>)
 8004406:	1b64      	subs	r4, r4, r5
 8004408:	10a4      	asrs	r4, r4, #2
 800440a:	42a6      	cmp	r6, r4
 800440c:	d105      	bne.n	800441a <__libc_init_array+0x2e>
 800440e:	bd70      	pop	{r4, r5, r6, pc}
 8004410:	f855 3b04 	ldr.w	r3, [r5], #4
 8004414:	4798      	blx	r3
 8004416:	3601      	adds	r6, #1
 8004418:	e7ee      	b.n	80043f8 <__libc_init_array+0xc>
 800441a:	f855 3b04 	ldr.w	r3, [r5], #4
 800441e:	4798      	blx	r3
 8004420:	3601      	adds	r6, #1
 8004422:	e7f2      	b.n	800440a <__libc_init_array+0x1e>
 8004424:	08005398 	.word	0x08005398
 8004428:	08005398 	.word	0x08005398
 800442c:	08005398 	.word	0x08005398
 8004430:	0800539c 	.word	0x0800539c

08004434 <__retarget_lock_init_recursive>:
 8004434:	4770      	bx	lr

08004436 <__retarget_lock_acquire_recursive>:
 8004436:	4770      	bx	lr

08004438 <__retarget_lock_release_recursive>:
 8004438:	4770      	bx	lr
	...

0800443c <_free_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4605      	mov	r5, r0
 8004440:	2900      	cmp	r1, #0
 8004442:	d040      	beq.n	80044c6 <_free_r+0x8a>
 8004444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004448:	1f0c      	subs	r4, r1, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	bfb8      	it	lt
 800444e:	18e4      	addlt	r4, r4, r3
 8004450:	f000 f8dc 	bl	800460c <__malloc_lock>
 8004454:	4a1c      	ldr	r2, [pc, #112]	; (80044c8 <_free_r+0x8c>)
 8004456:	6813      	ldr	r3, [r2, #0]
 8004458:	b933      	cbnz	r3, 8004468 <_free_r+0x2c>
 800445a:	6063      	str	r3, [r4, #4]
 800445c:	6014      	str	r4, [r2, #0]
 800445e:	4628      	mov	r0, r5
 8004460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004464:	f000 b8d8 	b.w	8004618 <__malloc_unlock>
 8004468:	42a3      	cmp	r3, r4
 800446a:	d908      	bls.n	800447e <_free_r+0x42>
 800446c:	6820      	ldr	r0, [r4, #0]
 800446e:	1821      	adds	r1, r4, r0
 8004470:	428b      	cmp	r3, r1
 8004472:	bf01      	itttt	eq
 8004474:	6819      	ldreq	r1, [r3, #0]
 8004476:	685b      	ldreq	r3, [r3, #4]
 8004478:	1809      	addeq	r1, r1, r0
 800447a:	6021      	streq	r1, [r4, #0]
 800447c:	e7ed      	b.n	800445a <_free_r+0x1e>
 800447e:	461a      	mov	r2, r3
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	b10b      	cbz	r3, 8004488 <_free_r+0x4c>
 8004484:	42a3      	cmp	r3, r4
 8004486:	d9fa      	bls.n	800447e <_free_r+0x42>
 8004488:	6811      	ldr	r1, [r2, #0]
 800448a:	1850      	adds	r0, r2, r1
 800448c:	42a0      	cmp	r0, r4
 800448e:	d10b      	bne.n	80044a8 <_free_r+0x6c>
 8004490:	6820      	ldr	r0, [r4, #0]
 8004492:	4401      	add	r1, r0
 8004494:	1850      	adds	r0, r2, r1
 8004496:	4283      	cmp	r3, r0
 8004498:	6011      	str	r1, [r2, #0]
 800449a:	d1e0      	bne.n	800445e <_free_r+0x22>
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4408      	add	r0, r1
 80044a2:	6010      	str	r0, [r2, #0]
 80044a4:	6053      	str	r3, [r2, #4]
 80044a6:	e7da      	b.n	800445e <_free_r+0x22>
 80044a8:	d902      	bls.n	80044b0 <_free_r+0x74>
 80044aa:	230c      	movs	r3, #12
 80044ac:	602b      	str	r3, [r5, #0]
 80044ae:	e7d6      	b.n	800445e <_free_r+0x22>
 80044b0:	6820      	ldr	r0, [r4, #0]
 80044b2:	1821      	adds	r1, r4, r0
 80044b4:	428b      	cmp	r3, r1
 80044b6:	bf01      	itttt	eq
 80044b8:	6819      	ldreq	r1, [r3, #0]
 80044ba:	685b      	ldreq	r3, [r3, #4]
 80044bc:	1809      	addeq	r1, r1, r0
 80044be:	6021      	streq	r1, [r4, #0]
 80044c0:	6063      	str	r3, [r4, #4]
 80044c2:	6054      	str	r4, [r2, #4]
 80044c4:	e7cb      	b.n	800445e <_free_r+0x22>
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	20000468 	.word	0x20000468

080044cc <sbrk_aligned>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	4e0e      	ldr	r6, [pc, #56]	; (8004508 <sbrk_aligned+0x3c>)
 80044d0:	460c      	mov	r4, r1
 80044d2:	6831      	ldr	r1, [r6, #0]
 80044d4:	4605      	mov	r5, r0
 80044d6:	b911      	cbnz	r1, 80044de <sbrk_aligned+0x12>
 80044d8:	f000 fe2c 	bl	8005134 <_sbrk_r>
 80044dc:	6030      	str	r0, [r6, #0]
 80044de:	4621      	mov	r1, r4
 80044e0:	4628      	mov	r0, r5
 80044e2:	f000 fe27 	bl	8005134 <_sbrk_r>
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	d00a      	beq.n	8004500 <sbrk_aligned+0x34>
 80044ea:	1cc4      	adds	r4, r0, #3
 80044ec:	f024 0403 	bic.w	r4, r4, #3
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d007      	beq.n	8004504 <sbrk_aligned+0x38>
 80044f4:	1a21      	subs	r1, r4, r0
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 fe1c 	bl	8005134 <_sbrk_r>
 80044fc:	3001      	adds	r0, #1
 80044fe:	d101      	bne.n	8004504 <sbrk_aligned+0x38>
 8004500:	f04f 34ff 	mov.w	r4, #4294967295
 8004504:	4620      	mov	r0, r4
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	2000046c 	.word	0x2000046c

0800450c <_malloc_r>:
 800450c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004510:	1ccd      	adds	r5, r1, #3
 8004512:	f025 0503 	bic.w	r5, r5, #3
 8004516:	3508      	adds	r5, #8
 8004518:	2d0c      	cmp	r5, #12
 800451a:	bf38      	it	cc
 800451c:	250c      	movcc	r5, #12
 800451e:	2d00      	cmp	r5, #0
 8004520:	4607      	mov	r7, r0
 8004522:	db01      	blt.n	8004528 <_malloc_r+0x1c>
 8004524:	42a9      	cmp	r1, r5
 8004526:	d905      	bls.n	8004534 <_malloc_r+0x28>
 8004528:	230c      	movs	r3, #12
 800452a:	2600      	movs	r6, #0
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4630      	mov	r0, r6
 8004530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004608 <_malloc_r+0xfc>
 8004538:	f000 f868 	bl	800460c <__malloc_lock>
 800453c:	f8d8 3000 	ldr.w	r3, [r8]
 8004540:	461c      	mov	r4, r3
 8004542:	bb5c      	cbnz	r4, 800459c <_malloc_r+0x90>
 8004544:	4629      	mov	r1, r5
 8004546:	4638      	mov	r0, r7
 8004548:	f7ff ffc0 	bl	80044cc <sbrk_aligned>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	4604      	mov	r4, r0
 8004550:	d155      	bne.n	80045fe <_malloc_r+0xf2>
 8004552:	f8d8 4000 	ldr.w	r4, [r8]
 8004556:	4626      	mov	r6, r4
 8004558:	2e00      	cmp	r6, #0
 800455a:	d145      	bne.n	80045e8 <_malloc_r+0xdc>
 800455c:	2c00      	cmp	r4, #0
 800455e:	d048      	beq.n	80045f2 <_malloc_r+0xe6>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	4631      	mov	r1, r6
 8004564:	4638      	mov	r0, r7
 8004566:	eb04 0903 	add.w	r9, r4, r3
 800456a:	f000 fde3 	bl	8005134 <_sbrk_r>
 800456e:	4581      	cmp	r9, r0
 8004570:	d13f      	bne.n	80045f2 <_malloc_r+0xe6>
 8004572:	6821      	ldr	r1, [r4, #0]
 8004574:	4638      	mov	r0, r7
 8004576:	1a6d      	subs	r5, r5, r1
 8004578:	4629      	mov	r1, r5
 800457a:	f7ff ffa7 	bl	80044cc <sbrk_aligned>
 800457e:	3001      	adds	r0, #1
 8004580:	d037      	beq.n	80045f2 <_malloc_r+0xe6>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	442b      	add	r3, r5
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	f8d8 3000 	ldr.w	r3, [r8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d038      	beq.n	8004602 <_malloc_r+0xf6>
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	42a2      	cmp	r2, r4
 8004594:	d12b      	bne.n	80045ee <_malloc_r+0xe2>
 8004596:	2200      	movs	r2, #0
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	e00f      	b.n	80045bc <_malloc_r+0xb0>
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	1b52      	subs	r2, r2, r5
 80045a0:	d41f      	bmi.n	80045e2 <_malloc_r+0xd6>
 80045a2:	2a0b      	cmp	r2, #11
 80045a4:	d917      	bls.n	80045d6 <_malloc_r+0xca>
 80045a6:	1961      	adds	r1, r4, r5
 80045a8:	42a3      	cmp	r3, r4
 80045aa:	6025      	str	r5, [r4, #0]
 80045ac:	bf18      	it	ne
 80045ae:	6059      	strne	r1, [r3, #4]
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	bf08      	it	eq
 80045b4:	f8c8 1000 	streq.w	r1, [r8]
 80045b8:	5162      	str	r2, [r4, r5]
 80045ba:	604b      	str	r3, [r1, #4]
 80045bc:	4638      	mov	r0, r7
 80045be:	f104 060b 	add.w	r6, r4, #11
 80045c2:	f000 f829 	bl	8004618 <__malloc_unlock>
 80045c6:	f026 0607 	bic.w	r6, r6, #7
 80045ca:	1d23      	adds	r3, r4, #4
 80045cc:	1af2      	subs	r2, r6, r3
 80045ce:	d0ae      	beq.n	800452e <_malloc_r+0x22>
 80045d0:	1b9b      	subs	r3, r3, r6
 80045d2:	50a3      	str	r3, [r4, r2]
 80045d4:	e7ab      	b.n	800452e <_malloc_r+0x22>
 80045d6:	42a3      	cmp	r3, r4
 80045d8:	6862      	ldr	r2, [r4, #4]
 80045da:	d1dd      	bne.n	8004598 <_malloc_r+0x8c>
 80045dc:	f8c8 2000 	str.w	r2, [r8]
 80045e0:	e7ec      	b.n	80045bc <_malloc_r+0xb0>
 80045e2:	4623      	mov	r3, r4
 80045e4:	6864      	ldr	r4, [r4, #4]
 80045e6:	e7ac      	b.n	8004542 <_malloc_r+0x36>
 80045e8:	4634      	mov	r4, r6
 80045ea:	6876      	ldr	r6, [r6, #4]
 80045ec:	e7b4      	b.n	8004558 <_malloc_r+0x4c>
 80045ee:	4613      	mov	r3, r2
 80045f0:	e7cc      	b.n	800458c <_malloc_r+0x80>
 80045f2:	230c      	movs	r3, #12
 80045f4:	4638      	mov	r0, r7
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	f000 f80e 	bl	8004618 <__malloc_unlock>
 80045fc:	e797      	b.n	800452e <_malloc_r+0x22>
 80045fe:	6025      	str	r5, [r4, #0]
 8004600:	e7dc      	b.n	80045bc <_malloc_r+0xb0>
 8004602:	605b      	str	r3, [r3, #4]
 8004604:	deff      	udf	#255	; 0xff
 8004606:	bf00      	nop
 8004608:	20000468 	.word	0x20000468

0800460c <__malloc_lock>:
 800460c:	4801      	ldr	r0, [pc, #4]	; (8004614 <__malloc_lock+0x8>)
 800460e:	f7ff bf12 	b.w	8004436 <__retarget_lock_acquire_recursive>
 8004612:	bf00      	nop
 8004614:	20000464 	.word	0x20000464

08004618 <__malloc_unlock>:
 8004618:	4801      	ldr	r0, [pc, #4]	; (8004620 <__malloc_unlock+0x8>)
 800461a:	f7ff bf0d 	b.w	8004438 <__retarget_lock_release_recursive>
 800461e:	bf00      	nop
 8004620:	20000464 	.word	0x20000464

08004624 <__ssputs_r>:
 8004624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004628:	461f      	mov	r7, r3
 800462a:	688e      	ldr	r6, [r1, #8]
 800462c:	4682      	mov	sl, r0
 800462e:	42be      	cmp	r6, r7
 8004630:	460c      	mov	r4, r1
 8004632:	4690      	mov	r8, r2
 8004634:	680b      	ldr	r3, [r1, #0]
 8004636:	d82c      	bhi.n	8004692 <__ssputs_r+0x6e>
 8004638:	898a      	ldrh	r2, [r1, #12]
 800463a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800463e:	d026      	beq.n	800468e <__ssputs_r+0x6a>
 8004640:	6965      	ldr	r5, [r4, #20]
 8004642:	6909      	ldr	r1, [r1, #16]
 8004644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004648:	eba3 0901 	sub.w	r9, r3, r1
 800464c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004650:	1c7b      	adds	r3, r7, #1
 8004652:	444b      	add	r3, r9
 8004654:	106d      	asrs	r5, r5, #1
 8004656:	429d      	cmp	r5, r3
 8004658:	bf38      	it	cc
 800465a:	461d      	movcc	r5, r3
 800465c:	0553      	lsls	r3, r2, #21
 800465e:	d527      	bpl.n	80046b0 <__ssputs_r+0x8c>
 8004660:	4629      	mov	r1, r5
 8004662:	f7ff ff53 	bl	800450c <_malloc_r>
 8004666:	4606      	mov	r6, r0
 8004668:	b360      	cbz	r0, 80046c4 <__ssputs_r+0xa0>
 800466a:	464a      	mov	r2, r9
 800466c:	6921      	ldr	r1, [r4, #16]
 800466e:	f000 fd7f 	bl	8005170 <memcpy>
 8004672:	89a3      	ldrh	r3, [r4, #12]
 8004674:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	6126      	str	r6, [r4, #16]
 8004680:	444e      	add	r6, r9
 8004682:	6026      	str	r6, [r4, #0]
 8004684:	463e      	mov	r6, r7
 8004686:	6165      	str	r5, [r4, #20]
 8004688:	eba5 0509 	sub.w	r5, r5, r9
 800468c:	60a5      	str	r5, [r4, #8]
 800468e:	42be      	cmp	r6, r7
 8004690:	d900      	bls.n	8004694 <__ssputs_r+0x70>
 8004692:	463e      	mov	r6, r7
 8004694:	4632      	mov	r2, r6
 8004696:	4641      	mov	r1, r8
 8004698:	6820      	ldr	r0, [r4, #0]
 800469a:	f000 fd31 	bl	8005100 <memmove>
 800469e:	2000      	movs	r0, #0
 80046a0:	68a3      	ldr	r3, [r4, #8]
 80046a2:	1b9b      	subs	r3, r3, r6
 80046a4:	60a3      	str	r3, [r4, #8]
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	4433      	add	r3, r6
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	462a      	mov	r2, r5
 80046b2:	f000 fd6b 	bl	800518c <_realloc_r>
 80046b6:	4606      	mov	r6, r0
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d1e0      	bne.n	800467e <__ssputs_r+0x5a>
 80046bc:	4650      	mov	r0, sl
 80046be:	6921      	ldr	r1, [r4, #16]
 80046c0:	f7ff febc 	bl	800443c <_free_r>
 80046c4:	230c      	movs	r3, #12
 80046c6:	f8ca 3000 	str.w	r3, [sl]
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	e7e9      	b.n	80046ac <__ssputs_r+0x88>

080046d8 <_svfiprintf_r>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	4698      	mov	r8, r3
 80046de:	898b      	ldrh	r3, [r1, #12]
 80046e0:	4607      	mov	r7, r0
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	460d      	mov	r5, r1
 80046e6:	4614      	mov	r4, r2
 80046e8:	b09d      	sub	sp, #116	; 0x74
 80046ea:	d50e      	bpl.n	800470a <_svfiprintf_r+0x32>
 80046ec:	690b      	ldr	r3, [r1, #16]
 80046ee:	b963      	cbnz	r3, 800470a <_svfiprintf_r+0x32>
 80046f0:	2140      	movs	r1, #64	; 0x40
 80046f2:	f7ff ff0b 	bl	800450c <_malloc_r>
 80046f6:	6028      	str	r0, [r5, #0]
 80046f8:	6128      	str	r0, [r5, #16]
 80046fa:	b920      	cbnz	r0, 8004706 <_svfiprintf_r+0x2e>
 80046fc:	230c      	movs	r3, #12
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	e0d0      	b.n	80048a8 <_svfiprintf_r+0x1d0>
 8004706:	2340      	movs	r3, #64	; 0x40
 8004708:	616b      	str	r3, [r5, #20]
 800470a:	2300      	movs	r3, #0
 800470c:	9309      	str	r3, [sp, #36]	; 0x24
 800470e:	2320      	movs	r3, #32
 8004710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004714:	2330      	movs	r3, #48	; 0x30
 8004716:	f04f 0901 	mov.w	r9, #1
 800471a:	f8cd 800c 	str.w	r8, [sp, #12]
 800471e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80048c0 <_svfiprintf_r+0x1e8>
 8004722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004726:	4623      	mov	r3, r4
 8004728:	469a      	mov	sl, r3
 800472a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800472e:	b10a      	cbz	r2, 8004734 <_svfiprintf_r+0x5c>
 8004730:	2a25      	cmp	r2, #37	; 0x25
 8004732:	d1f9      	bne.n	8004728 <_svfiprintf_r+0x50>
 8004734:	ebba 0b04 	subs.w	fp, sl, r4
 8004738:	d00b      	beq.n	8004752 <_svfiprintf_r+0x7a>
 800473a:	465b      	mov	r3, fp
 800473c:	4622      	mov	r2, r4
 800473e:	4629      	mov	r1, r5
 8004740:	4638      	mov	r0, r7
 8004742:	f7ff ff6f 	bl	8004624 <__ssputs_r>
 8004746:	3001      	adds	r0, #1
 8004748:	f000 80a9 	beq.w	800489e <_svfiprintf_r+0x1c6>
 800474c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800474e:	445a      	add	r2, fp
 8004750:	9209      	str	r2, [sp, #36]	; 0x24
 8004752:	f89a 3000 	ldrb.w	r3, [sl]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80a1 	beq.w	800489e <_svfiprintf_r+0x1c6>
 800475c:	2300      	movs	r3, #0
 800475e:	f04f 32ff 	mov.w	r2, #4294967295
 8004762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004766:	f10a 0a01 	add.w	sl, sl, #1
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	9307      	str	r3, [sp, #28]
 800476e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004772:	931a      	str	r3, [sp, #104]	; 0x68
 8004774:	4654      	mov	r4, sl
 8004776:	2205      	movs	r2, #5
 8004778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800477c:	4850      	ldr	r0, [pc, #320]	; (80048c0 <_svfiprintf_r+0x1e8>)
 800477e:	f000 fce9 	bl	8005154 <memchr>
 8004782:	9a04      	ldr	r2, [sp, #16]
 8004784:	b9d8      	cbnz	r0, 80047be <_svfiprintf_r+0xe6>
 8004786:	06d0      	lsls	r0, r2, #27
 8004788:	bf44      	itt	mi
 800478a:	2320      	movmi	r3, #32
 800478c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004790:	0711      	lsls	r1, r2, #28
 8004792:	bf44      	itt	mi
 8004794:	232b      	movmi	r3, #43	; 0x2b
 8004796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800479a:	f89a 3000 	ldrb.w	r3, [sl]
 800479e:	2b2a      	cmp	r3, #42	; 0x2a
 80047a0:	d015      	beq.n	80047ce <_svfiprintf_r+0xf6>
 80047a2:	4654      	mov	r4, sl
 80047a4:	2000      	movs	r0, #0
 80047a6:	f04f 0c0a 	mov.w	ip, #10
 80047aa:	9a07      	ldr	r2, [sp, #28]
 80047ac:	4621      	mov	r1, r4
 80047ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047b2:	3b30      	subs	r3, #48	; 0x30
 80047b4:	2b09      	cmp	r3, #9
 80047b6:	d94d      	bls.n	8004854 <_svfiprintf_r+0x17c>
 80047b8:	b1b0      	cbz	r0, 80047e8 <_svfiprintf_r+0x110>
 80047ba:	9207      	str	r2, [sp, #28]
 80047bc:	e014      	b.n	80047e8 <_svfiprintf_r+0x110>
 80047be:	eba0 0308 	sub.w	r3, r0, r8
 80047c2:	fa09 f303 	lsl.w	r3, r9, r3
 80047c6:	4313      	orrs	r3, r2
 80047c8:	46a2      	mov	sl, r4
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	e7d2      	b.n	8004774 <_svfiprintf_r+0x9c>
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	1d19      	adds	r1, r3, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	9103      	str	r1, [sp, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bfbb      	ittet	lt
 80047da:	425b      	neglt	r3, r3
 80047dc:	f042 0202 	orrlt.w	r2, r2, #2
 80047e0:	9307      	strge	r3, [sp, #28]
 80047e2:	9307      	strlt	r3, [sp, #28]
 80047e4:	bfb8      	it	lt
 80047e6:	9204      	strlt	r2, [sp, #16]
 80047e8:	7823      	ldrb	r3, [r4, #0]
 80047ea:	2b2e      	cmp	r3, #46	; 0x2e
 80047ec:	d10c      	bne.n	8004808 <_svfiprintf_r+0x130>
 80047ee:	7863      	ldrb	r3, [r4, #1]
 80047f0:	2b2a      	cmp	r3, #42	; 0x2a
 80047f2:	d134      	bne.n	800485e <_svfiprintf_r+0x186>
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	3402      	adds	r4, #2
 80047f8:	1d1a      	adds	r2, r3, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	9203      	str	r2, [sp, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfb8      	it	lt
 8004802:	f04f 33ff 	movlt.w	r3, #4294967295
 8004806:	9305      	str	r3, [sp, #20]
 8004808:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80048c4 <_svfiprintf_r+0x1ec>
 800480c:	2203      	movs	r2, #3
 800480e:	4650      	mov	r0, sl
 8004810:	7821      	ldrb	r1, [r4, #0]
 8004812:	f000 fc9f 	bl	8005154 <memchr>
 8004816:	b138      	cbz	r0, 8004828 <_svfiprintf_r+0x150>
 8004818:	2240      	movs	r2, #64	; 0x40
 800481a:	9b04      	ldr	r3, [sp, #16]
 800481c:	eba0 000a 	sub.w	r0, r0, sl
 8004820:	4082      	lsls	r2, r0
 8004822:	4313      	orrs	r3, r2
 8004824:	3401      	adds	r4, #1
 8004826:	9304      	str	r3, [sp, #16]
 8004828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800482c:	2206      	movs	r2, #6
 800482e:	4826      	ldr	r0, [pc, #152]	; (80048c8 <_svfiprintf_r+0x1f0>)
 8004830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004834:	f000 fc8e 	bl	8005154 <memchr>
 8004838:	2800      	cmp	r0, #0
 800483a:	d038      	beq.n	80048ae <_svfiprintf_r+0x1d6>
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <_svfiprintf_r+0x1f4>)
 800483e:	bb1b      	cbnz	r3, 8004888 <_svfiprintf_r+0x1b0>
 8004840:	9b03      	ldr	r3, [sp, #12]
 8004842:	3307      	adds	r3, #7
 8004844:	f023 0307 	bic.w	r3, r3, #7
 8004848:	3308      	adds	r3, #8
 800484a:	9303      	str	r3, [sp, #12]
 800484c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484e:	4433      	add	r3, r6
 8004850:	9309      	str	r3, [sp, #36]	; 0x24
 8004852:	e768      	b.n	8004726 <_svfiprintf_r+0x4e>
 8004854:	460c      	mov	r4, r1
 8004856:	2001      	movs	r0, #1
 8004858:	fb0c 3202 	mla	r2, ip, r2, r3
 800485c:	e7a6      	b.n	80047ac <_svfiprintf_r+0xd4>
 800485e:	2300      	movs	r3, #0
 8004860:	f04f 0c0a 	mov.w	ip, #10
 8004864:	4619      	mov	r1, r3
 8004866:	3401      	adds	r4, #1
 8004868:	9305      	str	r3, [sp, #20]
 800486a:	4620      	mov	r0, r4
 800486c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004870:	3a30      	subs	r2, #48	; 0x30
 8004872:	2a09      	cmp	r2, #9
 8004874:	d903      	bls.n	800487e <_svfiprintf_r+0x1a6>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0c6      	beq.n	8004808 <_svfiprintf_r+0x130>
 800487a:	9105      	str	r1, [sp, #20]
 800487c:	e7c4      	b.n	8004808 <_svfiprintf_r+0x130>
 800487e:	4604      	mov	r4, r0
 8004880:	2301      	movs	r3, #1
 8004882:	fb0c 2101 	mla	r1, ip, r1, r2
 8004886:	e7f0      	b.n	800486a <_svfiprintf_r+0x192>
 8004888:	ab03      	add	r3, sp, #12
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	462a      	mov	r2, r5
 800488e:	4638      	mov	r0, r7
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <_svfiprintf_r+0x1f8>)
 8004892:	a904      	add	r1, sp, #16
 8004894:	f3af 8000 	nop.w
 8004898:	1c42      	adds	r2, r0, #1
 800489a:	4606      	mov	r6, r0
 800489c:	d1d6      	bne.n	800484c <_svfiprintf_r+0x174>
 800489e:	89ab      	ldrh	r3, [r5, #12]
 80048a0:	065b      	lsls	r3, r3, #25
 80048a2:	f53f af2d 	bmi.w	8004700 <_svfiprintf_r+0x28>
 80048a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048a8:	b01d      	add	sp, #116	; 0x74
 80048aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ae:	ab03      	add	r3, sp, #12
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	462a      	mov	r2, r5
 80048b4:	4638      	mov	r0, r7
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <_svfiprintf_r+0x1f8>)
 80048b8:	a904      	add	r1, sp, #16
 80048ba:	f000 f9bf 	bl	8004c3c <_printf_i>
 80048be:	e7eb      	b.n	8004898 <_svfiprintf_r+0x1c0>
 80048c0:	08005362 	.word	0x08005362
 80048c4:	08005368 	.word	0x08005368
 80048c8:	0800536c 	.word	0x0800536c
 80048cc:	00000000 	.word	0x00000000
 80048d0:	08004625 	.word	0x08004625

080048d4 <__sfputc_r>:
 80048d4:	6893      	ldr	r3, [r2, #8]
 80048d6:	b410      	push	{r4}
 80048d8:	3b01      	subs	r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	6093      	str	r3, [r2, #8]
 80048de:	da07      	bge.n	80048f0 <__sfputc_r+0x1c>
 80048e0:	6994      	ldr	r4, [r2, #24]
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	db01      	blt.n	80048ea <__sfputc_r+0x16>
 80048e6:	290a      	cmp	r1, #10
 80048e8:	d102      	bne.n	80048f0 <__sfputc_r+0x1c>
 80048ea:	bc10      	pop	{r4}
 80048ec:	f000 bb72 	b.w	8004fd4 <__swbuf_r>
 80048f0:	6813      	ldr	r3, [r2, #0]
 80048f2:	1c58      	adds	r0, r3, #1
 80048f4:	6010      	str	r0, [r2, #0]
 80048f6:	7019      	strb	r1, [r3, #0]
 80048f8:	4608      	mov	r0, r1
 80048fa:	bc10      	pop	{r4}
 80048fc:	4770      	bx	lr

080048fe <__sfputs_r>:
 80048fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004900:	4606      	mov	r6, r0
 8004902:	460f      	mov	r7, r1
 8004904:	4614      	mov	r4, r2
 8004906:	18d5      	adds	r5, r2, r3
 8004908:	42ac      	cmp	r4, r5
 800490a:	d101      	bne.n	8004910 <__sfputs_r+0x12>
 800490c:	2000      	movs	r0, #0
 800490e:	e007      	b.n	8004920 <__sfputs_r+0x22>
 8004910:	463a      	mov	r2, r7
 8004912:	4630      	mov	r0, r6
 8004914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004918:	f7ff ffdc 	bl	80048d4 <__sfputc_r>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d1f3      	bne.n	8004908 <__sfputs_r+0xa>
 8004920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004924 <_vfiprintf_r>:
 8004924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004928:	460d      	mov	r5, r1
 800492a:	4614      	mov	r4, r2
 800492c:	4698      	mov	r8, r3
 800492e:	4606      	mov	r6, r0
 8004930:	b09d      	sub	sp, #116	; 0x74
 8004932:	b118      	cbz	r0, 800493c <_vfiprintf_r+0x18>
 8004934:	6a03      	ldr	r3, [r0, #32]
 8004936:	b90b      	cbnz	r3, 800493c <_vfiprintf_r+0x18>
 8004938:	f7ff fc58 	bl	80041ec <__sinit>
 800493c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800493e:	07d9      	lsls	r1, r3, #31
 8004940:	d405      	bmi.n	800494e <_vfiprintf_r+0x2a>
 8004942:	89ab      	ldrh	r3, [r5, #12]
 8004944:	059a      	lsls	r2, r3, #22
 8004946:	d402      	bmi.n	800494e <_vfiprintf_r+0x2a>
 8004948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800494a:	f7ff fd74 	bl	8004436 <__retarget_lock_acquire_recursive>
 800494e:	89ab      	ldrh	r3, [r5, #12]
 8004950:	071b      	lsls	r3, r3, #28
 8004952:	d501      	bpl.n	8004958 <_vfiprintf_r+0x34>
 8004954:	692b      	ldr	r3, [r5, #16]
 8004956:	b99b      	cbnz	r3, 8004980 <_vfiprintf_r+0x5c>
 8004958:	4629      	mov	r1, r5
 800495a:	4630      	mov	r0, r6
 800495c:	f000 fb78 	bl	8005050 <__swsetup_r>
 8004960:	b170      	cbz	r0, 8004980 <_vfiprintf_r+0x5c>
 8004962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004964:	07dc      	lsls	r4, r3, #31
 8004966:	d504      	bpl.n	8004972 <_vfiprintf_r+0x4e>
 8004968:	f04f 30ff 	mov.w	r0, #4294967295
 800496c:	b01d      	add	sp, #116	; 0x74
 800496e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004972:	89ab      	ldrh	r3, [r5, #12]
 8004974:	0598      	lsls	r0, r3, #22
 8004976:	d4f7      	bmi.n	8004968 <_vfiprintf_r+0x44>
 8004978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800497a:	f7ff fd5d 	bl	8004438 <__retarget_lock_release_recursive>
 800497e:	e7f3      	b.n	8004968 <_vfiprintf_r+0x44>
 8004980:	2300      	movs	r3, #0
 8004982:	9309      	str	r3, [sp, #36]	; 0x24
 8004984:	2320      	movs	r3, #32
 8004986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800498a:	2330      	movs	r3, #48	; 0x30
 800498c:	f04f 0901 	mov.w	r9, #1
 8004990:	f8cd 800c 	str.w	r8, [sp, #12]
 8004994:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004b44 <_vfiprintf_r+0x220>
 8004998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800499c:	4623      	mov	r3, r4
 800499e:	469a      	mov	sl, r3
 80049a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049a4:	b10a      	cbz	r2, 80049aa <_vfiprintf_r+0x86>
 80049a6:	2a25      	cmp	r2, #37	; 0x25
 80049a8:	d1f9      	bne.n	800499e <_vfiprintf_r+0x7a>
 80049aa:	ebba 0b04 	subs.w	fp, sl, r4
 80049ae:	d00b      	beq.n	80049c8 <_vfiprintf_r+0xa4>
 80049b0:	465b      	mov	r3, fp
 80049b2:	4622      	mov	r2, r4
 80049b4:	4629      	mov	r1, r5
 80049b6:	4630      	mov	r0, r6
 80049b8:	f7ff ffa1 	bl	80048fe <__sfputs_r>
 80049bc:	3001      	adds	r0, #1
 80049be:	f000 80a9 	beq.w	8004b14 <_vfiprintf_r+0x1f0>
 80049c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049c4:	445a      	add	r2, fp
 80049c6:	9209      	str	r2, [sp, #36]	; 0x24
 80049c8:	f89a 3000 	ldrb.w	r3, [sl]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80a1 	beq.w	8004b14 <_vfiprintf_r+0x1f0>
 80049d2:	2300      	movs	r3, #0
 80049d4:	f04f 32ff 	mov.w	r2, #4294967295
 80049d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049dc:	f10a 0a01 	add.w	sl, sl, #1
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	9307      	str	r3, [sp, #28]
 80049e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049e8:	931a      	str	r3, [sp, #104]	; 0x68
 80049ea:	4654      	mov	r4, sl
 80049ec:	2205      	movs	r2, #5
 80049ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f2:	4854      	ldr	r0, [pc, #336]	; (8004b44 <_vfiprintf_r+0x220>)
 80049f4:	f000 fbae 	bl	8005154 <memchr>
 80049f8:	9a04      	ldr	r2, [sp, #16]
 80049fa:	b9d8      	cbnz	r0, 8004a34 <_vfiprintf_r+0x110>
 80049fc:	06d1      	lsls	r1, r2, #27
 80049fe:	bf44      	itt	mi
 8004a00:	2320      	movmi	r3, #32
 8004a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a06:	0713      	lsls	r3, r2, #28
 8004a08:	bf44      	itt	mi
 8004a0a:	232b      	movmi	r3, #43	; 0x2b
 8004a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a10:	f89a 3000 	ldrb.w	r3, [sl]
 8004a14:	2b2a      	cmp	r3, #42	; 0x2a
 8004a16:	d015      	beq.n	8004a44 <_vfiprintf_r+0x120>
 8004a18:	4654      	mov	r4, sl
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	f04f 0c0a 	mov.w	ip, #10
 8004a20:	9a07      	ldr	r2, [sp, #28]
 8004a22:	4621      	mov	r1, r4
 8004a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a28:	3b30      	subs	r3, #48	; 0x30
 8004a2a:	2b09      	cmp	r3, #9
 8004a2c:	d94d      	bls.n	8004aca <_vfiprintf_r+0x1a6>
 8004a2e:	b1b0      	cbz	r0, 8004a5e <_vfiprintf_r+0x13a>
 8004a30:	9207      	str	r2, [sp, #28]
 8004a32:	e014      	b.n	8004a5e <_vfiprintf_r+0x13a>
 8004a34:	eba0 0308 	sub.w	r3, r0, r8
 8004a38:	fa09 f303 	lsl.w	r3, r9, r3
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	46a2      	mov	sl, r4
 8004a40:	9304      	str	r3, [sp, #16]
 8004a42:	e7d2      	b.n	80049ea <_vfiprintf_r+0xc6>
 8004a44:	9b03      	ldr	r3, [sp, #12]
 8004a46:	1d19      	adds	r1, r3, #4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	9103      	str	r1, [sp, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bfbb      	ittet	lt
 8004a50:	425b      	neglt	r3, r3
 8004a52:	f042 0202 	orrlt.w	r2, r2, #2
 8004a56:	9307      	strge	r3, [sp, #28]
 8004a58:	9307      	strlt	r3, [sp, #28]
 8004a5a:	bfb8      	it	lt
 8004a5c:	9204      	strlt	r2, [sp, #16]
 8004a5e:	7823      	ldrb	r3, [r4, #0]
 8004a60:	2b2e      	cmp	r3, #46	; 0x2e
 8004a62:	d10c      	bne.n	8004a7e <_vfiprintf_r+0x15a>
 8004a64:	7863      	ldrb	r3, [r4, #1]
 8004a66:	2b2a      	cmp	r3, #42	; 0x2a
 8004a68:	d134      	bne.n	8004ad4 <_vfiprintf_r+0x1b0>
 8004a6a:	9b03      	ldr	r3, [sp, #12]
 8004a6c:	3402      	adds	r4, #2
 8004a6e:	1d1a      	adds	r2, r3, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	9203      	str	r2, [sp, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bfb8      	it	lt
 8004a78:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a7c:	9305      	str	r3, [sp, #20]
 8004a7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b48 <_vfiprintf_r+0x224>
 8004a82:	2203      	movs	r2, #3
 8004a84:	4650      	mov	r0, sl
 8004a86:	7821      	ldrb	r1, [r4, #0]
 8004a88:	f000 fb64 	bl	8005154 <memchr>
 8004a8c:	b138      	cbz	r0, 8004a9e <_vfiprintf_r+0x17a>
 8004a8e:	2240      	movs	r2, #64	; 0x40
 8004a90:	9b04      	ldr	r3, [sp, #16]
 8004a92:	eba0 000a 	sub.w	r0, r0, sl
 8004a96:	4082      	lsls	r2, r0
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	3401      	adds	r4, #1
 8004a9c:	9304      	str	r3, [sp, #16]
 8004a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa2:	2206      	movs	r2, #6
 8004aa4:	4829      	ldr	r0, [pc, #164]	; (8004b4c <_vfiprintf_r+0x228>)
 8004aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aaa:	f000 fb53 	bl	8005154 <memchr>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d03f      	beq.n	8004b32 <_vfiprintf_r+0x20e>
 8004ab2:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <_vfiprintf_r+0x22c>)
 8004ab4:	bb1b      	cbnz	r3, 8004afe <_vfiprintf_r+0x1da>
 8004ab6:	9b03      	ldr	r3, [sp, #12]
 8004ab8:	3307      	adds	r3, #7
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	3308      	adds	r3, #8
 8004ac0:	9303      	str	r3, [sp, #12]
 8004ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ac4:	443b      	add	r3, r7
 8004ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac8:	e768      	b.n	800499c <_vfiprintf_r+0x78>
 8004aca:	460c      	mov	r4, r1
 8004acc:	2001      	movs	r0, #1
 8004ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ad2:	e7a6      	b.n	8004a22 <_vfiprintf_r+0xfe>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f04f 0c0a 	mov.w	ip, #10
 8004ada:	4619      	mov	r1, r3
 8004adc:	3401      	adds	r4, #1
 8004ade:	9305      	str	r3, [sp, #20]
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ae6:	3a30      	subs	r2, #48	; 0x30
 8004ae8:	2a09      	cmp	r2, #9
 8004aea:	d903      	bls.n	8004af4 <_vfiprintf_r+0x1d0>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0c6      	beq.n	8004a7e <_vfiprintf_r+0x15a>
 8004af0:	9105      	str	r1, [sp, #20]
 8004af2:	e7c4      	b.n	8004a7e <_vfiprintf_r+0x15a>
 8004af4:	4604      	mov	r4, r0
 8004af6:	2301      	movs	r3, #1
 8004af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004afc:	e7f0      	b.n	8004ae0 <_vfiprintf_r+0x1bc>
 8004afe:	ab03      	add	r3, sp, #12
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	462a      	mov	r2, r5
 8004b04:	4630      	mov	r0, r6
 8004b06:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <_vfiprintf_r+0x230>)
 8004b08:	a904      	add	r1, sp, #16
 8004b0a:	f3af 8000 	nop.w
 8004b0e:	4607      	mov	r7, r0
 8004b10:	1c78      	adds	r0, r7, #1
 8004b12:	d1d6      	bne.n	8004ac2 <_vfiprintf_r+0x19e>
 8004b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b16:	07d9      	lsls	r1, r3, #31
 8004b18:	d405      	bmi.n	8004b26 <_vfiprintf_r+0x202>
 8004b1a:	89ab      	ldrh	r3, [r5, #12]
 8004b1c:	059a      	lsls	r2, r3, #22
 8004b1e:	d402      	bmi.n	8004b26 <_vfiprintf_r+0x202>
 8004b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b22:	f7ff fc89 	bl	8004438 <__retarget_lock_release_recursive>
 8004b26:	89ab      	ldrh	r3, [r5, #12]
 8004b28:	065b      	lsls	r3, r3, #25
 8004b2a:	f53f af1d 	bmi.w	8004968 <_vfiprintf_r+0x44>
 8004b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b30:	e71c      	b.n	800496c <_vfiprintf_r+0x48>
 8004b32:	ab03      	add	r3, sp, #12
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	462a      	mov	r2, r5
 8004b38:	4630      	mov	r0, r6
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <_vfiprintf_r+0x230>)
 8004b3c:	a904      	add	r1, sp, #16
 8004b3e:	f000 f87d 	bl	8004c3c <_printf_i>
 8004b42:	e7e4      	b.n	8004b0e <_vfiprintf_r+0x1ea>
 8004b44:	08005362 	.word	0x08005362
 8004b48:	08005368 	.word	0x08005368
 8004b4c:	0800536c 	.word	0x0800536c
 8004b50:	00000000 	.word	0x00000000
 8004b54:	080048ff 	.word	0x080048ff

08004b58 <_printf_common>:
 8004b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	4616      	mov	r6, r2
 8004b5e:	4699      	mov	r9, r3
 8004b60:	688a      	ldr	r2, [r1, #8]
 8004b62:	690b      	ldr	r3, [r1, #16]
 8004b64:	4607      	mov	r7, r0
 8004b66:	4293      	cmp	r3, r2
 8004b68:	bfb8      	it	lt
 8004b6a:	4613      	movlt	r3, r2
 8004b6c:	6033      	str	r3, [r6, #0]
 8004b6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b72:	460c      	mov	r4, r1
 8004b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b78:	b10a      	cbz	r2, 8004b7e <_printf_common+0x26>
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	6033      	str	r3, [r6, #0]
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	0699      	lsls	r1, r3, #26
 8004b82:	bf42      	ittt	mi
 8004b84:	6833      	ldrmi	r3, [r6, #0]
 8004b86:	3302      	addmi	r3, #2
 8004b88:	6033      	strmi	r3, [r6, #0]
 8004b8a:	6825      	ldr	r5, [r4, #0]
 8004b8c:	f015 0506 	ands.w	r5, r5, #6
 8004b90:	d106      	bne.n	8004ba0 <_printf_common+0x48>
 8004b92:	f104 0a19 	add.w	sl, r4, #25
 8004b96:	68e3      	ldr	r3, [r4, #12]
 8004b98:	6832      	ldr	r2, [r6, #0]
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	42ab      	cmp	r3, r5
 8004b9e:	dc2b      	bgt.n	8004bf8 <_printf_common+0xa0>
 8004ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ba4:	1e13      	subs	r3, r2, #0
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	bf18      	it	ne
 8004baa:	2301      	movne	r3, #1
 8004bac:	0692      	lsls	r2, r2, #26
 8004bae:	d430      	bmi.n	8004c12 <_printf_common+0xba>
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bb8:	47c0      	blx	r8
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d023      	beq.n	8004c06 <_printf_common+0xae>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	6922      	ldr	r2, [r4, #16]
 8004bc2:	f003 0306 	and.w	r3, r3, #6
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	bf14      	ite	ne
 8004bca:	2500      	movne	r5, #0
 8004bcc:	6833      	ldreq	r3, [r6, #0]
 8004bce:	f04f 0600 	mov.w	r6, #0
 8004bd2:	bf08      	it	eq
 8004bd4:	68e5      	ldreq	r5, [r4, #12]
 8004bd6:	f104 041a 	add.w	r4, r4, #26
 8004bda:	bf08      	it	eq
 8004bdc:	1aed      	subeq	r5, r5, r3
 8004bde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004be2:	bf08      	it	eq
 8004be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004be8:	4293      	cmp	r3, r2
 8004bea:	bfc4      	itt	gt
 8004bec:	1a9b      	subgt	r3, r3, r2
 8004bee:	18ed      	addgt	r5, r5, r3
 8004bf0:	42b5      	cmp	r5, r6
 8004bf2:	d11a      	bne.n	8004c2a <_printf_common+0xd2>
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	e008      	b.n	8004c0a <_printf_common+0xb2>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	4638      	mov	r0, r7
 8004c00:	47c0      	blx	r8
 8004c02:	3001      	adds	r0, #1
 8004c04:	d103      	bne.n	8004c0e <_printf_common+0xb6>
 8004c06:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0e:	3501      	adds	r5, #1
 8004c10:	e7c1      	b.n	8004b96 <_printf_common+0x3e>
 8004c12:	2030      	movs	r0, #48	; 0x30
 8004c14:	18e1      	adds	r1, r4, r3
 8004c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c20:	4422      	add	r2, r4
 8004c22:	3302      	adds	r3, #2
 8004c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c28:	e7c2      	b.n	8004bb0 <_printf_common+0x58>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	4649      	mov	r1, r9
 8004c30:	4638      	mov	r0, r7
 8004c32:	47c0      	blx	r8
 8004c34:	3001      	adds	r0, #1
 8004c36:	d0e6      	beq.n	8004c06 <_printf_common+0xae>
 8004c38:	3601      	adds	r6, #1
 8004c3a:	e7d9      	b.n	8004bf0 <_printf_common+0x98>

08004c3c <_printf_i>:
 8004c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	7e0f      	ldrb	r7, [r1, #24]
 8004c42:	4691      	mov	r9, r2
 8004c44:	2f78      	cmp	r7, #120	; 0x78
 8004c46:	4680      	mov	r8, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	469a      	mov	sl, r3
 8004c4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c52:	d807      	bhi.n	8004c64 <_printf_i+0x28>
 8004c54:	2f62      	cmp	r7, #98	; 0x62
 8004c56:	d80a      	bhi.n	8004c6e <_printf_i+0x32>
 8004c58:	2f00      	cmp	r7, #0
 8004c5a:	f000 80d5 	beq.w	8004e08 <_printf_i+0x1cc>
 8004c5e:	2f58      	cmp	r7, #88	; 0x58
 8004c60:	f000 80c1 	beq.w	8004de6 <_printf_i+0x1aa>
 8004c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c6c:	e03a      	b.n	8004ce4 <_printf_i+0xa8>
 8004c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c72:	2b15      	cmp	r3, #21
 8004c74:	d8f6      	bhi.n	8004c64 <_printf_i+0x28>
 8004c76:	a101      	add	r1, pc, #4	; (adr r1, 8004c7c <_printf_i+0x40>)
 8004c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c7c:	08004cd5 	.word	0x08004cd5
 8004c80:	08004ce9 	.word	0x08004ce9
 8004c84:	08004c65 	.word	0x08004c65
 8004c88:	08004c65 	.word	0x08004c65
 8004c8c:	08004c65 	.word	0x08004c65
 8004c90:	08004c65 	.word	0x08004c65
 8004c94:	08004ce9 	.word	0x08004ce9
 8004c98:	08004c65 	.word	0x08004c65
 8004c9c:	08004c65 	.word	0x08004c65
 8004ca0:	08004c65 	.word	0x08004c65
 8004ca4:	08004c65 	.word	0x08004c65
 8004ca8:	08004def 	.word	0x08004def
 8004cac:	08004d15 	.word	0x08004d15
 8004cb0:	08004da9 	.word	0x08004da9
 8004cb4:	08004c65 	.word	0x08004c65
 8004cb8:	08004c65 	.word	0x08004c65
 8004cbc:	08004e11 	.word	0x08004e11
 8004cc0:	08004c65 	.word	0x08004c65
 8004cc4:	08004d15 	.word	0x08004d15
 8004cc8:	08004c65 	.word	0x08004c65
 8004ccc:	08004c65 	.word	0x08004c65
 8004cd0:	08004db1 	.word	0x08004db1
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	1d1a      	adds	r2, r3, #4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	602a      	str	r2, [r5, #0]
 8004cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0a0      	b.n	8004e2a <_printf_i+0x1ee>
 8004ce8:	6820      	ldr	r0, [r4, #0]
 8004cea:	682b      	ldr	r3, [r5, #0]
 8004cec:	0607      	lsls	r7, r0, #24
 8004cee:	f103 0104 	add.w	r1, r3, #4
 8004cf2:	6029      	str	r1, [r5, #0]
 8004cf4:	d501      	bpl.n	8004cfa <_printf_i+0xbe>
 8004cf6:	681e      	ldr	r6, [r3, #0]
 8004cf8:	e003      	b.n	8004d02 <_printf_i+0xc6>
 8004cfa:	0646      	lsls	r6, r0, #25
 8004cfc:	d5fb      	bpl.n	8004cf6 <_printf_i+0xba>
 8004cfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d02:	2e00      	cmp	r6, #0
 8004d04:	da03      	bge.n	8004d0e <_printf_i+0xd2>
 8004d06:	232d      	movs	r3, #45	; 0x2d
 8004d08:	4276      	negs	r6, r6
 8004d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0e:	230a      	movs	r3, #10
 8004d10:	4859      	ldr	r0, [pc, #356]	; (8004e78 <_printf_i+0x23c>)
 8004d12:	e012      	b.n	8004d3a <_printf_i+0xfe>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	6820      	ldr	r0, [r4, #0]
 8004d18:	1d19      	adds	r1, r3, #4
 8004d1a:	6029      	str	r1, [r5, #0]
 8004d1c:	0605      	lsls	r5, r0, #24
 8004d1e:	d501      	bpl.n	8004d24 <_printf_i+0xe8>
 8004d20:	681e      	ldr	r6, [r3, #0]
 8004d22:	e002      	b.n	8004d2a <_printf_i+0xee>
 8004d24:	0641      	lsls	r1, r0, #25
 8004d26:	d5fb      	bpl.n	8004d20 <_printf_i+0xe4>
 8004d28:	881e      	ldrh	r6, [r3, #0]
 8004d2a:	2f6f      	cmp	r7, #111	; 0x6f
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2308      	moveq	r3, #8
 8004d30:	230a      	movne	r3, #10
 8004d32:	4851      	ldr	r0, [pc, #324]	; (8004e78 <_printf_i+0x23c>)
 8004d34:	2100      	movs	r1, #0
 8004d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d3a:	6865      	ldr	r5, [r4, #4]
 8004d3c:	2d00      	cmp	r5, #0
 8004d3e:	bfa8      	it	ge
 8004d40:	6821      	ldrge	r1, [r4, #0]
 8004d42:	60a5      	str	r5, [r4, #8]
 8004d44:	bfa4      	itt	ge
 8004d46:	f021 0104 	bicge.w	r1, r1, #4
 8004d4a:	6021      	strge	r1, [r4, #0]
 8004d4c:	b90e      	cbnz	r6, 8004d52 <_printf_i+0x116>
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	d04b      	beq.n	8004dea <_printf_i+0x1ae>
 8004d52:	4615      	mov	r5, r2
 8004d54:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d58:	fb03 6711 	mls	r7, r3, r1, r6
 8004d5c:	5dc7      	ldrb	r7, [r0, r7]
 8004d5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d62:	4637      	mov	r7, r6
 8004d64:	42bb      	cmp	r3, r7
 8004d66:	460e      	mov	r6, r1
 8004d68:	d9f4      	bls.n	8004d54 <_printf_i+0x118>
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d10b      	bne.n	8004d86 <_printf_i+0x14a>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	07de      	lsls	r6, r3, #31
 8004d72:	d508      	bpl.n	8004d86 <_printf_i+0x14a>
 8004d74:	6923      	ldr	r3, [r4, #16]
 8004d76:	6861      	ldr	r1, [r4, #4]
 8004d78:	4299      	cmp	r1, r3
 8004d7a:	bfde      	ittt	le
 8004d7c:	2330      	movle	r3, #48	; 0x30
 8004d7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d86:	1b52      	subs	r2, r2, r5
 8004d88:	6122      	str	r2, [r4, #16]
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4640      	mov	r0, r8
 8004d90:	f8cd a000 	str.w	sl, [sp]
 8004d94:	aa03      	add	r2, sp, #12
 8004d96:	f7ff fedf 	bl	8004b58 <_printf_common>
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d14a      	bne.n	8004e34 <_printf_i+0x1f8>
 8004d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004da2:	b004      	add	sp, #16
 8004da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	f043 0320 	orr.w	r3, r3, #32
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	2778      	movs	r7, #120	; 0x78
 8004db2:	4832      	ldr	r0, [pc, #200]	; (8004e7c <_printf_i+0x240>)
 8004db4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	6829      	ldr	r1, [r5, #0]
 8004dbc:	061f      	lsls	r7, r3, #24
 8004dbe:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dc2:	d402      	bmi.n	8004dca <_printf_i+0x18e>
 8004dc4:	065f      	lsls	r7, r3, #25
 8004dc6:	bf48      	it	mi
 8004dc8:	b2b6      	uxthmi	r6, r6
 8004dca:	07df      	lsls	r7, r3, #31
 8004dcc:	bf48      	it	mi
 8004dce:	f043 0320 	orrmi.w	r3, r3, #32
 8004dd2:	6029      	str	r1, [r5, #0]
 8004dd4:	bf48      	it	mi
 8004dd6:	6023      	strmi	r3, [r4, #0]
 8004dd8:	b91e      	cbnz	r6, 8004de2 <_printf_i+0x1a6>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	f023 0320 	bic.w	r3, r3, #32
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	2310      	movs	r3, #16
 8004de4:	e7a6      	b.n	8004d34 <_printf_i+0xf8>
 8004de6:	4824      	ldr	r0, [pc, #144]	; (8004e78 <_printf_i+0x23c>)
 8004de8:	e7e4      	b.n	8004db4 <_printf_i+0x178>
 8004dea:	4615      	mov	r5, r2
 8004dec:	e7bd      	b.n	8004d6a <_printf_i+0x12e>
 8004dee:	682b      	ldr	r3, [r5, #0]
 8004df0:	6826      	ldr	r6, [r4, #0]
 8004df2:	1d18      	adds	r0, r3, #4
 8004df4:	6961      	ldr	r1, [r4, #20]
 8004df6:	6028      	str	r0, [r5, #0]
 8004df8:	0635      	lsls	r5, r6, #24
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	d501      	bpl.n	8004e02 <_printf_i+0x1c6>
 8004dfe:	6019      	str	r1, [r3, #0]
 8004e00:	e002      	b.n	8004e08 <_printf_i+0x1cc>
 8004e02:	0670      	lsls	r0, r6, #25
 8004e04:	d5fb      	bpl.n	8004dfe <_printf_i+0x1c2>
 8004e06:	8019      	strh	r1, [r3, #0]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4615      	mov	r5, r2
 8004e0c:	6123      	str	r3, [r4, #16]
 8004e0e:	e7bc      	b.n	8004d8a <_printf_i+0x14e>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	2100      	movs	r1, #0
 8004e14:	1d1a      	adds	r2, r3, #4
 8004e16:	602a      	str	r2, [r5, #0]
 8004e18:	681d      	ldr	r5, [r3, #0]
 8004e1a:	6862      	ldr	r2, [r4, #4]
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f000 f999 	bl	8005154 <memchr>
 8004e22:	b108      	cbz	r0, 8004e28 <_printf_i+0x1ec>
 8004e24:	1b40      	subs	r0, r0, r5
 8004e26:	6060      	str	r0, [r4, #4]
 8004e28:	6863      	ldr	r3, [r4, #4]
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e32:	e7aa      	b.n	8004d8a <_printf_i+0x14e>
 8004e34:	462a      	mov	r2, r5
 8004e36:	4649      	mov	r1, r9
 8004e38:	4640      	mov	r0, r8
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	47d0      	blx	sl
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d0ad      	beq.n	8004d9e <_printf_i+0x162>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	079b      	lsls	r3, r3, #30
 8004e46:	d413      	bmi.n	8004e70 <_printf_i+0x234>
 8004e48:	68e0      	ldr	r0, [r4, #12]
 8004e4a:	9b03      	ldr	r3, [sp, #12]
 8004e4c:	4298      	cmp	r0, r3
 8004e4e:	bfb8      	it	lt
 8004e50:	4618      	movlt	r0, r3
 8004e52:	e7a6      	b.n	8004da2 <_printf_i+0x166>
 8004e54:	2301      	movs	r3, #1
 8004e56:	4632      	mov	r2, r6
 8004e58:	4649      	mov	r1, r9
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	47d0      	blx	sl
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d09d      	beq.n	8004d9e <_printf_i+0x162>
 8004e62:	3501      	adds	r5, #1
 8004e64:	68e3      	ldr	r3, [r4, #12]
 8004e66:	9903      	ldr	r1, [sp, #12]
 8004e68:	1a5b      	subs	r3, r3, r1
 8004e6a:	42ab      	cmp	r3, r5
 8004e6c:	dcf2      	bgt.n	8004e54 <_printf_i+0x218>
 8004e6e:	e7eb      	b.n	8004e48 <_printf_i+0x20c>
 8004e70:	2500      	movs	r5, #0
 8004e72:	f104 0619 	add.w	r6, r4, #25
 8004e76:	e7f5      	b.n	8004e64 <_printf_i+0x228>
 8004e78:	08005373 	.word	0x08005373
 8004e7c:	08005384 	.word	0x08005384

08004e80 <__sflush_r>:
 8004e80:	898a      	ldrh	r2, [r1, #12]
 8004e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e84:	4605      	mov	r5, r0
 8004e86:	0710      	lsls	r0, r2, #28
 8004e88:	460c      	mov	r4, r1
 8004e8a:	d457      	bmi.n	8004f3c <__sflush_r+0xbc>
 8004e8c:	684b      	ldr	r3, [r1, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	dc04      	bgt.n	8004e9c <__sflush_r+0x1c>
 8004e92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	dc01      	bgt.n	8004e9c <__sflush_r+0x1c>
 8004e98:	2000      	movs	r0, #0
 8004e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e9e:	2e00      	cmp	r6, #0
 8004ea0:	d0fa      	beq.n	8004e98 <__sflush_r+0x18>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ea8:	682f      	ldr	r7, [r5, #0]
 8004eaa:	6a21      	ldr	r1, [r4, #32]
 8004eac:	602b      	str	r3, [r5, #0]
 8004eae:	d032      	beq.n	8004f16 <__sflush_r+0x96>
 8004eb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	075a      	lsls	r2, r3, #29
 8004eb6:	d505      	bpl.n	8004ec4 <__sflush_r+0x44>
 8004eb8:	6863      	ldr	r3, [r4, #4]
 8004eba:	1ac0      	subs	r0, r0, r3
 8004ebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ebe:	b10b      	cbz	r3, 8004ec4 <__sflush_r+0x44>
 8004ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ec2:	1ac0      	subs	r0, r0, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eca:	4628      	mov	r0, r5
 8004ecc:	6a21      	ldr	r1, [r4, #32]
 8004ece:	47b0      	blx	r6
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	d106      	bne.n	8004ee4 <__sflush_r+0x64>
 8004ed6:	6829      	ldr	r1, [r5, #0]
 8004ed8:	291d      	cmp	r1, #29
 8004eda:	d82b      	bhi.n	8004f34 <__sflush_r+0xb4>
 8004edc:	4a28      	ldr	r2, [pc, #160]	; (8004f80 <__sflush_r+0x100>)
 8004ede:	410a      	asrs	r2, r1
 8004ee0:	07d6      	lsls	r6, r2, #31
 8004ee2:	d427      	bmi.n	8004f34 <__sflush_r+0xb4>
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	6062      	str	r2, [r4, #4]
 8004ee8:	6922      	ldr	r2, [r4, #16]
 8004eea:	04d9      	lsls	r1, r3, #19
 8004eec:	6022      	str	r2, [r4, #0]
 8004eee:	d504      	bpl.n	8004efa <__sflush_r+0x7a>
 8004ef0:	1c42      	adds	r2, r0, #1
 8004ef2:	d101      	bne.n	8004ef8 <__sflush_r+0x78>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	b903      	cbnz	r3, 8004efa <__sflush_r+0x7a>
 8004ef8:	6560      	str	r0, [r4, #84]	; 0x54
 8004efa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004efc:	602f      	str	r7, [r5, #0]
 8004efe:	2900      	cmp	r1, #0
 8004f00:	d0ca      	beq.n	8004e98 <__sflush_r+0x18>
 8004f02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f06:	4299      	cmp	r1, r3
 8004f08:	d002      	beq.n	8004f10 <__sflush_r+0x90>
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f7ff fa96 	bl	800443c <_free_r>
 8004f10:	2000      	movs	r0, #0
 8004f12:	6360      	str	r0, [r4, #52]	; 0x34
 8004f14:	e7c1      	b.n	8004e9a <__sflush_r+0x1a>
 8004f16:	2301      	movs	r3, #1
 8004f18:	4628      	mov	r0, r5
 8004f1a:	47b0      	blx	r6
 8004f1c:	1c41      	adds	r1, r0, #1
 8004f1e:	d1c8      	bne.n	8004eb2 <__sflush_r+0x32>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0c5      	beq.n	8004eb2 <__sflush_r+0x32>
 8004f26:	2b1d      	cmp	r3, #29
 8004f28:	d001      	beq.n	8004f2e <__sflush_r+0xae>
 8004f2a:	2b16      	cmp	r3, #22
 8004f2c:	d101      	bne.n	8004f32 <__sflush_r+0xb2>
 8004f2e:	602f      	str	r7, [r5, #0]
 8004f30:	e7b2      	b.n	8004e98 <__sflush_r+0x18>
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f38:	81a3      	strh	r3, [r4, #12]
 8004f3a:	e7ae      	b.n	8004e9a <__sflush_r+0x1a>
 8004f3c:	690f      	ldr	r7, [r1, #16]
 8004f3e:	2f00      	cmp	r7, #0
 8004f40:	d0aa      	beq.n	8004e98 <__sflush_r+0x18>
 8004f42:	0793      	lsls	r3, r2, #30
 8004f44:	bf18      	it	ne
 8004f46:	2300      	movne	r3, #0
 8004f48:	680e      	ldr	r6, [r1, #0]
 8004f4a:	bf08      	it	eq
 8004f4c:	694b      	ldreq	r3, [r1, #20]
 8004f4e:	1bf6      	subs	r6, r6, r7
 8004f50:	600f      	str	r7, [r1, #0]
 8004f52:	608b      	str	r3, [r1, #8]
 8004f54:	2e00      	cmp	r6, #0
 8004f56:	dd9f      	ble.n	8004e98 <__sflush_r+0x18>
 8004f58:	4633      	mov	r3, r6
 8004f5a:	463a      	mov	r2, r7
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	6a21      	ldr	r1, [r4, #32]
 8004f60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004f64:	47e0      	blx	ip
 8004f66:	2800      	cmp	r0, #0
 8004f68:	dc06      	bgt.n	8004f78 <__sflush_r+0xf8>
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f74:	81a3      	strh	r3, [r4, #12]
 8004f76:	e790      	b.n	8004e9a <__sflush_r+0x1a>
 8004f78:	4407      	add	r7, r0
 8004f7a:	1a36      	subs	r6, r6, r0
 8004f7c:	e7ea      	b.n	8004f54 <__sflush_r+0xd4>
 8004f7e:	bf00      	nop
 8004f80:	dfbffffe 	.word	0xdfbffffe

08004f84 <_fflush_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	690b      	ldr	r3, [r1, #16]
 8004f88:	4605      	mov	r5, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	b913      	cbnz	r3, 8004f94 <_fflush_r+0x10>
 8004f8e:	2500      	movs	r5, #0
 8004f90:	4628      	mov	r0, r5
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	b118      	cbz	r0, 8004f9e <_fflush_r+0x1a>
 8004f96:	6a03      	ldr	r3, [r0, #32]
 8004f98:	b90b      	cbnz	r3, 8004f9e <_fflush_r+0x1a>
 8004f9a:	f7ff f927 	bl	80041ec <__sinit>
 8004f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f3      	beq.n	8004f8e <_fflush_r+0xa>
 8004fa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004fa8:	07d0      	lsls	r0, r2, #31
 8004faa:	d404      	bmi.n	8004fb6 <_fflush_r+0x32>
 8004fac:	0599      	lsls	r1, r3, #22
 8004fae:	d402      	bmi.n	8004fb6 <_fflush_r+0x32>
 8004fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb2:	f7ff fa40 	bl	8004436 <__retarget_lock_acquire_recursive>
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	4621      	mov	r1, r4
 8004fba:	f7ff ff61 	bl	8004e80 <__sflush_r>
 8004fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	07da      	lsls	r2, r3, #31
 8004fc4:	d4e4      	bmi.n	8004f90 <_fflush_r+0xc>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	059b      	lsls	r3, r3, #22
 8004fca:	d4e1      	bmi.n	8004f90 <_fflush_r+0xc>
 8004fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fce:	f7ff fa33 	bl	8004438 <__retarget_lock_release_recursive>
 8004fd2:	e7dd      	b.n	8004f90 <_fflush_r+0xc>

08004fd4 <__swbuf_r>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	460e      	mov	r6, r1
 8004fd8:	4614      	mov	r4, r2
 8004fda:	4605      	mov	r5, r0
 8004fdc:	b118      	cbz	r0, 8004fe6 <__swbuf_r+0x12>
 8004fde:	6a03      	ldr	r3, [r0, #32]
 8004fe0:	b90b      	cbnz	r3, 8004fe6 <__swbuf_r+0x12>
 8004fe2:	f7ff f903 	bl	80041ec <__sinit>
 8004fe6:	69a3      	ldr	r3, [r4, #24]
 8004fe8:	60a3      	str	r3, [r4, #8]
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	071a      	lsls	r2, r3, #28
 8004fee:	d525      	bpl.n	800503c <__swbuf_r+0x68>
 8004ff0:	6923      	ldr	r3, [r4, #16]
 8004ff2:	b31b      	cbz	r3, 800503c <__swbuf_r+0x68>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	6922      	ldr	r2, [r4, #16]
 8004ff8:	b2f6      	uxtb	r6, r6
 8004ffa:	1a98      	subs	r0, r3, r2
 8004ffc:	6963      	ldr	r3, [r4, #20]
 8004ffe:	4637      	mov	r7, r6
 8005000:	4283      	cmp	r3, r0
 8005002:	dc04      	bgt.n	800500e <__swbuf_r+0x3a>
 8005004:	4621      	mov	r1, r4
 8005006:	4628      	mov	r0, r5
 8005008:	f7ff ffbc 	bl	8004f84 <_fflush_r>
 800500c:	b9e0      	cbnz	r0, 8005048 <__swbuf_r+0x74>
 800500e:	68a3      	ldr	r3, [r4, #8]
 8005010:	3b01      	subs	r3, #1
 8005012:	60a3      	str	r3, [r4, #8]
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	6022      	str	r2, [r4, #0]
 800501a:	701e      	strb	r6, [r3, #0]
 800501c:	6962      	ldr	r2, [r4, #20]
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	429a      	cmp	r2, r3
 8005022:	d004      	beq.n	800502e <__swbuf_r+0x5a>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	07db      	lsls	r3, r3, #31
 8005028:	d506      	bpl.n	8005038 <__swbuf_r+0x64>
 800502a:	2e0a      	cmp	r6, #10
 800502c:	d104      	bne.n	8005038 <__swbuf_r+0x64>
 800502e:	4621      	mov	r1, r4
 8005030:	4628      	mov	r0, r5
 8005032:	f7ff ffa7 	bl	8004f84 <_fflush_r>
 8005036:	b938      	cbnz	r0, 8005048 <__swbuf_r+0x74>
 8005038:	4638      	mov	r0, r7
 800503a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800503c:	4621      	mov	r1, r4
 800503e:	4628      	mov	r0, r5
 8005040:	f000 f806 	bl	8005050 <__swsetup_r>
 8005044:	2800      	cmp	r0, #0
 8005046:	d0d5      	beq.n	8004ff4 <__swbuf_r+0x20>
 8005048:	f04f 37ff 	mov.w	r7, #4294967295
 800504c:	e7f4      	b.n	8005038 <__swbuf_r+0x64>
	...

08005050 <__swsetup_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4b2a      	ldr	r3, [pc, #168]	; (80050fc <__swsetup_r+0xac>)
 8005054:	4605      	mov	r5, r0
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	460c      	mov	r4, r1
 800505a:	b118      	cbz	r0, 8005064 <__swsetup_r+0x14>
 800505c:	6a03      	ldr	r3, [r0, #32]
 800505e:	b90b      	cbnz	r3, 8005064 <__swsetup_r+0x14>
 8005060:	f7ff f8c4 	bl	80041ec <__sinit>
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800506a:	0718      	lsls	r0, r3, #28
 800506c:	d422      	bmi.n	80050b4 <__swsetup_r+0x64>
 800506e:	06d9      	lsls	r1, r3, #27
 8005070:	d407      	bmi.n	8005082 <__swsetup_r+0x32>
 8005072:	2309      	movs	r3, #9
 8005074:	602b      	str	r3, [r5, #0]
 8005076:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800507a:	f04f 30ff 	mov.w	r0, #4294967295
 800507e:	81a3      	strh	r3, [r4, #12]
 8005080:	e034      	b.n	80050ec <__swsetup_r+0x9c>
 8005082:	0758      	lsls	r0, r3, #29
 8005084:	d512      	bpl.n	80050ac <__swsetup_r+0x5c>
 8005086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005088:	b141      	cbz	r1, 800509c <__swsetup_r+0x4c>
 800508a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800508e:	4299      	cmp	r1, r3
 8005090:	d002      	beq.n	8005098 <__swsetup_r+0x48>
 8005092:	4628      	mov	r0, r5
 8005094:	f7ff f9d2 	bl	800443c <_free_r>
 8005098:	2300      	movs	r3, #0
 800509a:	6363      	str	r3, [r4, #52]	; 0x34
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050a2:	81a3      	strh	r3, [r4, #12]
 80050a4:	2300      	movs	r3, #0
 80050a6:	6063      	str	r3, [r4, #4]
 80050a8:	6923      	ldr	r3, [r4, #16]
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f043 0308 	orr.w	r3, r3, #8
 80050b2:	81a3      	strh	r3, [r4, #12]
 80050b4:	6923      	ldr	r3, [r4, #16]
 80050b6:	b94b      	cbnz	r3, 80050cc <__swsetup_r+0x7c>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c2:	d003      	beq.n	80050cc <__swsetup_r+0x7c>
 80050c4:	4621      	mov	r1, r4
 80050c6:	4628      	mov	r0, r5
 80050c8:	f000 f8b4 	bl	8005234 <__smakebuf_r>
 80050cc:	89a0      	ldrh	r0, [r4, #12]
 80050ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050d2:	f010 0301 	ands.w	r3, r0, #1
 80050d6:	d00a      	beq.n	80050ee <__swsetup_r+0x9e>
 80050d8:	2300      	movs	r3, #0
 80050da:	60a3      	str	r3, [r4, #8]
 80050dc:	6963      	ldr	r3, [r4, #20]
 80050de:	425b      	negs	r3, r3
 80050e0:	61a3      	str	r3, [r4, #24]
 80050e2:	6923      	ldr	r3, [r4, #16]
 80050e4:	b943      	cbnz	r3, 80050f8 <__swsetup_r+0xa8>
 80050e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050ea:	d1c4      	bne.n	8005076 <__swsetup_r+0x26>
 80050ec:	bd38      	pop	{r3, r4, r5, pc}
 80050ee:	0781      	lsls	r1, r0, #30
 80050f0:	bf58      	it	pl
 80050f2:	6963      	ldrpl	r3, [r4, #20]
 80050f4:	60a3      	str	r3, [r4, #8]
 80050f6:	e7f4      	b.n	80050e2 <__swsetup_r+0x92>
 80050f8:	2000      	movs	r0, #0
 80050fa:	e7f7      	b.n	80050ec <__swsetup_r+0x9c>
 80050fc:	200000ac 	.word	0x200000ac

08005100 <memmove>:
 8005100:	4288      	cmp	r0, r1
 8005102:	b510      	push	{r4, lr}
 8005104:	eb01 0402 	add.w	r4, r1, r2
 8005108:	d902      	bls.n	8005110 <memmove+0x10>
 800510a:	4284      	cmp	r4, r0
 800510c:	4623      	mov	r3, r4
 800510e:	d807      	bhi.n	8005120 <memmove+0x20>
 8005110:	1e43      	subs	r3, r0, #1
 8005112:	42a1      	cmp	r1, r4
 8005114:	d008      	beq.n	8005128 <memmove+0x28>
 8005116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800511a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800511e:	e7f8      	b.n	8005112 <memmove+0x12>
 8005120:	4601      	mov	r1, r0
 8005122:	4402      	add	r2, r0
 8005124:	428a      	cmp	r2, r1
 8005126:	d100      	bne.n	800512a <memmove+0x2a>
 8005128:	bd10      	pop	{r4, pc}
 800512a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800512e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005132:	e7f7      	b.n	8005124 <memmove+0x24>

08005134 <_sbrk_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	2300      	movs	r3, #0
 8005138:	4d05      	ldr	r5, [pc, #20]	; (8005150 <_sbrk_r+0x1c>)
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	f7fc f970 	bl	8001424 <_sbrk>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_sbrk_r+0x1a>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_sbrk_r+0x1a>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	20000460 	.word	0x20000460

08005154 <memchr>:
 8005154:	4603      	mov	r3, r0
 8005156:	b510      	push	{r4, lr}
 8005158:	b2c9      	uxtb	r1, r1
 800515a:	4402      	add	r2, r0
 800515c:	4293      	cmp	r3, r2
 800515e:	4618      	mov	r0, r3
 8005160:	d101      	bne.n	8005166 <memchr+0x12>
 8005162:	2000      	movs	r0, #0
 8005164:	e003      	b.n	800516e <memchr+0x1a>
 8005166:	7804      	ldrb	r4, [r0, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	428c      	cmp	r4, r1
 800516c:	d1f6      	bne.n	800515c <memchr+0x8>
 800516e:	bd10      	pop	{r4, pc}

08005170 <memcpy>:
 8005170:	440a      	add	r2, r1
 8005172:	4291      	cmp	r1, r2
 8005174:	f100 33ff 	add.w	r3, r0, #4294967295
 8005178:	d100      	bne.n	800517c <memcpy+0xc>
 800517a:	4770      	bx	lr
 800517c:	b510      	push	{r4, lr}
 800517e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005182:	4291      	cmp	r1, r2
 8005184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005188:	d1f9      	bne.n	800517e <memcpy+0xe>
 800518a:	bd10      	pop	{r4, pc}

0800518c <_realloc_r>:
 800518c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005190:	4680      	mov	r8, r0
 8005192:	4614      	mov	r4, r2
 8005194:	460e      	mov	r6, r1
 8005196:	b921      	cbnz	r1, 80051a2 <_realloc_r+0x16>
 8005198:	4611      	mov	r1, r2
 800519a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800519e:	f7ff b9b5 	b.w	800450c <_malloc_r>
 80051a2:	b92a      	cbnz	r2, 80051b0 <_realloc_r+0x24>
 80051a4:	f7ff f94a 	bl	800443c <_free_r>
 80051a8:	4625      	mov	r5, r4
 80051aa:	4628      	mov	r0, r5
 80051ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b0:	f000 f89e 	bl	80052f0 <_malloc_usable_size_r>
 80051b4:	4284      	cmp	r4, r0
 80051b6:	4607      	mov	r7, r0
 80051b8:	d802      	bhi.n	80051c0 <_realloc_r+0x34>
 80051ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051be:	d812      	bhi.n	80051e6 <_realloc_r+0x5a>
 80051c0:	4621      	mov	r1, r4
 80051c2:	4640      	mov	r0, r8
 80051c4:	f7ff f9a2 	bl	800450c <_malloc_r>
 80051c8:	4605      	mov	r5, r0
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d0ed      	beq.n	80051aa <_realloc_r+0x1e>
 80051ce:	42bc      	cmp	r4, r7
 80051d0:	4622      	mov	r2, r4
 80051d2:	4631      	mov	r1, r6
 80051d4:	bf28      	it	cs
 80051d6:	463a      	movcs	r2, r7
 80051d8:	f7ff ffca 	bl	8005170 <memcpy>
 80051dc:	4631      	mov	r1, r6
 80051de:	4640      	mov	r0, r8
 80051e0:	f7ff f92c 	bl	800443c <_free_r>
 80051e4:	e7e1      	b.n	80051aa <_realloc_r+0x1e>
 80051e6:	4635      	mov	r5, r6
 80051e8:	e7df      	b.n	80051aa <_realloc_r+0x1e>

080051ea <__swhatbuf_r>:
 80051ea:	b570      	push	{r4, r5, r6, lr}
 80051ec:	460c      	mov	r4, r1
 80051ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f2:	4615      	mov	r5, r2
 80051f4:	2900      	cmp	r1, #0
 80051f6:	461e      	mov	r6, r3
 80051f8:	b096      	sub	sp, #88	; 0x58
 80051fa:	da0c      	bge.n	8005216 <__swhatbuf_r+0x2c>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	2100      	movs	r1, #0
 8005200:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005204:	bf0c      	ite	eq
 8005206:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800520a:	2340      	movne	r3, #64	; 0x40
 800520c:	2000      	movs	r0, #0
 800520e:	6031      	str	r1, [r6, #0]
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	b016      	add	sp, #88	; 0x58
 8005214:	bd70      	pop	{r4, r5, r6, pc}
 8005216:	466a      	mov	r2, sp
 8005218:	f000 f848 	bl	80052ac <_fstat_r>
 800521c:	2800      	cmp	r0, #0
 800521e:	dbed      	blt.n	80051fc <__swhatbuf_r+0x12>
 8005220:	9901      	ldr	r1, [sp, #4]
 8005222:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005226:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800522a:	4259      	negs	r1, r3
 800522c:	4159      	adcs	r1, r3
 800522e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005232:	e7eb      	b.n	800520c <__swhatbuf_r+0x22>

08005234 <__smakebuf_r>:
 8005234:	898b      	ldrh	r3, [r1, #12]
 8005236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005238:	079d      	lsls	r5, r3, #30
 800523a:	4606      	mov	r6, r0
 800523c:	460c      	mov	r4, r1
 800523e:	d507      	bpl.n	8005250 <__smakebuf_r+0x1c>
 8005240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	6123      	str	r3, [r4, #16]
 8005248:	2301      	movs	r3, #1
 800524a:	6163      	str	r3, [r4, #20]
 800524c:	b002      	add	sp, #8
 800524e:	bd70      	pop	{r4, r5, r6, pc}
 8005250:	466a      	mov	r2, sp
 8005252:	ab01      	add	r3, sp, #4
 8005254:	f7ff ffc9 	bl	80051ea <__swhatbuf_r>
 8005258:	9900      	ldr	r1, [sp, #0]
 800525a:	4605      	mov	r5, r0
 800525c:	4630      	mov	r0, r6
 800525e:	f7ff f955 	bl	800450c <_malloc_r>
 8005262:	b948      	cbnz	r0, 8005278 <__smakebuf_r+0x44>
 8005264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005268:	059a      	lsls	r2, r3, #22
 800526a:	d4ef      	bmi.n	800524c <__smakebuf_r+0x18>
 800526c:	f023 0303 	bic.w	r3, r3, #3
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	81a3      	strh	r3, [r4, #12]
 8005276:	e7e3      	b.n	8005240 <__smakebuf_r+0xc>
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	6020      	str	r0, [r4, #0]
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	81a3      	strh	r3, [r4, #12]
 8005282:	9b00      	ldr	r3, [sp, #0]
 8005284:	6120      	str	r0, [r4, #16]
 8005286:	6163      	str	r3, [r4, #20]
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	b15b      	cbz	r3, 80052a4 <__smakebuf_r+0x70>
 800528c:	4630      	mov	r0, r6
 800528e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005292:	f000 f81d 	bl	80052d0 <_isatty_r>
 8005296:	b128      	cbz	r0, 80052a4 <__smakebuf_r+0x70>
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	431d      	orrs	r5, r3
 80052a8:	81a5      	strh	r5, [r4, #12]
 80052aa:	e7cf      	b.n	800524c <__smakebuf_r+0x18>

080052ac <_fstat_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	2300      	movs	r3, #0
 80052b0:	4d06      	ldr	r5, [pc, #24]	; (80052cc <_fstat_r+0x20>)
 80052b2:	4604      	mov	r4, r0
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	602b      	str	r3, [r5, #0]
 80052ba:	f7fc f88d 	bl	80013d8 <_fstat>
 80052be:	1c43      	adds	r3, r0, #1
 80052c0:	d102      	bne.n	80052c8 <_fstat_r+0x1c>
 80052c2:	682b      	ldr	r3, [r5, #0]
 80052c4:	b103      	cbz	r3, 80052c8 <_fstat_r+0x1c>
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	20000460 	.word	0x20000460

080052d0 <_isatty_r>:
 80052d0:	b538      	push	{r3, r4, r5, lr}
 80052d2:	2300      	movs	r3, #0
 80052d4:	4d05      	ldr	r5, [pc, #20]	; (80052ec <_isatty_r+0x1c>)
 80052d6:	4604      	mov	r4, r0
 80052d8:	4608      	mov	r0, r1
 80052da:	602b      	str	r3, [r5, #0]
 80052dc:	f7fc f88b 	bl	80013f6 <_isatty>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_isatty_r+0x1a>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_isatty_r+0x1a>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	20000460 	.word	0x20000460

080052f0 <_malloc_usable_size_r>:
 80052f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f4:	1f18      	subs	r0, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfbc      	itt	lt
 80052fa:	580b      	ldrlt	r3, [r1, r0]
 80052fc:	18c0      	addlt	r0, r0, r3
 80052fe:	4770      	bx	lr

08005300 <_init>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	bf00      	nop
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr

0800530c <_fini>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	bf00      	nop
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr
