
PEDESTRIAN_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005584  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005710  08005710  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08005710  08005710  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005710  08005710  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005710  08005710  00015710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08005718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  200000c8  080057e0  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080057e0  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4e3  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002598  00000000  00000000  0002d617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  0002fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b21  00000000  00000000  00030a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001927d  00000000  00000000  00031539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116af  00000000  00000000  0004a7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a57f  00000000  00000000  0005be65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004314  00000000  00000000  000e63e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ea6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005678 	.word	0x08005678

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	08005678 	.word	0x08005678

0800014c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	; (8000240 <buttonReading+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	; (8000244 <buttonReading+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	; (8000248 <buttonReading+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	; (8000240 <buttonReading+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <buttonReading+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	; (8000250 <buttonReading+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f002 f807 	bl	8002198 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <buttonReading+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2c      	ldr	r2, [pc, #176]	; (8000248 <buttonReading+0xfc>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	; (8000240 <buttonReading+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d143      	bne.n	800022a <buttonReading+0xde>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a28      	ldr	r2, [pc, #160]	; (8000248 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <buttonReading+0xf8>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d13b      	bne.n	800022a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a27      	ldr	r2, [pc, #156]	; (8000254 <buttonReading+0x108>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4923      	ldr	r1, [pc, #140]	; (8000248 <buttonReading+0xfc>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	; (8000248 <buttonReading+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	; (8000254 <buttonReading+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a20      	ldr	r2, [pc, #128]	; (8000254 <buttonReading+0x108>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d128      	bne.n	800022a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <buttonReading+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / SCH_TIMERTICK;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <buttonReading+0x110>)
 80001e4:	2164      	movs	r1, #100	; 0x64
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001ea:	e01e      	b.n	800022a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <buttonReading+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d119      	bne.n	800022a <buttonReading+0xde>
					buttonCounters[i] --;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <buttonReading+0x110>)
 80001fa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80001fe:	b292      	uxth	r2, r2
 8000200:	3a01      	subs	r2, #1
 8000202:	b292      	uxth	r2, r2
 8000204:	b211      	sxth	r1, r2
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <buttonReading+0x110>)
 8000208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <buttonReading+0x110>)
 8000210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dc08      	bgt.n	800022a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <buttonReading+0x10c>)
 800021c:	2101      	movs	r1, #1
 800021e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / SCH_TIMERTICK;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a0e      	ldr	r2, [pc, #56]	; (800025c <buttonReading+0x110>)
 8000224:	2132      	movs	r1, #50	; 0x32
 8000226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d990      	bls.n	8000158 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	200000ec 	.word	0x200000ec
 8000244:	200000f0 	.word	0x200000f0
 8000248:	200000e8 	.word	0x200000e8
 800024c:	20000000 	.word	0x20000000
 8000250:	20000010 	.word	0x20000010
 8000254:	200000e4 	.word	0x200000e4
 8000258:	200000f4 	.word	0x200000f4
 800025c:	200000f8 	.word	0x200000f8

08000260 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d901      	bls.n	8000274 <buttonPressed+0x14>
 8000270:	2300      	movs	r3, #0
 8000272:	e00b      	b.n	800028c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <buttonPressed+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d105      	bne.n	800028a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a05      	ldr	r2, [pc, #20]	; (8000298 <buttonPressed+0x38>)
 8000282:	2100      	movs	r1, #0
 8000284:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <buttonPressed+0x2c>
	}
	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	200000f4 	.word	0x200000f4

0800029c <fsmAuto>:

static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmAuto(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 80002a0:	2001      	movs	r0, #1
 80002a2:	f7ff ffdd 	bl	8000260 <buttonPressed>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d016      	beq.n	80002da <fsmAuto+0x3e>
		switch (trafficStates[0]) {
 80002ac:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <fsmAuto+0x7c>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d005      	beq.n	80002c0 <fsmAuto+0x24>
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	dd0f      	ble.n	80002d8 <fsmAuto+0x3c>
 80002b8:	3b02      	subs	r3, #2
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d80c      	bhi.n	80002d8 <fsmAuto+0x3c>
 80002be:	e005      	b.n	80002cc <fsmAuto+0x30>
		case TRAFFIC_RED:
			SCH_AddTask(pedestrian0Green, 0, 0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	4815      	ldr	r0, [pc, #84]	; (800031c <fsmAuto+0x80>)
 80002c6:	f000 fda9 	bl	8000e1c <SCH_AddTask>
			break;
 80002ca:	e006      	b.n	80002da <fsmAuto+0x3e>
		case TRAFFIC_YELLOW:
		case TRAFFIC_GREEN:
			SCH_AddTask(pedestrian0Red, 0, 0);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2100      	movs	r1, #0
 80002d0:	4813      	ldr	r0, [pc, #76]	; (8000320 <fsmAuto+0x84>)
 80002d2:	f000 fda3 	bl	8000e1c <SCH_AddTask>
			break;
 80002d6:	e000      	b.n	80002da <fsmAuto+0x3e>
		default:
			break;
 80002d8:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 80002da:	2002      	movs	r0, #2
 80002dc:	f7ff ffc0 	bl	8000260 <buttonPressed>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d016      	beq.n	8000314 <fsmAuto+0x78>
		switch (trafficStates[1]) {
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <fsmAuto+0x7c>)
 80002e8:	785b      	ldrb	r3, [r3, #1]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d005      	beq.n	80002fa <fsmAuto+0x5e>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	dd0f      	ble.n	8000312 <fsmAuto+0x76>
 80002f2:	3b02      	subs	r3, #2
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d80c      	bhi.n	8000312 <fsmAuto+0x76>
 80002f8:	e005      	b.n	8000306 <fsmAuto+0x6a>
		case TRAFFIC_RED:
			SCH_AddTask(pedestrian1Green, 0, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2100      	movs	r1, #0
 80002fe:	4809      	ldr	r0, [pc, #36]	; (8000324 <fsmAuto+0x88>)
 8000300:	f000 fd8c 	bl	8000e1c <SCH_AddTask>
			break;
 8000304:	e006      	b.n	8000314 <fsmAuto+0x78>
		case TRAFFIC_YELLOW:
		case TRAFFIC_GREEN:
			SCH_AddTask(pedestrian1Red, 0, 0);
 8000306:	2200      	movs	r2, #0
 8000308:	2100      	movs	r1, #0
 800030a:	4807      	ldr	r0, [pc, #28]	; (8000328 <fsmAuto+0x8c>)
 800030c:	f000 fd86 	bl	8000e1c <SCH_AddTask>
			break;
 8000310:	e000      	b.n	8000314 <fsmAuto+0x78>
		default:
			break;
 8000312:	bf00      	nop
		}
	}
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000338 	.word	0x20000338
 800031c:	08000cb9 	.word	0x08000cb9
 8000320:	08000ca9 	.word	0x08000ca9
 8000324:	08000ce9 	.word	0x08000ce9
 8000328:	08000cd9 	.word	0x08000cd9

0800032c <fsmInitAuto>:

void fsmInitAuto(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	SCH_AddTask(pedestrian0Off, 0, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2100      	movs	r1, #0
 8000334:	4843      	ldr	r0, [pc, #268]	; (8000444 <fsmInitAuto+0x118>)
 8000336:	f000 fd71 	bl	8000e1c <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	2100      	movs	r1, #0
 800033e:	4842      	ldr	r0, [pc, #264]	; (8000448 <fsmInitAuto+0x11c>)
 8000340:	f000 fd6c 	bl	8000e1c <SCH_AddTask>
	fsmAutoIDs[0] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000344:	4b41      	ldr	r3, [pc, #260]	; (800044c <fsmInitAuto+0x120>)
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	4b41      	ldr	r3, [pc, #260]	; (8000450 <fsmInitAuto+0x124>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	441a      	add	r2, r3
 800034e:	4b41      	ldr	r3, [pc, #260]	; (8000454 <fsmInitAuto+0x128>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4413      	add	r3, r2
 8000354:	461a      	mov	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	483f      	ldr	r0, [pc, #252]	; (8000458 <fsmInitAuto+0x12c>)
 800035a:	f000 fd5f 	bl	8000e1c <SCH_AddTask>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	4b3e      	ldr	r3, [pc, #248]	; (800045c <fsmInitAuto+0x130>)
 8000364:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000366:	4b39      	ldr	r3, [pc, #228]	; (800044c <fsmInitAuto+0x120>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4619      	mov	r1, r3
 800036c:	4b37      	ldr	r3, [pc, #220]	; (800044c <fsmInitAuto+0x120>)
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b37      	ldr	r3, [pc, #220]	; (8000450 <fsmInitAuto+0x124>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	441a      	add	r2, r3
 8000376:	4b37      	ldr	r3, [pc, #220]	; (8000454 <fsmInitAuto+0x128>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4413      	add	r3, r2
 800037c:	461a      	mov	r2, r3
 800037e:	4838      	ldr	r0, [pc, #224]	; (8000460 <fsmInitAuto+0x134>)
 8000380:	f000 fd4c 	bl	8000e1c <SCH_AddTask>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	4b34      	ldr	r3, [pc, #208]	; (800045c <fsmInitAuto+0x130>)
 800038a:	705a      	strb	r2, [r3, #1]
	fsmAutoIDs[2] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800038c:	4b2f      	ldr	r3, [pc, #188]	; (800044c <fsmInitAuto+0x120>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <fsmInitAuto+0x124>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4413      	add	r3, r2
 8000396:	4619      	mov	r1, r3
 8000398:	4b2c      	ldr	r3, [pc, #176]	; (800044c <fsmInitAuto+0x120>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <fsmInitAuto+0x124>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	441a      	add	r2, r3
 80003a2:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <fsmInitAuto+0x128>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	461a      	mov	r2, r3
 80003aa:	482e      	ldr	r0, [pc, #184]	; (8000464 <fsmInitAuto+0x138>)
 80003ac:	f000 fd36 	bl	8000e1c <SCH_AddTask>
 80003b0:	4603      	mov	r3, r0
 80003b2:	461a      	mov	r2, r3
 80003b4:	4b29      	ldr	r3, [pc, #164]	; (800045c <fsmInitAuto+0x130>)
 80003b6:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80003b8:	4b24      	ldr	r3, [pc, #144]	; (800044c <fsmInitAuto+0x120>)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	4b24      	ldr	r3, [pc, #144]	; (8000450 <fsmInitAuto+0x124>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	441a      	add	r2, r3
 80003c2:	4b24      	ldr	r3, [pc, #144]	; (8000454 <fsmInitAuto+0x128>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4413      	add	r3, r2
 80003c8:	461a      	mov	r2, r3
 80003ca:	2100      	movs	r1, #0
 80003cc:	4826      	ldr	r0, [pc, #152]	; (8000468 <fsmInitAuto+0x13c>)
 80003ce:	f000 fd25 	bl	8000e1c <SCH_AddTask>
 80003d2:	4603      	mov	r3, r0
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b21      	ldr	r3, [pc, #132]	; (800045c <fsmInitAuto+0x130>)
 80003d8:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80003da:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <fsmInitAuto+0x128>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4619      	mov	r1, r3
 80003e0:	4b1a      	ldr	r3, [pc, #104]	; (800044c <fsmInitAuto+0x120>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <fsmInitAuto+0x124>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	441a      	add	r2, r3
 80003ea:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <fsmInitAuto+0x128>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4413      	add	r3, r2
 80003f0:	461a      	mov	r2, r3
 80003f2:	481e      	ldr	r0, [pc, #120]	; (800046c <fsmInitAuto+0x140>)
 80003f4:	f000 fd12 	bl	8000e1c <SCH_AddTask>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <fsmInitAuto+0x130>)
 80003fe:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <fsmInitAuto+0x128>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <fsmInitAuto+0x124>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4413      	add	r3, r2
 800040a:	4619      	mov	r1, r3
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <fsmInitAuto+0x120>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <fsmInitAuto+0x124>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	441a      	add	r2, r3
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <fsmInitAuto+0x128>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4413      	add	r3, r2
 800041c:	461a      	mov	r2, r3
 800041e:	4814      	ldr	r0, [pc, #80]	; (8000470 <fsmInitAuto+0x144>)
 8000420:	f000 fcfc 	bl	8000e1c <SCH_AddTask>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <fsmInitAuto+0x130>)
 800042a:	715a      	strb	r2, [r3, #5]
	fsmAutoIDs[6] = SCH_AddTask(fsmAuto, 10, 10);
 800042c:	220a      	movs	r2, #10
 800042e:	210a      	movs	r1, #10
 8000430:	4810      	ldr	r0, [pc, #64]	; (8000474 <fsmInitAuto+0x148>)
 8000432:	f000 fcf3 	bl	8000e1c <SCH_AddTask>
 8000436:	4603      	mov	r3, r0
 8000438:	461a      	mov	r2, r3
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <fsmInitAuto+0x130>)
 800043c:	719a      	strb	r2, [r3, #6]
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	08000c99 	.word	0x08000c99
 8000448:	08000cc9 	.word	0x08000cc9
 800044c:	20000034 	.word	0x20000034
 8000450:	2000003c 	.word	0x2000003c
 8000454:	20000038 	.word	0x20000038
 8000458:	080019a1 	.word	0x080019a1
 800045c:	20000104 	.word	0x20000104
 8000460:	080019b1 	.word	0x080019b1
 8000464:	080019c1 	.word	0x080019c1
 8000468:	080019f1 	.word	0x080019f1
 800046c:	08001a01 	.word	0x08001a01
 8000470:	080019e1 	.word	0x080019e1
 8000474:	0800029d 	.word	0x0800029d

08000478 <fsmManual>:

void fsmManual(void) {
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 800047c:	2001      	movs	r0, #1
 800047e:	f7ff feef 	bl	8000260 <buttonPressed>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d027      	beq.n	80004d8 <fsmManual+0x60>
		switch (trafficStates[0]) {
 8000488:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <fsmManual+0xc0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b03      	cmp	r3, #3
 800048e:	d017      	beq.n	80004c0 <fsmManual+0x48>
 8000490:	2b03      	cmp	r3, #3
 8000492:	dc20      	bgt.n	80004d6 <fsmManual+0x5e>
 8000494:	2b01      	cmp	r3, #1
 8000496:	d002      	beq.n	800049e <fsmManual+0x26>
 8000498:	2b02      	cmp	r3, #2
 800049a:	d00b      	beq.n	80004b4 <fsmManual+0x3c>
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Red, 0, 0);
			SCH_AddTask(pedestrian0Green, 0, 0);
			break;
		default:
			break;
 800049c:	e01b      	b.n	80004d6 <fsmManual+0x5e>
			SCH_AddTask(traffic0Green, 0, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	4826      	ldr	r0, [pc, #152]	; (800053c <fsmManual+0xc4>)
 80004a4:	f000 fcba 	bl	8000e1c <SCH_AddTask>
			SCH_AddTask(pedestrian0Red, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	4824      	ldr	r0, [pc, #144]	; (8000540 <fsmManual+0xc8>)
 80004ae:	f000 fcb5 	bl	8000e1c <SCH_AddTask>
			break;
 80004b2:	e011      	b.n	80004d8 <fsmManual+0x60>
			SCH_AddTask(traffic0Yellow, 0, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	4822      	ldr	r0, [pc, #136]	; (8000544 <fsmManual+0xcc>)
 80004ba:	f000 fcaf 	bl	8000e1c <SCH_AddTask>
			break;
 80004be:	e00b      	b.n	80004d8 <fsmManual+0x60>
			SCH_AddTask(traffic0Red, 0, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2100      	movs	r1, #0
 80004c4:	4820      	ldr	r0, [pc, #128]	; (8000548 <fsmManual+0xd0>)
 80004c6:	f000 fca9 	bl	8000e1c <SCH_AddTask>
			SCH_AddTask(pedestrian0Green, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	481f      	ldr	r0, [pc, #124]	; (800054c <fsmManual+0xd4>)
 80004d0:	f000 fca4 	bl	8000e1c <SCH_AddTask>
			break;
 80004d4:	e000      	b.n	80004d8 <fsmManual+0x60>
			break;
 80004d6:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 80004d8:	2002      	movs	r0, #2
 80004da:	f7ff fec1 	bl	8000260 <buttonPressed>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d027      	beq.n	8000534 <fsmManual+0xbc>
		switch (trafficStates[1]) {
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <fsmManual+0xc0>)
 80004e6:	785b      	ldrb	r3, [r3, #1]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d017      	beq.n	800051c <fsmManual+0xa4>
 80004ec:	2b03      	cmp	r3, #3
 80004ee:	dc20      	bgt.n	8000532 <fsmManual+0xba>
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d002      	beq.n	80004fa <fsmManual+0x82>
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d00b      	beq.n	8000510 <fsmManual+0x98>
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Red, 0, 0);
			SCH_AddTask(pedestrian1Green, 0, 0);
			break;
		default:
			break;
 80004f8:	e01b      	b.n	8000532 <fsmManual+0xba>
			SCH_AddTask(traffic1Green, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	4814      	ldr	r0, [pc, #80]	; (8000550 <fsmManual+0xd8>)
 8000500:	f000 fc8c 	bl	8000e1c <SCH_AddTask>
			SCH_AddTask(pedestrian1Red, 0, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	4812      	ldr	r0, [pc, #72]	; (8000554 <fsmManual+0xdc>)
 800050a:	f000 fc87 	bl	8000e1c <SCH_AddTask>
			break;
 800050e:	e011      	b.n	8000534 <fsmManual+0xbc>
			SCH_AddTask(traffic1Yellow, 0, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	4810      	ldr	r0, [pc, #64]	; (8000558 <fsmManual+0xe0>)
 8000516:	f000 fc81 	bl	8000e1c <SCH_AddTask>
			break;
 800051a:	e00b      	b.n	8000534 <fsmManual+0xbc>
			SCH_AddTask(traffic1Red, 0, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	480e      	ldr	r0, [pc, #56]	; (800055c <fsmManual+0xe4>)
 8000522:	f000 fc7b 	bl	8000e1c <SCH_AddTask>
			SCH_AddTask(pedestrian1Green, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <fsmManual+0xe8>)
 800052c:	f000 fc76 	bl	8000e1c <SCH_AddTask>
			break;
 8000530:	e000      	b.n	8000534 <fsmManual+0xbc>
			break;
 8000532:	bf00      	nop
		}
	}
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000338 	.word	0x20000338
 800053c:	080019b1 	.word	0x080019b1
 8000540:	08000ca9 	.word	0x08000ca9
 8000544:	080019c1 	.word	0x080019c1
 8000548:	080019a1 	.word	0x080019a1
 800054c:	08000cb9 	.word	0x08000cb9
 8000550:	080019f1 	.word	0x080019f1
 8000554:	08000cd9 	.word	0x08000cd9
 8000558:	08001a01 	.word	0x08001a01
 800055c:	080019e1 	.word	0x080019e1
 8000560:	08000ce9 	.word	0x08000ce9

08000564 <fsmInitManual>:

void fsmInitManual(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	SCH_AddTask(traffic0Red, 0, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2100      	movs	r1, #0
 800056c:	480e      	ldr	r0, [pc, #56]	; (80005a8 <fsmInitManual+0x44>)
 800056e:	f000 fc55 	bl	8000e1c <SCH_AddTask>
	SCH_AddTask(traffic1Green, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <fsmInitManual+0x48>)
 8000578:	f000 fc50 	bl	8000e1c <SCH_AddTask>
	SCH_AddTask(pedestrian0Green, 0, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <fsmInitManual+0x4c>)
 8000582:	f000 fc4b 	bl	8000e1c <SCH_AddTask>
	SCH_AddTask(pedestrian1Red, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <fsmInitManual+0x50>)
 800058c:	f000 fc46 	bl	8000e1c <SCH_AddTask>
	fsmManualIDs[0] = SCH_AddTask(fsmManual, 10, 10);
 8000590:	220a      	movs	r2, #10
 8000592:	210a      	movs	r1, #10
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <fsmInitManual+0x54>)
 8000596:	f000 fc41 	bl	8000e1c <SCH_AddTask>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <fsmInitManual+0x58>)
 80005a0:	701a      	strb	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	080019a1 	.word	0x080019a1
 80005ac:	080019f1 	.word	0x080019f1
 80005b0:	08000cb9 	.word	0x08000cb9
 80005b4:	08000cd9 	.word	0x08000cd9
 80005b8:	08000479 	.word	0x08000479
 80005bc:	2000010c 	.word	0x2000010c

080005c0 <fsmTunning>:

void fsmTunning(void) {}
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <fsmInitTunning>:

void fsmInitTunning(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	fsmTunningIDs[0] = SCH_AddTask(fsmTunning, 10, 10);
 80005d0:	220a      	movs	r2, #10
 80005d2:	210a      	movs	r1, #10
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <fsmInitTunning+0x1c>)
 80005d6:	f000 fc21 	bl	8000e1c <SCH_AddTask>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	4b03      	ldr	r3, [pc, #12]	; (80005ec <fsmInitTunning+0x20>)
 80005e0:	701a      	strb	r2, [r3, #0]
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	080005c1 	.word	0x080005c1
 80005ec:	20000110 	.word	0x20000110

080005f0 <fsmInit>:

void fsmInit(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	SCH_AddTask(traffic0Off, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <fsmInit+0x3c>)
 80005fa:	f000 fc0f 	bl	8000e1c <SCH_AddTask>
	SCH_AddTask(traffic1Off, 0, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <fsmInit+0x40>)
 8000604:	f000 fc0a 	bl	8000e1c <SCH_AddTask>
	SCH_AddTask(pedestrian0Off, 0, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <fsmInit+0x44>)
 800060e:	f000 fc05 	bl	8000e1c <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <fsmInit+0x48>)
 8000618:	f000 fc00 	bl	8000e1c <SCH_AddTask>
	SCH_AddTask(fsmInitAuto, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <fsmInit+0x4c>)
 8000622:	f000 fbfb 	bl	8000e1c <SCH_AddTask>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	08001991 	.word	0x08001991
 8000630:	080019d1 	.word	0x080019d1
 8000634:	08000c99 	.word	0x08000c99
 8000638:	08000cc9 	.word	0x08000cc9
 800063c:	0800032d 	.word	0x0800032d

08000640 <fsmProcessing>:

void fsmProcessing(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	if (buttonPressed(0)) {
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff fe0a 	bl	8000260 <buttonPressed>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d053      	beq.n	80006fa <fsmProcessing+0xba>
		switch (fsmState) {
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <fsmProcessing+0xc4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d036      	beq.n	80006c8 <fsmProcessing+0x88>
 800065a:	2b02      	cmp	r3, #2
 800065c:	dc4c      	bgt.n	80006f8 <fsmProcessing+0xb8>
 800065e:	2b00      	cmp	r3, #0
 8000660:	d002      	beq.n	8000668 <fsmProcessing+0x28>
 8000662:	2b01      	cmp	r3, #1
 8000664:	d018      	beq.n	8000698 <fsmProcessing+0x58>
			}
			SCH_AddTask(fsmInitAuto, 0, 0);
			fsmState = FSM_AUTO;
			break;
		default:
			break;
 8000666:	e047      	b.n	80006f8 <fsmProcessing+0xb8>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000668:	2300      	movs	r3, #0
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	e008      	b.n	8000680 <fsmProcessing+0x40>
				SCH_DeleteTask(fsmAutoIDs[i]);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4a25      	ldr	r2, [pc, #148]	; (8000708 <fsmProcessing+0xc8>)
 8000672:	5cd3      	ldrb	r3, [r2, r3]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fcd7 	bl	8001028 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	3301      	adds	r3, #1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b06      	cmp	r3, #6
 8000684:	d9f3      	bls.n	800066e <fsmProcessing+0x2e>
			SCH_AddTask(fsmInitManual, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	4820      	ldr	r0, [pc, #128]	; (800070c <fsmProcessing+0xcc>)
 800068c:	f000 fbc6 	bl	8000e1c <SCH_AddTask>
			fsmState = FSM_MANUAL;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <fsmProcessing+0xc4>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
			break;
 8000696:	e030      	b.n	80006fa <fsmProcessing+0xba>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000698:	2300      	movs	r3, #0
 800069a:	71bb      	strb	r3, [r7, #6]
 800069c:	e008      	b.n	80006b0 <fsmProcessing+0x70>
				SCH_DeleteTask(fsmManualIDs[i]);
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <fsmProcessing+0xd0>)
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fcbf 	bl	8001028 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 80006aa:	79bb      	ldrb	r3, [r7, #6]
 80006ac:	3301      	adds	r3, #1
 80006ae:	71bb      	strb	r3, [r7, #6]
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0f3      	beq.n	800069e <fsmProcessing+0x5e>
			SCH_AddTask(fsmInitTunning, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	4816      	ldr	r0, [pc, #88]	; (8000714 <fsmProcessing+0xd4>)
 80006bc:	f000 fbae 	bl	8000e1c <SCH_AddTask>
			fsmState = FSM_TUNNING;
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <fsmProcessing+0xc4>)
 80006c2:	2202      	movs	r2, #2
 80006c4:	701a      	strb	r2, [r3, #0]
			break;
 80006c6:	e018      	b.n	80006fa <fsmProcessing+0xba>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	717b      	strb	r3, [r7, #5]
 80006cc:	e008      	b.n	80006e0 <fsmProcessing+0xa0>
				SCH_DeleteTask(fsmTunningIDs[i]);
 80006ce:	797b      	ldrb	r3, [r7, #5]
 80006d0:	4a11      	ldr	r2, [pc, #68]	; (8000718 <fsmProcessing+0xd8>)
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fca7 	bl	8001028 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 80006da:	797b      	ldrb	r3, [r7, #5]
 80006dc:	3301      	adds	r3, #1
 80006de:	717b      	strb	r3, [r7, #5]
 80006e0:	797b      	ldrb	r3, [r7, #5]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f3      	beq.n	80006ce <fsmProcessing+0x8e>
			SCH_AddTask(fsmInitAuto, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <fsmProcessing+0xdc>)
 80006ec:	f000 fb96 	bl	8000e1c <SCH_AddTask>
			fsmState = FSM_AUTO;
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <fsmProcessing+0xc4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
			break;
 80006f6:	e000      	b.n	80006fa <fsmProcessing+0xba>
			break;
 80006f8:	bf00      	nop
		}
	}
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000100 	.word	0x20000100
 8000708:	20000104 	.word	0x20000104
 800070c:	08000565 	.word	0x08000565
 8000710:	2000010c 	.word	0x2000010c
 8000714:	080005cd 	.word	0x080005cd
 8000718:	20000110 	.word	0x20000110
 800071c:	0800032d 	.word	0x0800032d

08000720 <ledBlink>:
 *      Author: Nhat Khai
 */

#include "led.h"

void ledBlink(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000724:	2120      	movs	r1, #32
 8000726:	4802      	ldr	r0, [pc, #8]	; (8000730 <ledBlink+0x10>)
 8000728:	f001 fd65 	bl	80021f6 <HAL_GPIO_TogglePin>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40010800 	.word	0x40010800

08000734 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_UART_RxCpltCallback+0x30>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d10a      	bne.n	800075c <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000746:	2201      	movs	r2, #1
 8000748:	4907      	ldr	r1, [pc, #28]	; (8000768 <HAL_UART_RxCpltCallback+0x34>)
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <HAL_UART_RxCpltCallback+0x38>)
 800074c:	f003 f8d9 	bl	8003902 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000750:	2332      	movs	r3, #50	; 0x32
 8000752:	2201      	movs	r2, #1
 8000754:	4904      	ldr	r1, [pc, #16]	; (8000768 <HAL_UART_RxCpltCallback+0x34>)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <HAL_UART_RxCpltCallback+0x38>)
 8000758:	f003 f850 	bl	80037fc <HAL_UART_Transmit>
	}
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40004400 	.word	0x40004400
 8000768:	200001ec 	.word	0x200001ec
 800076c:	200001a4 	.word	0x200001a4

08000770 <reportPrint>:
void reportPrint(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
	char str[20];
	uint8_t count = SCH_Report();
 8000776:	f000 fe1f 	bl	80013b8 <SCH_Report>
 800077a:	4603      	mov	r3, r0
 800077c:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tasks: %u\r\n", count), 100);
 800077e:	7dfa      	ldrb	r2, [r7, #23]
 8000780:	463b      	mov	r3, r7
 8000782:	4907      	ldr	r1, [pc, #28]	; (80007a0 <reportPrint+0x30>)
 8000784:	4618      	mov	r0, r3
 8000786:	f003 ff35 	bl	80045f4 <siprintf>
 800078a:	4603      	mov	r3, r0
 800078c:	b29a      	uxth	r2, r3
 800078e:	4639      	mov	r1, r7
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <reportPrint+0x34>)
 8000794:	f003 f832 	bl	80037fc <HAL_UART_Transmit>
}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	08005690 	.word	0x08005690
 80007a4:	200001a4 	.word	0x200001a4

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f001 f956 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f842 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 f974 	bl	8000aa0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007b8:	f000 f87a 	bl	80008b0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007bc:	f000 f946 	bl	8000a4c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80007c0:	f000 f8c2 	bl	8000948 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007c4:	4814      	ldr	r0, [pc, #80]	; (8000818 <main+0x70>)
 80007c6:	f002 f98f 	bl	8002ae8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80007ca:	2201      	movs	r2, #1
 80007cc:	4913      	ldr	r1, [pc, #76]	; (800081c <main+0x74>)
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <main+0x78>)
 80007d0:	f003 f897 	bl	8003902 <HAL_UART_Receive_IT>
  SCH_Init();
 80007d4:	f000 fa90 	bl	8000cf8 <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(ledBlink, 0, 1000);
 80007d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007dc:	2100      	movs	r1, #0
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <main+0x7c>)
 80007e0:	f000 fb1c 	bl	8000e1c <SCH_AddTask>
  SCH_AddTask(buttonReading, 0, 10);
 80007e4:	220a      	movs	r2, #10
 80007e6:	2100      	movs	r1, #0
 80007e8:	480f      	ldr	r0, [pc, #60]	; (8000828 <main+0x80>)
 80007ea:	f000 fb17 	bl	8000e1c <SCH_AddTask>
  SCH_AddTask(reportPrint, 500, 1000);
 80007ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007f6:	480d      	ldr	r0, [pc, #52]	; (800082c <main+0x84>)
 80007f8:	f000 fb10 	bl	8000e1c <SCH_AddTask>
  SCH_AddTask(fsmInit, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <main+0x88>)
 8000802:	f000 fb0b 	bl	8000e1c <SCH_AddTask>
  SCH_AddTask(fsmProcessing, 1000, 10);
 8000806:	220a      	movs	r2, #10
 8000808:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <main+0x8c>)
 800080e:	f000 fb05 	bl	8000e1c <SCH_AddTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch();
 8000812:	f000 fae1 	bl	8000dd8 <SCH_Dispatch>
 8000816:	e7fc      	b.n	8000812 <main+0x6a>
 8000818:	20000114 	.word	0x20000114
 800081c:	200001ec 	.word	0x200001ec
 8000820:	200001a4 	.word	0x200001a4
 8000824:	08000721 	.word	0x08000721
 8000828:	0800014d 	.word	0x0800014d
 800082c:	08000771 	.word	0x08000771
 8000830:	080005f1 	.word	0x080005f1
 8000834:	08000641 	.word	0x08000641

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b090      	sub	sp, #64	; 0x40
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	2228      	movs	r2, #40	; 0x28
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f003 ff37 	bl	80046ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085a:	2302      	movs	r3, #2
 800085c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085e:	2301      	movs	r3, #1
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000862:	2310      	movs	r3, #16
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000866:	2300      	movs	r3, #0
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fcda 	bl	8002228 <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800087a:	f000 f990 	bl	8000b9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	230f      	movs	r3, #15
 8000880:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f001 ff48 	bl	800272c <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008a2:	f000 f97c 	bl	8000b9e <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3740      	adds	r7, #64	; 0x40
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_TIM2_Init+0x94>)
 80008ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_TIM2_Init+0x94>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_TIM2_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_TIM2_Init+0x94>)
 80008e2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80008e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_TIM2_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_TIM2_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_TIM2_Init+0x94>)
 80008f6:	f002 f8a7 	bl	8002a48 <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000900:	f000 f94d 	bl	8000b9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000908:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_TIM2_Init+0x94>)
 8000912:	f002 fb57 	bl	8002fc4 <HAL_TIM_ConfigClockSource>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800091c:	f000 f93f 	bl	8000b9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_TIM2_Init+0x94>)
 800092e:	f002 feab 	bl	8003688 <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000938:	f000 f931 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000114 	.word	0x20000114

08000948 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	; 0x38
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000978:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <MX_TIM3_Init+0xfc>)
 800097a:	4a33      	ldr	r2, [pc, #204]	; (8000a48 <MX_TIM3_Init+0x100>)
 800097c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <MX_TIM3_Init+0xfc>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <MX_TIM3_Init+0xfc>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <MX_TIM3_Init+0xfc>)
 800098c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000990:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000992:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <MX_TIM3_Init+0xfc>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000998:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <MX_TIM3_Init+0xfc>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800099e:	4829      	ldr	r0, [pc, #164]	; (8000a44 <MX_TIM3_Init+0xfc>)
 80009a0:	f002 f852 	bl	8002a48 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80009aa:	f000 f8f8 	bl	8000b9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4822      	ldr	r0, [pc, #136]	; (8000a44 <MX_TIM3_Init+0xfc>)
 80009bc:	f002 fb02 	bl	8002fc4 <HAL_TIM_ConfigClockSource>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80009c6:	f000 f8ea 	bl	8000b9e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ca:	481e      	ldr	r0, [pc, #120]	; (8000a44 <MX_TIM3_Init+0xfc>)
 80009cc:	f002 f8d8 	bl	8002b80 <HAL_TIM_PWM_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80009d6:	f000 f8e2 	bl	8000b9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	4619      	mov	r1, r3
 80009e8:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_TIM3_Init+0xfc>)
 80009ea:	f002 fe4d 	bl	8003688 <HAL_TIMEx_MasterConfigSynchronization>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009f4:	f000 f8d3 	bl	8000b9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f8:	2360      	movs	r3, #96	; 0x60
 80009fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_TIM3_Init+0xfc>)
 8000a10:	f002 fa16 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000a1a:	f000 f8c0 	bl	8000b9e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2204      	movs	r2, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <MX_TIM3_Init+0xfc>)
 8000a26:	f002 fa0b 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000a30:	f000 f8b5 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <MX_TIM3_Init+0xfc>)
 8000a36:	f000 fd45 	bl	80014c4 <HAL_TIM_MspPostInit>

}
 8000a3a:	bf00      	nop
 8000a3c:	3738      	adds	r7, #56	; 0x38
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000015c 	.word	0x2000015c
 8000a48:	40000400 	.word	0x40000400

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f002 fe6a 	bl	800375c <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f886 	bl	8000b9e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200001a4 	.word	0x200001a4
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a2e      	ldr	r2, [pc, #184]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	4823      	ldr	r0, [pc, #140]	; (8000b78 <MX_GPIO_Init+0xd8>)
 8000aea:	f001 fb6c 	bl	80021c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|GPIO_PIN_2|GPIO_PIN_10
 8000aee:	2200      	movs	r2, #0
 8000af0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000af4:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000af6:	f001 fb66 	bl	80021c6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin|TRAFFIC1_GREEN_Pin
                          |GPIO_PIN_15|GPIO_PIN_3|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin
                          |TRAFFIC0_GREEN_Pin|GPIO_PIN_7|PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000afa:	2320      	movs	r3, #32
 8000afc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2302      	movs	r3, #2
 8000b08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4819      	ldr	r0, [pc, #100]	; (8000b78 <MX_GPIO_Init+0xd8>)
 8000b12:	f001 f9c5 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDESTRIAN0_RED_Pin PEDESTRIAN0_GREEN_Pin TRAFFIC1_RED_Pin TRAFFIC1_YELLOW_Pin
                           TRAFFIC1_GREEN_Pin TRAFFIC0_RED_Pin TRAFFIC0_YELLOW_Pin TRAFFIC0_GREEN_Pin
                           PEDESTRIAN1_RED_Pin PEDESTRIAN1_GREEN_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin
 8000b16:	f247 3373 	movw	r3, #29555	; 0x7373
 8000b1a:	60bb      	str	r3, [r7, #8]
                          |TRAFFIC1_GREEN_Pin|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin|TRAFFIC0_GREEN_Pin
                          |PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2302      	movs	r3, #2
 8000b26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4813      	ldr	r0, [pc, #76]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000b30:	f001 f9b6 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB15
                           PB3 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 8000b34:	f648 438c 	movw	r3, #35980	; 0x8c8c
 8000b38:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2302      	movs	r3, #2
 8000b44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <MX_GPIO_Init+0xdc>)
 8000b4e:	f001 f9a7 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000b52:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000b56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	4619      	mov	r1, r3
 8000b66:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_GPIO_Init+0xd8>)
 8000b68:	f001 f99a 	bl	8001ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8000b92:	f000 f8fb 	bl	8000d8c <SCH_Update>
	}
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba2:	b672      	cpsid	i
}
 8000ba4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <Error_Handler+0x8>

08000ba8 <pedestrianToggle>:
static GPIO_TypeDef* pedestrianGreenPorts[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_GPIO_Port};

static uint16_t pedestrianRedPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_RED_Pin, PEDESTRIAN1_RED_Pin};
static uint16_t pedestrianGreenPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_Pin, PEDESTRIAN1_GREEN_Pin};

void pedestrianToggle(uint8_t index, enum PEDESTRIAN_STATE state) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d040      	beq.n	8000c40 <pedestrianToggle+0x98>
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	dc5b      	bgt.n	8000c7a <pedestrianToggle+0xd2>
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <pedestrianToggle+0x24>
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d01d      	beq.n	8000c06 <pedestrianToggle+0x5e>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
		pedestrianStates[index] = PEDESTRIAN_GREEN;
		break;
	default:
		break;
 8000bca:	e056      	b.n	8000c7a <pedestrianToggle+0xd2>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4a2d      	ldr	r2, [pc, #180]	; (8000c84 <pedestrianToggle+0xdc>)
 8000bd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <pedestrianToggle+0xe0>)
 8000bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4619      	mov	r1, r3
 8000be0:	f001 faf1 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <pedestrianToggle+0xe4>)
 8000be8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4a28      	ldr	r2, [pc, #160]	; (8000c90 <pedestrianToggle+0xe8>)
 8000bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f001 fae5 	bl	80021c6 <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_OFF;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4a25      	ldr	r2, [pc, #148]	; (8000c94 <pedestrianToggle+0xec>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	54d1      	strb	r1, [r2, r3]
		break;
 8000c04:	e03a      	b.n	8000c7c <pedestrianToggle+0xd4>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_RESET);
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <pedestrianToggle+0xdc>)
 8000c0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <pedestrianToggle+0xe0>)
 8000c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c16:	2200      	movs	r2, #0
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f001 fad4 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4a1a      	ldr	r2, [pc, #104]	; (8000c8c <pedestrianToggle+0xe4>)
 8000c22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <pedestrianToggle+0xe8>)
 8000c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4619      	mov	r1, r3
 8000c32:	f001 fac8 	bl	80021c6 <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_RED;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <pedestrianToggle+0xec>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	54d1      	strb	r1, [r2, r3]
		break;
 8000c3e:	e01d      	b.n	8000c7c <pedestrianToggle+0xd4>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <pedestrianToggle+0xdc>)
 8000c44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <pedestrianToggle+0xe0>)
 8000c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c50:	2201      	movs	r2, #1
 8000c52:	4619      	mov	r1, r3
 8000c54:	f001 fab7 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <pedestrianToggle+0xe4>)
 8000c5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <pedestrianToggle+0xe8>)
 8000c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f001 faab 	bl	80021c6 <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_GREEN;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <pedestrianToggle+0xec>)
 8000c74:	2102      	movs	r1, #2
 8000c76:	54d1      	strb	r1, [r2, r3]
		break;
 8000c78:	e000      	b.n	8000c7c <pedestrianToggle+0xd4>
		break;
 8000c7a:	bf00      	nop
	}
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000018 	.word	0x20000018
 8000c88:	20000028 	.word	0x20000028
 8000c8c:	20000020 	.word	0x20000020
 8000c90:	2000002c 	.word	0x2000002c
 8000c94:	200001f0 	.word	0x200001f0

08000c98 <pedestrian0Off>:

void pedestrian0Off(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	pedestrianToggle(0, PEDESTRIAN_OFF);
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff ff82 	bl	8000ba8 <pedestrianToggle>
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <pedestrian0Red>:
void pedestrian0Red(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	pedestrianToggle(0, PEDESTRIAN_RED);
 8000cac:	2101      	movs	r1, #1
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff ff7a 	bl	8000ba8 <pedestrianToggle>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <pedestrian0Green>:
void pedestrian0Green(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	pedestrianToggle(0, PEDESTRIAN_GREEN);
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff ff72 	bl	8000ba8 <pedestrianToggle>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <pedestrian1Off>:

void pedestrian1Off(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	pedestrianToggle(1, PEDESTRIAN_OFF);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff ff6a 	bl	8000ba8 <pedestrianToggle>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <pedestrian1Red>:
void pedestrian1Red(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	pedestrianToggle(1, PEDESTRIAN_RED);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff ff62 	bl	8000ba8 <pedestrianToggle>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <pedestrian1Green>:
void pedestrian1Green(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	pedestrianToggle(1, PEDESTRIAN_GREEN);
 8000cec:	2102      	movs	r1, #2
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff ff5a 	bl	8000ba8 <pedestrianToggle>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	e037      	b.n	8000d74 <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 8000d04:	79fa      	ldrb	r2, [r7, #7]
 8000d06:	4920      	ldr	r1, [pc, #128]	; (8000d88 <SCH_Init+0x90>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i - 1;
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f1c3 030f 	rsb	r3, r3, #15
 8000d1e:	b2d8      	uxtb	r0, r3
 8000d20:	4919      	ldr	r1, [pc, #100]	; (8000d88 <SCH_Init+0x90>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	4602      	mov	r2, r0
 8000d30:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	4914      	ldr	r1, [pc, #80]	; (8000d88 <SCH_Init+0x90>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	440b      	add	r3, r1
 8000d40:	3308      	adds	r3, #8
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 8000d46:	79fa      	ldrb	r2, [r7, #7]
 8000d48:	490f      	ldr	r1, [pc, #60]	; (8000d88 <SCH_Init+0x90>)
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	330c      	adds	r3, #12
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 8000d5a:	79fa      	ldrb	r2, [r7, #7]
 8000d5c:	490a      	ldr	r1, [pc, #40]	; (8000d88 <SCH_Init+0x90>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	3310      	adds	r3, #16
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	3301      	adds	r3, #1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b0f      	cmp	r3, #15
 8000d78:	d9c4      	bls.n	8000d04 <SCH_Init+0xc>
    }
}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200001f4 	.word	0x200001f4

08000d8c <SCH_Update>:

void SCH_Update(void) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <SCH_Update+0x48>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d018      	beq.n	8000dca <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <SCH_Update+0x48>)
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00c      	beq.n	8000dba <SCH_Update+0x2e>
		if (tasks[0].delay > SCH_TIMERTICK) {
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <SCH_Update+0x48>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b0a      	cmp	r3, #10
 8000da6:	d905      	bls.n	8000db4 <SCH_Update+0x28>
			tasks[0].delay -= SCH_TIMERTICK;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <SCH_Update+0x48>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	3b0a      	subs	r3, #10
 8000dae:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <SCH_Update+0x48>)
 8000db0:	6093      	str	r3, [r2, #8]
 8000db2:	e002      	b.n	8000dba <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <SCH_Update+0x48>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SCH_Update+0x48>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d104      	bne.n	8000dcc <SCH_Update+0x40>
		tasks[0].flag = 1;
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SCH_Update+0x48>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	741a      	strb	r2, [r3, #16]
 8000dc8:	e000      	b.n	8000dcc <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 8000dca:	bf00      	nop
	}
}
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	200001f4 	.word	0x200001f4

08000dd8 <SCH_Dispatch>:

void SCH_Dispatch(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <SCH_Dispatch+0x3c>)
 8000dde:	7c1b      	ldrb	r3, [r3, #16]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d015      	beq.n	8000e10 <SCH_Dispatch+0x38>
    printf("Dispatch Task %d\n", tasks[0].id);
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <SCH_Dispatch+0x3c>)
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	4619      	mov	r1, r3
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <SCH_Dispatch+0x40>)
 8000dec:	f003 fbf0 	bl	80045d0 <iprintf>
    (*tasks[0].functionPointer)();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <SCH_Dispatch+0x3c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4798      	blx	r3
    if (tasks[0].period > 0) {
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <SCH_Dispatch+0x3c>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <SCH_Dispatch+0x2c>
        SCH_RefreshTask();
 8000dfe:	f000 f9a5 	bl	800114c <SCH_RefreshTask>
 8000e02:	e006      	b.n	8000e12 <SCH_Dispatch+0x3a>
    }
    else {
        SCH_DeleteTask(tasks[0].id);
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <SCH_Dispatch+0x3c>)
 8000e06:	791b      	ldrb	r3, [r3, #4]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f90d 	bl	8001028 <SCH_DeleteTask>
 8000e0e:	e000      	b.n	8000e12 <SCH_Dispatch+0x3a>
    if (tasks[0].flag == 0) return;
 8000e10:	bf00      	nop
    }
}
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200001f4 	.word	0x200001f4
 8000e18:	0800569c 	.word	0x0800569c

08000e1c <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 8000e1c:	b4b0      	push	{r4, r5, r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return SCH_TASKNUMBER;
 8000e28:	4b7e      	ldr	r3, [pc, #504]	; (8001024 <SCH_AddTask+0x208>)
 8000e2a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SCH_AddTask+0x1a>
 8000e32:	2310      	movs	r3, #16
 8000e34:	e0f1      	b.n	800101a <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 8000e36:	4b7b      	ldr	r3, [pc, #492]	; (8001024 <SCH_AddTask+0x208>)
 8000e38:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8000e3c:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	76fb      	strb	r3, [r7, #27]
 8000e46:	e0e3      	b.n	8001010 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 8000e48:	7efa      	ldrb	r2, [r7, #27]
 8000e4a:	4976      	ldr	r1, [pc, #472]	; (8001024 <SCH_AddTask+0x208>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	3308      	adds	r3, #8
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d80a      	bhi.n	8000e7e <SCH_AddTask+0x62>
 8000e68:	7efa      	ldrb	r2, [r7, #27]
 8000e6a:	496e      	ldr	r1, [pc, #440]	; (8001024 <SCH_AddTask+0x208>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f040 80c6 	bne.w	800100a <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8000e7e:	230f      	movs	r3, #15
 8000e80:	76bb      	strb	r3, [r7, #26]
 8000e82:	e017      	b.n	8000eb4 <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 8000e84:	7ebb      	ldrb	r3, [r7, #26]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	7eb9      	ldrb	r1, [r7, #26]
 8000e8a:	4866      	ldr	r0, [pc, #408]	; (8001024 <SCH_AddTask+0x208>)
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4418      	add	r0, r3
 8000e96:	4963      	ldr	r1, [pc, #396]	; (8001024 <SCH_AddTask+0x208>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	461d      	mov	r5, r3
 8000ea6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eaa:	682b      	ldr	r3, [r5, #0]
 8000eac:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8000eae:	7ebb      	ldrb	r3, [r7, #26]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	76bb      	strb	r3, [r7, #26]
 8000eb4:	7eba      	ldrb	r2, [r7, #26]
 8000eb6:	7efb      	ldrb	r3, [r7, #27]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8e3      	bhi.n	8000e84 <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 8000ebc:	7efa      	ldrb	r2, [r7, #27]
 8000ebe:	4959      	ldr	r1, [pc, #356]	; (8001024 <SCH_AddTask+0x208>)
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 8000ece:	7efa      	ldrb	r2, [r7, #27]
 8000ed0:	4954      	ldr	r1, [pc, #336]	; (8001024 <SCH_AddTask+0x208>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	3304      	adds	r3, #4
 8000ede:	7e7a      	ldrb	r2, [r7, #25]
 8000ee0:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 8000ee2:	7efa      	ldrb	r2, [r7, #27]
 8000ee4:	494f      	ldr	r1, [pc, #316]	; (8001024 <SCH_AddTask+0x208>)
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	330c      	adds	r3, #12
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 8000ef6:	7efa      	ldrb	r2, [r7, #27]
 8000ef8:	494a      	ldr	r1, [pc, #296]	; (8001024 <SCH_AddTask+0x208>)
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	3310      	adds	r3, #16
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d950      	bls.n	8000fb4 <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 8000f1a:	7efb      	ldrb	r3, [r7, #27]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	4941      	ldr	r1, [pc, #260]	; (8001024 <SCH_AddTask+0x208>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	7efa      	ldrb	r2, [r7, #27]
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	483b      	ldr	r0, [pc, #236]	; (8001024 <SCH_AddTask+0x208>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4403      	add	r3, r0
 8000f40:	3308      	adds	r3, #8
 8000f42:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000f44:	7efa      	ldrb	r2, [r7, #27]
 8000f46:	4937      	ldr	r1, [pc, #220]	; (8001024 <SCH_AddTask+0x208>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	3308      	adds	r3, #8
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d109      	bne.n	8000f6e <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 8000f5a:	7efa      	ldrb	r2, [r7, #27]
 8000f5c:	4931      	ldr	r1, [pc, #196]	; (8001024 <SCH_AddTask+0x208>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	3310      	adds	r3, #16
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8000f6e:	7efb      	ldrb	r3, [r7, #27]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	6979      	ldr	r1, [r7, #20]
 8000f74:	482b      	ldr	r0, [pc, #172]	; (8001024 <SCH_AddTask+0x208>)
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4403      	add	r3, r0
 8000f80:	3308      	adds	r3, #8
 8000f82:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 8000f84:	7efb      	ldrb	r3, [r7, #27]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	4926      	ldr	r1, [pc, #152]	; (8001024 <SCH_AddTask+0x208>)
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	3308      	adds	r3, #8
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d12c      	bne.n	8000ff6 <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 8000f9c:	7efb      	ldrb	r3, [r7, #27]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	4920      	ldr	r1, [pc, #128]	; (8001024 <SCH_AddTask+0x208>)
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	3310      	adds	r3, #16
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e020      	b.n	8000ff6 <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 8000fb4:	7efa      	ldrb	r2, [r7, #27]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	1ac9      	subs	r1, r1, r3
 8000fbc:	4819      	ldr	r0, [pc, #100]	; (8001024 <SCH_AddTask+0x208>)
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4403      	add	r3, r0
 8000fc8:	3308      	adds	r3, #8
 8000fca:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000fcc:	7efa      	ldrb	r2, [r7, #27]
 8000fce:	4915      	ldr	r1, [pc, #84]	; (8001024 <SCH_AddTask+0x208>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	3308      	adds	r3, #8
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 8000fe2:	7efa      	ldrb	r2, [r7, #27]
 8000fe4:	490f      	ldr	r1, [pc, #60]	; (8001024 <SCH_AddTask+0x208>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3310      	adds	r3, #16
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 8000ff6:	7efa      	ldrb	r2, [r7, #27]
 8000ff8:	490a      	ldr	r1, [pc, #40]	; (8001024 <SCH_AddTask+0x208>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	3304      	adds	r3, #4
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	e007      	b.n	800101a <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800100a:	7efb      	ldrb	r3, [r7, #27]
 800100c:	3301      	adds	r3, #1
 800100e:	76fb      	strb	r3, [r7, #27]
 8001010:	7efb      	ldrb	r3, [r7, #27]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	f67f af18 	bls.w	8000e48 <SCH_AddTask+0x2c>
        }
    }
    return SCH_TASKNUMBER;
 8001018:	2310      	movs	r3, #16
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	bcb0      	pop	{r4, r5, r7}
 8001022:	4770      	bx	lr
 8001024:	200001f4 	.word	0x200001f4

08001028 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 8001028:	b4b0      	push	{r4, r5, r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e07c      	b.n	8001132 <SCH_DeleteTask+0x10a>
        if (tasks[i].id == id) {
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	4943      	ldr	r1, [pc, #268]	; (8001148 <SCH_DeleteTask+0x120>)
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	3304      	adds	r3, #4
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	429a      	cmp	r2, r3
 800104e:	d16d      	bne.n	800112c <SCH_DeleteTask+0x104>
            uint8_t currentID = tasks[i].id;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	493d      	ldr	r1, [pc, #244]	; (8001148 <SCH_DeleteTask+0x120>)
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	3304      	adds	r3, #4
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	4937      	ldr	r1, [pc, #220]	; (8001148 <SCH_DeleteTask+0x120>)
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d01d      	beq.n	80010b6 <SCH_DeleteTask+0x8e>
                tasks[i + 1].delay += tasks[i].delay;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	4932      	ldr	r1, [pc, #200]	; (8001148 <SCH_DeleteTask+0x120>)
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	3308      	adds	r3, #8
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	482d      	ldr	r0, [pc, #180]	; (8001148 <SCH_DeleteTask+0x120>)
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4403      	add	r3, r0
 800109c:	3308      	adds	r3, #8
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	3201      	adds	r2, #1
 80010a4:	4419      	add	r1, r3
 80010a6:	4828      	ldr	r0, [pc, #160]	; (8001148 <SCH_DeleteTask+0x120>)
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4403      	add	r3, r0
 80010b2:	3308      	adds	r3, #8
 80010b4:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	73bb      	strb	r3, [r7, #14]
 80010ba:	e017      	b.n	80010ec <SCH_DeleteTask+0xc4>
                tasks[j] = tasks[j + 1];
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	7bb9      	ldrb	r1, [r7, #14]
 80010c2:	4821      	ldr	r0, [pc, #132]	; (8001148 <SCH_DeleteTask+0x120>)
 80010c4:	460b      	mov	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4418      	add	r0, r3
 80010ce:	491e      	ldr	r1, [pc, #120]	; (8001148 <SCH_DeleteTask+0x120>)
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	4604      	mov	r4, r0
 80010dc:	461d      	mov	r5, r3
 80010de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	3301      	adds	r3, #1
 80010ea:	73bb      	strb	r3, [r7, #14]
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	2b0e      	cmp	r3, #14
 80010f0:	d9e4      	bls.n	80010bc <SCH_DeleteTask+0x94>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <SCH_DeleteTask+0x120>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <SCH_DeleteTask+0x120>)
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
 80010fe:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <SCH_DeleteTask+0x120>)
 8001104:	2200      	movs	r2, #0
 8001106:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            tasks[SCH_TASKNUMBER - 1].period = 0;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <SCH_DeleteTask+0x120>)
 800110c:	2200      	movs	r2, #0
 800110e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <SCH_DeleteTask+0x120>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <SCH_DeleteTask+0x120>)
 800111c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf0c      	ite	eq
 8001124:	2301      	moveq	r3, #1
 8001126:	2300      	movne	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	e007      	b.n	800113c <SCH_DeleteTask+0x114>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	3301      	adds	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	f67f af7f 	bls.w	8001038 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bcb0      	pop	{r4, r5, r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200001f4 	.word	0x200001f4

0800114c <SCH_RefreshTask>:

unsigned char SCH_RefreshTask(void) {
 800114c:	b4b0      	push	{r4, r5, r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0 || tasks[0].delay != 0) return 0;
 8001152:	4b98      	ldr	r3, [pc, #608]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <SCH_RefreshTask+0x16>
 800115a:	4b96      	ldr	r3, [pc, #600]	; (80013b4 <SCH_RefreshTask+0x268>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SCH_RefreshTask+0x1a>
 8001162:	2300      	movs	r3, #0
 8001164:	e120      	b.n	80013a8 <SCH_RefreshTask+0x25c>
    SCH_Task currentTask = tasks[0];
 8001166:	4b93      	ldr	r3, [pc, #588]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001168:	463c      	mov	r4, r7
 800116a:	461d      	mov	r5, r3
 800116c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	6023      	str	r3, [r4, #0]
    uint32_t currentDelay = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001178:	2300      	movs	r3, #0
 800117a:	76fb      	strb	r3, [r7, #27]
 800117c:	e10f      	b.n	800139e <SCH_RefreshTask+0x252>
        if (i + 1 == SCH_TASKNUMBER || tasks[i + 1].functionPointer == NULL) {
 800117e:	7efb      	ldrb	r3, [r7, #27]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d00a      	beq.n	800119a <SCH_RefreshTask+0x4e>
 8001184:	7efb      	ldrb	r3, [r7, #27]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	498a      	ldr	r1, [pc, #552]	; (80013b4 <SCH_RefreshTask+0x268>)
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14a      	bne.n	8001230 <SCH_RefreshTask+0xe4>
            tasks[i].functionPointer = currentTask.functionPointer;
 800119a:	7efa      	ldrb	r2, [r7, #27]
 800119c:	6839      	ldr	r1, [r7, #0]
 800119e:	4885      	ldr	r0, [pc, #532]	; (80013b4 <SCH_RefreshTask+0x268>)
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4403      	add	r3, r0
 80011aa:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 80011ac:	7efa      	ldrb	r2, [r7, #27]
 80011ae:	7938      	ldrb	r0, [r7, #4]
 80011b0:	4980      	ldr	r1, [pc, #512]	; (80013b4 <SCH_RefreshTask+0x268>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	3304      	adds	r3, #4
 80011be:	4602      	mov	r2, r0
 80011c0:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 80011c2:	7efa      	ldrb	r2, [r7, #27]
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	487b      	ldr	r0, [pc, #492]	; (80013b4 <SCH_RefreshTask+0x268>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4403      	add	r3, r0
 80011d2:	330c      	adds	r3, #12
 80011d4:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 80011d6:	7efa      	ldrb	r2, [r7, #27]
 80011d8:	4976      	ldr	r1, [pc, #472]	; (80013b4 <SCH_RefreshTask+0x268>)
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	3310      	adds	r3, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 80011ea:	68f9      	ldr	r1, [r7, #12]
 80011ec:	7efa      	ldrb	r2, [r7, #27]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	1ac9      	subs	r1, r1, r3
 80011f2:	4870      	ldr	r0, [pc, #448]	; (80013b4 <SCH_RefreshTask+0x268>)
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4403      	add	r3, r0
 80011fe:	3308      	adds	r3, #8
 8001200:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8001202:	7efa      	ldrb	r2, [r7, #27]
 8001204:	496b      	ldr	r1, [pc, #428]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3308      	adds	r3, #8
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d109      	bne.n	800122c <SCH_RefreshTask+0xe0>
                tasks[i].flag = 1;
 8001218:	7efa      	ldrb	r2, [r7, #27]
 800121a:	4966      	ldr	r1, [pc, #408]	; (80013b4 <SCH_RefreshTask+0x268>)
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	3310      	adds	r3, #16
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 800122c:	2301      	movs	r3, #1
 800122e:	e0bb      	b.n	80013a8 <SCH_RefreshTask+0x25c>
        }
        currentDelay += tasks[i + 1].delay;
 8001230:	7efb      	ldrb	r3, [r7, #27]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	495f      	ldr	r1, [pc, #380]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	3308      	adds	r3, #8
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	4413      	add	r3, r2
 8001248:	61fb      	str	r3, [r7, #28]
        if (currentDelay > currentTask.period) {
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	429a      	cmp	r2, r3
 8001250:	f240 808d 	bls.w	800136e <SCH_RefreshTask+0x222>
            tasks[i].functionPointer = currentTask.functionPointer;
 8001254:	7efa      	ldrb	r2, [r7, #27]
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	4856      	ldr	r0, [pc, #344]	; (80013b4 <SCH_RefreshTask+0x268>)
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4403      	add	r3, r0
 8001264:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8001266:	7efa      	ldrb	r2, [r7, #27]
 8001268:	7938      	ldrb	r0, [r7, #4]
 800126a:	4952      	ldr	r1, [pc, #328]	; (80013b4 <SCH_RefreshTask+0x268>)
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	3304      	adds	r3, #4
 8001278:	4602      	mov	r2, r0
 800127a:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 800127c:	7efa      	ldrb	r2, [r7, #27]
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	484c      	ldr	r0, [pc, #304]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4403      	add	r3, r0
 800128c:	330c      	adds	r3, #12
 800128e:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8001290:	7efa      	ldrb	r2, [r7, #27]
 8001292:	4948      	ldr	r1, [pc, #288]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	3310      	adds	r3, #16
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 80012ac:	7efb      	ldrb	r3, [r7, #27]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	4940      	ldr	r1, [pc, #256]	; (80013b4 <SCH_RefreshTask+0x268>)
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	3308      	adds	r3, #8
 80012be:	6819      	ldr	r1, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	7efa      	ldrb	r2, [r7, #27]
 80012c4:	1ac9      	subs	r1, r1, r3
 80012c6:	483b      	ldr	r0, [pc, #236]	; (80013b4 <SCH_RefreshTask+0x268>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4403      	add	r3, r0
 80012d2:	3308      	adds	r3, #8
 80012d4:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 80012d6:	7efa      	ldrb	r2, [r7, #27]
 80012d8:	4936      	ldr	r1, [pc, #216]	; (80013b4 <SCH_RefreshTask+0x268>)
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	3308      	adds	r3, #8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d109      	bne.n	8001300 <SCH_RefreshTask+0x1b4>
                tasks[i].flag = 1;
 80012ec:	7efa      	ldrb	r2, [r7, #27]
 80012ee:	4931      	ldr	r1, [pc, #196]	; (80013b4 <SCH_RefreshTask+0x268>)
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	3310      	adds	r3, #16
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 8001300:	7efb      	ldrb	r3, [r7, #27]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	492b      	ldr	r1, [pc, #172]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	3308      	adds	r3, #8
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	7efa      	ldrb	r2, [r7, #27]
 8001316:	4827      	ldr	r0, [pc, #156]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4403      	add	r3, r0
 8001322:	3308      	adds	r3, #8
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	7efa      	ldrb	r2, [r7, #27]
 8001328:	3201      	adds	r2, #1
 800132a:	1ac9      	subs	r1, r1, r3
 800132c:	4821      	ldr	r0, [pc, #132]	; (80013b4 <SCH_RefreshTask+0x268>)
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4403      	add	r3, r0
 8001338:	3308      	adds	r3, #8
 800133a:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 800133c:	7efb      	ldrb	r3, [r7, #27]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	491c      	ldr	r1, [pc, #112]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	3308      	adds	r3, #8
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10a      	bne.n	800136a <SCH_RefreshTask+0x21e>
                tasks[i + 1].flag = 1;
 8001354:	7efb      	ldrb	r3, [r7, #27]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	4916      	ldr	r1, [pc, #88]	; (80013b4 <SCH_RefreshTask+0x268>)
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	3310      	adds	r3, #16
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 800136a:	2301      	movs	r3, #1
 800136c:	e01c      	b.n	80013a8 <SCH_RefreshTask+0x25c>
        }
        else {
            tasks[i] = tasks[i + 1];
 800136e:	7efb      	ldrb	r3, [r7, #27]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	7ef9      	ldrb	r1, [r7, #27]
 8001374:	480f      	ldr	r0, [pc, #60]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001376:	460b      	mov	r3, r1
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	440b      	add	r3, r1
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4418      	add	r0, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <SCH_RefreshTask+0x268>)
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	4604      	mov	r4, r0
 800138e:	461d      	mov	r5, r3
 8001390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001398:	7efb      	ldrb	r3, [r7, #27]
 800139a:	3301      	adds	r3, #1
 800139c:	76fb      	strb	r3, [r7, #27]
 800139e:	7efb      	ldrb	r3, [r7, #27]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	f67f aeec 	bls.w	800117e <SCH_RefreshTask+0x32>
        }
    }
    return 0;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3724      	adds	r7, #36	; 0x24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bcb0      	pop	{r4, r5, r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200001f4 	.word	0x200001f4

080013b8 <SCH_Report>:

uint8_t SCH_Report(void) {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	71bb      	strb	r3, [r7, #6]
 80013c6:	e00f      	b.n	80013e8 <SCH_Report+0x30>
		if (tasks[i].functionPointer != 0) {
 80013c8:	79ba      	ldrb	r2, [r7, #6]
 80013ca:	490c      	ldr	r1, [pc, #48]	; (80013fc <SCH_Report+0x44>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <SCH_Report+0x2a>
			count ++;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	3301      	adds	r3, #1
 80013e0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	3301      	adds	r3, #1
 80013e6:	71bb      	strb	r3, [r7, #6]
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	d9ec      	bls.n	80013c8 <SCH_Report+0x10>
		}
	}
	return count;
 80013ee:	79fb      	ldrb	r3, [r7, #7]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	200001f4 	.word	0x200001f4

08001400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_MspInit+0x40>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_MspInit+0x40>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6193      	str	r3, [r2, #24]
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_MspInit+0x40>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_MspInit+0x40>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_MspInit+0x40>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_MspInit+0x40>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001454:	d114      	bne.n	8001480 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_TIM_Base_MspInit+0x78>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <HAL_TIM_Base_MspInit+0x78>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_TIM_Base_MspInit+0x78>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	201c      	movs	r0, #28
 8001474:	f000 fc2b 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001478:	201c      	movs	r0, #28
 800147a:	f000 fc44 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800147e:	e018      	b.n	80014b2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_TIM_Base_MspInit+0x7c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d113      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_TIM_Base_MspInit+0x78>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_TIM_Base_MspInit+0x78>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_TIM_Base_MspInit+0x78>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	201d      	movs	r0, #29
 80014a8:	f000 fc11 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014ac:	201d      	movs	r0, #29
 80014ae:	f000 fc2a 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40000400 	.word	0x40000400

080014c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_TIM_MspPostInit+0x58>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d117      	bne.n	8001514 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_TIM_MspPostInit+0x5c>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_TIM_MspPostInit+0x5c>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_TIM_MspPostInit+0x5c>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014fc:	23c0      	movs	r3, #192	; 0xc0
 80014fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2302      	movs	r3, #2
 8001506:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_TIM_MspPostInit+0x60>)
 8001510:	f000 fcc6 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40000400 	.word	0x40000400
 8001520:	40021000 	.word	0x40021000
 8001524:	40010800 	.word	0x40010800

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <HAL_UART_MspInit+0x98>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d137      	bne.n	80015b8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_UART_MspInit+0x9c>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_UART_MspInit+0x9c>)
 800154e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001552:	61d3      	str	r3, [r2, #28]
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_UART_MspInit+0x9c>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_UART_MspInit+0x9c>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <HAL_UART_MspInit+0x9c>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_UART_MspInit+0x9c>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001578:	2304      	movs	r3, #4
 800157a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <HAL_UART_MspInit+0xa0>)
 800158c:	f000 fc88 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001590:	2308      	movs	r3, #8
 8001592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4619      	mov	r1, r3
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <HAL_UART_MspInit+0xa0>)
 80015a4:	f000 fc7c 	bl	8001ea0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2026      	movs	r0, #38	; 0x26
 80015ae:	f000 fb8e 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015b2:	2026      	movs	r0, #38	; 0x26
 80015b4:	f000 fba7 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40004400 	.word	0x40004400
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010800 	.word	0x40010800

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler+0x4>

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <MemManage_Handler+0x4>

080015de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001612:	f000 fa69 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM2_IRQHandler+0x10>)
 8001622:	f001 fb05 	bl	8002c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000114 	.word	0x20000114

08001630 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <TIM3_IRQHandler+0x10>)
 8001636:	f001 fafb 	bl	8002c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000015c 	.word	0x2000015c

08001644 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <USART2_IRQHandler+0x10>)
 800164a:	f002 f97f 	bl	800394c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200001a4 	.word	0x200001a4

08001658 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e00a      	b.n	8001680 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800166a:	f3af 8000 	nop.w
 800166e:	4601      	mov	r1, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf0      	blt.n	800166a <_read+0x12>
  }

  return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e009      	b.n	80016b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dbf1      	blt.n	80016a4 <_write+0x12>
  }
  return len;
 80016c0:	687b      	ldr	r3, [r7, #4]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_close>:

int _close(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f0:	605a      	str	r2, [r3, #4]
  return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <_isatty>:

int _isatty(int file)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f002 fffc 	bl	8004758 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20002800 	.word	0x20002800
 800178c:	00000400 	.word	0x00000400
 8001790:	20000334 	.word	0x20000334
 8001794:	20000490 	.word	0x20000490

08001798 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <trafficToggle>:

static uint16_t trafficRedPins[TRAFFIC_NUMBER] = {TRAFFIC0_RED_Pin, TRAFFIC1_RED_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMBER] = {TRAFFIC0_GREEN_Pin, TRAFFIC1_GREEN_Pin};
static uint16_t trafficYellowPins[TRAFFIC_NUMBER] = {TRAFFIC0_YELLOW_Pin, TRAFFIC1_YELLOW_Pin};

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	f200 80cf 	bhi.w	800195a <trafficToggle+0x1b6>
 80017bc:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <trafficToggle+0x20>)
 80017be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c2:	bf00      	nop
 80017c4:	080017d5 	.word	0x080017d5
 80017c8:	0800183d 	.word	0x0800183d
 80017cc:	080018a3 	.word	0x080018a3
 80017d0:	08001909 	.word	0x08001909
	case TRAFFIC_OFF:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	4a66      	ldr	r2, [pc, #408]	; (8001970 <trafficToggle+0x1cc>)
 80017d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	4a65      	ldr	r2, [pc, #404]	; (8001974 <trafficToggle+0x1d0>)
 80017e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4619      	mov	r1, r3
 80017e8:	f000 fced 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	4a62      	ldr	r2, [pc, #392]	; (8001978 <trafficToggle+0x1d4>)
 80017f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4a61      	ldr	r2, [pc, #388]	; (800197c <trafficToggle+0x1d8>)
 80017f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4619      	mov	r1, r3
 8001800:	f000 fce1 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4a5e      	ldr	r2, [pc, #376]	; (8001980 <trafficToggle+0x1dc>)
 8001808:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4a5d      	ldr	r2, [pc, #372]	; (8001984 <trafficToggle+0x1e0>)
 8001810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001814:	2201      	movs	r2, #1
 8001816:	4619      	mov	r1, r3
 8001818:	f000 fcd5 	bl	80021c6 <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_OFF;
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4a5a      	ldr	r2, [pc, #360]	; (8001988 <trafficToggle+0x1e4>)
 8001820:	2100      	movs	r1, #0
 8001822:	54d1      	strb	r1, [r2, r3]
		if (pedestrianStates[index] != PEDESTRIAN_OFF) {
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4a59      	ldr	r2, [pc, #356]	; (800198c <trafficToggle+0x1e8>)
 8001828:	5cd3      	ldrb	r3, [r2, r3]
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 8097 	beq.w	800195e <trafficToggle+0x1ba>
			pedestrianToggle(index, PEDESTRIAN_OFF);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f9b7 	bl	8000ba8 <pedestrianToggle>
		}
		break;
 800183a:	e090      	b.n	800195e <trafficToggle+0x1ba>
	case TRAFFIC_RED:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_RESET);
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	4a4c      	ldr	r2, [pc, #304]	; (8001970 <trafficToggle+0x1cc>)
 8001840:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a4b      	ldr	r2, [pc, #300]	; (8001974 <trafficToggle+0x1d0>)
 8001848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	f000 fcb9 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	4a48      	ldr	r2, [pc, #288]	; (8001978 <trafficToggle+0x1d4>)
 8001858:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	4a47      	ldr	r2, [pc, #284]	; (800197c <trafficToggle+0x1d8>)
 8001860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001864:	2201      	movs	r2, #1
 8001866:	4619      	mov	r1, r3
 8001868:	f000 fcad 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4a44      	ldr	r2, [pc, #272]	; (8001980 <trafficToggle+0x1dc>)
 8001870:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4a43      	ldr	r2, [pc, #268]	; (8001984 <trafficToggle+0x1e0>)
 8001878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800187c:	2201      	movs	r2, #1
 800187e:	4619      	mov	r1, r3
 8001880:	f000 fca1 	bl	80021c6 <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_RED;
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4a40      	ldr	r2, [pc, #256]	; (8001988 <trafficToggle+0x1e4>)
 8001888:	2101      	movs	r1, #1
 800188a:	54d1      	strb	r1, [r2, r3]
		if (pedestrianStates[index] != PEDESTRIAN_OFF) {
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	4a3f      	ldr	r2, [pc, #252]	; (800198c <trafficToggle+0x1e8>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d065      	beq.n	8001962 <trafficToggle+0x1be>
			pedestrianToggle(index, PEDESTRIAN_GREEN);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2102      	movs	r1, #2
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f984 	bl	8000ba8 <pedestrianToggle>
		}
		break;
 80018a0:	e05f      	b.n	8001962 <trafficToggle+0x1be>
	case TRAFFIC_GREEN:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4a32      	ldr	r2, [pc, #200]	; (8001970 <trafficToggle+0x1cc>)
 80018a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4a31      	ldr	r2, [pc, #196]	; (8001974 <trafficToggle+0x1d0>)
 80018ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b2:	2201      	movs	r2, #1
 80018b4:	4619      	mov	r1, r3
 80018b6:	f000 fc86 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4a2e      	ldr	r2, [pc, #184]	; (8001978 <trafficToggle+0x1d4>)
 80018be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4a2d      	ldr	r2, [pc, #180]	; (800197c <trafficToggle+0x1d8>)
 80018c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4619      	mov	r1, r3
 80018ce:	f000 fc7a 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_RESET);
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	4a2a      	ldr	r2, [pc, #168]	; (8001980 <trafficToggle+0x1dc>)
 80018d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4a29      	ldr	r2, [pc, #164]	; (8001984 <trafficToggle+0x1e0>)
 80018de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	f000 fc6e 	bl	80021c6 <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_GREEN;
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4a26      	ldr	r2, [pc, #152]	; (8001988 <trafficToggle+0x1e4>)
 80018ee:	2102      	movs	r1, #2
 80018f0:	54d1      	strb	r1, [r2, r3]
		if (pedestrianStates[index] != PEDESTRIAN_OFF) {
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4a25      	ldr	r2, [pc, #148]	; (800198c <trafficToggle+0x1e8>)
 80018f6:	5cd3      	ldrb	r3, [r2, r3]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d034      	beq.n	8001966 <trafficToggle+0x1c2>
			pedestrianToggle(index, PEDESTRIAN_OFF);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff f951 	bl	8000ba8 <pedestrianToggle>
		}
		break;
 8001906:	e02e      	b.n	8001966 <trafficToggle+0x1c2>
	case TRAFFIC_YELLOW:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4a19      	ldr	r2, [pc, #100]	; (8001970 <trafficToggle+0x1cc>)
 800190c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4a18      	ldr	r2, [pc, #96]	; (8001974 <trafficToggle+0x1d0>)
 8001914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001918:	2201      	movs	r2, #1
 800191a:	4619      	mov	r1, r3
 800191c:	f000 fc53 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_RESET);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4a15      	ldr	r2, [pc, #84]	; (8001978 <trafficToggle+0x1d4>)
 8001924:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <trafficToggle+0x1d8>)
 800192c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	f000 fc47 	bl	80021c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	4a11      	ldr	r2, [pc, #68]	; (8001980 <trafficToggle+0x1dc>)
 800193c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <trafficToggle+0x1e0>)
 8001944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001948:	2201      	movs	r2, #1
 800194a:	4619      	mov	r1, r3
 800194c:	f000 fc3b 	bl	80021c6 <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_YELLOW;
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <trafficToggle+0x1e4>)
 8001954:	2103      	movs	r1, #3
 8001956:	54d1      	strb	r1, [r2, r3]
		break;
 8001958:	e006      	b.n	8001968 <trafficToggle+0x1c4>
	default:
		break;
 800195a:	bf00      	nop
 800195c:	e004      	b.n	8001968 <trafficToggle+0x1c4>
		break;
 800195e:	bf00      	nop
 8001960:	e002      	b.n	8001968 <trafficToggle+0x1c4>
		break;
 8001962:	bf00      	nop
 8001964:	e000      	b.n	8001968 <trafficToggle+0x1c4>
		break;
 8001966:	bf00      	nop
	}
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000040 	.word	0x20000040
 8001974:	20000058 	.word	0x20000058
 8001978:	20000050 	.word	0x20000050
 800197c:	20000060 	.word	0x20000060
 8001980:	20000048 	.word	0x20000048
 8001984:	2000005c 	.word	0x2000005c
 8001988:	20000338 	.word	0x20000338
 800198c:	200001f0 	.word	0x200001f0

08001990 <traffic0Off>:

void traffic0Off(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_OFF);
 8001994:	2100      	movs	r1, #0
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff ff04 	bl	80017a4 <trafficToggle>
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <traffic0Red>:
void traffic0Red(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 80019a4:	2101      	movs	r1, #1
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fefc 	bl	80017a4 <trafficToggle>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <traffic0Green>:
void traffic0Green(void) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 80019b4:	2102      	movs	r1, #2
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff fef4 	bl	80017a4 <trafficToggle>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <traffic0Yellow>:
void traffic0Yellow(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 80019c4:	2103      	movs	r1, #3
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff feec 	bl	80017a4 <trafficToggle>
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <traffic1Off>:

void traffic1Off(void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_OFF);
 80019d4:	2100      	movs	r1, #0
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff fee4 	bl	80017a4 <trafficToggle>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <traffic1Red>:
void traffic1Red(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 80019e4:	2101      	movs	r1, #1
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff fedc 	bl	80017a4 <trafficToggle>
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <traffic1Green>:
void traffic1Green(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 80019f4:	2102      	movs	r1, #2
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff fed4 	bl	80017a4 <trafficToggle>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <traffic1Yellow>:
void traffic1Yellow(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 8001a04:	2103      	movs	r1, #3
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7ff fecc 	bl	80017a4 <trafficToggle>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff fec2 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a16:	490c      	ldr	r1, [pc, #48]	; (8001a48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a18:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a2c:	4c09      	ldr	r4, [pc, #36]	; (8001a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f002 fe93 	bl	8004764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a3e:	f7fe feb3 	bl	80007a8 <main>
  bx lr
 8001a42:	4770      	bx	lr
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8001a4c:	08005718 	.word	0x08005718
  ldr r2, =_sbss
 8001a50:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8001a54:	2000048c 	.word	0x2000048c

08001a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC1_2_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_Init+0x28>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Init+0x28>)
 8001a66:	f043 0310 	orr.w	r3, r3, #16
 8001a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f923 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	200f      	movs	r0, #15
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fcc2 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40022000 	.word	0x40022000

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f93b 	bl	8001d22 <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f903 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000030 	.word	0x20000030
 8001ae0:	20000068 	.word	0x20000068
 8001ae4:	20000064 	.word	0x20000064

08001ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_IncTick+0x1c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_IncTick+0x20>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <HAL_IncTick+0x20>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000068 	.word	0x20000068
 8001b08:	2000033c 	.word	0x2000033c

08001b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b02      	ldr	r3, [pc, #8]	; (8001b1c <HAL_GetTick+0x10>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	2000033c 	.word	0x2000033c

08001b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <__NVIC_GetPriorityGrouping+0x18>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 0307 	and.w	r3, r3, #7
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	db0b      	blt.n	8001bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	4906      	ldr	r1, [pc, #24]	; (8001bb8 <__NVIC_EnableIRQ+0x34>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100

08001bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	6039      	str	r1, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0a      	blt.n	8001be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	490c      	ldr	r1, [pc, #48]	; (8001c08 <__NVIC_SetPriority+0x4c>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	440b      	add	r3, r1
 8001be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be4:	e00a      	b.n	8001bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4908      	ldr	r1, [pc, #32]	; (8001c0c <__NVIC_SetPriority+0x50>)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3b04      	subs	r3, #4
 8001bf4:	0112      	lsls	r2, r2, #4
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	761a      	strb	r2, [r3, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f1c3 0307 	rsb	r3, r3, #7
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	bf28      	it	cs
 8001c2e:	2304      	movcs	r3, #4
 8001c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3304      	adds	r3, #4
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d902      	bls.n	8001c40 <NVIC_EncodePriority+0x30>
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3b03      	subs	r3, #3
 8001c3e:	e000      	b.n	8001c42 <NVIC_EncodePriority+0x32>
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	401a      	ands	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff90 	bl	8001bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff2d 	bl	8001b20 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff42 	bl	8001b68 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff90 	bl	8001c10 <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5f 	bl	8001bbc <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff35 	bl	8001b84 <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b085      	sub	sp, #20
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d008      	beq.n	8001d64 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2204      	movs	r2, #4
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e020      	b.n	8001da6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020e 	bic.w	r2, r2, #14
 8001d72:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d005      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e051      	b.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020e 	bic.w	r2, r2, #14
 8001de2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <HAL_DMA_Abort_IT+0xd4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d029      	beq.n	8001e52 <HAL_DMA_Abort_IT+0xa2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <HAL_DMA_Abort_IT+0xd8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d022      	beq.n	8001e4e <HAL_DMA_Abort_IT+0x9e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <HAL_DMA_Abort_IT+0xdc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01a      	beq.n	8001e48 <HAL_DMA_Abort_IT+0x98>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1e      	ldr	r2, [pc, #120]	; (8001e90 <HAL_DMA_Abort_IT+0xe0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d012      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x92>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <HAL_DMA_Abort_IT+0xe4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00a      	beq.n	8001e3c <HAL_DMA_Abort_IT+0x8c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	; (8001e98 <HAL_DMA_Abort_IT+0xe8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d102      	bne.n	8001e36 <HAL_DMA_Abort_IT+0x86>
 8001e30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e34:	e00e      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e3a:	e00b      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e40:	e008      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e46:	e005      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e4c:	e002      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e4e:	2310      	movs	r3, #16
 8001e50:	e000      	b.n	8001e54 <HAL_DMA_Abort_IT+0xa4>
 8001e52:	2301      	movs	r3, #1
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_DMA_Abort_IT+0xec>)
 8001e56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
    } 
  }
  return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40020008 	.word	0x40020008
 8001e88:	4002001c 	.word	0x4002001c
 8001e8c:	40020030 	.word	0x40020030
 8001e90:	40020044 	.word	0x40020044
 8001e94:	40020058 	.word	0x40020058
 8001e98:	4002006c 	.word	0x4002006c
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b08b      	sub	sp, #44	; 0x2c
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb2:	e161      	b.n	8002178 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	f040 8150 	bne.w	8002172 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a97      	ldr	r2, [pc, #604]	; (8002134 <HAL_GPIO_Init+0x294>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d05e      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001edc:	4a95      	ldr	r2, [pc, #596]	; (8002134 <HAL_GPIO_Init+0x294>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d875      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001ee2:	4a95      	ldr	r2, [pc, #596]	; (8002138 <HAL_GPIO_Init+0x298>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d058      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001ee8:	4a93      	ldr	r2, [pc, #588]	; (8002138 <HAL_GPIO_Init+0x298>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d86f      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001eee:	4a93      	ldr	r2, [pc, #588]	; (800213c <HAL_GPIO_Init+0x29c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d052      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001ef4:	4a91      	ldr	r2, [pc, #580]	; (800213c <HAL_GPIO_Init+0x29c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d869      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001efa:	4a91      	ldr	r2, [pc, #580]	; (8002140 <HAL_GPIO_Init+0x2a0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d04c      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001f00:	4a8f      	ldr	r2, [pc, #572]	; (8002140 <HAL_GPIO_Init+0x2a0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d863      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001f06:	4a8f      	ldr	r2, [pc, #572]	; (8002144 <HAL_GPIO_Init+0x2a4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d046      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001f0c:	4a8d      	ldr	r2, [pc, #564]	; (8002144 <HAL_GPIO_Init+0x2a4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d85d      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001f12:	2b12      	cmp	r3, #18
 8001f14:	d82a      	bhi.n	8001f6c <HAL_GPIO_Init+0xcc>
 8001f16:	2b12      	cmp	r3, #18
 8001f18:	d859      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001f1a:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <HAL_GPIO_Init+0x80>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08001f9b 	.word	0x08001f9b
 8001f24:	08001f75 	.word	0x08001f75
 8001f28:	08001f87 	.word	0x08001f87
 8001f2c:	08001fc9 	.word	0x08001fc9
 8001f30:	08001fcf 	.word	0x08001fcf
 8001f34:	08001fcf 	.word	0x08001fcf
 8001f38:	08001fcf 	.word	0x08001fcf
 8001f3c:	08001fcf 	.word	0x08001fcf
 8001f40:	08001fcf 	.word	0x08001fcf
 8001f44:	08001fcf 	.word	0x08001fcf
 8001f48:	08001fcf 	.word	0x08001fcf
 8001f4c:	08001fcf 	.word	0x08001fcf
 8001f50:	08001fcf 	.word	0x08001fcf
 8001f54:	08001fcf 	.word	0x08001fcf
 8001f58:	08001fcf 	.word	0x08001fcf
 8001f5c:	08001fcf 	.word	0x08001fcf
 8001f60:	08001fcf 	.word	0x08001fcf
 8001f64:	08001f7d 	.word	0x08001f7d
 8001f68:	08001f91 	.word	0x08001f91
 8001f6c:	4a76      	ldr	r2, [pc, #472]	; (8002148 <HAL_GPIO_Init+0x2a8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f72:	e02c      	b.n	8001fce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e029      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	3304      	adds	r3, #4
 8001f82:	623b      	str	r3, [r7, #32]
          break;
 8001f84:	e024      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e01f      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	330c      	adds	r3, #12
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e01a      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e013      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	611a      	str	r2, [r3, #16]
          break;
 8001fba:	e009      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	615a      	str	r2, [r3, #20]
          break;
 8001fc6:	e003      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
          break;
 8001fcc:	e000      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          break;
 8001fce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2bff      	cmp	r3, #255	; 0xff
 8001fd4:	d801      	bhi.n	8001fda <HAL_GPIO_Init+0x13a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	e001      	b.n	8001fde <HAL_GPIO_Init+0x13e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2bff      	cmp	r3, #255	; 0xff
 8001fe4:	d802      	bhi.n	8001fec <HAL_GPIO_Init+0x14c>
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_Init+0x152>
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	3b08      	subs	r3, #8
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	210f      	movs	r1, #15
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	6a39      	ldr	r1, [r7, #32]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	431a      	orrs	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80a9 	beq.w	8002172 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002020:	4b4a      	ldr	r3, [pc, #296]	; (800214c <HAL_GPIO_Init+0x2ac>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a49      	ldr	r2, [pc, #292]	; (800214c <HAL_GPIO_Init+0x2ac>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_GPIO_Init+0x2ac>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002038:	4a45      	ldr	r2, [pc, #276]	; (8002150 <HAL_GPIO_Init+0x2b0>)
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002044:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3d      	ldr	r2, [pc, #244]	; (8002154 <HAL_GPIO_Init+0x2b4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00d      	beq.n	8002080 <HAL_GPIO_Init+0x1e0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3c      	ldr	r2, [pc, #240]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <HAL_GPIO_Init+0x1dc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3b      	ldr	r2, [pc, #236]	; (800215c <HAL_GPIO_Init+0x2bc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_GPIO_Init+0x1d8>
 8002074:	2302      	movs	r3, #2
 8002076:	e004      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 8002078:	2303      	movs	r3, #3
 800207a:	e002      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_GPIO_Init+0x1e2>
 8002080:	2300      	movs	r3, #0
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4093      	lsls	r3, r2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002092:	492f      	ldr	r1, [pc, #188]	; (8002150 <HAL_GPIO_Init+0x2b0>)
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ac:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	492b      	ldr	r1, [pc, #172]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4927      	ldr	r1, [pc, #156]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	4921      	ldr	r1, [pc, #132]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e2:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	491d      	ldr	r1, [pc, #116]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4917      	ldr	r1, [pc, #92]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	4913      	ldr	r1, [pc, #76]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 8002114:	4013      	ands	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01f      	beq.n	8002164 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	490d      	ldr	r1, [pc, #52]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
 8002130:	e01f      	b.n	8002172 <HAL_GPIO_Init+0x2d2>
 8002132:	bf00      	nop
 8002134:	10320000 	.word	0x10320000
 8002138:	10310000 	.word	0x10310000
 800213c:	10220000 	.word	0x10220000
 8002140:	10210000 	.word	0x10210000
 8002144:	10120000 	.word	0x10120000
 8002148:	10110000 	.word	0x10110000
 800214c:	40021000 	.word	0x40021000
 8002150:	40010000 	.word	0x40010000
 8002154:	40010800 	.word	0x40010800
 8002158:	40010c00 	.word	0x40010c00
 800215c:	40011000 	.word	0x40011000
 8002160:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_GPIO_Init+0x2f4>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	43db      	mvns	r3, r3
 800216c:	4909      	ldr	r1, [pc, #36]	; (8002194 <HAL_GPIO_Init+0x2f4>)
 800216e:	4013      	ands	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	3301      	adds	r3, #1
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	f47f ae96 	bne.w	8001eb4 <HAL_GPIO_Init+0x14>
  }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	372c      	adds	r7, #44	; 0x2c
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e001      	b.n	80021ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	807b      	strh	r3, [r7, #2]
 80021d2:	4613      	mov	r3, r2
 80021d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d6:	787b      	ldrb	r3, [r7, #1]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021dc:	887a      	ldrh	r2, [r7, #2]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021e2:	e003      	b.n	80021ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	041a      	lsls	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	611a      	str	r2, [r3, #16]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002208:	887a      	ldrh	r2, [r7, #2]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4013      	ands	r3, r2
 800220e:	041a      	lsls	r2, r3, #16
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43d9      	mvns	r1, r3
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	400b      	ands	r3, r1
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e272      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8087 	beq.w	8002356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002248:	4b92      	ldr	r3, [pc, #584]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b04      	cmp	r3, #4
 8002252:	d00c      	beq.n	800226e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002254:	4b8f      	ldr	r3, [pc, #572]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d112      	bne.n	8002286 <HAL_RCC_OscConfig+0x5e>
 8002260:	4b8c      	ldr	r3, [pc, #560]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d10b      	bne.n	8002286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226e:	4b89      	ldr	r3, [pc, #548]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d06c      	beq.n	8002354 <HAL_RCC_OscConfig+0x12c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d168      	bne.n	8002354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e24c      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228e:	d106      	bne.n	800229e <HAL_RCC_OscConfig+0x76>
 8002290:	4b80      	ldr	r3, [pc, #512]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a7f      	ldr	r2, [pc, #508]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	e02e      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x98>
 80022a6:	4b7b      	ldr	r3, [pc, #492]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7a      	ldr	r2, [pc, #488]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b78      	ldr	r3, [pc, #480]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a77      	ldr	r2, [pc, #476]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e01d      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0xbc>
 80022ca:	4b72      	ldr	r3, [pc, #456]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a71      	ldr	r2, [pc, #452]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6e      	ldr	r2, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022e4:	4b6b      	ldr	r3, [pc, #428]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a6a      	ldr	r2, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b68      	ldr	r3, [pc, #416]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a67      	ldr	r2, [pc, #412]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fc02 	bl	8001b0c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fbfe 	bl	8001b0c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e200      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0xe4>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fbee 	bl	8001b0c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff fbea 	bl	8001b0c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1ec      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x10c>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d063      	beq.n	800242a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002362:	4b4c      	ldr	r3, [pc, #304]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800236e:	4b49      	ldr	r3, [pc, #292]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b08      	cmp	r3, #8
 8002378:	d11c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x18c>
 800237a:	4b46      	ldr	r3, [pc, #280]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d116      	bne.n	80023b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d001      	beq.n	800239e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e1c0      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4939      	ldr	r1, [pc, #228]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b2:	e03a      	b.n	800242a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <HAL_RCC_OscConfig+0x270>)
 80023be:	2201      	movs	r2, #1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7ff fba3 	bl	8001b0c <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7ff fb9f 	bl	8001b0c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e1a1      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023dc:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4927      	ldr	r1, [pc, #156]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]
 80023fc:	e015      	b.n	800242a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fe:	4b26      	ldr	r3, [pc, #152]	; (8002498 <HAL_RCC_OscConfig+0x270>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fb82 	bl	8001b0c <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240c:	f7ff fb7e 	bl	8001b0c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e180      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d03a      	beq.n	80024ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d019      	beq.n	8002472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243e:	4b17      	ldr	r3, [pc, #92]	; (800249c <HAL_RCC_OscConfig+0x274>)
 8002440:	2201      	movs	r2, #1
 8002442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002444:	f7ff fb62 	bl	8001b0c <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244c:	f7ff fb5e 	bl	8001b0c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e160      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <HAL_RCC_OscConfig+0x26c>)
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800246a:	2001      	movs	r0, #1
 800246c:	f000 face 	bl	8002a0c <RCC_Delay>
 8002470:	e01c      	b.n	80024ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_RCC_OscConfig+0x274>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7ff fb48 	bl	8001b0c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247e:	e00f      	b.n	80024a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7ff fb44 	bl	8001b0c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d908      	bls.n	80024a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e146      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	42420000 	.word	0x42420000
 800249c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a0:	4b92      	ldr	r3, [pc, #584]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e9      	bne.n	8002480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a6 	beq.w	8002606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024be:	4b8b      	ldr	r3, [pc, #556]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b88      	ldr	r3, [pc, #544]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a87      	ldr	r2, [pc, #540]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b85      	ldr	r3, [pc, #532]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4b82      	ldr	r3, [pc, #520]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f2:	4b7f      	ldr	r3, [pc, #508]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7e      	ldr	r2, [pc, #504]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fe:	f7ff fb05 	bl	8001b0c <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002506:	f7ff fb01 	bl	8001b0c <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b64      	cmp	r3, #100	; 0x64
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e103      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b75      	ldr	r3, [pc, #468]	; (80026f0 <HAL_RCC_OscConfig+0x4c8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x312>
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a6e      	ldr	r2, [pc, #440]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6213      	str	r3, [r2, #32]
 8002538:	e02d      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x334>
 8002542:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a69      	ldr	r2, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a66      	ldr	r2, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	e01c      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d10c      	bne.n	800257e <HAL_RCC_OscConfig+0x356>
 8002564:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4a60      	ldr	r2, [pc, #384]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6213      	str	r3, [r2, #32]
 8002570:	4b5e      	ldr	r3, [pc, #376]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a5d      	ldr	r2, [pc, #372]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	e00b      	b.n	8002596 <HAL_RCC_OscConfig+0x36e>
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a5a      	ldr	r2, [pc, #360]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6213      	str	r3, [r2, #32]
 800258a:	4b58      	ldr	r3, [pc, #352]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d015      	beq.n	80025ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7ff fab5 	bl	8001b0c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7ff fab1 	bl	8001b0c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0b1      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025bc:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ee      	beq.n	80025a6 <HAL_RCC_OscConfig+0x37e>
 80025c8:	e014      	b.n	80025f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7ff fa9f 	bl	8001b0c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff fa9b 	bl	8001b0c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e09b      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e8:	4b40      	ldr	r3, [pc, #256]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d105      	bne.n	8002606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fa:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4a3b      	ldr	r2, [pc, #236]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002604:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8087 	beq.w	800271e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d061      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d146      	bne.n	80026b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff fa6f 	bl	8001b0c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7ff fa6b 	bl	8001b0c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e06d      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d108      	bne.n	800266c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800265a:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4921      	ldr	r1, [pc, #132]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266c:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a19      	ldr	r1, [r3, #32]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	430b      	orrs	r3, r1
 800267e:	491b      	ldr	r1, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268a:	f7ff fa3f 	bl	8001b0c <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7ff fa3b 	bl	8001b0c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e03d      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x46a>
 80026b0:	e035      	b.n	800271e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_RCC_OscConfig+0x4cc>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fa28 	bl	8001b0c <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7ff fa24 	bl	8001b0c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e026      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x498>
 80026de:	e01e      	b.n	800271e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e019      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_OscConfig+0x500>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000

0800272c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0d0      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b6a      	ldr	r3, [pc, #424]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d910      	bls.n	8002770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b67      	ldr	r3, [pc, #412]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	4965      	ldr	r1, [pc, #404]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002792:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d040      	beq.n	800284c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d115      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e073      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e06b      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4936      	ldr	r1, [pc, #216]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281c:	f7ff f976 	bl	8001b0c <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7ff f972 	bl	8001b0c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e053      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d210      	bcs.n	800287c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	4922      	ldr	r1, [pc, #136]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f821 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	490a      	ldr	r1, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028cc:	5ccb      	ldrb	r3, [r1, r3]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1cc>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1d0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff f8d4 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40021000 	.word	0x40021000
 80028f4:	080056b0 	.word	0x080056b0
 80028f8:	20000030 	.word	0x20000030
 80028fc:	20000064 	.word	0x20000064

08002900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_RCC_GetSysClockFreq+0x94>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b04      	cmp	r3, #4
 8002928:	d002      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x30>
 800292a:	2b08      	cmp	r3, #8
 800292c:	d003      	beq.n	8002936 <HAL_RCC_GetSysClockFreq+0x36>
 800292e:	e027      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002932:	613b      	str	r3, [r7, #16]
      break;
 8002934:	e027      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	0c9b      	lsrs	r3, r3, #18
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	4a17      	ldr	r2, [pc, #92]	; (800299c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d010      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_RCC_GetSysClockFreq+0x94>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0c5b      	lsrs	r3, r3, #17
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002962:	fb03 f202 	mul.w	r2, r3, r2
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	e004      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	613b      	str	r3, [r7, #16]
      break;
 800297e:	e002      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002982:	613b      	str	r3, [r7, #16]
      break;
 8002984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002986:	693b      	ldr	r3, [r7, #16]
}
 8002988:	4618      	mov	r0, r3
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	007a1200 	.word	0x007a1200
 800299c:	080056c8 	.word	0x080056c8
 80029a0:	080056d8 	.word	0x080056d8
 80029a4:	003d0900 	.word	0x003d0900

080029a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ac:	4b02      	ldr	r3, [pc, #8]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	20000030 	.word	0x20000030

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff2 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4903      	ldr	r1, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	080056c0 	.word	0x080056c0

080029e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029e8:	f7ff ffde 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029ec:	4602      	mov	r2, r0
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	0adb      	lsrs	r3, r3, #11
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	4903      	ldr	r1, [pc, #12]	; (8002a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fa:	5ccb      	ldrb	r3, [r1, r3]
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	080056c0 	.word	0x080056c0

08002a0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <RCC_Delay+0x34>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <RCC_Delay+0x38>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0a5b      	lsrs	r3, r3, #9
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a28:	bf00      	nop
  }
  while (Delay --);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e5a      	subs	r2, r3, #1
 8002a2e:	60fa      	str	r2, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f9      	bne.n	8002a28 <RCC_Delay+0x1c>
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	20000030 	.word	0x20000030
 8002a44:	10624dd3 	.word	0x10624dd3

08002a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e041      	b.n	8002ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fce8 	bl	8001444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f000 fb88 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d001      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e035      	b.n	8002b6c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <HAL_TIM_Base_Start_IT+0x90>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_TIM_Base_Start_IT+0x4e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2a:	d004      	beq.n	8002b36 <HAL_TIM_Base_Start_IT+0x4e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_TIM_Base_Start_IT+0x94>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d111      	bne.n	8002b5a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d010      	beq.n	8002b6a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b58:	e007      	b.n	8002b6a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40000400 	.word	0x40000400

08002b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e041      	b.n	8002c16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f839 	bl	8002c1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	f000 faec 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d122      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d11b      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0202 	mvn.w	r2, #2
 8002c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa76 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fa69 	bl	8003152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fa78 	bl	8003176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d122      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0204 	mvn.w	r2, #4
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa4c 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fa3f 	bl	8003152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fa4e 	bl	8003176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0208 	mvn.w	r2, #8
 8002d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2204      	movs	r2, #4
 8002d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa22 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa15 	bl	8003152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fa24 	bl	8003176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d122      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d11b      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0210 	mvn.w	r2, #16
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f9f8 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f9eb 	bl	8003152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f9fa 	bl	8003176 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10e      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0201 	mvn.w	r2, #1
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd fee6 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d10e      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d107      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fcb5 	bl	800374a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d107      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f9be 	bl	8003188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0220 	mvn.w	r2, #32
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fc80 	bl	8003738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0ae      	b.n	8002fbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	f200 809f 	bhi.w	8002fac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08002fad 	.word	0x08002fad
 8002e7c:	08002fad 	.word	0x08002fad
 8002e80:	08002fad 	.word	0x08002fad
 8002e84:	08002ee9 	.word	0x08002ee9
 8002e88:	08002fad 	.word	0x08002fad
 8002e8c:	08002fad 	.word	0x08002fad
 8002e90:	08002fad 	.word	0x08002fad
 8002e94:	08002f2b 	.word	0x08002f2b
 8002e98:	08002fad 	.word	0x08002fad
 8002e9c:	08002fad 	.word	0x08002fad
 8002ea0:	08002fad 	.word	0x08002fad
 8002ea4:	08002f6b 	.word	0x08002f6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f9cc 	bl	800324c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0208 	orr.w	r2, r2, #8
 8002ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0204 	bic.w	r2, r2, #4
 8002ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6999      	ldr	r1, [r3, #24]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	619a      	str	r2, [r3, #24]
      break;
 8002ee6:	e064      	b.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fa12 	bl	8003318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6999      	ldr	r1, [r3, #24]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	021a      	lsls	r2, r3, #8
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	619a      	str	r2, [r3, #24]
      break;
 8002f28:	e043      	b.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fa5b 	bl	80033ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0208 	orr.w	r2, r2, #8
 8002f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69da      	ldr	r2, [r3, #28]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0204 	bic.w	r2, r2, #4
 8002f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69d9      	ldr	r1, [r3, #28]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	61da      	str	r2, [r3, #28]
      break;
 8002f68:	e023      	b.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 faa5 	bl	80034c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69d9      	ldr	r1, [r3, #28]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	021a      	lsls	r2, r3, #8
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	61da      	str	r2, [r3, #28]
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e0b4      	b.n	800314a <HAL_TIM_ConfigClockSource+0x186>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003006:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003018:	d03e      	beq.n	8003098 <HAL_TIM_ConfigClockSource+0xd4>
 800301a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301e:	f200 8087 	bhi.w	8003130 <HAL_TIM_ConfigClockSource+0x16c>
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003026:	f000 8086 	beq.w	8003136 <HAL_TIM_ConfigClockSource+0x172>
 800302a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302e:	d87f      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b70      	cmp	r3, #112	; 0x70
 8003032:	d01a      	beq.n	800306a <HAL_TIM_ConfigClockSource+0xa6>
 8003034:	2b70      	cmp	r3, #112	; 0x70
 8003036:	d87b      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b60      	cmp	r3, #96	; 0x60
 800303a:	d050      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x11a>
 800303c:	2b60      	cmp	r3, #96	; 0x60
 800303e:	d877      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b50      	cmp	r3, #80	; 0x50
 8003042:	d03c      	beq.n	80030be <HAL_TIM_ConfigClockSource+0xfa>
 8003044:	2b50      	cmp	r3, #80	; 0x50
 8003046:	d873      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d058      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x13a>
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d86f      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b30      	cmp	r3, #48	; 0x30
 8003052:	d064      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x15a>
 8003054:	2b30      	cmp	r3, #48	; 0x30
 8003056:	d86b      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b20      	cmp	r3, #32
 800305a:	d060      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x15a>
 800305c:	2b20      	cmp	r3, #32
 800305e:	d867      	bhi.n	8003130 <HAL_TIM_ConfigClockSource+0x16c>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d05c      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x15a>
 8003064:	2b10      	cmp	r3, #16
 8003066:	d05a      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x15a>
 8003068:	e062      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800307a:	f000 fae6 	bl	800364a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800308c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	609a      	str	r2, [r3, #8]
      break;
 8003096:	e04f      	b.n	8003138 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030a8:	f000 facf 	bl	800364a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ba:	609a      	str	r2, [r3, #8]
      break;
 80030bc:	e03c      	b.n	8003138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	461a      	mov	r2, r3
 80030cc:	f000 fa46 	bl	800355c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2150      	movs	r1, #80	; 0x50
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fa9d 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 80030dc:	e02c      	b.n	8003138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ea:	461a      	mov	r2, r3
 80030ec:	f000 fa64 	bl	80035b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2160      	movs	r1, #96	; 0x60
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fa8d 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 80030fc:	e01c      	b.n	8003138 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	461a      	mov	r2, r3
 800310c:	f000 fa26 	bl	800355c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2140      	movs	r1, #64	; 0x40
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fa7d 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 800311c:	e00c      	b.n	8003138 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f000 fa74 	bl	8003616 <TIM_ITRx_SetConfig>
      break;
 800312e:	e003      	b.n	8003138 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e000      	b.n	8003138 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003136:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
	...

0800319c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a25      	ldr	r2, [pc, #148]	; (8003244 <TIM_Base_SetConfig+0xa8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d007      	beq.n	80031c4 <TIM_Base_SetConfig+0x28>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d003      	beq.n	80031c4 <TIM_Base_SetConfig+0x28>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a22      	ldr	r2, [pc, #136]	; (8003248 <TIM_Base_SetConfig+0xac>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d108      	bne.n	80031d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1a      	ldr	r2, [pc, #104]	; (8003244 <TIM_Base_SetConfig+0xa8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_Base_SetConfig+0x52>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0x52>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a17      	ldr	r2, [pc, #92]	; (8003248 <TIM_Base_SetConfig+0xac>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a07      	ldr	r2, [pc, #28]	; (8003244 <TIM_Base_SetConfig+0xa8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d103      	bne.n	8003234 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	615a      	str	r2, [r3, #20]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40000400 	.word	0x40000400

0800324c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f023 0201 	bic.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0303 	bic.w	r3, r3, #3
 8003282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f023 0302 	bic.w	r3, r3, #2
 8003294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <TIM_OC1_SetConfig+0xc8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10c      	bne.n	80032c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f023 0308 	bic.w	r3, r3, #8
 80032ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f023 0304 	bic.w	r3, r3, #4
 80032c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a13      	ldr	r2, [pc, #76]	; (8003314 <TIM_OC1_SetConfig+0xc8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d111      	bne.n	80032ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	621a      	str	r2, [r3, #32]
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00

08003318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f023 0210 	bic.w	r2, r3, #16
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f023 0320 	bic.w	r3, r3, #32
 8003362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <TIM_OC2_SetConfig+0xd0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d10d      	bne.n	8003394 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800337e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <TIM_OC2_SetConfig+0xd0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d113      	bne.n	80033c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40012c00 	.word	0x40012c00

080033ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0303 	bic.w	r3, r3, #3
 8003422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <TIM_OC3_SetConfig+0xd0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d10d      	bne.n	8003466 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a14      	ldr	r2, [pc, #80]	; (80034bc <TIM_OC3_SetConfig+0xd0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d113      	bne.n	8003496 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800347c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	621a      	str	r2, [r3, #32]
}
 80034b0:	bf00      	nop
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40012c00 	.word	0x40012c00

080034c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800350a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	031b      	lsls	r3, r3, #12
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <TIM_OC4_SetConfig+0x98>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d109      	bne.n	8003534 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	40012c00 	.word	0x40012c00

0800355c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f023 0201 	bic.w	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f023 030a 	bic.w	r3, r3, #10
 8003598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f023 0210 	bic.w	r2, r3, #16
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	031b      	lsls	r3, r3, #12
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	621a      	str	r2, [r3, #32]
}
 800360c:	bf00      	nop
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	f043 0307 	orr.w	r3, r3, #7
 8003638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800364a:	b480      	push	{r7}
 800364c:	b087      	sub	sp, #28
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003664:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	021a      	lsls	r2, r3, #8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	431a      	orrs	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4313      	orrs	r3, r2
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	609a      	str	r2, [r3, #8]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800369c:	2302      	movs	r3, #2
 800369e:	e041      	b.n	8003724 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a14      	ldr	r2, [pc, #80]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d009      	beq.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ec:	d004      	beq.n	80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a10      	ldr	r2, [pc, #64]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d10c      	bne.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	4313      	orrs	r3, r2
 8003708:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40000400 	.word	0x40000400

08003738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e042      	b.n	80037f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fed0 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fdc5 	bl	8004330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b20      	cmp	r3, #32
 800381a:	d16d      	bne.n	80038f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_UART_Transmit+0x2c>
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e066      	b.n	80038fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2221      	movs	r2, #33	; 0x21
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800383a:	f7fe f967 	bl	8001b0c <HAL_GetTick>
 800383e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	88fa      	ldrh	r2, [r7, #6]
 800384a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003854:	d108      	bne.n	8003868 <HAL_UART_Transmit+0x6c>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	e003      	b.n	8003870 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003870:	e02a      	b.n	80038c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fb14 	bl	8003eaa <UART_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e036      	b.n	80038fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10b      	bne.n	80038aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	3302      	adds	r3, #2
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e007      	b.n	80038ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	3301      	adds	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1cf      	bne.n	8003872 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2140      	movs	r1, #64	; 0x40
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fae4 	bl	8003eaa <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e006      	b.n	80038fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	4613      	mov	r3, r2
 800390e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b20      	cmp	r3, #32
 800391a:	d112      	bne.n	8003942 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UART_Receive_IT+0x26>
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e00b      	b.n	8003944 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	461a      	mov	r2, r3
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fb24 	bl	8003f86 <UART_Start_Receive_IT>
 800393e:	4603      	mov	r3, r0
 8003940:	e000      	b.n	8003944 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003942:	2302      	movs	r3, #2
  }
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b0ba      	sub	sp, #232	; 0xe8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800398a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_UART_IRQHandler+0x66>
 800399e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fc01 	bl	80041b2 <UART_Receive_IT>
      return;
 80039b0:	e25b      	b.n	8003e6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80de 	beq.w	8003b78 <HAL_UART_IRQHandler+0x22c>
 80039bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80d1 	beq.w	8003b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_UART_IRQHandler+0xae>
 80039e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_UART_IRQHandler+0xd2>
 8003a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f043 0202 	orr.w	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_UART_IRQHandler+0xf6>
 8003a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d011      	beq.n	8003a72 <HAL_UART_IRQHandler+0x126>
 8003a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f043 0208 	orr.w	r2, r3, #8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 81f2 	beq.w	8003e60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <HAL_UART_IRQHandler+0x14e>
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fb8c 	bl	80041b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x17a>
 8003abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04f      	beq.n	8003b66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa96 	bl	8003ff8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d041      	beq.n	8003b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1d9      	bne.n	8003ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d013      	beq.n	8003b56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	4a7e      	ldr	r2, [pc, #504]	; (8003d2c <HAL_UART_IRQHandler+0x3e0>)
 8003b34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe f938 	bl	8001db0 <HAL_DMA_Abort_IT>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b50:	4610      	mov	r0, r2
 8003b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	e00e      	b.n	8003b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f993 	bl	8003e82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	e00a      	b.n	8003b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f98f 	bl	8003e82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	e006      	b.n	8003b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f98b 	bl	8003e82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b72:	e175      	b.n	8003e60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	bf00      	nop
    return;
 8003b76:	e173      	b.n	8003e60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	f040 814f 	bne.w	8003e20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8148 	beq.w	8003e20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8141 	beq.w	8003e20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80b6 	beq.w	8003d30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8145 	beq.w	8003e64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003be2:	429a      	cmp	r2, r3
 8003be4:	f080 813e 	bcs.w	8003e64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	f000 8088 	beq.w	8003d0c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c28:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1d9      	bne.n	8003bfc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3314      	adds	r3, #20
 8003c68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e1      	bne.n	8003c48 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3314      	adds	r3, #20
 8003c8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ca8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003caa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e3      	bne.n	8003c84 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cdc:	f023 0310 	bic.w	r3, r3, #16
 8003ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cee:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cf0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e3      	bne.n	8003cca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe f817 	bl	8001d3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8b6 	bl	8003e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d28:	e09c      	b.n	8003e64 <HAL_UART_IRQHandler+0x518>
 8003d2a:	bf00      	nop
 8003d2c:	080040bd 	.word	0x080040bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 808e 	beq.w	8003e68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8089 	beq.w	8003e68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003d7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e3      	bne.n	8003d56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3314      	adds	r3, #20
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003db2:	633a      	str	r2, [r7, #48]	; 0x30
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e3      	bne.n	8003d8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0310 	bic.w	r3, r3, #16
 8003dea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003df8:	61fa      	str	r2, [r7, #28]
 8003dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	69b9      	ldr	r1, [r7, #24]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	617b      	str	r3, [r7, #20]
   return(result);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e3      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f83b 	bl	8003e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e1e:	e023      	b.n	8003e68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <HAL_UART_IRQHandler+0x4f4>
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f953 	bl	80040e4 <UART_Transmit_IT>
    return;
 8003e3e:	e014      	b.n	8003e6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <HAL_UART_IRQHandler+0x51e>
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f992 	bl	8004182 <UART_EndTransmit_IT>
    return;
 8003e5e:	e004      	b.n	8003e6a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e60:	bf00      	nop
 8003e62:	e002      	b.n	8003e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e64:	bf00      	nop
 8003e66:	e000      	b.n	8003e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e68:	bf00      	nop
  }
}
 8003e6a:	37e8      	adds	r7, #232	; 0xe8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b090      	sub	sp, #64	; 0x40
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	603b      	str	r3, [r7, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eba:	e050      	b.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d04c      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0x30>
 8003eca:	f7fd fe1f 	bl	8001b0c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d241      	bcs.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003efa:	637a      	str	r2, [r7, #52]	; 0x34
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e5      	bne.n	8003eda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3314      	adds	r3, #20
 8003f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f2e:	623a      	str	r2, [r7, #32]
 8003f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	69f9      	ldr	r1, [r7, #28]
 8003f34:	6a3a      	ldr	r2, [r7, #32]
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e5      	bne.n	8003f0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e00f      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d09f      	beq.n	8003ebc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3740      	adds	r7, #64	; 0x40
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	4613      	mov	r3, r2
 8003f92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2222      	movs	r2, #34	; 0x22
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0220 	orr.w	r2, r2, #32
 8003fea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b095      	sub	sp, #84	; 0x54
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004020:	643a      	str	r2, [r7, #64]	; 0x40
 8004022:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004026:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	61fb      	str	r3, [r7, #28]
   return(result);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	64bb      	str	r3, [r7, #72]	; 0x48
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004054:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800405a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	2b01      	cmp	r3, #1
 800406e:	d119      	bne.n	80040a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 0310 	bic.w	r3, r3, #16
 8004086:	647b      	str	r3, [r7, #68]	; 0x44
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004090:	61ba      	str	r2, [r7, #24]
 8004092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	6979      	ldr	r1, [r7, #20]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	613b      	str	r3, [r7, #16]
   return(result);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e5      	bne.n	8004070 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040b2:	bf00      	nop
 80040b4:	3754      	adds	r7, #84	; 0x54
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f7ff fed3 	bl	8003e82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b21      	cmp	r3, #33	; 0x21
 80040f6:	d13e      	bne.n	8004176 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004100:	d114      	bne.n	800412c <UART_Transmit_IT+0x48>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d110      	bne.n	800412c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]
 800412a:	e008      	b.n	800413e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	1c59      	adds	r1, r3, #1
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6211      	str	r1, [r2, #32]
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29b      	uxth	r3, r3
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	4619      	mov	r1, r3
 800414c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004160:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004170:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004198:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff fe64 	bl	8003e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b08c      	sub	sp, #48	; 0x30
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b22      	cmp	r3, #34	; 0x22
 80041c4:	f040 80ae 	bne.w	8004324 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d0:	d117      	bne.n	8004202 <UART_Receive_IT+0x50>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d113      	bne.n	8004202 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004200:	e026      	b.n	8004250 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004208:	2300      	movs	r3, #0
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004214:	d007      	beq.n	8004226 <UART_Receive_IT+0x74>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <UART_Receive_IT+0x82>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	701a      	strb	r2, [r3, #0]
 8004232:	e008      	b.n	8004246 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004240:	b2da      	uxtb	r2, r3
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29b      	uxth	r3, r3
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4619      	mov	r1, r3
 800425e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004260:	2b00      	cmp	r3, #0
 8004262:	d15d      	bne.n	8004320 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0220 	bic.w	r2, r2, #32
 8004272:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d135      	bne.n	8004316 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	613b      	str	r3, [r7, #16]
   return(result);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f023 0310 	bic.w	r3, r3, #16
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d0:	623a      	str	r2, [r7, #32]
 80042d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	69f9      	ldr	r1, [r7, #28]
 80042d6:	6a3a      	ldr	r2, [r7, #32]
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d10a      	bne.n	8004308 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fdc0 	bl	8003e94 <HAL_UARTEx_RxEventCallback>
 8004314:	e002      	b.n	800431c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fc fa0c 	bl	8000734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e002      	b.n	8004326 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3730      	adds	r7, #48	; 0x30
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800436a:	f023 030c 	bic.w	r3, r3, #12
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	430b      	orrs	r3, r1
 8004376:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2c      	ldr	r2, [pc, #176]	; (8004444 <UART_SetConfig+0x114>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d103      	bne.n	80043a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004398:	f7fe fb24 	bl	80029e4 <HAL_RCC_GetPCLK2Freq>
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	e002      	b.n	80043a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043a0:	f7fe fb0c 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 80043a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009a      	lsls	r2, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	4a22      	ldr	r2, [pc, #136]	; (8004448 <UART_SetConfig+0x118>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	0119      	lsls	r1, r3, #4
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009a      	lsls	r2, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043dc:	4b1a      	ldr	r3, [pc, #104]	; (8004448 <UART_SetConfig+0x118>)
 80043de:	fba3 0302 	umull	r0, r3, r3, r2
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	2064      	movs	r0, #100	; 0x64
 80043e6:	fb00 f303 	mul.w	r3, r0, r3
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	3332      	adds	r3, #50	; 0x32
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <UART_SetConfig+0x118>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043fc:	4419      	add	r1, r3
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009a      	lsls	r2, r3, #2
 8004408:	441a      	add	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	fbb2 f2f3 	udiv	r2, r2, r3
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <UART_SetConfig+0x118>)
 8004416:	fba3 0302 	umull	r0, r3, r3, r2
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	2064      	movs	r0, #100	; 0x64
 800441e:	fb00 f303 	mul.w	r3, r0, r3
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	3332      	adds	r3, #50	; 0x32
 8004428:	4a07      	ldr	r2, [pc, #28]	; (8004448 <UART_SetConfig+0x118>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	f003 020f 	and.w	r2, r3, #15
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	440a      	add	r2, r1
 800443a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40013800 	.word	0x40013800
 8004448:	51eb851f 	.word	0x51eb851f

0800444c <std>:
 800444c:	2300      	movs	r3, #0
 800444e:	b510      	push	{r4, lr}
 8004450:	4604      	mov	r4, r0
 8004452:	e9c0 3300 	strd	r3, r3, [r0]
 8004456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800445a:	6083      	str	r3, [r0, #8]
 800445c:	8181      	strh	r1, [r0, #12]
 800445e:	6643      	str	r3, [r0, #100]	; 0x64
 8004460:	81c2      	strh	r2, [r0, #14]
 8004462:	6183      	str	r3, [r0, #24]
 8004464:	4619      	mov	r1, r3
 8004466:	2208      	movs	r2, #8
 8004468:	305c      	adds	r0, #92	; 0x5c
 800446a:	f000 f926 	bl	80046ba <memset>
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <std+0x58>)
 8004470:	6224      	str	r4, [r4, #32]
 8004472:	6263      	str	r3, [r4, #36]	; 0x24
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <std+0x5c>)
 8004476:	62a3      	str	r3, [r4, #40]	; 0x28
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <std+0x60>)
 800447a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800447c:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <std+0x64>)
 800447e:	6323      	str	r3, [r4, #48]	; 0x30
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <std+0x68>)
 8004482:	429c      	cmp	r4, r3
 8004484:	d006      	beq.n	8004494 <std+0x48>
 8004486:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800448a:	4294      	cmp	r4, r2
 800448c:	d002      	beq.n	8004494 <std+0x48>
 800448e:	33d0      	adds	r3, #208	; 0xd0
 8004490:	429c      	cmp	r4, r3
 8004492:	d105      	bne.n	80044a0 <std+0x54>
 8004494:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800449c:	f000 b986 	b.w	80047ac <__retarget_lock_init_recursive>
 80044a0:	bd10      	pop	{r4, pc}
 80044a2:	bf00      	nop
 80044a4:	08004635 	.word	0x08004635
 80044a8:	08004657 	.word	0x08004657
 80044ac:	0800468f 	.word	0x0800468f
 80044b0:	080046b3 	.word	0x080046b3
 80044b4:	20000340 	.word	0x20000340

080044b8 <stdio_exit_handler>:
 80044b8:	4a02      	ldr	r2, [pc, #8]	; (80044c4 <stdio_exit_handler+0xc>)
 80044ba:	4903      	ldr	r1, [pc, #12]	; (80044c8 <stdio_exit_handler+0x10>)
 80044bc:	4803      	ldr	r0, [pc, #12]	; (80044cc <stdio_exit_handler+0x14>)
 80044be:	f000 b869 	b.w	8004594 <_fwalk_sglue>
 80044c2:	bf00      	nop
 80044c4:	2000006c 	.word	0x2000006c
 80044c8:	080052fd 	.word	0x080052fd
 80044cc:	20000078 	.word	0x20000078

080044d0 <cleanup_stdio>:
 80044d0:	6841      	ldr	r1, [r0, #4]
 80044d2:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <cleanup_stdio+0x34>)
 80044d4:	b510      	push	{r4, lr}
 80044d6:	4299      	cmp	r1, r3
 80044d8:	4604      	mov	r4, r0
 80044da:	d001      	beq.n	80044e0 <cleanup_stdio+0x10>
 80044dc:	f000 ff0e 	bl	80052fc <_fflush_r>
 80044e0:	68a1      	ldr	r1, [r4, #8]
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <cleanup_stdio+0x38>)
 80044e4:	4299      	cmp	r1, r3
 80044e6:	d002      	beq.n	80044ee <cleanup_stdio+0x1e>
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 ff07 	bl	80052fc <_fflush_r>
 80044ee:	68e1      	ldr	r1, [r4, #12]
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <cleanup_stdio+0x3c>)
 80044f2:	4299      	cmp	r1, r3
 80044f4:	d004      	beq.n	8004500 <cleanup_stdio+0x30>
 80044f6:	4620      	mov	r0, r4
 80044f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044fc:	f000 befe 	b.w	80052fc <_fflush_r>
 8004500:	bd10      	pop	{r4, pc}
 8004502:	bf00      	nop
 8004504:	20000340 	.word	0x20000340
 8004508:	200003a8 	.word	0x200003a8
 800450c:	20000410 	.word	0x20000410

08004510 <global_stdio_init.part.0>:
 8004510:	b510      	push	{r4, lr}
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <global_stdio_init.part.0+0x30>)
 8004514:	4c0b      	ldr	r4, [pc, #44]	; (8004544 <global_stdio_init.part.0+0x34>)
 8004516:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <global_stdio_init.part.0+0x38>)
 8004518:	4620      	mov	r0, r4
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	2104      	movs	r1, #4
 800451e:	2200      	movs	r2, #0
 8004520:	f7ff ff94 	bl	800444c <std>
 8004524:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004528:	2201      	movs	r2, #1
 800452a:	2109      	movs	r1, #9
 800452c:	f7ff ff8e 	bl	800444c <std>
 8004530:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004534:	2202      	movs	r2, #2
 8004536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800453a:	2112      	movs	r1, #18
 800453c:	f7ff bf86 	b.w	800444c <std>
 8004540:	20000478 	.word	0x20000478
 8004544:	20000340 	.word	0x20000340
 8004548:	080044b9 	.word	0x080044b9

0800454c <__sfp_lock_acquire>:
 800454c:	4801      	ldr	r0, [pc, #4]	; (8004554 <__sfp_lock_acquire+0x8>)
 800454e:	f000 b92e 	b.w	80047ae <__retarget_lock_acquire_recursive>
 8004552:	bf00      	nop
 8004554:	20000481 	.word	0x20000481

08004558 <__sfp_lock_release>:
 8004558:	4801      	ldr	r0, [pc, #4]	; (8004560 <__sfp_lock_release+0x8>)
 800455a:	f000 b929 	b.w	80047b0 <__retarget_lock_release_recursive>
 800455e:	bf00      	nop
 8004560:	20000481 	.word	0x20000481

08004564 <__sinit>:
 8004564:	b510      	push	{r4, lr}
 8004566:	4604      	mov	r4, r0
 8004568:	f7ff fff0 	bl	800454c <__sfp_lock_acquire>
 800456c:	6a23      	ldr	r3, [r4, #32]
 800456e:	b11b      	cbz	r3, 8004578 <__sinit+0x14>
 8004570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004574:	f7ff bff0 	b.w	8004558 <__sfp_lock_release>
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <__sinit+0x28>)
 800457a:	6223      	str	r3, [r4, #32]
 800457c:	4b04      	ldr	r3, [pc, #16]	; (8004590 <__sinit+0x2c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f5      	bne.n	8004570 <__sinit+0xc>
 8004584:	f7ff ffc4 	bl	8004510 <global_stdio_init.part.0>
 8004588:	e7f2      	b.n	8004570 <__sinit+0xc>
 800458a:	bf00      	nop
 800458c:	080044d1 	.word	0x080044d1
 8004590:	20000478 	.word	0x20000478

08004594 <_fwalk_sglue>:
 8004594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004598:	4607      	mov	r7, r0
 800459a:	4688      	mov	r8, r1
 800459c:	4614      	mov	r4, r2
 800459e:	2600      	movs	r6, #0
 80045a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045a4:	f1b9 0901 	subs.w	r9, r9, #1
 80045a8:	d505      	bpl.n	80045b6 <_fwalk_sglue+0x22>
 80045aa:	6824      	ldr	r4, [r4, #0]
 80045ac:	2c00      	cmp	r4, #0
 80045ae:	d1f7      	bne.n	80045a0 <_fwalk_sglue+0xc>
 80045b0:	4630      	mov	r0, r6
 80045b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b6:	89ab      	ldrh	r3, [r5, #12]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d907      	bls.n	80045cc <_fwalk_sglue+0x38>
 80045bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045c0:	3301      	adds	r3, #1
 80045c2:	d003      	beq.n	80045cc <_fwalk_sglue+0x38>
 80045c4:	4629      	mov	r1, r5
 80045c6:	4638      	mov	r0, r7
 80045c8:	47c0      	blx	r8
 80045ca:	4306      	orrs	r6, r0
 80045cc:	3568      	adds	r5, #104	; 0x68
 80045ce:	e7e9      	b.n	80045a4 <_fwalk_sglue+0x10>

080045d0 <iprintf>:
 80045d0:	b40f      	push	{r0, r1, r2, r3}
 80045d2:	b507      	push	{r0, r1, r2, lr}
 80045d4:	4906      	ldr	r1, [pc, #24]	; (80045f0 <iprintf+0x20>)
 80045d6:	ab04      	add	r3, sp, #16
 80045d8:	6808      	ldr	r0, [r1, #0]
 80045da:	f853 2b04 	ldr.w	r2, [r3], #4
 80045de:	6881      	ldr	r1, [r0, #8]
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	f000 fb5b 	bl	8004c9c <_vfiprintf_r>
 80045e6:	b003      	add	sp, #12
 80045e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045ec:	b004      	add	sp, #16
 80045ee:	4770      	bx	lr
 80045f0:	200000c4 	.word	0x200000c4

080045f4 <siprintf>:
 80045f4:	b40e      	push	{r1, r2, r3}
 80045f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045fa:	b500      	push	{lr}
 80045fc:	b09c      	sub	sp, #112	; 0x70
 80045fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004600:	9002      	str	r0, [sp, #8]
 8004602:	9006      	str	r0, [sp, #24]
 8004604:	9107      	str	r1, [sp, #28]
 8004606:	9104      	str	r1, [sp, #16]
 8004608:	4808      	ldr	r0, [pc, #32]	; (800462c <siprintf+0x38>)
 800460a:	4909      	ldr	r1, [pc, #36]	; (8004630 <siprintf+0x3c>)
 800460c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004610:	9105      	str	r1, [sp, #20]
 8004612:	6800      	ldr	r0, [r0, #0]
 8004614:	a902      	add	r1, sp, #8
 8004616:	9301      	str	r3, [sp, #4]
 8004618:	f000 fa1a 	bl	8004a50 <_svfiprintf_r>
 800461c:	2200      	movs	r2, #0
 800461e:	9b02      	ldr	r3, [sp, #8]
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	b01c      	add	sp, #112	; 0x70
 8004624:	f85d eb04 	ldr.w	lr, [sp], #4
 8004628:	b003      	add	sp, #12
 800462a:	4770      	bx	lr
 800462c:	200000c4 	.word	0x200000c4
 8004630:	ffff0208 	.word	0xffff0208

08004634 <__sread>:
 8004634:	b510      	push	{r4, lr}
 8004636:	460c      	mov	r4, r1
 8004638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800463c:	f000 f868 	bl	8004710 <_read_r>
 8004640:	2800      	cmp	r0, #0
 8004642:	bfab      	itete	ge
 8004644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004646:	89a3      	ldrhlt	r3, [r4, #12]
 8004648:	181b      	addge	r3, r3, r0
 800464a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800464e:	bfac      	ite	ge
 8004650:	6563      	strge	r3, [r4, #84]	; 0x54
 8004652:	81a3      	strhlt	r3, [r4, #12]
 8004654:	bd10      	pop	{r4, pc}

08004656 <__swrite>:
 8004656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800465a:	461f      	mov	r7, r3
 800465c:	898b      	ldrh	r3, [r1, #12]
 800465e:	4605      	mov	r5, r0
 8004660:	05db      	lsls	r3, r3, #23
 8004662:	460c      	mov	r4, r1
 8004664:	4616      	mov	r6, r2
 8004666:	d505      	bpl.n	8004674 <__swrite+0x1e>
 8004668:	2302      	movs	r3, #2
 800466a:	2200      	movs	r2, #0
 800466c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004670:	f000 f83c 	bl	80046ec <_lseek_r>
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	4632      	mov	r2, r6
 8004678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	4628      	mov	r0, r5
 8004680:	463b      	mov	r3, r7
 8004682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800468a:	f000 b853 	b.w	8004734 <_write_r>

0800468e <__sseek>:
 800468e:	b510      	push	{r4, lr}
 8004690:	460c      	mov	r4, r1
 8004692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004696:	f000 f829 	bl	80046ec <_lseek_r>
 800469a:	1c43      	adds	r3, r0, #1
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	bf15      	itete	ne
 80046a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80046a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046aa:	81a3      	strheq	r3, [r4, #12]
 80046ac:	bf18      	it	ne
 80046ae:	81a3      	strhne	r3, [r4, #12]
 80046b0:	bd10      	pop	{r4, pc}

080046b2 <__sclose>:
 80046b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b6:	f000 b809 	b.w	80046cc <_close_r>

080046ba <memset>:
 80046ba:	4603      	mov	r3, r0
 80046bc:	4402      	add	r2, r0
 80046be:	4293      	cmp	r3, r2
 80046c0:	d100      	bne.n	80046c4 <memset+0xa>
 80046c2:	4770      	bx	lr
 80046c4:	f803 1b01 	strb.w	r1, [r3], #1
 80046c8:	e7f9      	b.n	80046be <memset+0x4>
	...

080046cc <_close_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	2300      	movs	r3, #0
 80046d0:	4d05      	ldr	r5, [pc, #20]	; (80046e8 <_close_r+0x1c>)
 80046d2:	4604      	mov	r4, r0
 80046d4:	4608      	mov	r0, r1
 80046d6:	602b      	str	r3, [r5, #0]
 80046d8:	f7fc fff7 	bl	80016ca <_close>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_close_r+0x1a>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_close_r+0x1a>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	2000047c 	.word	0x2000047c

080046ec <_lseek_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4604      	mov	r4, r0
 80046f0:	4608      	mov	r0, r1
 80046f2:	4611      	mov	r1, r2
 80046f4:	2200      	movs	r2, #0
 80046f6:	4d05      	ldr	r5, [pc, #20]	; (800470c <_lseek_r+0x20>)
 80046f8:	602a      	str	r2, [r5, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f7fd f809 	bl	8001712 <_lseek>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_lseek_r+0x1e>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b103      	cbz	r3, 800470a <_lseek_r+0x1e>
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	2000047c 	.word	0x2000047c

08004710 <_read_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4604      	mov	r4, r0
 8004714:	4608      	mov	r0, r1
 8004716:	4611      	mov	r1, r2
 8004718:	2200      	movs	r2, #0
 800471a:	4d05      	ldr	r5, [pc, #20]	; (8004730 <_read_r+0x20>)
 800471c:	602a      	str	r2, [r5, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	f7fc ff9a 	bl	8001658 <_read>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_read_r+0x1e>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_read_r+0x1e>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	2000047c 	.word	0x2000047c

08004734 <_write_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4604      	mov	r4, r0
 8004738:	4608      	mov	r0, r1
 800473a:	4611      	mov	r1, r2
 800473c:	2200      	movs	r2, #0
 800473e:	4d05      	ldr	r5, [pc, #20]	; (8004754 <_write_r+0x20>)
 8004740:	602a      	str	r2, [r5, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	f7fc ffa5 	bl	8001692 <_write>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	d102      	bne.n	8004752 <_write_r+0x1e>
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	b103      	cbz	r3, 8004752 <_write_r+0x1e>
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	bd38      	pop	{r3, r4, r5, pc}
 8004754:	2000047c 	.word	0x2000047c

08004758 <__errno>:
 8004758:	4b01      	ldr	r3, [pc, #4]	; (8004760 <__errno+0x8>)
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	200000c4 	.word	0x200000c4

08004764 <__libc_init_array>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	2600      	movs	r6, #0
 8004768:	4d0c      	ldr	r5, [pc, #48]	; (800479c <__libc_init_array+0x38>)
 800476a:	4c0d      	ldr	r4, [pc, #52]	; (80047a0 <__libc_init_array+0x3c>)
 800476c:	1b64      	subs	r4, r4, r5
 800476e:	10a4      	asrs	r4, r4, #2
 8004770:	42a6      	cmp	r6, r4
 8004772:	d109      	bne.n	8004788 <__libc_init_array+0x24>
 8004774:	f000 ff80 	bl	8005678 <_init>
 8004778:	2600      	movs	r6, #0
 800477a:	4d0a      	ldr	r5, [pc, #40]	; (80047a4 <__libc_init_array+0x40>)
 800477c:	4c0a      	ldr	r4, [pc, #40]	; (80047a8 <__libc_init_array+0x44>)
 800477e:	1b64      	subs	r4, r4, r5
 8004780:	10a4      	asrs	r4, r4, #2
 8004782:	42a6      	cmp	r6, r4
 8004784:	d105      	bne.n	8004792 <__libc_init_array+0x2e>
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	f855 3b04 	ldr.w	r3, [r5], #4
 800478c:	4798      	blx	r3
 800478e:	3601      	adds	r6, #1
 8004790:	e7ee      	b.n	8004770 <__libc_init_array+0xc>
 8004792:	f855 3b04 	ldr.w	r3, [r5], #4
 8004796:	4798      	blx	r3
 8004798:	3601      	adds	r6, #1
 800479a:	e7f2      	b.n	8004782 <__libc_init_array+0x1e>
 800479c:	08005710 	.word	0x08005710
 80047a0:	08005710 	.word	0x08005710
 80047a4:	08005710 	.word	0x08005710
 80047a8:	08005714 	.word	0x08005714

080047ac <__retarget_lock_init_recursive>:
 80047ac:	4770      	bx	lr

080047ae <__retarget_lock_acquire_recursive>:
 80047ae:	4770      	bx	lr

080047b0 <__retarget_lock_release_recursive>:
 80047b0:	4770      	bx	lr
	...

080047b4 <_free_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4605      	mov	r5, r0
 80047b8:	2900      	cmp	r1, #0
 80047ba:	d040      	beq.n	800483e <_free_r+0x8a>
 80047bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c0:	1f0c      	subs	r4, r1, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bfb8      	it	lt
 80047c6:	18e4      	addlt	r4, r4, r3
 80047c8:	f000 f8dc 	bl	8004984 <__malloc_lock>
 80047cc:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <_free_r+0x8c>)
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	b933      	cbnz	r3, 80047e0 <_free_r+0x2c>
 80047d2:	6063      	str	r3, [r4, #4]
 80047d4:	6014      	str	r4, [r2, #0]
 80047d6:	4628      	mov	r0, r5
 80047d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047dc:	f000 b8d8 	b.w	8004990 <__malloc_unlock>
 80047e0:	42a3      	cmp	r3, r4
 80047e2:	d908      	bls.n	80047f6 <_free_r+0x42>
 80047e4:	6820      	ldr	r0, [r4, #0]
 80047e6:	1821      	adds	r1, r4, r0
 80047e8:	428b      	cmp	r3, r1
 80047ea:	bf01      	itttt	eq
 80047ec:	6819      	ldreq	r1, [r3, #0]
 80047ee:	685b      	ldreq	r3, [r3, #4]
 80047f0:	1809      	addeq	r1, r1, r0
 80047f2:	6021      	streq	r1, [r4, #0]
 80047f4:	e7ed      	b.n	80047d2 <_free_r+0x1e>
 80047f6:	461a      	mov	r2, r3
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	b10b      	cbz	r3, 8004800 <_free_r+0x4c>
 80047fc:	42a3      	cmp	r3, r4
 80047fe:	d9fa      	bls.n	80047f6 <_free_r+0x42>
 8004800:	6811      	ldr	r1, [r2, #0]
 8004802:	1850      	adds	r0, r2, r1
 8004804:	42a0      	cmp	r0, r4
 8004806:	d10b      	bne.n	8004820 <_free_r+0x6c>
 8004808:	6820      	ldr	r0, [r4, #0]
 800480a:	4401      	add	r1, r0
 800480c:	1850      	adds	r0, r2, r1
 800480e:	4283      	cmp	r3, r0
 8004810:	6011      	str	r1, [r2, #0]
 8004812:	d1e0      	bne.n	80047d6 <_free_r+0x22>
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4408      	add	r0, r1
 800481a:	6010      	str	r0, [r2, #0]
 800481c:	6053      	str	r3, [r2, #4]
 800481e:	e7da      	b.n	80047d6 <_free_r+0x22>
 8004820:	d902      	bls.n	8004828 <_free_r+0x74>
 8004822:	230c      	movs	r3, #12
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	e7d6      	b.n	80047d6 <_free_r+0x22>
 8004828:	6820      	ldr	r0, [r4, #0]
 800482a:	1821      	adds	r1, r4, r0
 800482c:	428b      	cmp	r3, r1
 800482e:	bf01      	itttt	eq
 8004830:	6819      	ldreq	r1, [r3, #0]
 8004832:	685b      	ldreq	r3, [r3, #4]
 8004834:	1809      	addeq	r1, r1, r0
 8004836:	6021      	streq	r1, [r4, #0]
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	6054      	str	r4, [r2, #4]
 800483c:	e7cb      	b.n	80047d6 <_free_r+0x22>
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	20000484 	.word	0x20000484

08004844 <sbrk_aligned>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	4e0e      	ldr	r6, [pc, #56]	; (8004880 <sbrk_aligned+0x3c>)
 8004848:	460c      	mov	r4, r1
 800484a:	6831      	ldr	r1, [r6, #0]
 800484c:	4605      	mov	r5, r0
 800484e:	b911      	cbnz	r1, 8004856 <sbrk_aligned+0x12>
 8004850:	f000 fe2c 	bl	80054ac <_sbrk_r>
 8004854:	6030      	str	r0, [r6, #0]
 8004856:	4621      	mov	r1, r4
 8004858:	4628      	mov	r0, r5
 800485a:	f000 fe27 	bl	80054ac <_sbrk_r>
 800485e:	1c43      	adds	r3, r0, #1
 8004860:	d00a      	beq.n	8004878 <sbrk_aligned+0x34>
 8004862:	1cc4      	adds	r4, r0, #3
 8004864:	f024 0403 	bic.w	r4, r4, #3
 8004868:	42a0      	cmp	r0, r4
 800486a:	d007      	beq.n	800487c <sbrk_aligned+0x38>
 800486c:	1a21      	subs	r1, r4, r0
 800486e:	4628      	mov	r0, r5
 8004870:	f000 fe1c 	bl	80054ac <_sbrk_r>
 8004874:	3001      	adds	r0, #1
 8004876:	d101      	bne.n	800487c <sbrk_aligned+0x38>
 8004878:	f04f 34ff 	mov.w	r4, #4294967295
 800487c:	4620      	mov	r0, r4
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	20000488 	.word	0x20000488

08004884 <_malloc_r>:
 8004884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004888:	1ccd      	adds	r5, r1, #3
 800488a:	f025 0503 	bic.w	r5, r5, #3
 800488e:	3508      	adds	r5, #8
 8004890:	2d0c      	cmp	r5, #12
 8004892:	bf38      	it	cc
 8004894:	250c      	movcc	r5, #12
 8004896:	2d00      	cmp	r5, #0
 8004898:	4607      	mov	r7, r0
 800489a:	db01      	blt.n	80048a0 <_malloc_r+0x1c>
 800489c:	42a9      	cmp	r1, r5
 800489e:	d905      	bls.n	80048ac <_malloc_r+0x28>
 80048a0:	230c      	movs	r3, #12
 80048a2:	2600      	movs	r6, #0
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	4630      	mov	r0, r6
 80048a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004980 <_malloc_r+0xfc>
 80048b0:	f000 f868 	bl	8004984 <__malloc_lock>
 80048b4:	f8d8 3000 	ldr.w	r3, [r8]
 80048b8:	461c      	mov	r4, r3
 80048ba:	bb5c      	cbnz	r4, 8004914 <_malloc_r+0x90>
 80048bc:	4629      	mov	r1, r5
 80048be:	4638      	mov	r0, r7
 80048c0:	f7ff ffc0 	bl	8004844 <sbrk_aligned>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	4604      	mov	r4, r0
 80048c8:	d155      	bne.n	8004976 <_malloc_r+0xf2>
 80048ca:	f8d8 4000 	ldr.w	r4, [r8]
 80048ce:	4626      	mov	r6, r4
 80048d0:	2e00      	cmp	r6, #0
 80048d2:	d145      	bne.n	8004960 <_malloc_r+0xdc>
 80048d4:	2c00      	cmp	r4, #0
 80048d6:	d048      	beq.n	800496a <_malloc_r+0xe6>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	4631      	mov	r1, r6
 80048dc:	4638      	mov	r0, r7
 80048de:	eb04 0903 	add.w	r9, r4, r3
 80048e2:	f000 fde3 	bl	80054ac <_sbrk_r>
 80048e6:	4581      	cmp	r9, r0
 80048e8:	d13f      	bne.n	800496a <_malloc_r+0xe6>
 80048ea:	6821      	ldr	r1, [r4, #0]
 80048ec:	4638      	mov	r0, r7
 80048ee:	1a6d      	subs	r5, r5, r1
 80048f0:	4629      	mov	r1, r5
 80048f2:	f7ff ffa7 	bl	8004844 <sbrk_aligned>
 80048f6:	3001      	adds	r0, #1
 80048f8:	d037      	beq.n	800496a <_malloc_r+0xe6>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	442b      	add	r3, r5
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	f8d8 3000 	ldr.w	r3, [r8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d038      	beq.n	800497a <_malloc_r+0xf6>
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	42a2      	cmp	r2, r4
 800490c:	d12b      	bne.n	8004966 <_malloc_r+0xe2>
 800490e:	2200      	movs	r2, #0
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	e00f      	b.n	8004934 <_malloc_r+0xb0>
 8004914:	6822      	ldr	r2, [r4, #0]
 8004916:	1b52      	subs	r2, r2, r5
 8004918:	d41f      	bmi.n	800495a <_malloc_r+0xd6>
 800491a:	2a0b      	cmp	r2, #11
 800491c:	d917      	bls.n	800494e <_malloc_r+0xca>
 800491e:	1961      	adds	r1, r4, r5
 8004920:	42a3      	cmp	r3, r4
 8004922:	6025      	str	r5, [r4, #0]
 8004924:	bf18      	it	ne
 8004926:	6059      	strne	r1, [r3, #4]
 8004928:	6863      	ldr	r3, [r4, #4]
 800492a:	bf08      	it	eq
 800492c:	f8c8 1000 	streq.w	r1, [r8]
 8004930:	5162      	str	r2, [r4, r5]
 8004932:	604b      	str	r3, [r1, #4]
 8004934:	4638      	mov	r0, r7
 8004936:	f104 060b 	add.w	r6, r4, #11
 800493a:	f000 f829 	bl	8004990 <__malloc_unlock>
 800493e:	f026 0607 	bic.w	r6, r6, #7
 8004942:	1d23      	adds	r3, r4, #4
 8004944:	1af2      	subs	r2, r6, r3
 8004946:	d0ae      	beq.n	80048a6 <_malloc_r+0x22>
 8004948:	1b9b      	subs	r3, r3, r6
 800494a:	50a3      	str	r3, [r4, r2]
 800494c:	e7ab      	b.n	80048a6 <_malloc_r+0x22>
 800494e:	42a3      	cmp	r3, r4
 8004950:	6862      	ldr	r2, [r4, #4]
 8004952:	d1dd      	bne.n	8004910 <_malloc_r+0x8c>
 8004954:	f8c8 2000 	str.w	r2, [r8]
 8004958:	e7ec      	b.n	8004934 <_malloc_r+0xb0>
 800495a:	4623      	mov	r3, r4
 800495c:	6864      	ldr	r4, [r4, #4]
 800495e:	e7ac      	b.n	80048ba <_malloc_r+0x36>
 8004960:	4634      	mov	r4, r6
 8004962:	6876      	ldr	r6, [r6, #4]
 8004964:	e7b4      	b.n	80048d0 <_malloc_r+0x4c>
 8004966:	4613      	mov	r3, r2
 8004968:	e7cc      	b.n	8004904 <_malloc_r+0x80>
 800496a:	230c      	movs	r3, #12
 800496c:	4638      	mov	r0, r7
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	f000 f80e 	bl	8004990 <__malloc_unlock>
 8004974:	e797      	b.n	80048a6 <_malloc_r+0x22>
 8004976:	6025      	str	r5, [r4, #0]
 8004978:	e7dc      	b.n	8004934 <_malloc_r+0xb0>
 800497a:	605b      	str	r3, [r3, #4]
 800497c:	deff      	udf	#255	; 0xff
 800497e:	bf00      	nop
 8004980:	20000484 	.word	0x20000484

08004984 <__malloc_lock>:
 8004984:	4801      	ldr	r0, [pc, #4]	; (800498c <__malloc_lock+0x8>)
 8004986:	f7ff bf12 	b.w	80047ae <__retarget_lock_acquire_recursive>
 800498a:	bf00      	nop
 800498c:	20000480 	.word	0x20000480

08004990 <__malloc_unlock>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__malloc_unlock+0x8>)
 8004992:	f7ff bf0d 	b.w	80047b0 <__retarget_lock_release_recursive>
 8004996:	bf00      	nop
 8004998:	20000480 	.word	0x20000480

0800499c <__ssputs_r>:
 800499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	461f      	mov	r7, r3
 80049a2:	688e      	ldr	r6, [r1, #8]
 80049a4:	4682      	mov	sl, r0
 80049a6:	42be      	cmp	r6, r7
 80049a8:	460c      	mov	r4, r1
 80049aa:	4690      	mov	r8, r2
 80049ac:	680b      	ldr	r3, [r1, #0]
 80049ae:	d82c      	bhi.n	8004a0a <__ssputs_r+0x6e>
 80049b0:	898a      	ldrh	r2, [r1, #12]
 80049b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049b6:	d026      	beq.n	8004a06 <__ssputs_r+0x6a>
 80049b8:	6965      	ldr	r5, [r4, #20]
 80049ba:	6909      	ldr	r1, [r1, #16]
 80049bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049c0:	eba3 0901 	sub.w	r9, r3, r1
 80049c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049c8:	1c7b      	adds	r3, r7, #1
 80049ca:	444b      	add	r3, r9
 80049cc:	106d      	asrs	r5, r5, #1
 80049ce:	429d      	cmp	r5, r3
 80049d0:	bf38      	it	cc
 80049d2:	461d      	movcc	r5, r3
 80049d4:	0553      	lsls	r3, r2, #21
 80049d6:	d527      	bpl.n	8004a28 <__ssputs_r+0x8c>
 80049d8:	4629      	mov	r1, r5
 80049da:	f7ff ff53 	bl	8004884 <_malloc_r>
 80049de:	4606      	mov	r6, r0
 80049e0:	b360      	cbz	r0, 8004a3c <__ssputs_r+0xa0>
 80049e2:	464a      	mov	r2, r9
 80049e4:	6921      	ldr	r1, [r4, #16]
 80049e6:	f000 fd7f 	bl	80054e8 <memcpy>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f4:	81a3      	strh	r3, [r4, #12]
 80049f6:	6126      	str	r6, [r4, #16]
 80049f8:	444e      	add	r6, r9
 80049fa:	6026      	str	r6, [r4, #0]
 80049fc:	463e      	mov	r6, r7
 80049fe:	6165      	str	r5, [r4, #20]
 8004a00:	eba5 0509 	sub.w	r5, r5, r9
 8004a04:	60a5      	str	r5, [r4, #8]
 8004a06:	42be      	cmp	r6, r7
 8004a08:	d900      	bls.n	8004a0c <__ssputs_r+0x70>
 8004a0a:	463e      	mov	r6, r7
 8004a0c:	4632      	mov	r2, r6
 8004a0e:	4641      	mov	r1, r8
 8004a10:	6820      	ldr	r0, [r4, #0]
 8004a12:	f000 fd31 	bl	8005478 <memmove>
 8004a16:	2000      	movs	r0, #0
 8004a18:	68a3      	ldr	r3, [r4, #8]
 8004a1a:	1b9b      	subs	r3, r3, r6
 8004a1c:	60a3      	str	r3, [r4, #8]
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	4433      	add	r3, r6
 8004a22:	6023      	str	r3, [r4, #0]
 8004a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a28:	462a      	mov	r2, r5
 8004a2a:	f000 fd6b 	bl	8005504 <_realloc_r>
 8004a2e:	4606      	mov	r6, r0
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d1e0      	bne.n	80049f6 <__ssputs_r+0x5a>
 8004a34:	4650      	mov	r0, sl
 8004a36:	6921      	ldr	r1, [r4, #16]
 8004a38:	f7ff febc 	bl	80047b4 <_free_r>
 8004a3c:	230c      	movs	r3, #12
 8004a3e:	f8ca 3000 	str.w	r3, [sl]
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a4c:	81a3      	strh	r3, [r4, #12]
 8004a4e:	e7e9      	b.n	8004a24 <__ssputs_r+0x88>

08004a50 <_svfiprintf_r>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	4698      	mov	r8, r3
 8004a56:	898b      	ldrh	r3, [r1, #12]
 8004a58:	4607      	mov	r7, r0
 8004a5a:	061b      	lsls	r3, r3, #24
 8004a5c:	460d      	mov	r5, r1
 8004a5e:	4614      	mov	r4, r2
 8004a60:	b09d      	sub	sp, #116	; 0x74
 8004a62:	d50e      	bpl.n	8004a82 <_svfiprintf_r+0x32>
 8004a64:	690b      	ldr	r3, [r1, #16]
 8004a66:	b963      	cbnz	r3, 8004a82 <_svfiprintf_r+0x32>
 8004a68:	2140      	movs	r1, #64	; 0x40
 8004a6a:	f7ff ff0b 	bl	8004884 <_malloc_r>
 8004a6e:	6028      	str	r0, [r5, #0]
 8004a70:	6128      	str	r0, [r5, #16]
 8004a72:	b920      	cbnz	r0, 8004a7e <_svfiprintf_r+0x2e>
 8004a74:	230c      	movs	r3, #12
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	e0d0      	b.n	8004c20 <_svfiprintf_r+0x1d0>
 8004a7e:	2340      	movs	r3, #64	; 0x40
 8004a80:	616b      	str	r3, [r5, #20]
 8004a82:	2300      	movs	r3, #0
 8004a84:	9309      	str	r3, [sp, #36]	; 0x24
 8004a86:	2320      	movs	r3, #32
 8004a88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a8c:	2330      	movs	r3, #48	; 0x30
 8004a8e:	f04f 0901 	mov.w	r9, #1
 8004a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a96:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004c38 <_svfiprintf_r+0x1e8>
 8004a9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	469a      	mov	sl, r3
 8004aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aa6:	b10a      	cbz	r2, 8004aac <_svfiprintf_r+0x5c>
 8004aa8:	2a25      	cmp	r2, #37	; 0x25
 8004aaa:	d1f9      	bne.n	8004aa0 <_svfiprintf_r+0x50>
 8004aac:	ebba 0b04 	subs.w	fp, sl, r4
 8004ab0:	d00b      	beq.n	8004aca <_svfiprintf_r+0x7a>
 8004ab2:	465b      	mov	r3, fp
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f7ff ff6f 	bl	800499c <__ssputs_r>
 8004abe:	3001      	adds	r0, #1
 8004ac0:	f000 80a9 	beq.w	8004c16 <_svfiprintf_r+0x1c6>
 8004ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ac6:	445a      	add	r2, fp
 8004ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8004aca:	f89a 3000 	ldrb.w	r3, [sl]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 80a1 	beq.w	8004c16 <_svfiprintf_r+0x1c6>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ade:	f10a 0a01 	add.w	sl, sl, #1
 8004ae2:	9304      	str	r3, [sp, #16]
 8004ae4:	9307      	str	r3, [sp, #28]
 8004ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aea:	931a      	str	r3, [sp, #104]	; 0x68
 8004aec:	4654      	mov	r4, sl
 8004aee:	2205      	movs	r2, #5
 8004af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af4:	4850      	ldr	r0, [pc, #320]	; (8004c38 <_svfiprintf_r+0x1e8>)
 8004af6:	f000 fce9 	bl	80054cc <memchr>
 8004afa:	9a04      	ldr	r2, [sp, #16]
 8004afc:	b9d8      	cbnz	r0, 8004b36 <_svfiprintf_r+0xe6>
 8004afe:	06d0      	lsls	r0, r2, #27
 8004b00:	bf44      	itt	mi
 8004b02:	2320      	movmi	r3, #32
 8004b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b08:	0711      	lsls	r1, r2, #28
 8004b0a:	bf44      	itt	mi
 8004b0c:	232b      	movmi	r3, #43	; 0x2b
 8004b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b12:	f89a 3000 	ldrb.w	r3, [sl]
 8004b16:	2b2a      	cmp	r3, #42	; 0x2a
 8004b18:	d015      	beq.n	8004b46 <_svfiprintf_r+0xf6>
 8004b1a:	4654      	mov	r4, sl
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f04f 0c0a 	mov.w	ip, #10
 8004b22:	9a07      	ldr	r2, [sp, #28]
 8004b24:	4621      	mov	r1, r4
 8004b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b2a:	3b30      	subs	r3, #48	; 0x30
 8004b2c:	2b09      	cmp	r3, #9
 8004b2e:	d94d      	bls.n	8004bcc <_svfiprintf_r+0x17c>
 8004b30:	b1b0      	cbz	r0, 8004b60 <_svfiprintf_r+0x110>
 8004b32:	9207      	str	r2, [sp, #28]
 8004b34:	e014      	b.n	8004b60 <_svfiprintf_r+0x110>
 8004b36:	eba0 0308 	sub.w	r3, r0, r8
 8004b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	46a2      	mov	sl, r4
 8004b42:	9304      	str	r3, [sp, #16]
 8004b44:	e7d2      	b.n	8004aec <_svfiprintf_r+0x9c>
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	1d19      	adds	r1, r3, #4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	9103      	str	r1, [sp, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bfbb      	ittet	lt
 8004b52:	425b      	neglt	r3, r3
 8004b54:	f042 0202 	orrlt.w	r2, r2, #2
 8004b58:	9307      	strge	r3, [sp, #28]
 8004b5a:	9307      	strlt	r3, [sp, #28]
 8004b5c:	bfb8      	it	lt
 8004b5e:	9204      	strlt	r2, [sp, #16]
 8004b60:	7823      	ldrb	r3, [r4, #0]
 8004b62:	2b2e      	cmp	r3, #46	; 0x2e
 8004b64:	d10c      	bne.n	8004b80 <_svfiprintf_r+0x130>
 8004b66:	7863      	ldrb	r3, [r4, #1]
 8004b68:	2b2a      	cmp	r3, #42	; 0x2a
 8004b6a:	d134      	bne.n	8004bd6 <_svfiprintf_r+0x186>
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	3402      	adds	r4, #2
 8004b70:	1d1a      	adds	r2, r3, #4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	9203      	str	r2, [sp, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bfb8      	it	lt
 8004b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b7e:	9305      	str	r3, [sp, #20]
 8004b80:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004c3c <_svfiprintf_r+0x1ec>
 8004b84:	2203      	movs	r2, #3
 8004b86:	4650      	mov	r0, sl
 8004b88:	7821      	ldrb	r1, [r4, #0]
 8004b8a:	f000 fc9f 	bl	80054cc <memchr>
 8004b8e:	b138      	cbz	r0, 8004ba0 <_svfiprintf_r+0x150>
 8004b90:	2240      	movs	r2, #64	; 0x40
 8004b92:	9b04      	ldr	r3, [sp, #16]
 8004b94:	eba0 000a 	sub.w	r0, r0, sl
 8004b98:	4082      	lsls	r2, r0
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	3401      	adds	r4, #1
 8004b9e:	9304      	str	r3, [sp, #16]
 8004ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba4:	2206      	movs	r2, #6
 8004ba6:	4826      	ldr	r0, [pc, #152]	; (8004c40 <_svfiprintf_r+0x1f0>)
 8004ba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bac:	f000 fc8e 	bl	80054cc <memchr>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d038      	beq.n	8004c26 <_svfiprintf_r+0x1d6>
 8004bb4:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <_svfiprintf_r+0x1f4>)
 8004bb6:	bb1b      	cbnz	r3, 8004c00 <_svfiprintf_r+0x1b0>
 8004bb8:	9b03      	ldr	r3, [sp, #12]
 8004bba:	3307      	adds	r3, #7
 8004bbc:	f023 0307 	bic.w	r3, r3, #7
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	9303      	str	r3, [sp, #12]
 8004bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc6:	4433      	add	r3, r6
 8004bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8004bca:	e768      	b.n	8004a9e <_svfiprintf_r+0x4e>
 8004bcc:	460c      	mov	r4, r1
 8004bce:	2001      	movs	r0, #1
 8004bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bd4:	e7a6      	b.n	8004b24 <_svfiprintf_r+0xd4>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f04f 0c0a 	mov.w	ip, #10
 8004bdc:	4619      	mov	r1, r3
 8004bde:	3401      	adds	r4, #1
 8004be0:	9305      	str	r3, [sp, #20]
 8004be2:	4620      	mov	r0, r4
 8004be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004be8:	3a30      	subs	r2, #48	; 0x30
 8004bea:	2a09      	cmp	r2, #9
 8004bec:	d903      	bls.n	8004bf6 <_svfiprintf_r+0x1a6>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0c6      	beq.n	8004b80 <_svfiprintf_r+0x130>
 8004bf2:	9105      	str	r1, [sp, #20]
 8004bf4:	e7c4      	b.n	8004b80 <_svfiprintf_r+0x130>
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bfe:	e7f0      	b.n	8004be2 <_svfiprintf_r+0x192>
 8004c00:	ab03      	add	r3, sp, #12
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	462a      	mov	r2, r5
 8004c06:	4638      	mov	r0, r7
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <_svfiprintf_r+0x1f8>)
 8004c0a:	a904      	add	r1, sp, #16
 8004c0c:	f3af 8000 	nop.w
 8004c10:	1c42      	adds	r2, r0, #1
 8004c12:	4606      	mov	r6, r0
 8004c14:	d1d6      	bne.n	8004bc4 <_svfiprintf_r+0x174>
 8004c16:	89ab      	ldrh	r3, [r5, #12]
 8004c18:	065b      	lsls	r3, r3, #25
 8004c1a:	f53f af2d 	bmi.w	8004a78 <_svfiprintf_r+0x28>
 8004c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c20:	b01d      	add	sp, #116	; 0x74
 8004c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c26:	ab03      	add	r3, sp, #12
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	462a      	mov	r2, r5
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <_svfiprintf_r+0x1f8>)
 8004c30:	a904      	add	r1, sp, #16
 8004c32:	f000 f9bf 	bl	8004fb4 <_printf_i>
 8004c36:	e7eb      	b.n	8004c10 <_svfiprintf_r+0x1c0>
 8004c38:	080056da 	.word	0x080056da
 8004c3c:	080056e0 	.word	0x080056e0
 8004c40:	080056e4 	.word	0x080056e4
 8004c44:	00000000 	.word	0x00000000
 8004c48:	0800499d 	.word	0x0800499d

08004c4c <__sfputc_r>:
 8004c4c:	6893      	ldr	r3, [r2, #8]
 8004c4e:	b410      	push	{r4}
 8004c50:	3b01      	subs	r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	6093      	str	r3, [r2, #8]
 8004c56:	da07      	bge.n	8004c68 <__sfputc_r+0x1c>
 8004c58:	6994      	ldr	r4, [r2, #24]
 8004c5a:	42a3      	cmp	r3, r4
 8004c5c:	db01      	blt.n	8004c62 <__sfputc_r+0x16>
 8004c5e:	290a      	cmp	r1, #10
 8004c60:	d102      	bne.n	8004c68 <__sfputc_r+0x1c>
 8004c62:	bc10      	pop	{r4}
 8004c64:	f000 bb72 	b.w	800534c <__swbuf_r>
 8004c68:	6813      	ldr	r3, [r2, #0]
 8004c6a:	1c58      	adds	r0, r3, #1
 8004c6c:	6010      	str	r0, [r2, #0]
 8004c6e:	7019      	strb	r1, [r3, #0]
 8004c70:	4608      	mov	r0, r1
 8004c72:	bc10      	pop	{r4}
 8004c74:	4770      	bx	lr

08004c76 <__sfputs_r>:
 8004c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c78:	4606      	mov	r6, r0
 8004c7a:	460f      	mov	r7, r1
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	18d5      	adds	r5, r2, r3
 8004c80:	42ac      	cmp	r4, r5
 8004c82:	d101      	bne.n	8004c88 <__sfputs_r+0x12>
 8004c84:	2000      	movs	r0, #0
 8004c86:	e007      	b.n	8004c98 <__sfputs_r+0x22>
 8004c88:	463a      	mov	r2, r7
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c90:	f7ff ffdc 	bl	8004c4c <__sfputc_r>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d1f3      	bne.n	8004c80 <__sfputs_r+0xa>
 8004c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c9c <_vfiprintf_r>:
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	460d      	mov	r5, r1
 8004ca2:	4614      	mov	r4, r2
 8004ca4:	4698      	mov	r8, r3
 8004ca6:	4606      	mov	r6, r0
 8004ca8:	b09d      	sub	sp, #116	; 0x74
 8004caa:	b118      	cbz	r0, 8004cb4 <_vfiprintf_r+0x18>
 8004cac:	6a03      	ldr	r3, [r0, #32]
 8004cae:	b90b      	cbnz	r3, 8004cb4 <_vfiprintf_r+0x18>
 8004cb0:	f7ff fc58 	bl	8004564 <__sinit>
 8004cb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cb6:	07d9      	lsls	r1, r3, #31
 8004cb8:	d405      	bmi.n	8004cc6 <_vfiprintf_r+0x2a>
 8004cba:	89ab      	ldrh	r3, [r5, #12]
 8004cbc:	059a      	lsls	r2, r3, #22
 8004cbe:	d402      	bmi.n	8004cc6 <_vfiprintf_r+0x2a>
 8004cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cc2:	f7ff fd74 	bl	80047ae <__retarget_lock_acquire_recursive>
 8004cc6:	89ab      	ldrh	r3, [r5, #12]
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	d501      	bpl.n	8004cd0 <_vfiprintf_r+0x34>
 8004ccc:	692b      	ldr	r3, [r5, #16]
 8004cce:	b99b      	cbnz	r3, 8004cf8 <_vfiprintf_r+0x5c>
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	f000 fb78 	bl	80053c8 <__swsetup_r>
 8004cd8:	b170      	cbz	r0, 8004cf8 <_vfiprintf_r+0x5c>
 8004cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cdc:	07dc      	lsls	r4, r3, #31
 8004cde:	d504      	bpl.n	8004cea <_vfiprintf_r+0x4e>
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	b01d      	add	sp, #116	; 0x74
 8004ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cea:	89ab      	ldrh	r3, [r5, #12]
 8004cec:	0598      	lsls	r0, r3, #22
 8004cee:	d4f7      	bmi.n	8004ce0 <_vfiprintf_r+0x44>
 8004cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cf2:	f7ff fd5d 	bl	80047b0 <__retarget_lock_release_recursive>
 8004cf6:	e7f3      	b.n	8004ce0 <_vfiprintf_r+0x44>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d02:	2330      	movs	r3, #48	; 0x30
 8004d04:	f04f 0901 	mov.w	r9, #1
 8004d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004ebc <_vfiprintf_r+0x220>
 8004d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d14:	4623      	mov	r3, r4
 8004d16:	469a      	mov	sl, r3
 8004d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d1c:	b10a      	cbz	r2, 8004d22 <_vfiprintf_r+0x86>
 8004d1e:	2a25      	cmp	r2, #37	; 0x25
 8004d20:	d1f9      	bne.n	8004d16 <_vfiprintf_r+0x7a>
 8004d22:	ebba 0b04 	subs.w	fp, sl, r4
 8004d26:	d00b      	beq.n	8004d40 <_vfiprintf_r+0xa4>
 8004d28:	465b      	mov	r3, fp
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	4630      	mov	r0, r6
 8004d30:	f7ff ffa1 	bl	8004c76 <__sfputs_r>
 8004d34:	3001      	adds	r0, #1
 8004d36:	f000 80a9 	beq.w	8004e8c <_vfiprintf_r+0x1f0>
 8004d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d3c:	445a      	add	r2, fp
 8004d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8004d40:	f89a 3000 	ldrb.w	r3, [sl]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80a1 	beq.w	8004e8c <_vfiprintf_r+0x1f0>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d54:	f10a 0a01 	add.w	sl, sl, #1
 8004d58:	9304      	str	r3, [sp, #16]
 8004d5a:	9307      	str	r3, [sp, #28]
 8004d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d60:	931a      	str	r3, [sp, #104]	; 0x68
 8004d62:	4654      	mov	r4, sl
 8004d64:	2205      	movs	r2, #5
 8004d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d6a:	4854      	ldr	r0, [pc, #336]	; (8004ebc <_vfiprintf_r+0x220>)
 8004d6c:	f000 fbae 	bl	80054cc <memchr>
 8004d70:	9a04      	ldr	r2, [sp, #16]
 8004d72:	b9d8      	cbnz	r0, 8004dac <_vfiprintf_r+0x110>
 8004d74:	06d1      	lsls	r1, r2, #27
 8004d76:	bf44      	itt	mi
 8004d78:	2320      	movmi	r3, #32
 8004d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d7e:	0713      	lsls	r3, r2, #28
 8004d80:	bf44      	itt	mi
 8004d82:	232b      	movmi	r3, #43	; 0x2b
 8004d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d88:	f89a 3000 	ldrb.w	r3, [sl]
 8004d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d8e:	d015      	beq.n	8004dbc <_vfiprintf_r+0x120>
 8004d90:	4654      	mov	r4, sl
 8004d92:	2000      	movs	r0, #0
 8004d94:	f04f 0c0a 	mov.w	ip, #10
 8004d98:	9a07      	ldr	r2, [sp, #28]
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004da0:	3b30      	subs	r3, #48	; 0x30
 8004da2:	2b09      	cmp	r3, #9
 8004da4:	d94d      	bls.n	8004e42 <_vfiprintf_r+0x1a6>
 8004da6:	b1b0      	cbz	r0, 8004dd6 <_vfiprintf_r+0x13a>
 8004da8:	9207      	str	r2, [sp, #28]
 8004daa:	e014      	b.n	8004dd6 <_vfiprintf_r+0x13a>
 8004dac:	eba0 0308 	sub.w	r3, r0, r8
 8004db0:	fa09 f303 	lsl.w	r3, r9, r3
 8004db4:	4313      	orrs	r3, r2
 8004db6:	46a2      	mov	sl, r4
 8004db8:	9304      	str	r3, [sp, #16]
 8004dba:	e7d2      	b.n	8004d62 <_vfiprintf_r+0xc6>
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	1d19      	adds	r1, r3, #4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	9103      	str	r1, [sp, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bfbb      	ittet	lt
 8004dc8:	425b      	neglt	r3, r3
 8004dca:	f042 0202 	orrlt.w	r2, r2, #2
 8004dce:	9307      	strge	r3, [sp, #28]
 8004dd0:	9307      	strlt	r3, [sp, #28]
 8004dd2:	bfb8      	it	lt
 8004dd4:	9204      	strlt	r2, [sp, #16]
 8004dd6:	7823      	ldrb	r3, [r4, #0]
 8004dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8004dda:	d10c      	bne.n	8004df6 <_vfiprintf_r+0x15a>
 8004ddc:	7863      	ldrb	r3, [r4, #1]
 8004dde:	2b2a      	cmp	r3, #42	; 0x2a
 8004de0:	d134      	bne.n	8004e4c <_vfiprintf_r+0x1b0>
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	3402      	adds	r4, #2
 8004de6:	1d1a      	adds	r2, r3, #4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	9203      	str	r2, [sp, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bfb8      	it	lt
 8004df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004df4:	9305      	str	r3, [sp, #20]
 8004df6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ec0 <_vfiprintf_r+0x224>
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	4650      	mov	r0, sl
 8004dfe:	7821      	ldrb	r1, [r4, #0]
 8004e00:	f000 fb64 	bl	80054cc <memchr>
 8004e04:	b138      	cbz	r0, 8004e16 <_vfiprintf_r+0x17a>
 8004e06:	2240      	movs	r2, #64	; 0x40
 8004e08:	9b04      	ldr	r3, [sp, #16]
 8004e0a:	eba0 000a 	sub.w	r0, r0, sl
 8004e0e:	4082      	lsls	r2, r0
 8004e10:	4313      	orrs	r3, r2
 8004e12:	3401      	adds	r4, #1
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e1a:	2206      	movs	r2, #6
 8004e1c:	4829      	ldr	r0, [pc, #164]	; (8004ec4 <_vfiprintf_r+0x228>)
 8004e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e22:	f000 fb53 	bl	80054cc <memchr>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d03f      	beq.n	8004eaa <_vfiprintf_r+0x20e>
 8004e2a:	4b27      	ldr	r3, [pc, #156]	; (8004ec8 <_vfiprintf_r+0x22c>)
 8004e2c:	bb1b      	cbnz	r3, 8004e76 <_vfiprintf_r+0x1da>
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	3307      	adds	r3, #7
 8004e32:	f023 0307 	bic.w	r3, r3, #7
 8004e36:	3308      	adds	r3, #8
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3c:	443b      	add	r3, r7
 8004e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e40:	e768      	b.n	8004d14 <_vfiprintf_r+0x78>
 8004e42:	460c      	mov	r4, r1
 8004e44:	2001      	movs	r0, #1
 8004e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e4a:	e7a6      	b.n	8004d9a <_vfiprintf_r+0xfe>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f04f 0c0a 	mov.w	ip, #10
 8004e52:	4619      	mov	r1, r3
 8004e54:	3401      	adds	r4, #1
 8004e56:	9305      	str	r3, [sp, #20]
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e5e:	3a30      	subs	r2, #48	; 0x30
 8004e60:	2a09      	cmp	r2, #9
 8004e62:	d903      	bls.n	8004e6c <_vfiprintf_r+0x1d0>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0c6      	beq.n	8004df6 <_vfiprintf_r+0x15a>
 8004e68:	9105      	str	r1, [sp, #20]
 8004e6a:	e7c4      	b.n	8004df6 <_vfiprintf_r+0x15a>
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	2301      	movs	r3, #1
 8004e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e74:	e7f0      	b.n	8004e58 <_vfiprintf_r+0x1bc>
 8004e76:	ab03      	add	r3, sp, #12
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	462a      	mov	r2, r5
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <_vfiprintf_r+0x230>)
 8004e80:	a904      	add	r1, sp, #16
 8004e82:	f3af 8000 	nop.w
 8004e86:	4607      	mov	r7, r0
 8004e88:	1c78      	adds	r0, r7, #1
 8004e8a:	d1d6      	bne.n	8004e3a <_vfiprintf_r+0x19e>
 8004e8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e8e:	07d9      	lsls	r1, r3, #31
 8004e90:	d405      	bmi.n	8004e9e <_vfiprintf_r+0x202>
 8004e92:	89ab      	ldrh	r3, [r5, #12]
 8004e94:	059a      	lsls	r2, r3, #22
 8004e96:	d402      	bmi.n	8004e9e <_vfiprintf_r+0x202>
 8004e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e9a:	f7ff fc89 	bl	80047b0 <__retarget_lock_release_recursive>
 8004e9e:	89ab      	ldrh	r3, [r5, #12]
 8004ea0:	065b      	lsls	r3, r3, #25
 8004ea2:	f53f af1d 	bmi.w	8004ce0 <_vfiprintf_r+0x44>
 8004ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ea8:	e71c      	b.n	8004ce4 <_vfiprintf_r+0x48>
 8004eaa:	ab03      	add	r3, sp, #12
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	462a      	mov	r2, r5
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <_vfiprintf_r+0x230>)
 8004eb4:	a904      	add	r1, sp, #16
 8004eb6:	f000 f87d 	bl	8004fb4 <_printf_i>
 8004eba:	e7e4      	b.n	8004e86 <_vfiprintf_r+0x1ea>
 8004ebc:	080056da 	.word	0x080056da
 8004ec0:	080056e0 	.word	0x080056e0
 8004ec4:	080056e4 	.word	0x080056e4
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	08004c77 	.word	0x08004c77

08004ed0 <_printf_common>:
 8004ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	4616      	mov	r6, r2
 8004ed6:	4699      	mov	r9, r3
 8004ed8:	688a      	ldr	r2, [r1, #8]
 8004eda:	690b      	ldr	r3, [r1, #16]
 8004edc:	4607      	mov	r7, r0
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	bfb8      	it	lt
 8004ee2:	4613      	movlt	r3, r2
 8004ee4:	6033      	str	r3, [r6, #0]
 8004ee6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eea:	460c      	mov	r4, r1
 8004eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ef0:	b10a      	cbz	r2, 8004ef6 <_printf_common+0x26>
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	6033      	str	r3, [r6, #0]
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	0699      	lsls	r1, r3, #26
 8004efa:	bf42      	ittt	mi
 8004efc:	6833      	ldrmi	r3, [r6, #0]
 8004efe:	3302      	addmi	r3, #2
 8004f00:	6033      	strmi	r3, [r6, #0]
 8004f02:	6825      	ldr	r5, [r4, #0]
 8004f04:	f015 0506 	ands.w	r5, r5, #6
 8004f08:	d106      	bne.n	8004f18 <_printf_common+0x48>
 8004f0a:	f104 0a19 	add.w	sl, r4, #25
 8004f0e:	68e3      	ldr	r3, [r4, #12]
 8004f10:	6832      	ldr	r2, [r6, #0]
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	42ab      	cmp	r3, r5
 8004f16:	dc2b      	bgt.n	8004f70 <_printf_common+0xa0>
 8004f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f1c:	1e13      	subs	r3, r2, #0
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	bf18      	it	ne
 8004f22:	2301      	movne	r3, #1
 8004f24:	0692      	lsls	r2, r2, #26
 8004f26:	d430      	bmi.n	8004f8a <_printf_common+0xba>
 8004f28:	4649      	mov	r1, r9
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f30:	47c0      	blx	r8
 8004f32:	3001      	adds	r0, #1
 8004f34:	d023      	beq.n	8004f7e <_printf_common+0xae>
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	6922      	ldr	r2, [r4, #16]
 8004f3a:	f003 0306 	and.w	r3, r3, #6
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	bf14      	ite	ne
 8004f42:	2500      	movne	r5, #0
 8004f44:	6833      	ldreq	r3, [r6, #0]
 8004f46:	f04f 0600 	mov.w	r6, #0
 8004f4a:	bf08      	it	eq
 8004f4c:	68e5      	ldreq	r5, [r4, #12]
 8004f4e:	f104 041a 	add.w	r4, r4, #26
 8004f52:	bf08      	it	eq
 8004f54:	1aed      	subeq	r5, r5, r3
 8004f56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f5a:	bf08      	it	eq
 8004f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f60:	4293      	cmp	r3, r2
 8004f62:	bfc4      	itt	gt
 8004f64:	1a9b      	subgt	r3, r3, r2
 8004f66:	18ed      	addgt	r5, r5, r3
 8004f68:	42b5      	cmp	r5, r6
 8004f6a:	d11a      	bne.n	8004fa2 <_printf_common+0xd2>
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	e008      	b.n	8004f82 <_printf_common+0xb2>
 8004f70:	2301      	movs	r3, #1
 8004f72:	4652      	mov	r2, sl
 8004f74:	4649      	mov	r1, r9
 8004f76:	4638      	mov	r0, r7
 8004f78:	47c0      	blx	r8
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d103      	bne.n	8004f86 <_printf_common+0xb6>
 8004f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f86:	3501      	adds	r5, #1
 8004f88:	e7c1      	b.n	8004f0e <_printf_common+0x3e>
 8004f8a:	2030      	movs	r0, #48	; 0x30
 8004f8c:	18e1      	adds	r1, r4, r3
 8004f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f98:	4422      	add	r2, r4
 8004f9a:	3302      	adds	r3, #2
 8004f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fa0:	e7c2      	b.n	8004f28 <_printf_common+0x58>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	4638      	mov	r0, r7
 8004faa:	47c0      	blx	r8
 8004fac:	3001      	adds	r0, #1
 8004fae:	d0e6      	beq.n	8004f7e <_printf_common+0xae>
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	e7d9      	b.n	8004f68 <_printf_common+0x98>

08004fb4 <_printf_i>:
 8004fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb8:	7e0f      	ldrb	r7, [r1, #24]
 8004fba:	4691      	mov	r9, r2
 8004fbc:	2f78      	cmp	r7, #120	; 0x78
 8004fbe:	4680      	mov	r8, r0
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	469a      	mov	sl, r3
 8004fc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fca:	d807      	bhi.n	8004fdc <_printf_i+0x28>
 8004fcc:	2f62      	cmp	r7, #98	; 0x62
 8004fce:	d80a      	bhi.n	8004fe6 <_printf_i+0x32>
 8004fd0:	2f00      	cmp	r7, #0
 8004fd2:	f000 80d5 	beq.w	8005180 <_printf_i+0x1cc>
 8004fd6:	2f58      	cmp	r7, #88	; 0x58
 8004fd8:	f000 80c1 	beq.w	800515e <_printf_i+0x1aa>
 8004fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fe4:	e03a      	b.n	800505c <_printf_i+0xa8>
 8004fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fea:	2b15      	cmp	r3, #21
 8004fec:	d8f6      	bhi.n	8004fdc <_printf_i+0x28>
 8004fee:	a101      	add	r1, pc, #4	; (adr r1, 8004ff4 <_printf_i+0x40>)
 8004ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff4:	0800504d 	.word	0x0800504d
 8004ff8:	08005061 	.word	0x08005061
 8004ffc:	08004fdd 	.word	0x08004fdd
 8005000:	08004fdd 	.word	0x08004fdd
 8005004:	08004fdd 	.word	0x08004fdd
 8005008:	08004fdd 	.word	0x08004fdd
 800500c:	08005061 	.word	0x08005061
 8005010:	08004fdd 	.word	0x08004fdd
 8005014:	08004fdd 	.word	0x08004fdd
 8005018:	08004fdd 	.word	0x08004fdd
 800501c:	08004fdd 	.word	0x08004fdd
 8005020:	08005167 	.word	0x08005167
 8005024:	0800508d 	.word	0x0800508d
 8005028:	08005121 	.word	0x08005121
 800502c:	08004fdd 	.word	0x08004fdd
 8005030:	08004fdd 	.word	0x08004fdd
 8005034:	08005189 	.word	0x08005189
 8005038:	08004fdd 	.word	0x08004fdd
 800503c:	0800508d 	.word	0x0800508d
 8005040:	08004fdd 	.word	0x08004fdd
 8005044:	08004fdd 	.word	0x08004fdd
 8005048:	08005129 	.word	0x08005129
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	1d1a      	adds	r2, r3, #4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	602a      	str	r2, [r5, #0]
 8005054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800505c:	2301      	movs	r3, #1
 800505e:	e0a0      	b.n	80051a2 <_printf_i+0x1ee>
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	682b      	ldr	r3, [r5, #0]
 8005064:	0607      	lsls	r7, r0, #24
 8005066:	f103 0104 	add.w	r1, r3, #4
 800506a:	6029      	str	r1, [r5, #0]
 800506c:	d501      	bpl.n	8005072 <_printf_i+0xbe>
 800506e:	681e      	ldr	r6, [r3, #0]
 8005070:	e003      	b.n	800507a <_printf_i+0xc6>
 8005072:	0646      	lsls	r6, r0, #25
 8005074:	d5fb      	bpl.n	800506e <_printf_i+0xba>
 8005076:	f9b3 6000 	ldrsh.w	r6, [r3]
 800507a:	2e00      	cmp	r6, #0
 800507c:	da03      	bge.n	8005086 <_printf_i+0xd2>
 800507e:	232d      	movs	r3, #45	; 0x2d
 8005080:	4276      	negs	r6, r6
 8005082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005086:	230a      	movs	r3, #10
 8005088:	4859      	ldr	r0, [pc, #356]	; (80051f0 <_printf_i+0x23c>)
 800508a:	e012      	b.n	80050b2 <_printf_i+0xfe>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	6820      	ldr	r0, [r4, #0]
 8005090:	1d19      	adds	r1, r3, #4
 8005092:	6029      	str	r1, [r5, #0]
 8005094:	0605      	lsls	r5, r0, #24
 8005096:	d501      	bpl.n	800509c <_printf_i+0xe8>
 8005098:	681e      	ldr	r6, [r3, #0]
 800509a:	e002      	b.n	80050a2 <_printf_i+0xee>
 800509c:	0641      	lsls	r1, r0, #25
 800509e:	d5fb      	bpl.n	8005098 <_printf_i+0xe4>
 80050a0:	881e      	ldrh	r6, [r3, #0]
 80050a2:	2f6f      	cmp	r7, #111	; 0x6f
 80050a4:	bf0c      	ite	eq
 80050a6:	2308      	moveq	r3, #8
 80050a8:	230a      	movne	r3, #10
 80050aa:	4851      	ldr	r0, [pc, #324]	; (80051f0 <_printf_i+0x23c>)
 80050ac:	2100      	movs	r1, #0
 80050ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050b2:	6865      	ldr	r5, [r4, #4]
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	bfa8      	it	ge
 80050b8:	6821      	ldrge	r1, [r4, #0]
 80050ba:	60a5      	str	r5, [r4, #8]
 80050bc:	bfa4      	itt	ge
 80050be:	f021 0104 	bicge.w	r1, r1, #4
 80050c2:	6021      	strge	r1, [r4, #0]
 80050c4:	b90e      	cbnz	r6, 80050ca <_printf_i+0x116>
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	d04b      	beq.n	8005162 <_printf_i+0x1ae>
 80050ca:	4615      	mov	r5, r2
 80050cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80050d0:	fb03 6711 	mls	r7, r3, r1, r6
 80050d4:	5dc7      	ldrb	r7, [r0, r7]
 80050d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050da:	4637      	mov	r7, r6
 80050dc:	42bb      	cmp	r3, r7
 80050de:	460e      	mov	r6, r1
 80050e0:	d9f4      	bls.n	80050cc <_printf_i+0x118>
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d10b      	bne.n	80050fe <_printf_i+0x14a>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	07de      	lsls	r6, r3, #31
 80050ea:	d508      	bpl.n	80050fe <_printf_i+0x14a>
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	6861      	ldr	r1, [r4, #4]
 80050f0:	4299      	cmp	r1, r3
 80050f2:	bfde      	ittt	le
 80050f4:	2330      	movle	r3, #48	; 0x30
 80050f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050fe:	1b52      	subs	r2, r2, r5
 8005100:	6122      	str	r2, [r4, #16]
 8005102:	464b      	mov	r3, r9
 8005104:	4621      	mov	r1, r4
 8005106:	4640      	mov	r0, r8
 8005108:	f8cd a000 	str.w	sl, [sp]
 800510c:	aa03      	add	r2, sp, #12
 800510e:	f7ff fedf 	bl	8004ed0 <_printf_common>
 8005112:	3001      	adds	r0, #1
 8005114:	d14a      	bne.n	80051ac <_printf_i+0x1f8>
 8005116:	f04f 30ff 	mov.w	r0, #4294967295
 800511a:	b004      	add	sp, #16
 800511c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	f043 0320 	orr.w	r3, r3, #32
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	2778      	movs	r7, #120	; 0x78
 800512a:	4832      	ldr	r0, [pc, #200]	; (80051f4 <_printf_i+0x240>)
 800512c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	6829      	ldr	r1, [r5, #0]
 8005134:	061f      	lsls	r7, r3, #24
 8005136:	f851 6b04 	ldr.w	r6, [r1], #4
 800513a:	d402      	bmi.n	8005142 <_printf_i+0x18e>
 800513c:	065f      	lsls	r7, r3, #25
 800513e:	bf48      	it	mi
 8005140:	b2b6      	uxthmi	r6, r6
 8005142:	07df      	lsls	r7, r3, #31
 8005144:	bf48      	it	mi
 8005146:	f043 0320 	orrmi.w	r3, r3, #32
 800514a:	6029      	str	r1, [r5, #0]
 800514c:	bf48      	it	mi
 800514e:	6023      	strmi	r3, [r4, #0]
 8005150:	b91e      	cbnz	r6, 800515a <_printf_i+0x1a6>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	f023 0320 	bic.w	r3, r3, #32
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	2310      	movs	r3, #16
 800515c:	e7a6      	b.n	80050ac <_printf_i+0xf8>
 800515e:	4824      	ldr	r0, [pc, #144]	; (80051f0 <_printf_i+0x23c>)
 8005160:	e7e4      	b.n	800512c <_printf_i+0x178>
 8005162:	4615      	mov	r5, r2
 8005164:	e7bd      	b.n	80050e2 <_printf_i+0x12e>
 8005166:	682b      	ldr	r3, [r5, #0]
 8005168:	6826      	ldr	r6, [r4, #0]
 800516a:	1d18      	adds	r0, r3, #4
 800516c:	6961      	ldr	r1, [r4, #20]
 800516e:	6028      	str	r0, [r5, #0]
 8005170:	0635      	lsls	r5, r6, #24
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	d501      	bpl.n	800517a <_printf_i+0x1c6>
 8005176:	6019      	str	r1, [r3, #0]
 8005178:	e002      	b.n	8005180 <_printf_i+0x1cc>
 800517a:	0670      	lsls	r0, r6, #25
 800517c:	d5fb      	bpl.n	8005176 <_printf_i+0x1c2>
 800517e:	8019      	strh	r1, [r3, #0]
 8005180:	2300      	movs	r3, #0
 8005182:	4615      	mov	r5, r2
 8005184:	6123      	str	r3, [r4, #16]
 8005186:	e7bc      	b.n	8005102 <_printf_i+0x14e>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	2100      	movs	r1, #0
 800518c:	1d1a      	adds	r2, r3, #4
 800518e:	602a      	str	r2, [r5, #0]
 8005190:	681d      	ldr	r5, [r3, #0]
 8005192:	6862      	ldr	r2, [r4, #4]
 8005194:	4628      	mov	r0, r5
 8005196:	f000 f999 	bl	80054cc <memchr>
 800519a:	b108      	cbz	r0, 80051a0 <_printf_i+0x1ec>
 800519c:	1b40      	subs	r0, r0, r5
 800519e:	6060      	str	r0, [r4, #4]
 80051a0:	6863      	ldr	r3, [r4, #4]
 80051a2:	6123      	str	r3, [r4, #16]
 80051a4:	2300      	movs	r3, #0
 80051a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051aa:	e7aa      	b.n	8005102 <_printf_i+0x14e>
 80051ac:	462a      	mov	r2, r5
 80051ae:	4649      	mov	r1, r9
 80051b0:	4640      	mov	r0, r8
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	47d0      	blx	sl
 80051b6:	3001      	adds	r0, #1
 80051b8:	d0ad      	beq.n	8005116 <_printf_i+0x162>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	079b      	lsls	r3, r3, #30
 80051be:	d413      	bmi.n	80051e8 <_printf_i+0x234>
 80051c0:	68e0      	ldr	r0, [r4, #12]
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	4298      	cmp	r0, r3
 80051c6:	bfb8      	it	lt
 80051c8:	4618      	movlt	r0, r3
 80051ca:	e7a6      	b.n	800511a <_printf_i+0x166>
 80051cc:	2301      	movs	r3, #1
 80051ce:	4632      	mov	r2, r6
 80051d0:	4649      	mov	r1, r9
 80051d2:	4640      	mov	r0, r8
 80051d4:	47d0      	blx	sl
 80051d6:	3001      	adds	r0, #1
 80051d8:	d09d      	beq.n	8005116 <_printf_i+0x162>
 80051da:	3501      	adds	r5, #1
 80051dc:	68e3      	ldr	r3, [r4, #12]
 80051de:	9903      	ldr	r1, [sp, #12]
 80051e0:	1a5b      	subs	r3, r3, r1
 80051e2:	42ab      	cmp	r3, r5
 80051e4:	dcf2      	bgt.n	80051cc <_printf_i+0x218>
 80051e6:	e7eb      	b.n	80051c0 <_printf_i+0x20c>
 80051e8:	2500      	movs	r5, #0
 80051ea:	f104 0619 	add.w	r6, r4, #25
 80051ee:	e7f5      	b.n	80051dc <_printf_i+0x228>
 80051f0:	080056eb 	.word	0x080056eb
 80051f4:	080056fc 	.word	0x080056fc

080051f8 <__sflush_r>:
 80051f8:	898a      	ldrh	r2, [r1, #12]
 80051fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fc:	4605      	mov	r5, r0
 80051fe:	0710      	lsls	r0, r2, #28
 8005200:	460c      	mov	r4, r1
 8005202:	d457      	bmi.n	80052b4 <__sflush_r+0xbc>
 8005204:	684b      	ldr	r3, [r1, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	dc04      	bgt.n	8005214 <__sflush_r+0x1c>
 800520a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800520c:	2b00      	cmp	r3, #0
 800520e:	dc01      	bgt.n	8005214 <__sflush_r+0x1c>
 8005210:	2000      	movs	r0, #0
 8005212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005216:	2e00      	cmp	r6, #0
 8005218:	d0fa      	beq.n	8005210 <__sflush_r+0x18>
 800521a:	2300      	movs	r3, #0
 800521c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005220:	682f      	ldr	r7, [r5, #0]
 8005222:	6a21      	ldr	r1, [r4, #32]
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	d032      	beq.n	800528e <__sflush_r+0x96>
 8005228:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	075a      	lsls	r2, r3, #29
 800522e:	d505      	bpl.n	800523c <__sflush_r+0x44>
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	1ac0      	subs	r0, r0, r3
 8005234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005236:	b10b      	cbz	r3, 800523c <__sflush_r+0x44>
 8005238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800523a:	1ac0      	subs	r0, r0, r3
 800523c:	2300      	movs	r3, #0
 800523e:	4602      	mov	r2, r0
 8005240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005242:	4628      	mov	r0, r5
 8005244:	6a21      	ldr	r1, [r4, #32]
 8005246:	47b0      	blx	r6
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	d106      	bne.n	800525c <__sflush_r+0x64>
 800524e:	6829      	ldr	r1, [r5, #0]
 8005250:	291d      	cmp	r1, #29
 8005252:	d82b      	bhi.n	80052ac <__sflush_r+0xb4>
 8005254:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <__sflush_r+0x100>)
 8005256:	410a      	asrs	r2, r1
 8005258:	07d6      	lsls	r6, r2, #31
 800525a:	d427      	bmi.n	80052ac <__sflush_r+0xb4>
 800525c:	2200      	movs	r2, #0
 800525e:	6062      	str	r2, [r4, #4]
 8005260:	6922      	ldr	r2, [r4, #16]
 8005262:	04d9      	lsls	r1, r3, #19
 8005264:	6022      	str	r2, [r4, #0]
 8005266:	d504      	bpl.n	8005272 <__sflush_r+0x7a>
 8005268:	1c42      	adds	r2, r0, #1
 800526a:	d101      	bne.n	8005270 <__sflush_r+0x78>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b903      	cbnz	r3, 8005272 <__sflush_r+0x7a>
 8005270:	6560      	str	r0, [r4, #84]	; 0x54
 8005272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005274:	602f      	str	r7, [r5, #0]
 8005276:	2900      	cmp	r1, #0
 8005278:	d0ca      	beq.n	8005210 <__sflush_r+0x18>
 800527a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800527e:	4299      	cmp	r1, r3
 8005280:	d002      	beq.n	8005288 <__sflush_r+0x90>
 8005282:	4628      	mov	r0, r5
 8005284:	f7ff fa96 	bl	80047b4 <_free_r>
 8005288:	2000      	movs	r0, #0
 800528a:	6360      	str	r0, [r4, #52]	; 0x34
 800528c:	e7c1      	b.n	8005212 <__sflush_r+0x1a>
 800528e:	2301      	movs	r3, #1
 8005290:	4628      	mov	r0, r5
 8005292:	47b0      	blx	r6
 8005294:	1c41      	adds	r1, r0, #1
 8005296:	d1c8      	bne.n	800522a <__sflush_r+0x32>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0c5      	beq.n	800522a <__sflush_r+0x32>
 800529e:	2b1d      	cmp	r3, #29
 80052a0:	d001      	beq.n	80052a6 <__sflush_r+0xae>
 80052a2:	2b16      	cmp	r3, #22
 80052a4:	d101      	bne.n	80052aa <__sflush_r+0xb2>
 80052a6:	602f      	str	r7, [r5, #0]
 80052a8:	e7b2      	b.n	8005210 <__sflush_r+0x18>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	e7ae      	b.n	8005212 <__sflush_r+0x1a>
 80052b4:	690f      	ldr	r7, [r1, #16]
 80052b6:	2f00      	cmp	r7, #0
 80052b8:	d0aa      	beq.n	8005210 <__sflush_r+0x18>
 80052ba:	0793      	lsls	r3, r2, #30
 80052bc:	bf18      	it	ne
 80052be:	2300      	movne	r3, #0
 80052c0:	680e      	ldr	r6, [r1, #0]
 80052c2:	bf08      	it	eq
 80052c4:	694b      	ldreq	r3, [r1, #20]
 80052c6:	1bf6      	subs	r6, r6, r7
 80052c8:	600f      	str	r7, [r1, #0]
 80052ca:	608b      	str	r3, [r1, #8]
 80052cc:	2e00      	cmp	r6, #0
 80052ce:	dd9f      	ble.n	8005210 <__sflush_r+0x18>
 80052d0:	4633      	mov	r3, r6
 80052d2:	463a      	mov	r2, r7
 80052d4:	4628      	mov	r0, r5
 80052d6:	6a21      	ldr	r1, [r4, #32]
 80052d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80052dc:	47e0      	blx	ip
 80052de:	2800      	cmp	r0, #0
 80052e0:	dc06      	bgt.n	80052f0 <__sflush_r+0xf8>
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295
 80052e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	e790      	b.n	8005212 <__sflush_r+0x1a>
 80052f0:	4407      	add	r7, r0
 80052f2:	1a36      	subs	r6, r6, r0
 80052f4:	e7ea      	b.n	80052cc <__sflush_r+0xd4>
 80052f6:	bf00      	nop
 80052f8:	dfbffffe 	.word	0xdfbffffe

080052fc <_fflush_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	690b      	ldr	r3, [r1, #16]
 8005300:	4605      	mov	r5, r0
 8005302:	460c      	mov	r4, r1
 8005304:	b913      	cbnz	r3, 800530c <_fflush_r+0x10>
 8005306:	2500      	movs	r5, #0
 8005308:	4628      	mov	r0, r5
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	b118      	cbz	r0, 8005316 <_fflush_r+0x1a>
 800530e:	6a03      	ldr	r3, [r0, #32]
 8005310:	b90b      	cbnz	r3, 8005316 <_fflush_r+0x1a>
 8005312:	f7ff f927 	bl	8004564 <__sinit>
 8005316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f3      	beq.n	8005306 <_fflush_r+0xa>
 800531e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005320:	07d0      	lsls	r0, r2, #31
 8005322:	d404      	bmi.n	800532e <_fflush_r+0x32>
 8005324:	0599      	lsls	r1, r3, #22
 8005326:	d402      	bmi.n	800532e <_fflush_r+0x32>
 8005328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800532a:	f7ff fa40 	bl	80047ae <__retarget_lock_acquire_recursive>
 800532e:	4628      	mov	r0, r5
 8005330:	4621      	mov	r1, r4
 8005332:	f7ff ff61 	bl	80051f8 <__sflush_r>
 8005336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005338:	4605      	mov	r5, r0
 800533a:	07da      	lsls	r2, r3, #31
 800533c:	d4e4      	bmi.n	8005308 <_fflush_r+0xc>
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	059b      	lsls	r3, r3, #22
 8005342:	d4e1      	bmi.n	8005308 <_fflush_r+0xc>
 8005344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005346:	f7ff fa33 	bl	80047b0 <__retarget_lock_release_recursive>
 800534a:	e7dd      	b.n	8005308 <_fflush_r+0xc>

0800534c <__swbuf_r>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	460e      	mov	r6, r1
 8005350:	4614      	mov	r4, r2
 8005352:	4605      	mov	r5, r0
 8005354:	b118      	cbz	r0, 800535e <__swbuf_r+0x12>
 8005356:	6a03      	ldr	r3, [r0, #32]
 8005358:	b90b      	cbnz	r3, 800535e <__swbuf_r+0x12>
 800535a:	f7ff f903 	bl	8004564 <__sinit>
 800535e:	69a3      	ldr	r3, [r4, #24]
 8005360:	60a3      	str	r3, [r4, #8]
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	071a      	lsls	r2, r3, #28
 8005366:	d525      	bpl.n	80053b4 <__swbuf_r+0x68>
 8005368:	6923      	ldr	r3, [r4, #16]
 800536a:	b31b      	cbz	r3, 80053b4 <__swbuf_r+0x68>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	6922      	ldr	r2, [r4, #16]
 8005370:	b2f6      	uxtb	r6, r6
 8005372:	1a98      	subs	r0, r3, r2
 8005374:	6963      	ldr	r3, [r4, #20]
 8005376:	4637      	mov	r7, r6
 8005378:	4283      	cmp	r3, r0
 800537a:	dc04      	bgt.n	8005386 <__swbuf_r+0x3a>
 800537c:	4621      	mov	r1, r4
 800537e:	4628      	mov	r0, r5
 8005380:	f7ff ffbc 	bl	80052fc <_fflush_r>
 8005384:	b9e0      	cbnz	r0, 80053c0 <__swbuf_r+0x74>
 8005386:	68a3      	ldr	r3, [r4, #8]
 8005388:	3b01      	subs	r3, #1
 800538a:	60a3      	str	r3, [r4, #8]
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	6022      	str	r2, [r4, #0]
 8005392:	701e      	strb	r6, [r3, #0]
 8005394:	6962      	ldr	r2, [r4, #20]
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	429a      	cmp	r2, r3
 800539a:	d004      	beq.n	80053a6 <__swbuf_r+0x5a>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	07db      	lsls	r3, r3, #31
 80053a0:	d506      	bpl.n	80053b0 <__swbuf_r+0x64>
 80053a2:	2e0a      	cmp	r6, #10
 80053a4:	d104      	bne.n	80053b0 <__swbuf_r+0x64>
 80053a6:	4621      	mov	r1, r4
 80053a8:	4628      	mov	r0, r5
 80053aa:	f7ff ffa7 	bl	80052fc <_fflush_r>
 80053ae:	b938      	cbnz	r0, 80053c0 <__swbuf_r+0x74>
 80053b0:	4638      	mov	r0, r7
 80053b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b4:	4621      	mov	r1, r4
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 f806 	bl	80053c8 <__swsetup_r>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d0d5      	beq.n	800536c <__swbuf_r+0x20>
 80053c0:	f04f 37ff 	mov.w	r7, #4294967295
 80053c4:	e7f4      	b.n	80053b0 <__swbuf_r+0x64>
	...

080053c8 <__swsetup_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <__swsetup_r+0xac>)
 80053cc:	4605      	mov	r5, r0
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	460c      	mov	r4, r1
 80053d2:	b118      	cbz	r0, 80053dc <__swsetup_r+0x14>
 80053d4:	6a03      	ldr	r3, [r0, #32]
 80053d6:	b90b      	cbnz	r3, 80053dc <__swsetup_r+0x14>
 80053d8:	f7ff f8c4 	bl	8004564 <__sinit>
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053e2:	0718      	lsls	r0, r3, #28
 80053e4:	d422      	bmi.n	800542c <__swsetup_r+0x64>
 80053e6:	06d9      	lsls	r1, r3, #27
 80053e8:	d407      	bmi.n	80053fa <__swsetup_r+0x32>
 80053ea:	2309      	movs	r3, #9
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053f2:	f04f 30ff 	mov.w	r0, #4294967295
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	e034      	b.n	8005464 <__swsetup_r+0x9c>
 80053fa:	0758      	lsls	r0, r3, #29
 80053fc:	d512      	bpl.n	8005424 <__swsetup_r+0x5c>
 80053fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005400:	b141      	cbz	r1, 8005414 <__swsetup_r+0x4c>
 8005402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005406:	4299      	cmp	r1, r3
 8005408:	d002      	beq.n	8005410 <__swsetup_r+0x48>
 800540a:	4628      	mov	r0, r5
 800540c:	f7ff f9d2 	bl	80047b4 <_free_r>
 8005410:	2300      	movs	r3, #0
 8005412:	6363      	str	r3, [r4, #52]	; 0x34
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	2300      	movs	r3, #0
 800541e:	6063      	str	r3, [r4, #4]
 8005420:	6923      	ldr	r3, [r4, #16]
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	f043 0308 	orr.w	r3, r3, #8
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	6923      	ldr	r3, [r4, #16]
 800542e:	b94b      	cbnz	r3, 8005444 <__swsetup_r+0x7c>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543a:	d003      	beq.n	8005444 <__swsetup_r+0x7c>
 800543c:	4621      	mov	r1, r4
 800543e:	4628      	mov	r0, r5
 8005440:	f000 f8b4 	bl	80055ac <__smakebuf_r>
 8005444:	89a0      	ldrh	r0, [r4, #12]
 8005446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800544a:	f010 0301 	ands.w	r3, r0, #1
 800544e:	d00a      	beq.n	8005466 <__swsetup_r+0x9e>
 8005450:	2300      	movs	r3, #0
 8005452:	60a3      	str	r3, [r4, #8]
 8005454:	6963      	ldr	r3, [r4, #20]
 8005456:	425b      	negs	r3, r3
 8005458:	61a3      	str	r3, [r4, #24]
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	b943      	cbnz	r3, 8005470 <__swsetup_r+0xa8>
 800545e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005462:	d1c4      	bne.n	80053ee <__swsetup_r+0x26>
 8005464:	bd38      	pop	{r3, r4, r5, pc}
 8005466:	0781      	lsls	r1, r0, #30
 8005468:	bf58      	it	pl
 800546a:	6963      	ldrpl	r3, [r4, #20]
 800546c:	60a3      	str	r3, [r4, #8]
 800546e:	e7f4      	b.n	800545a <__swsetup_r+0x92>
 8005470:	2000      	movs	r0, #0
 8005472:	e7f7      	b.n	8005464 <__swsetup_r+0x9c>
 8005474:	200000c4 	.word	0x200000c4

08005478 <memmove>:
 8005478:	4288      	cmp	r0, r1
 800547a:	b510      	push	{r4, lr}
 800547c:	eb01 0402 	add.w	r4, r1, r2
 8005480:	d902      	bls.n	8005488 <memmove+0x10>
 8005482:	4284      	cmp	r4, r0
 8005484:	4623      	mov	r3, r4
 8005486:	d807      	bhi.n	8005498 <memmove+0x20>
 8005488:	1e43      	subs	r3, r0, #1
 800548a:	42a1      	cmp	r1, r4
 800548c:	d008      	beq.n	80054a0 <memmove+0x28>
 800548e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005496:	e7f8      	b.n	800548a <memmove+0x12>
 8005498:	4601      	mov	r1, r0
 800549a:	4402      	add	r2, r0
 800549c:	428a      	cmp	r2, r1
 800549e:	d100      	bne.n	80054a2 <memmove+0x2a>
 80054a0:	bd10      	pop	{r4, pc}
 80054a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054aa:	e7f7      	b.n	800549c <memmove+0x24>

080054ac <_sbrk_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	2300      	movs	r3, #0
 80054b0:	4d05      	ldr	r5, [pc, #20]	; (80054c8 <_sbrk_r+0x1c>)
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	f7fc f938 	bl	800172c <_sbrk>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_sbrk_r+0x1a>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_sbrk_r+0x1a>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	2000047c 	.word	0x2000047c

080054cc <memchr>:
 80054cc:	4603      	mov	r3, r0
 80054ce:	b510      	push	{r4, lr}
 80054d0:	b2c9      	uxtb	r1, r1
 80054d2:	4402      	add	r2, r0
 80054d4:	4293      	cmp	r3, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	d101      	bne.n	80054de <memchr+0x12>
 80054da:	2000      	movs	r0, #0
 80054dc:	e003      	b.n	80054e6 <memchr+0x1a>
 80054de:	7804      	ldrb	r4, [r0, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	428c      	cmp	r4, r1
 80054e4:	d1f6      	bne.n	80054d4 <memchr+0x8>
 80054e6:	bd10      	pop	{r4, pc}

080054e8 <memcpy>:
 80054e8:	440a      	add	r2, r1
 80054ea:	4291      	cmp	r1, r2
 80054ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80054f0:	d100      	bne.n	80054f4 <memcpy+0xc>
 80054f2:	4770      	bx	lr
 80054f4:	b510      	push	{r4, lr}
 80054f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054fa:	4291      	cmp	r1, r2
 80054fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005500:	d1f9      	bne.n	80054f6 <memcpy+0xe>
 8005502:	bd10      	pop	{r4, pc}

08005504 <_realloc_r>:
 8005504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005508:	4680      	mov	r8, r0
 800550a:	4614      	mov	r4, r2
 800550c:	460e      	mov	r6, r1
 800550e:	b921      	cbnz	r1, 800551a <_realloc_r+0x16>
 8005510:	4611      	mov	r1, r2
 8005512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005516:	f7ff b9b5 	b.w	8004884 <_malloc_r>
 800551a:	b92a      	cbnz	r2, 8005528 <_realloc_r+0x24>
 800551c:	f7ff f94a 	bl	80047b4 <_free_r>
 8005520:	4625      	mov	r5, r4
 8005522:	4628      	mov	r0, r5
 8005524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005528:	f000 f89e 	bl	8005668 <_malloc_usable_size_r>
 800552c:	4284      	cmp	r4, r0
 800552e:	4607      	mov	r7, r0
 8005530:	d802      	bhi.n	8005538 <_realloc_r+0x34>
 8005532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005536:	d812      	bhi.n	800555e <_realloc_r+0x5a>
 8005538:	4621      	mov	r1, r4
 800553a:	4640      	mov	r0, r8
 800553c:	f7ff f9a2 	bl	8004884 <_malloc_r>
 8005540:	4605      	mov	r5, r0
 8005542:	2800      	cmp	r0, #0
 8005544:	d0ed      	beq.n	8005522 <_realloc_r+0x1e>
 8005546:	42bc      	cmp	r4, r7
 8005548:	4622      	mov	r2, r4
 800554a:	4631      	mov	r1, r6
 800554c:	bf28      	it	cs
 800554e:	463a      	movcs	r2, r7
 8005550:	f7ff ffca 	bl	80054e8 <memcpy>
 8005554:	4631      	mov	r1, r6
 8005556:	4640      	mov	r0, r8
 8005558:	f7ff f92c 	bl	80047b4 <_free_r>
 800555c:	e7e1      	b.n	8005522 <_realloc_r+0x1e>
 800555e:	4635      	mov	r5, r6
 8005560:	e7df      	b.n	8005522 <_realloc_r+0x1e>

08005562 <__swhatbuf_r>:
 8005562:	b570      	push	{r4, r5, r6, lr}
 8005564:	460c      	mov	r4, r1
 8005566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556a:	4615      	mov	r5, r2
 800556c:	2900      	cmp	r1, #0
 800556e:	461e      	mov	r6, r3
 8005570:	b096      	sub	sp, #88	; 0x58
 8005572:	da0c      	bge.n	800558e <__swhatbuf_r+0x2c>
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	2100      	movs	r1, #0
 8005578:	f013 0f80 	tst.w	r3, #128	; 0x80
 800557c:	bf0c      	ite	eq
 800557e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005582:	2340      	movne	r3, #64	; 0x40
 8005584:	2000      	movs	r0, #0
 8005586:	6031      	str	r1, [r6, #0]
 8005588:	602b      	str	r3, [r5, #0]
 800558a:	b016      	add	sp, #88	; 0x58
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	466a      	mov	r2, sp
 8005590:	f000 f848 	bl	8005624 <_fstat_r>
 8005594:	2800      	cmp	r0, #0
 8005596:	dbed      	blt.n	8005574 <__swhatbuf_r+0x12>
 8005598:	9901      	ldr	r1, [sp, #4]
 800559a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800559e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80055a2:	4259      	negs	r1, r3
 80055a4:	4159      	adcs	r1, r3
 80055a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055aa:	e7eb      	b.n	8005584 <__swhatbuf_r+0x22>

080055ac <__smakebuf_r>:
 80055ac:	898b      	ldrh	r3, [r1, #12]
 80055ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055b0:	079d      	lsls	r5, r3, #30
 80055b2:	4606      	mov	r6, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	d507      	bpl.n	80055c8 <__smakebuf_r+0x1c>
 80055b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	6123      	str	r3, [r4, #16]
 80055c0:	2301      	movs	r3, #1
 80055c2:	6163      	str	r3, [r4, #20]
 80055c4:	b002      	add	sp, #8
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	466a      	mov	r2, sp
 80055ca:	ab01      	add	r3, sp, #4
 80055cc:	f7ff ffc9 	bl	8005562 <__swhatbuf_r>
 80055d0:	9900      	ldr	r1, [sp, #0]
 80055d2:	4605      	mov	r5, r0
 80055d4:	4630      	mov	r0, r6
 80055d6:	f7ff f955 	bl	8004884 <_malloc_r>
 80055da:	b948      	cbnz	r0, 80055f0 <__smakebuf_r+0x44>
 80055dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e0:	059a      	lsls	r2, r3, #22
 80055e2:	d4ef      	bmi.n	80055c4 <__smakebuf_r+0x18>
 80055e4:	f023 0303 	bic.w	r3, r3, #3
 80055e8:	f043 0302 	orr.w	r3, r3, #2
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	e7e3      	b.n	80055b8 <__smakebuf_r+0xc>
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	6020      	str	r0, [r4, #0]
 80055f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	9b00      	ldr	r3, [sp, #0]
 80055fc:	6120      	str	r0, [r4, #16]
 80055fe:	6163      	str	r3, [r4, #20]
 8005600:	9b01      	ldr	r3, [sp, #4]
 8005602:	b15b      	cbz	r3, 800561c <__smakebuf_r+0x70>
 8005604:	4630      	mov	r0, r6
 8005606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800560a:	f000 f81d 	bl	8005648 <_isatty_r>
 800560e:	b128      	cbz	r0, 800561c <__smakebuf_r+0x70>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	431d      	orrs	r5, r3
 8005620:	81a5      	strh	r5, [r4, #12]
 8005622:	e7cf      	b.n	80055c4 <__smakebuf_r+0x18>

08005624 <_fstat_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	2300      	movs	r3, #0
 8005628:	4d06      	ldr	r5, [pc, #24]	; (8005644 <_fstat_r+0x20>)
 800562a:	4604      	mov	r4, r0
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	602b      	str	r3, [r5, #0]
 8005632:	f7fc f855 	bl	80016e0 <_fstat>
 8005636:	1c43      	adds	r3, r0, #1
 8005638:	d102      	bne.n	8005640 <_fstat_r+0x1c>
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	b103      	cbz	r3, 8005640 <_fstat_r+0x1c>
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	bd38      	pop	{r3, r4, r5, pc}
 8005642:	bf00      	nop
 8005644:	2000047c 	.word	0x2000047c

08005648 <_isatty_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	2300      	movs	r3, #0
 800564c:	4d05      	ldr	r5, [pc, #20]	; (8005664 <_isatty_r+0x1c>)
 800564e:	4604      	mov	r4, r0
 8005650:	4608      	mov	r0, r1
 8005652:	602b      	str	r3, [r5, #0]
 8005654:	f7fc f853 	bl	80016fe <_isatty>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_isatty_r+0x1a>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	b103      	cbz	r3, 8005662 <_isatty_r+0x1a>
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	2000047c 	.word	0x2000047c

08005668 <_malloc_usable_size_r>:
 8005668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800566c:	1f18      	subs	r0, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	bfbc      	itt	lt
 8005672:	580b      	ldrlt	r3, [r1, r0]
 8005674:	18c0      	addlt	r0, r0, r3
 8005676:	4770      	bx	lr

08005678 <_init>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr

08005684 <_fini>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	bf00      	nop
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr
