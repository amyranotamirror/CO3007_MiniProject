
PEDESTRIAN_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005858  08005858  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08005858  08005858  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005858  08005858  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08005860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200000bc  0800591c  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800591c  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e3c7  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002877  00000000  00000000  0002e4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00030d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b32  00000000  00000000  00031bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019198  00000000  00000000  00032722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f81  00000000  00000000  0004b8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088b94  00000000  00000000  0005e83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ea8  00000000  00000000  000e73d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000eb278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	080057b8 	.word	0x080057b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	080057b8 	.word	0x080057b8

0800014c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	; (8000240 <buttonReading+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	; (8000244 <buttonReading+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	; (8000248 <buttonReading+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	; (8000240 <buttonReading+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <buttonReading+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	; (8000250 <buttonReading+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f002 fc4b 	bl	8002a20 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <buttonReading+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2c      	ldr	r2, [pc, #176]	; (8000248 <buttonReading+0xfc>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	; (8000240 <buttonReading+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d143      	bne.n	800022a <buttonReading+0xde>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a28      	ldr	r2, [pc, #160]	; (8000248 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <buttonReading+0xf8>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d13b      	bne.n	800022a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a27      	ldr	r2, [pc, #156]	; (8000254 <buttonReading+0x108>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4923      	ldr	r1, [pc, #140]	; (8000248 <buttonReading+0xfc>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	; (8000248 <buttonReading+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	; (8000254 <buttonReading+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a20      	ldr	r2, [pc, #128]	; (8000254 <buttonReading+0x108>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d128      	bne.n	800022a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <buttonReading+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / TIMER_TICK;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <buttonReading+0x110>)
 80001e4:	21c8      	movs	r1, #200	; 0xc8
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001ea:	e01e      	b.n	800022a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <buttonReading+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d119      	bne.n	800022a <buttonReading+0xde>
					buttonCounters[i] --;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <buttonReading+0x110>)
 80001fa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80001fe:	b292      	uxth	r2, r2
 8000200:	3a01      	subs	r2, #1
 8000202:	b292      	uxth	r2, r2
 8000204:	b211      	sxth	r1, r2
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <buttonReading+0x110>)
 8000208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <buttonReading+0x110>)
 8000210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dc08      	bgt.n	800022a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <buttonReading+0x10c>)
 800021c:	2101      	movs	r1, #1
 800021e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / TIMER_TICK;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a0e      	ldr	r2, [pc, #56]	; (800025c <buttonReading+0x110>)
 8000224:	2114      	movs	r1, #20
 8000226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d990      	bls.n	8000158 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	200000e0 	.word	0x200000e0
 8000244:	200000e4 	.word	0x200000e4
 8000248:	200000dc 	.word	0x200000dc
 800024c:	20000000 	.word	0x20000000
 8000250:	20000010 	.word	0x20000010
 8000254:	200000d8 	.word	0x200000d8
 8000258:	200000e8 	.word	0x200000e8
 800025c:	200000ec 	.word	0x200000ec

08000260 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d901      	bls.n	8000274 <buttonPressed+0x14>
 8000270:	2300      	movs	r3, #0
 8000272:	e00b      	b.n	800028c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <buttonPressed+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d105      	bne.n	800028a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a05      	ldr	r2, [pc, #20]	; (8000298 <buttonPressed+0x38>)
 8000282:	2100      	movs	r1, #0
 8000284:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <buttonPressed+0x2c>
	}
	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	200000e8 	.word	0x200000e8

0800029c <buzzer0Set>:

#include "buzzer.h"

extern TIM_HandleTypeDef htim3;

void buzzer0Set(uint8_t volume){
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	// Ensure volume stays in the range: 0% - 100%
	if (volume < BUZZER_VOLUME_MIN) {
		volume = BUZZER_VOLUME_MIN;
	}
	if (volume > BUZZER_VOLUME_MAX) {
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b64      	cmp	r3, #100	; 0x64
 80002aa:	d901      	bls.n	80002b0 <buzzer0Set+0x14>
        volume = BUZZER_VOLUME_MAX;
 80002ac:	2364      	movs	r3, #100	; 0x64
 80002ae:	71fb      	strb	r3, [r7, #7]
	}

    // Calculate and set PWM to Buzzer
    uint32_t pulseWidth = BUZZER_MAX * BUZZER_RATIO * volume / 100;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <buzzer0Set+0x48>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	2232      	movs	r2, #50	; 0x32
 80002b6:	fb02 f303 	mul.w	r3, r2, r3
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <buzzer0Set+0x4c>)
 80002bc:	fba2 2303 	umull	r2, r3, r2, r3
 80002c0:	095b      	lsrs	r3, r3, #5
 80002c2:	79fa      	ldrb	r2, [r7, #7]
 80002c4:	fb02 f303 	mul.w	r3, r2, r3
 80002c8:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <buzzer0Set+0x4c>)
 80002ca:	fba2 2303 	umull	r2, r3, r2, r3
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseWidth);
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <buzzer0Set+0x48>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	2000015c 	.word	0x2000015c
 80002e8:	51eb851f 	.word	0x51eb851f

080002ec <buzzer1Set>:

void buzzer1Set(uint8_t volume){
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
    // Ensure volume stays in the range: 0% - 100%
	if (volume < BUZZER_VOLUME_MIN) {
		volume = BUZZER_VOLUME_MIN;
	}
	if (volume > BUZZER_VOLUME_MAX) {
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b64      	cmp	r3, #100	; 0x64
 80002fa:	d901      	bls.n	8000300 <buzzer1Set+0x14>
        volume = BUZZER_VOLUME_MAX;
 80002fc:	2364      	movs	r3, #100	; 0x64
 80002fe:	71fb      	strb	r3, [r7, #7]
	}

    // Calculate and set PWM to Buzzer
    uint32_t pulseWidth = BUZZER_MAX * BUZZER_RATIO * volume / 100;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <buzzer1Set+0x48>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	2232      	movs	r2, #50	; 0x32
 8000306:	fb02 f303 	mul.w	r3, r2, r3
 800030a:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <buzzer1Set+0x4c>)
 800030c:	fba2 2303 	umull	r2, r3, r2, r3
 8000310:	095b      	lsrs	r3, r3, #5
 8000312:	79fa      	ldrb	r2, [r7, #7]
 8000314:	fb02 f303 	mul.w	r3, r2, r3
 8000318:	4a07      	ldr	r2, [pc, #28]	; (8000338 <buzzer1Set+0x4c>)
 800031a:	fba2 2303 	umull	r2, r3, r2, r3
 800031e:	095b      	lsrs	r3, r3, #5
 8000320:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseWidth);
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <buzzer1Set+0x48>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	639a      	str	r2, [r3, #56]	; 0x38
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	2000015c 	.word	0x2000015c
 8000338:	51eb851f 	.word	0x51eb851f

0800033c <buzzer0On>:

void buzzer0On(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	if (pedestrianCounters[0] > BUZZER_TIMEOUT) {
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <buzzer0On+0x44>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000348:	d903      	bls.n	8000352 <buzzer0On+0x16>
		buzzer0Set(BUZZER_VOLUME_AUTO);
 800034a:	200a      	movs	r0, #10
 800034c:	f7ff ffa6 	bl	800029c <buzzer0Set>
	}
	else {
		buzzer0Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[0]) / BUZZER_TIMEOUT);
	}
}
 8000350:	e013      	b.n	800037a <buzzer0On+0x3e>
		buzzer0Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[0]) / BUZZER_TIMEOUT);
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <buzzer0On+0x44>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800035a:	fb02 f303 	mul.w	r3, r2, r3
 800035e:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 8000362:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <buzzer0On+0x48>)
 8000368:	fba2 2303 	umull	r2, r3, r2, r3
 800036c:	09db      	lsrs	r3, r3, #7
 800036e:	b2db      	uxtb	r3, r3
 8000370:	330a      	adds	r3, #10
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff91 	bl	800029c <buzzer0Set>
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200001f4 	.word	0x200001f4
 8000384:	10624dd3 	.word	0x10624dd3

08000388 <buzzer0Off>:

void buzzer0Off(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	buzzer0Set(0);
 800038c:	2000      	movs	r0, #0
 800038e:	f7ff ff85 	bl	800029c <buzzer0Set>
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <buzzer1On>:

void buzzer1On(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	if (pedestrianCounters[1] > BUZZER_TIMEOUT) {
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <buzzer1On+0x44>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003a4:	d903      	bls.n	80003ae <buzzer1On+0x16>
		buzzer1Set(BUZZER_VOLUME_AUTO);
 80003a6:	200a      	movs	r0, #10
 80003a8:	f7ff ffa0 	bl	80002ec <buzzer1Set>
	}
	else {
		buzzer1Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[1]) / BUZZER_TIMEOUT);
	}
}
 80003ac:	e013      	b.n	80003d6 <buzzer1On+0x3e>
		buzzer1Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[1]) / BUZZER_TIMEOUT);
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <buzzer1On+0x44>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80003b6:	fb02 f303 	mul.w	r3, r2, r3
 80003ba:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 80003be:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80003c2:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <buzzer1On+0x48>)
 80003c4:	fba2 2303 	umull	r2, r3, r2, r3
 80003c8:	09db      	lsrs	r3, r3, #7
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	330a      	adds	r3, #10
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff8b 	bl	80002ec <buzzer1Set>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200001f4 	.word	0x200001f4
 80003e0:	10624dd3 	.word	0x10624dd3

080003e4 <buzzer1Off>:

void buzzer1Off(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	buzzer1Set(0);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f7ff ff7f 	bl	80002ec <buzzer1Set>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <counterRun>:
 *      Author: Nhat Khai
 */

#include "counter.h"

void counterRun(void) {
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	if (trafficCounters[0] > TIMER_TICK) {
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <counterRun+0x74>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b0a      	cmp	r3, #10
 80003fe:	d905      	bls.n	800040c <counterRun+0x18>
		trafficCounters[0] -= TIMER_TICK;
 8000400:	4b19      	ldr	r3, [pc, #100]	; (8000468 <counterRun+0x74>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	3b0a      	subs	r3, #10
 8000406:	4a18      	ldr	r2, [pc, #96]	; (8000468 <counterRun+0x74>)
 8000408:	6013      	str	r3, [r2, #0]
 800040a:	e002      	b.n	8000412 <counterRun+0x1e>
	}
	else {
		trafficCounters[0] = 0;
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <counterRun+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	}
	if (trafficCounters[1] > TIMER_TICK) {
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <counterRun+0x74>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	2b0a      	cmp	r3, #10
 8000418:	d905      	bls.n	8000426 <counterRun+0x32>
		trafficCounters[1] -= TIMER_TICK;
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <counterRun+0x74>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	3b0a      	subs	r3, #10
 8000420:	4a11      	ldr	r2, [pc, #68]	; (8000468 <counterRun+0x74>)
 8000422:	6053      	str	r3, [r2, #4]
 8000424:	e002      	b.n	800042c <counterRun+0x38>
	}
	else {
		trafficCounters[1] = 0;
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <counterRun+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	605a      	str	r2, [r3, #4]
	}
	if (pedestrianCounters[0] > TIMER_TICK) {
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <counterRun+0x78>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b0a      	cmp	r3, #10
 8000432:	d905      	bls.n	8000440 <counterRun+0x4c>
		pedestrianCounters[0] -= TIMER_TICK;
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <counterRun+0x78>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	3b0a      	subs	r3, #10
 800043a:	4a0c      	ldr	r2, [pc, #48]	; (800046c <counterRun+0x78>)
 800043c:	6013      	str	r3, [r2, #0]
 800043e:	e002      	b.n	8000446 <counterRun+0x52>
	}
	else {
		pedestrianCounters[0] = 0;
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <counterRun+0x78>)
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
	}
	if (pedestrianCounters[1] > TIMER_TICK) {
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <counterRun+0x78>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	2b0a      	cmp	r3, #10
 800044c:	d905      	bls.n	800045a <counterRun+0x66>
		pedestrianCounters[1] -= TIMER_TICK;
 800044e:	4b07      	ldr	r3, [pc, #28]	; (800046c <counterRun+0x78>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	3b0a      	subs	r3, #10
 8000454:	4a05      	ldr	r2, [pc, #20]	; (800046c <counterRun+0x78>)
 8000456:	6053      	str	r3, [r2, #4]
	}
	else {
		pedestrianCounters[1] = 0;
	}
}
 8000458:	e002      	b.n	8000460 <counterRun+0x6c>
		pedestrianCounters[1] = 0;
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <counterRun+0x78>)
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	20000394 	.word	0x20000394
 800046c:	200001f4 	.word	0x200001f4

08000470 <counterReset>:

void counterReset(void) {
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
	trafficCounters[0] = 0;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <counterReset+0x24>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
	trafficCounters[1] = 0;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <counterReset+0x24>)
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
	pedestrianCounters[0] = 0;
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <counterReset+0x28>)
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
	pedestrianCounters[1] = 0;
 8000486:	4b04      	ldr	r3, [pc, #16]	; (8000498 <counterReset+0x28>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	20000394 	.word	0x20000394
 8000498:	200001f4 	.word	0x200001f4

0800049c <fsmAutoStop>:
static uint8_t fsmIDs[FSM_TASK] = {};
static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmAutoStop(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	SCH_AddTask(counterReset, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	4807      	ldr	r0, [pc, #28]	; (80004c4 <fsmAutoStop+0x28>)
 80004a6:	f001 f81d 	bl	80014e4 <SCH_AddTask>
	SCH_AddTask(pedestrian0Off, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <fsmAutoStop+0x2c>)
 80004b0:	f001 f818 	bl	80014e4 <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	4804      	ldr	r0, [pc, #16]	; (80004cc <fsmAutoStop+0x30>)
 80004ba:	f001 f813 	bl	80014e4 <SCH_AddTask>
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	08000471 	.word	0x08000471
 80004c8:	080013a9 	.word	0x080013a9
 80004cc:	080013bd 	.word	0x080013bd

080004d0 <fsmAutoProcessing>:

void fsmAutoProcessing(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 80004d4:	2001      	movs	r0, #1
 80004d6:	f7ff fec3 	bl	8000260 <buttonPressed>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d008      	beq.n	80004f2 <fsmAutoProcessing+0x22>
		fsmAutoIDs[9] = SCH_AddTask(pedestrian0On, 0, TIMER_TICK);
 80004e0:	220a      	movs	r2, #10
 80004e2:	2100      	movs	r1, #0
 80004e4:	481d      	ldr	r0, [pc, #116]	; (800055c <fsmAutoProcessing+0x8c>)
 80004e6:	f000 fffd 	bl	80014e4 <SCH_AddTask>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <fsmAutoProcessing+0x90>)
 80004f0:	725a      	strb	r2, [r3, #9]
	}
	if (pedestrianStates[0] == PEDESTRIAN_GREEN && pedestrianCounters[0] <= 10) {
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <fsmAutoProcessing+0x94>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d10d      	bne.n	8000516 <fsmAutoProcessing+0x46>
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <fsmAutoProcessing+0x98>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b0a      	cmp	r3, #10
 8000500:	d809      	bhi.n	8000516 <fsmAutoProcessing+0x46>
		SCH_DeleteTask(fsmAutoIDs[9]);
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <fsmAutoProcessing+0x90>)
 8000504:	7a5b      	ldrb	r3, [r3, #9]
 8000506:	4618      	mov	r0, r3
 8000508:	f001 f8f2 	bl	80016f0 <SCH_DeleteTask>
		SCH_AddTask(pedestrian0Off, 10, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	210a      	movs	r1, #10
 8000510:	4816      	ldr	r0, [pc, #88]	; (800056c <fsmAutoProcessing+0x9c>)
 8000512:	f000 ffe7 	bl	80014e4 <SCH_AddTask>
	}
	if (buttonPressed(2)) {
 8000516:	2002      	movs	r0, #2
 8000518:	f7ff fea2 	bl	8000260 <buttonPressed>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d008      	beq.n	8000534 <fsmAutoProcessing+0x64>
		fsmAutoIDs[10] = SCH_AddTask(pedestrian1On, 0, TIMER_TICK);
 8000522:	220a      	movs	r2, #10
 8000524:	2100      	movs	r1, #0
 8000526:	4812      	ldr	r0, [pc, #72]	; (8000570 <fsmAutoProcessing+0xa0>)
 8000528:	f000 ffdc 	bl	80014e4 <SCH_AddTask>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <fsmAutoProcessing+0x90>)
 8000532:	729a      	strb	r2, [r3, #10]
	}
	if (pedestrianStates[1] == PEDESTRIAN_GREEN && pedestrianCounters[1] <= 10) {
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <fsmAutoProcessing+0x94>)
 8000536:	785b      	ldrb	r3, [r3, #1]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d10d      	bne.n	8000558 <fsmAutoProcessing+0x88>
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <fsmAutoProcessing+0x98>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2b0a      	cmp	r3, #10
 8000542:	d809      	bhi.n	8000558 <fsmAutoProcessing+0x88>
		SCH_DeleteTask(fsmAutoIDs[10]);
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <fsmAutoProcessing+0x90>)
 8000546:	7a9b      	ldrb	r3, [r3, #10]
 8000548:	4618      	mov	r0, r3
 800054a:	f001 f8d1 	bl	80016f0 <SCH_DeleteTask>
		SCH_AddTask(pedestrian1Off, 10, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	210a      	movs	r1, #10
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <fsmAutoProcessing+0xa4>)
 8000554:	f000 ffc6 	bl	80014e4 <SCH_AddTask>
	}
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	08001329 	.word	0x08001329
 8000560:	200000fc 	.word	0x200000fc
 8000564:	200001f0 	.word	0x200001f0
 8000568:	200001f4 	.word	0x200001f4
 800056c:	080013a9 	.word	0x080013a9
 8000570:	08001369 	.word	0x08001369
 8000574:	080013bd 	.word	0x080013bd

08000578 <fsmAuto>:

void fsmAuto(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	SCH_AddTask(pedestrian0Off, 0, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2100      	movs	r1, #0
 8000580:	484a      	ldr	r0, [pc, #296]	; (80006ac <fsmAuto+0x134>)
 8000582:	f000 ffaf 	bl	80014e4 <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	4849      	ldr	r0, [pc, #292]	; (80006b0 <fsmAuto+0x138>)
 800058c:	f000 ffaa 	bl	80014e4 <SCH_AddTask>
	fsmAutoIDs[0] = SCH_AddTask(fsmAutoProcessing, 10, TIMER_TICK);
 8000590:	220a      	movs	r2, #10
 8000592:	210a      	movs	r1, #10
 8000594:	4847      	ldr	r0, [pc, #284]	; (80006b4 <fsmAuto+0x13c>)
 8000596:	f000 ffa5 	bl	80014e4 <SCH_AddTask>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b46      	ldr	r3, [pc, #280]	; (80006b8 <fsmAuto+0x140>)
 80005a0:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(counterRun, 0, TIMER_TICK);
 80005a2:	220a      	movs	r2, #10
 80005a4:	2100      	movs	r1, #0
 80005a6:	4845      	ldr	r0, [pc, #276]	; (80006bc <fsmAuto+0x144>)
 80005a8:	f000 ff9c 	bl	80014e4 <SCH_AddTask>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b41      	ldr	r3, [pc, #260]	; (80006b8 <fsmAuto+0x140>)
 80005b2:	705a      	strb	r2, [r3, #1]
	fsmAutoIDs[2] = SCH_AddTask(uartCounter, 50, 1000);
 80005b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b8:	2132      	movs	r1, #50	; 0x32
 80005ba:	4841      	ldr	r0, [pc, #260]	; (80006c0 <fsmAuto+0x148>)
 80005bc:	f000 ff92 	bl	80014e4 <SCH_AddTask>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b3c      	ldr	r3, [pc, #240]	; (80006b8 <fsmAuto+0x140>)
 80005c6:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80005c8:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <fsmAuto+0x14c>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <fsmAuto+0x150>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	441a      	add	r2, r3
 80005d2:	4b3e      	ldr	r3, [pc, #248]	; (80006cc <fsmAuto+0x154>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	461a      	mov	r2, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	483c      	ldr	r0, [pc, #240]	; (80006d0 <fsmAuto+0x158>)
 80005de:	f000 ff81 	bl	80014e4 <SCH_AddTask>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <fsmAuto+0x140>)
 80005e8:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80005ea:	4b36      	ldr	r3, [pc, #216]	; (80006c4 <fsmAuto+0x14c>)
 80005ec:	6819      	ldr	r1, [r3, #0]
 80005ee:	4b35      	ldr	r3, [pc, #212]	; (80006c4 <fsmAuto+0x14c>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b35      	ldr	r3, [pc, #212]	; (80006c8 <fsmAuto+0x150>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	441a      	add	r2, r3
 80005f8:	4b34      	ldr	r3, [pc, #208]	; (80006cc <fsmAuto+0x154>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4413      	add	r3, r2
 80005fe:	461a      	mov	r2, r3
 8000600:	4834      	ldr	r0, [pc, #208]	; (80006d4 <fsmAuto+0x15c>)
 8000602:	f000 ff6f 	bl	80014e4 <SCH_AddTask>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <fsmAuto+0x140>)
 800060c:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800060e:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <fsmAuto+0x14c>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <fsmAuto+0x154>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	18d1      	adds	r1, r2, r3
 8000618:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <fsmAuto+0x14c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <fsmAuto+0x150>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	441a      	add	r2, r3
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <fsmAuto+0x154>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4413      	add	r3, r2
 8000628:	461a      	mov	r2, r3
 800062a:	482b      	ldr	r0, [pc, #172]	; (80006d8 <fsmAuto+0x160>)
 800062c:	f000 ff5a 	bl	80014e4 <SCH_AddTask>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <fsmAuto+0x140>)
 8000636:	715a      	strb	r2, [r3, #5]
	fsmAutoIDs[6] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <fsmAuto+0x14c>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <fsmAuto+0x150>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	441a      	add	r2, r3
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <fsmAuto+0x154>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	461a      	mov	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	4823      	ldr	r0, [pc, #140]	; (80006dc <fsmAuto+0x164>)
 800064e:	f000 ff49 	bl	80014e4 <SCH_AddTask>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <fsmAuto+0x140>)
 8000658:	719a      	strb	r2, [r3, #6]
	fsmAutoIDs[7] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <fsmAuto+0x154>)
 800065c:	6819      	ldr	r1, [r3, #0]
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <fsmAuto+0x14c>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <fsmAuto+0x150>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	441a      	add	r2, r3
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <fsmAuto+0x154>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4413      	add	r3, r2
 800066e:	461a      	mov	r2, r3
 8000670:	481b      	ldr	r0, [pc, #108]	; (80006e0 <fsmAuto+0x168>)
 8000672:	f000 ff37 	bl	80014e4 <SCH_AddTask>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <fsmAuto+0x140>)
 800067c:	71da      	strb	r2, [r3, #7]
	fsmAutoIDs[8] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <fsmAuto+0x154>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <fsmAuto+0x150>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	18d1      	adds	r1, r2, r3
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <fsmAuto+0x14c>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <fsmAuto+0x150>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	441a      	add	r2, r3
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <fsmAuto+0x154>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	461a      	mov	r2, r3
 800069a:	4812      	ldr	r0, [pc, #72]	; (80006e4 <fsmAuto+0x16c>)
 800069c:	f000 ff22 	bl	80014e4 <SCH_AddTask>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <fsmAuto+0x140>)
 80006a6:	721a      	strb	r2, [r3, #8]
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	080013a9 	.word	0x080013a9
 80006b0:	080013bd 	.word	0x080013bd
 80006b4:	080004d1 	.word	0x080004d1
 80006b8:	200000fc 	.word	0x200000fc
 80006bc:	080003f5 	.word	0x080003f5
 80006c0:	08002255 	.word	0x08002255
 80006c4:	20000034 	.word	0x20000034
 80006c8:	2000003c 	.word	0x2000003c
 80006cc:	20000038 	.word	0x20000038
 80006d0:	080020dd 	.word	0x080020dd
 80006d4:	080020ed 	.word	0x080020ed
 80006d8:	080020fd 	.word	0x080020fd
 80006dc:	0800212d 	.word	0x0800212d
 80006e0:	0800213d 	.word	0x0800213d
 80006e4:	0800211d 	.word	0x0800211d

080006e8 <fsmManualStop>:

void fsmManualStop(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	SCH_AddTask(traffic0Off, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <fsmManualStop+0x30>)
 80006f2:	f000 fef7 	bl	80014e4 <SCH_AddTask>
	SCH_AddTask(traffic1Off, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	4808      	ldr	r0, [pc, #32]	; (800071c <fsmManualStop+0x34>)
 80006fc:	f000 fef2 	bl	80014e4 <SCH_AddTask>
	SCH_AddTask(pedestrian0Off, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <fsmManualStop+0x38>)
 8000706:	f000 feed 	bl	80014e4 <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <fsmManualStop+0x3c>)
 8000710:	f000 fee8 	bl	80014e4 <SCH_AddTask>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	080020cd 	.word	0x080020cd
 800071c:	0800210d 	.word	0x0800210d
 8000720:	080013a9 	.word	0x080013a9
 8000724:	080013bd 	.word	0x080013bd

08000728 <fsmManualProcessing>:

void fsmManualProcessing(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff fd97 	bl	8000260 <buttonPressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d01d      	beq.n	8000774 <fsmManualProcessing+0x4c>
		switch (trafficStates[0]) {
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <fsmManualProcessing+0x98>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b03      	cmp	r3, #3
 800073e:	d012      	beq.n	8000766 <fsmManualProcessing+0x3e>
 8000740:	2b03      	cmp	r3, #3
 8000742:	dc16      	bgt.n	8000772 <fsmManualProcessing+0x4a>
 8000744:	2b01      	cmp	r3, #1
 8000746:	d002      	beq.n	800074e <fsmManualProcessing+0x26>
 8000748:	2b02      	cmp	r3, #2
 800074a:	d006      	beq.n	800075a <fsmManualProcessing+0x32>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Red, 0, 0);
			break;
		default:
			break;
 800074c:	e011      	b.n	8000772 <fsmManualProcessing+0x4a>
			SCH_AddTask(traffic0Green, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	481c      	ldr	r0, [pc, #112]	; (80007c4 <fsmManualProcessing+0x9c>)
 8000754:	f000 fec6 	bl	80014e4 <SCH_AddTask>
			break;
 8000758:	e00c      	b.n	8000774 <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Yellow, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	481a      	ldr	r0, [pc, #104]	; (80007c8 <fsmManualProcessing+0xa0>)
 8000760:	f000 fec0 	bl	80014e4 <SCH_AddTask>
			break;
 8000764:	e006      	b.n	8000774 <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Red, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	4818      	ldr	r0, [pc, #96]	; (80007cc <fsmManualProcessing+0xa4>)
 800076c:	f000 feba 	bl	80014e4 <SCH_AddTask>
			break;
 8000770:	e000      	b.n	8000774 <fsmManualProcessing+0x4c>
			break;
 8000772:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 8000774:	2002      	movs	r0, #2
 8000776:	f7ff fd73 	bl	8000260 <buttonPressed>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d01d      	beq.n	80007bc <fsmManualProcessing+0x94>
		switch (trafficStates[1]) {
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <fsmManualProcessing+0x98>)
 8000782:	785b      	ldrb	r3, [r3, #1]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d012      	beq.n	80007ae <fsmManualProcessing+0x86>
 8000788:	2b03      	cmp	r3, #3
 800078a:	dc16      	bgt.n	80007ba <fsmManualProcessing+0x92>
 800078c:	2b01      	cmp	r3, #1
 800078e:	d002      	beq.n	8000796 <fsmManualProcessing+0x6e>
 8000790:	2b02      	cmp	r3, #2
 8000792:	d006      	beq.n	80007a2 <fsmManualProcessing+0x7a>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Red, 0, 0);
			break;
		default:
			break;
 8000794:	e011      	b.n	80007ba <fsmManualProcessing+0x92>
			SCH_AddTask(traffic1Green, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <fsmManualProcessing+0xa8>)
 800079c:	f000 fea2 	bl	80014e4 <SCH_AddTask>
			break;
 80007a0:	e00c      	b.n	80007bc <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Yellow, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	480b      	ldr	r0, [pc, #44]	; (80007d4 <fsmManualProcessing+0xac>)
 80007a8:	f000 fe9c 	bl	80014e4 <SCH_AddTask>
			break;
 80007ac:	e006      	b.n	80007bc <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Red, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	4809      	ldr	r0, [pc, #36]	; (80007d8 <fsmManualProcessing+0xb0>)
 80007b4:	f000 fe96 	bl	80014e4 <SCH_AddTask>
			break;
 80007b8:	e000      	b.n	80007bc <fsmManualProcessing+0x94>
			break;
 80007ba:	bf00      	nop
		}
	}
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000390 	.word	0x20000390
 80007c4:	080020ed 	.word	0x080020ed
 80007c8:	080020fd 	.word	0x080020fd
 80007cc:	080020dd 	.word	0x080020dd
 80007d0:	0800212d 	.word	0x0800212d
 80007d4:	0800213d 	.word	0x0800213d
 80007d8:	0800211d 	.word	0x0800211d

080007dc <fsmManual>:

void fsmManual(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	fsmManualIDs[0] = SCH_AddTask(fsmManualProcessing, 10, TIMER_TICK);
 80007e0:	220a      	movs	r2, #10
 80007e2:	210a      	movs	r1, #10
 80007e4:	4812      	ldr	r0, [pc, #72]	; (8000830 <fsmManual+0x54>)
 80007e6:	f000 fe7d 	bl	80014e4 <SCH_AddTask>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <fsmManual+0x58>)
 80007f0:	701a      	strb	r2, [r3, #0]
	fsmManualIDs[1] = SCH_AddTask(pedestrian0On, 0, TIMER_TICK);
 80007f2:	220a      	movs	r2, #10
 80007f4:	2100      	movs	r1, #0
 80007f6:	4810      	ldr	r0, [pc, #64]	; (8000838 <fsmManual+0x5c>)
 80007f8:	f000 fe74 	bl	80014e4 <SCH_AddTask>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <fsmManual+0x58>)
 8000802:	705a      	strb	r2, [r3, #1]
	fsmManualIDs[2] = SCH_AddTask(pedestrian1On, 0, TIMER_TICK);
 8000804:	220a      	movs	r2, #10
 8000806:	2100      	movs	r1, #0
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <fsmManual+0x60>)
 800080a:	f000 fe6b 	bl	80014e4 <SCH_AddTask>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <fsmManual+0x58>)
 8000814:	709a      	strb	r2, [r3, #2]
	// Initialize for Manual Mode
	SCH_AddTask(traffic0Red, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <fsmManual+0x64>)
 800081c:	f000 fe62 	bl	80014e4 <SCH_AddTask>
	SCH_AddTask(traffic1Green, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	4807      	ldr	r0, [pc, #28]	; (8000844 <fsmManual+0x68>)
 8000826:	f000 fe5d 	bl	80014e4 <SCH_AddTask>
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	08000729 	.word	0x08000729
 8000834:	20000108 	.word	0x20000108
 8000838:	08001329 	.word	0x08001329
 800083c:	08001369 	.word	0x08001369
 8000840:	080020dd 	.word	0x080020dd
 8000844:	0800212d 	.word	0x0800212d

08000848 <fsmTunningStop>:

void fsmTunningStop(void) {
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
	return;
 800084c:	bf00      	nop
}
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <fsmTunningProcessing>:

void fsmTunningProcessing(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff fd01 	bl	8000260 <buttonPressed>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	f000 80cb 	beq.w	80009fc <fsmTunningProcessing+0x1a8>
		SCH_DeleteTask(fsmTunningIDs[1]);
 8000866:	4bad      	ldr	r3, [pc, #692]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 8000868:	785b      	ldrb	r3, [r3, #1]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 ff40 	bl	80016f0 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[2]);
 8000870:	4baa      	ldr	r3, [pc, #680]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 8000872:	789b      	ldrb	r3, [r3, #2]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 ff3b 	bl	80016f0 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[3]);
 800087a:	4ba8      	ldr	r3, [pc, #672]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 800087c:	78db      	ldrb	r3, [r3, #3]
 800087e:	4618      	mov	r0, r3
 8000880:	f000 ff36 	bl	80016f0 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[4]);
 8000884:	4ba5      	ldr	r3, [pc, #660]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 ff31 	bl	80016f0 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[5]);
 800088e:	4ba3      	ldr	r3, [pc, #652]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 8000890:	795b      	ldrb	r3, [r3, #5]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 ff2c 	bl	80016f0 <SCH_DeleteTask>
		switch (fsmTunningState) {
 8000898:	4ba1      	ldr	r3, [pc, #644]	; (8000b20 <fsmTunningProcessing+0x2cc>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b03      	cmp	r3, #3
 800089e:	d075      	beq.n	800098c <fsmTunningProcessing+0x138>
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	f300 80aa 	bgt.w	80009fa <fsmTunningProcessing+0x1a6>
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d002      	beq.n	80008b0 <fsmTunningProcessing+0x5c>
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d037      	beq.n	800091e <fsmTunningProcessing+0xca>
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
			fsmTunningState = TRAFFIC_RED;
			break;
		default:
			break;
 80008ae:	e0a4      	b.n	80009fa <fsmTunningProcessing+0x1a6>
			fsmTunningIDs[1] = SCH_AddTask(uartGreenDuration, 50, 100);
 80008b0:	2264      	movs	r2, #100	; 0x64
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	489b      	ldr	r0, [pc, #620]	; (8000b24 <fsmTunningProcessing+0x2d0>)
 80008b6:	f000 fe15 	bl	80014e4 <SCH_AddTask>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b97      	ldr	r3, [pc, #604]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 80008c0:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Green, 0, 1000);
 80008c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008c6:	2100      	movs	r1, #0
 80008c8:	4897      	ldr	r0, [pc, #604]	; (8000b28 <fsmTunningProcessing+0x2d4>)
 80008ca:	f000 fe0b 	bl	80014e4 <SCH_AddTask>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b92      	ldr	r3, [pc, #584]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 80008d4:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Green, 0, 1000);
 80008d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008da:	2100      	movs	r1, #0
 80008dc:	4893      	ldr	r0, [pc, #588]	; (8000b2c <fsmTunningProcessing+0x2d8>)
 80008de:	f000 fe01 	bl	80014e4 <SCH_AddTask>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b8d      	ldr	r3, [pc, #564]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 80008e8:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 80008ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008f2:	488f      	ldr	r0, [pc, #572]	; (8000b30 <fsmTunningProcessing+0x2dc>)
 80008f4:	f000 fdf6 	bl	80014e4 <SCH_AddTask>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b87      	ldr	r3, [pc, #540]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 80008fe:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 8000900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000904:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000908:	488a      	ldr	r0, [pc, #552]	; (8000b34 <fsmTunningProcessing+0x2e0>)
 800090a:	f000 fdeb 	bl	80014e4 <SCH_AddTask>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b82      	ldr	r3, [pc, #520]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 8000914:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_GREEN;
 8000916:	4b82      	ldr	r3, [pc, #520]	; (8000b20 <fsmTunningProcessing+0x2cc>)
 8000918:	2202      	movs	r2, #2
 800091a:	701a      	strb	r2, [r3, #0]
			break;
 800091c:	e06e      	b.n	80009fc <fsmTunningProcessing+0x1a8>
			fsmTunningIDs[1] = SCH_AddTask(uartYellowDuration, 50, 100);
 800091e:	2264      	movs	r2, #100	; 0x64
 8000920:	2132      	movs	r1, #50	; 0x32
 8000922:	4885      	ldr	r0, [pc, #532]	; (8000b38 <fsmTunningProcessing+0x2e4>)
 8000924:	f000 fdde 	bl	80014e4 <SCH_AddTask>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	4b7b      	ldr	r3, [pc, #492]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 800092e:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Yellow, 0, 1000);
 8000930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000934:	2100      	movs	r1, #0
 8000936:	4881      	ldr	r0, [pc, #516]	; (8000b3c <fsmTunningProcessing+0x2e8>)
 8000938:	f000 fdd4 	bl	80014e4 <SCH_AddTask>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	4b76      	ldr	r3, [pc, #472]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 8000942:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Yellow, 0, 1000);
 8000944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000948:	2100      	movs	r1, #0
 800094a:	487d      	ldr	r0, [pc, #500]	; (8000b40 <fsmTunningProcessing+0x2ec>)
 800094c:	f000 fdca 	bl	80014e4 <SCH_AddTask>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	4b71      	ldr	r3, [pc, #452]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 8000956:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 8000958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800095c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000960:	4873      	ldr	r0, [pc, #460]	; (8000b30 <fsmTunningProcessing+0x2dc>)
 8000962:	f000 fdbf 	bl	80014e4 <SCH_AddTask>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	4b6c      	ldr	r3, [pc, #432]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 800096c:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 800096e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000972:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000976:	486f      	ldr	r0, [pc, #444]	; (8000b34 <fsmTunningProcessing+0x2e0>)
 8000978:	f000 fdb4 	bl	80014e4 <SCH_AddTask>
 800097c:	4603      	mov	r3, r0
 800097e:	461a      	mov	r2, r3
 8000980:	4b66      	ldr	r3, [pc, #408]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 8000982:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_YELLOW;
 8000984:	4b66      	ldr	r3, [pc, #408]	; (8000b20 <fsmTunningProcessing+0x2cc>)
 8000986:	2203      	movs	r2, #3
 8000988:	701a      	strb	r2, [r3, #0]
			break;
 800098a:	e037      	b.n	80009fc <fsmTunningProcessing+0x1a8>
			fsmTunningIDs[1] = SCH_AddTask(uartRedDuration, 50, 100);
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	2132      	movs	r1, #50	; 0x32
 8000990:	486c      	ldr	r0, [pc, #432]	; (8000b44 <fsmTunningProcessing+0x2f0>)
 8000992:	f000 fda7 	bl	80014e4 <SCH_AddTask>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b60      	ldr	r3, [pc, #384]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 800099c:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Red, 0, 1000);
 800099e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a2:	2100      	movs	r1, #0
 80009a4:	4868      	ldr	r0, [pc, #416]	; (8000b48 <fsmTunningProcessing+0x2f4>)
 80009a6:	f000 fd9d 	bl	80014e4 <SCH_AddTask>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b5b      	ldr	r3, [pc, #364]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 80009b0:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Red, 0, 1000);
 80009b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b6:	2100      	movs	r1, #0
 80009b8:	4864      	ldr	r0, [pc, #400]	; (8000b4c <fsmTunningProcessing+0x2f8>)
 80009ba:	f000 fd93 	bl	80014e4 <SCH_AddTask>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b56      	ldr	r3, [pc, #344]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 80009c4:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 80009c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009ce:	4858      	ldr	r0, [pc, #352]	; (8000b30 <fsmTunningProcessing+0x2dc>)
 80009d0:	f000 fd88 	bl	80014e4 <SCH_AddTask>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b50      	ldr	r3, [pc, #320]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 80009da:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 80009dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009e4:	4853      	ldr	r0, [pc, #332]	; (8000b34 <fsmTunningProcessing+0x2e0>)
 80009e6:	f000 fd7d 	bl	80014e4 <SCH_AddTask>
 80009ea:	4603      	mov	r3, r0
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b4b      	ldr	r3, [pc, #300]	; (8000b1c <fsmTunningProcessing+0x2c8>)
 80009f0:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_RED;
 80009f2:	4b4b      	ldr	r3, [pc, #300]	; (8000b20 <fsmTunningProcessing+0x2cc>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
			break;
 80009f8:	e000      	b.n	80009fc <fsmTunningProcessing+0x1a8>
			break;
 80009fa:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 80009fc:	2002      	movs	r0, #2
 80009fe:	f7ff fc2f 	bl	8000260 <buttonPressed>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d041      	beq.n	8000a8c <fsmTunningProcessing+0x238>
		switch (fsmTunningState) {
 8000a08:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <fsmTunningProcessing+0x2cc>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d02a      	beq.n	8000a66 <fsmTunningProcessing+0x212>
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	dc3a      	bgt.n	8000a8a <fsmTunningProcessing+0x236>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d002      	beq.n	8000a1e <fsmTunningProcessing+0x1ca>
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d012      	beq.n	8000a42 <fsmTunningProcessing+0x1ee>
			else {
				trafficYellowDuration = TRAFFIC_DURARION_MAX;
			}
			break;
		default:
			break;
 8000a1c:	e035      	b.n	8000a8a <fsmTunningProcessing+0x236>
			if (trafficRedDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000a1e:	4b4c      	ldr	r3, [pc, #304]	; (8000b50 <fsmTunningProcessing+0x2fc>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d806      	bhi.n	8000a38 <fsmTunningProcessing+0x1e4>
				trafficRedDuration += TRAFFIC_DURARION_AUTO;
 8000a2a:	4b49      	ldr	r3, [pc, #292]	; (8000b50 <fsmTunningProcessing+0x2fc>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a32:	4a47      	ldr	r2, [pc, #284]	; (8000b50 <fsmTunningProcessing+0x2fc>)
 8000a34:	6013      	str	r3, [r2, #0]
			break;
 8000a36:	e029      	b.n	8000a8c <fsmTunningProcessing+0x238>
				trafficRedDuration = TRAFFIC_DURARION_MAX;
 8000a38:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <fsmTunningProcessing+0x2fc>)
 8000a3a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a3e:	601a      	str	r2, [r3, #0]
			break;
 8000a40:	e024      	b.n	8000a8c <fsmTunningProcessing+0x238>
			if (trafficGreenDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000a42:	4b44      	ldr	r3, [pc, #272]	; (8000b54 <fsmTunningProcessing+0x300>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d806      	bhi.n	8000a5c <fsmTunningProcessing+0x208>
				trafficGreenDuration += TRAFFIC_DURARION_AUTO;
 8000a4e:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <fsmTunningProcessing+0x300>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a56:	4a3f      	ldr	r2, [pc, #252]	; (8000b54 <fsmTunningProcessing+0x300>)
 8000a58:	6013      	str	r3, [r2, #0]
			break;
 8000a5a:	e017      	b.n	8000a8c <fsmTunningProcessing+0x238>
				trafficGreenDuration = TRAFFIC_DURARION_MAX;
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <fsmTunningProcessing+0x300>)
 8000a5e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a62:	601a      	str	r2, [r3, #0]
			break;
 8000a64:	e012      	b.n	8000a8c <fsmTunningProcessing+0x238>
			if (trafficYellowDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000a66:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <fsmTunningProcessing+0x304>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d806      	bhi.n	8000a80 <fsmTunningProcessing+0x22c>
				trafficYellowDuration += TRAFFIC_DURARION_AUTO;
 8000a72:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <fsmTunningProcessing+0x304>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a7a:	4a37      	ldr	r2, [pc, #220]	; (8000b58 <fsmTunningProcessing+0x304>)
 8000a7c:	6013      	str	r3, [r2, #0]
			break;
 8000a7e:	e005      	b.n	8000a8c <fsmTunningProcessing+0x238>
				trafficYellowDuration = TRAFFIC_DURARION_MAX;
 8000a80:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <fsmTunningProcessing+0x304>)
 8000a82:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a86:	601a      	str	r2, [r3, #0]
			break;
 8000a88:	e000      	b.n	8000a8c <fsmTunningProcessing+0x238>
			break;
 8000a8a:	bf00      	nop
		}
	}
	if (buttonPressed(3)) {
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f7ff fbe7 	bl	8000260 <buttonPressed>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d03e      	beq.n	8000b16 <fsmTunningProcessing+0x2c2>
		switch (fsmTunningState) {
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <fsmTunningProcessing+0x2cc>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d028      	beq.n	8000af2 <fsmTunningProcessing+0x29e>
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	dc37      	bgt.n	8000b14 <fsmTunningProcessing+0x2c0>
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d002      	beq.n	8000aae <fsmTunningProcessing+0x25a>
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d011      	beq.n	8000ad0 <fsmTunningProcessing+0x27c>
			else {
				trafficYellowDuration = TRAFFIC_DURARION_MIN;
			}
			break;
		default:
			break;
 8000aac:	e032      	b.n	8000b14 <fsmTunningProcessing+0x2c0>
			if (trafficRedDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <fsmTunningProcessing+0x2fc>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ab6:	d906      	bls.n	8000ac6 <fsmTunningProcessing+0x272>
				trafficRedDuration -= TRAFFIC_DURARION_AUTO;
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <fsmTunningProcessing+0x2fc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000ac0:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <fsmTunningProcessing+0x2fc>)
 8000ac2:	6013      	str	r3, [r2, #0]
			break;
 8000ac4:	e027      	b.n	8000b16 <fsmTunningProcessing+0x2c2>
				trafficRedDuration = TRAFFIC_DURARION_MIN;
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <fsmTunningProcessing+0x2fc>)
 8000ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000acc:	601a      	str	r2, [r3, #0]
			break;
 8000ace:	e022      	b.n	8000b16 <fsmTunningProcessing+0x2c2>
			if (trafficGreenDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000ad0:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <fsmTunningProcessing+0x300>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ad8:	d906      	bls.n	8000ae8 <fsmTunningProcessing+0x294>
				trafficGreenDuration -= TRAFFIC_DURARION_AUTO;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <fsmTunningProcessing+0x300>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <fsmTunningProcessing+0x300>)
 8000ae4:	6013      	str	r3, [r2, #0]
			break;
 8000ae6:	e016      	b.n	8000b16 <fsmTunningProcessing+0x2c2>
				trafficGreenDuration = TRAFFIC_DURARION_MIN;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <fsmTunningProcessing+0x300>)
 8000aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aee:	601a      	str	r2, [r3, #0]
			break;
 8000af0:	e011      	b.n	8000b16 <fsmTunningProcessing+0x2c2>
			if (trafficYellowDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <fsmTunningProcessing+0x304>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000afa:	d906      	bls.n	8000b0a <fsmTunningProcessing+0x2b6>
				trafficYellowDuration -= TRAFFIC_DURARION_AUTO;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <fsmTunningProcessing+0x304>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <fsmTunningProcessing+0x304>)
 8000b06:	6013      	str	r3, [r2, #0]
			break;
 8000b08:	e005      	b.n	8000b16 <fsmTunningProcessing+0x2c2>
				trafficYellowDuration = TRAFFIC_DURARION_MIN;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <fsmTunningProcessing+0x304>)
 8000b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b10:	601a      	str	r2, [r3, #0]
			break;
 8000b12:	e000      	b.n	8000b16 <fsmTunningProcessing+0x2c2>
			break;
 8000b14:	bf00      	nop
		}
	}
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000010c 	.word	0x2000010c
 8000b20:	200000f5 	.word	0x200000f5
 8000b24:	080021cd 	.word	0x080021cd
 8000b28:	080020ed 	.word	0x080020ed
 8000b2c:	0800212d 	.word	0x0800212d
 8000b30:	080020cd 	.word	0x080020cd
 8000b34:	0800210d 	.word	0x0800210d
 8000b38:	08002211 	.word	0x08002211
 8000b3c:	080020fd 	.word	0x080020fd
 8000b40:	0800213d 	.word	0x0800213d
 8000b44:	08002189 	.word	0x08002189
 8000b48:	080020dd 	.word	0x080020dd
 8000b4c:	0800211d 	.word	0x0800211d
 8000b50:	20000034 	.word	0x20000034
 8000b54:	20000038 	.word	0x20000038
 8000b58:	2000003c 	.word	0x2000003c

08000b5c <fsmTunning>:

void fsmTunning(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	fsmTunningIDs[0] = SCH_AddTask(fsmTunningProcessing, 10, TIMER_TICK);
 8000b60:	220a      	movs	r2, #10
 8000b62:	210a      	movs	r1, #10
 8000b64:	481f      	ldr	r0, [pc, #124]	; (8000be4 <fsmTunning+0x88>)
 8000b66:	f000 fcbd 	bl	80014e4 <SCH_AddTask>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <fsmTunning+0x8c>)
 8000b70:	701a      	strb	r2, [r3, #0]
	// Initialize for Tunning Mode
	fsmTunningState = TRAFFIC_RED;
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <fsmTunning+0x90>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
	fsmTunningIDs[1] = SCH_AddTask(uartRedDuration, 50, 100);
 8000b78:	2264      	movs	r2, #100	; 0x64
 8000b7a:	2132      	movs	r1, #50	; 0x32
 8000b7c:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <fsmTunning+0x94>)
 8000b7e:	f000 fcb1 	bl	80014e4 <SCH_AddTask>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <fsmTunning+0x8c>)
 8000b88:	705a      	strb	r2, [r3, #1]
	fsmTunningIDs[2] = SCH_AddTask(traffic0Red, 0, 1000);
 8000b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <fsmTunning+0x98>)
 8000b92:	f000 fca7 	bl	80014e4 <SCH_AddTask>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <fsmTunning+0x8c>)
 8000b9c:	709a      	strb	r2, [r3, #2]
	fsmTunningIDs[3] = SCH_AddTask(traffic1Red, 0, 1000);
 8000b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <fsmTunning+0x9c>)
 8000ba6:	f000 fc9d 	bl	80014e4 <SCH_AddTask>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <fsmTunning+0x8c>)
 8000bb0:	70da      	strb	r2, [r3, #3]
	fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 8000bb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bba:	4810      	ldr	r0, [pc, #64]	; (8000bfc <fsmTunning+0xa0>)
 8000bbc:	f000 fc92 	bl	80014e4 <SCH_AddTask>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <fsmTunning+0x8c>)
 8000bc6:	711a      	strb	r2, [r3, #4]
	fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 8000bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bcc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <fsmTunning+0xa4>)
 8000bd2:	f000 fc87 	bl	80014e4 <SCH_AddTask>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <fsmTunning+0x8c>)
 8000bdc:	715a      	strb	r2, [r3, #5]
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	08000855 	.word	0x08000855
 8000be8:	2000010c 	.word	0x2000010c
 8000bec:	200000f5 	.word	0x200000f5
 8000bf0:	08002189 	.word	0x08002189
 8000bf4:	080020dd 	.word	0x080020dd
 8000bf8:	0800211d 	.word	0x0800211d
 8000bfc:	080020cd 	.word	0x080020cd
 8000c00:	0800210d 	.word	0x0800210d

08000c04 <fsmInit>:

void fsmInit(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	fsmState = FSM_INIT;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <fsmInit+0x34>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
	fsmIDs[0] = SCH_AddTask(testButton, 0, TIMER_TICK);
 8000c0e:	220a      	movs	r2, #10
 8000c10:	2100      	movs	r1, #0
 8000c12:	480a      	ldr	r0, [pc, #40]	; (8000c3c <fsmInit+0x38>)
 8000c14:	f000 fc66 	bl	80014e4 <SCH_AddTask>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <fsmInit+0x3c>)
 8000c1e:	701a      	strb	r2, [r3, #0]
	SCH_AddTask(testBuzzer, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <fsmInit+0x40>)
 8000c26:	f000 fc5d 	bl	80014e4 <SCH_AddTask>
	SCH_AddTask(testLED, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <fsmInit+0x44>)
 8000c30:	f000 fc58 	bl	80014e4 <SCH_AddTask>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200000f4 	.word	0x200000f4
 8000c3c:	08001da5 	.word	0x08001da5
 8000c40:	200000f8 	.word	0x200000f8
 8000c44:	08001e31 	.word	0x08001e31
 8000c48:	08001e55 	.word	0x08001e55

08000c4c <fsmProcessing>:

void fsmProcessing(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
	if (buttonPressed(0)) {
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fb04 	bl	8000260 <buttonPressed>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d07e      	beq.n	8000d5c <fsmProcessing+0x110>
		switch (fsmState) {
 8000c5e:	4b41      	ldr	r3, [pc, #260]	; (8000d64 <fsmProcessing+0x118>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d879      	bhi.n	8000d5a <fsmProcessing+0x10e>
 8000c66:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <fsmProcessing+0x20>)
 8000c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6c:	08000c7d 	.word	0x08000c7d
 8000c70:	08000cad 	.word	0x08000cad
 8000c74:	08000ce7 	.word	0x08000ce7
 8000c78:	08000d21 	.word	0x08000d21
		case FSM_INIT:
			for (uint8_t i = 0; i < FSM_TASK; i ++) {
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	e008      	b.n	8000c94 <fsmProcessing+0x48>
				SCH_DeleteTask(fsmIDs[i]);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	4a38      	ldr	r2, [pc, #224]	; (8000d68 <fsmProcessing+0x11c>)
 8000c86:	5cd3      	ldrb	r3, [r2, r3]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 fd31 	bl	80016f0 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TASK; i ++) {
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	3301      	adds	r3, #1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f3      	beq.n	8000c82 <fsmProcessing+0x36>
			}
			SCH_AddTask(fsmAuto, 10, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	210a      	movs	r1, #10
 8000c9e:	4833      	ldr	r0, [pc, #204]	; (8000d6c <fsmProcessing+0x120>)
 8000ca0:	f000 fc20 	bl	80014e4 <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000ca4:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <fsmProcessing+0x118>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
			break;
 8000caa:	e057      	b.n	8000d5c <fsmProcessing+0x110>
		case FSM_AUTO:
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000cac:	2300      	movs	r3, #0
 8000cae:	71bb      	strb	r3, [r7, #6]
 8000cb0:	e008      	b.n	8000cc4 <fsmProcessing+0x78>
				SCH_DeleteTask(fsmAutoIDs[i]);
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <fsmProcessing+0x124>)
 8000cb6:	5cd3      	ldrb	r3, [r2, r3]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fd19 	bl	80016f0 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	71bb      	strb	r3, [r7, #6]
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	2b0a      	cmp	r3, #10
 8000cc8:	d9f3      	bls.n	8000cb2 <fsmProcessing+0x66>
			}
			SCH_AddTask(fsmAutoStop, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4829      	ldr	r0, [pc, #164]	; (8000d74 <fsmProcessing+0x128>)
 8000cd0:	f000 fc08 	bl	80014e4 <SCH_AddTask>
			SCH_AddTask(fsmManual, 10, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	210a      	movs	r1, #10
 8000cd8:	4827      	ldr	r0, [pc, #156]	; (8000d78 <fsmProcessing+0x12c>)
 8000cda:	f000 fc03 	bl	80014e4 <SCH_AddTask>
			fsmState = FSM_MANUAL;
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <fsmProcessing+0x118>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	701a      	strb	r2, [r3, #0]
			break;
 8000ce4:	e03a      	b.n	8000d5c <fsmProcessing+0x110>
		case FSM_MANUAL:
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	717b      	strb	r3, [r7, #5]
 8000cea:	e008      	b.n	8000cfe <fsmProcessing+0xb2>
				SCH_DeleteTask(fsmManualIDs[i]);
 8000cec:	797b      	ldrb	r3, [r7, #5]
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <fsmProcessing+0x130>)
 8000cf0:	5cd3      	ldrb	r3, [r2, r3]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fcfc 	bl	80016f0 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000cf8:	797b      	ldrb	r3, [r7, #5]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	717b      	strb	r3, [r7, #5]
 8000cfe:	797b      	ldrb	r3, [r7, #5]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d9f3      	bls.n	8000cec <fsmProcessing+0xa0>
			}
			SCH_AddTask(fsmManualStop, 0, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	481d      	ldr	r0, [pc, #116]	; (8000d80 <fsmProcessing+0x134>)
 8000d0a:	f000 fbeb 	bl	80014e4 <SCH_AddTask>
			SCH_AddTask(fsmTunning, 10, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	210a      	movs	r1, #10
 8000d12:	481c      	ldr	r0, [pc, #112]	; (8000d84 <fsmProcessing+0x138>)
 8000d14:	f000 fbe6 	bl	80014e4 <SCH_AddTask>
			fsmState = FSM_TUNNING;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <fsmProcessing+0x118>)
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	701a      	strb	r2, [r3, #0]
			break;
 8000d1e:	e01d      	b.n	8000d5c <fsmProcessing+0x110>
		case FSM_TUNNING:
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	713b      	strb	r3, [r7, #4]
 8000d24:	e008      	b.n	8000d38 <fsmProcessing+0xec>
				SCH_DeleteTask(fsmTunningIDs[i]);
 8000d26:	793b      	ldrb	r3, [r7, #4]
 8000d28:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <fsmProcessing+0x13c>)
 8000d2a:	5cd3      	ldrb	r3, [r2, r3]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fcdf 	bl	80016f0 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000d32:	793b      	ldrb	r3, [r7, #4]
 8000d34:	3301      	adds	r3, #1
 8000d36:	713b      	strb	r3, [r7, #4]
 8000d38:	793b      	ldrb	r3, [r7, #4]
 8000d3a:	2b05      	cmp	r3, #5
 8000d3c:	d9f3      	bls.n	8000d26 <fsmProcessing+0xda>
			}
			SCH_AddTask(fsmTunningStop, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	4812      	ldr	r0, [pc, #72]	; (8000d8c <fsmProcessing+0x140>)
 8000d44:	f000 fbce 	bl	80014e4 <SCH_AddTask>
			SCH_AddTask(fsmAuto, 10, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	210a      	movs	r1, #10
 8000d4c:	4807      	ldr	r0, [pc, #28]	; (8000d6c <fsmProcessing+0x120>)
 8000d4e:	f000 fbc9 	bl	80014e4 <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <fsmProcessing+0x118>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
			break;
 8000d58:	e000      	b.n	8000d5c <fsmProcessing+0x110>
		default:
			break;
 8000d5a:	bf00      	nop
		}
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200000f4 	.word	0x200000f4
 8000d68:	200000f8 	.word	0x200000f8
 8000d6c:	08000579 	.word	0x08000579
 8000d70:	200000fc 	.word	0x200000fc
 8000d74:	0800049d 	.word	0x0800049d
 8000d78:	080007dd 	.word	0x080007dd
 8000d7c:	20000108 	.word	0x20000108
 8000d80:	080006e9 	.word	0x080006e9
 8000d84:	08000b5d 	.word	0x08000b5d
 8000d88:	2000010c 	.word	0x2000010c
 8000d8c:	08000849 	.word	0x08000849

08000d90 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_UART_RxCpltCallback+0x30>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10a      	bne.n	8000db8 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <HAL_UART_RxCpltCallback+0x34>)
 8000da6:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <HAL_UART_RxCpltCallback+0x38>)
 8000da8:	f003 faaf 	bl	800430a <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000dac:	2332      	movs	r3, #50	; 0x32
 8000dae:	2201      	movs	r2, #1
 8000db0:	4904      	ldr	r1, [pc, #16]	; (8000dc4 <HAL_UART_RxCpltCallback+0x34>)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_UART_RxCpltCallback+0x38>)
 8000db4:	f003 fa26 	bl	8004204 <HAL_UART_Transmit>
	}
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004400 	.word	0x40004400
 8000dc4:	200001ec 	.word	0x200001ec
 8000dc8:	200001a4 	.word	0x200001a4

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f001 fa88 	bl	80022e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd4:	f000 f84a 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd8:	f000 f97c 	bl	80010d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ddc:	f000 f882 	bl	8000ee4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000de0:	f000 f94e 	bl	8001080 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000de4:	f000 f8ca 	bl	8000f7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000de8:	4817      	ldr	r0, [pc, #92]	; (8000e48 <main+0x7c>)
 8000dea:	f002 fac1 	bl	8003370 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	4816      	ldr	r0, [pc, #88]	; (8000e4c <main+0x80>)
 8000df2:	f002 fb61 	bl	80034b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000df6:	2104      	movs	r1, #4
 8000df8:	4814      	ldr	r0, [pc, #80]	; (8000e4c <main+0x80>)
 8000dfa:	f002 fb5d 	bl	80034b8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4913      	ldr	r1, [pc, #76]	; (8000e50 <main+0x84>)
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <main+0x88>)
 8000e04:	f003 fa81 	bl	800430a <HAL_UART_Receive_IT>
  SCH_Init();
 8000e08:	f000 fae2 	bl	80013d0 <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(testMCU, 0, 1000);
 8000e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e10:	2100      	movs	r1, #0
 8000e12:	4811      	ldr	r0, [pc, #68]	; (8000e58 <main+0x8c>)
 8000e14:	f000 fb66 	bl	80014e4 <SCH_AddTask>
  SCH_AddTask(uartReport, 100, 5000);
 8000e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e1c:	2164      	movs	r1, #100	; 0x64
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <main+0x90>)
 8000e20:	f000 fb60 	bl	80014e4 <SCH_AddTask>
  SCH_AddTask(buttonReading, 0, TIMER_TICK);
 8000e24:	220a      	movs	r2, #10
 8000e26:	2100      	movs	r1, #0
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <main+0x94>)
 8000e2a:	f000 fb5b 	bl	80014e4 <SCH_AddTask>
  SCH_AddTask(fsmInit, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <main+0x98>)
 8000e34:	f000 fb56 	bl	80014e4 <SCH_AddTask>
  SCH_AddTask(fsmProcessing, 10, TIMER_TICK);
 8000e38:	220a      	movs	r2, #10
 8000e3a:	210a      	movs	r1, #10
 8000e3c:	480a      	ldr	r0, [pc, #40]	; (8000e68 <main+0x9c>)
 8000e3e:	f000 fb51 	bl	80014e4 <SCH_AddTask>
  {
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseWidth);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch();
 8000e42:	f000 fb35 	bl	80014b0 <SCH_Dispatch>
 8000e46:	e7fc      	b.n	8000e42 <main+0x76>
 8000e48:	20000114 	.word	0x20000114
 8000e4c:	2000015c 	.word	0x2000015c
 8000e50:	200001ec 	.word	0x200001ec
 8000e54:	200001a4 	.word	0x200001a4
 8000e58:	08001d91 	.word	0x08001d91
 8000e5c:	0800214d 	.word	0x0800214d
 8000e60:	0800014d 	.word	0x0800014d
 8000e64:	08000c05 	.word	0x08000c05
 8000e68:	08000c4d 	.word	0x08000c4d

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b090      	sub	sp, #64	; 0x40
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	2228      	movs	r2, #40	; 0x28
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f004 f80a 	bl	8004e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e92:	2301      	movs	r3, #1
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e96:	2310      	movs	r3, #16
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fe04 	bl	8002ab0 <HAL_RCC_OscConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eae:	f000 f990 	bl	80011d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 f872 	bl	8002fb4 <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 f97c 	bl	80011d2 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3740      	adds	r7, #64	; 0x40
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f16:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000f1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f28:	4813      	ldr	r0, [pc, #76]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f2a:	f002 f9d1 	bl	80032d0 <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f34:	f000 f94d 	bl	80011d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f46:	f002 fd1d 	bl	8003984 <HAL_TIM_ConfigClockSource>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f50:	f000 f93f 	bl	80011d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f62:	f003 f895 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f6c:	f000 f931 	bl	80011d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000114 	.word	0x20000114

08000f7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08e      	sub	sp, #56	; 0x38
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	f107 0320 	add.w	r3, r7, #32
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_TIM3_Init+0xfc>)
 8000fae:	4a33      	ldr	r2, [pc, #204]	; (800107c <MX_TIM3_Init+0x100>)
 8000fb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <MX_TIM3_Init+0xfc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <MX_TIM3_Init+0xfc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_TIM3_Init+0xfc>)
 8000fc0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <MX_TIM3_Init+0xfc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <MX_TIM3_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fd2:	4829      	ldr	r0, [pc, #164]	; (8001078 <MX_TIM3_Init+0xfc>)
 8000fd4:	f002 f97c 	bl	80032d0 <HAL_TIM_Base_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fde:	f000 f8f8 	bl	80011d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4822      	ldr	r0, [pc, #136]	; (8001078 <MX_TIM3_Init+0xfc>)
 8000ff0:	f002 fcc8 	bl	8003984 <HAL_TIM_ConfigClockSource>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ffa:	f000 f8ea 	bl	80011d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ffe:	481e      	ldr	r0, [pc, #120]	; (8001078 <MX_TIM3_Init+0xfc>)
 8001000:	f002 fa02 	bl	8003408 <HAL_TIM_PWM_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800100a:	f000 f8e2 	bl	80011d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	4619      	mov	r1, r3
 800101c:	4816      	ldr	r0, [pc, #88]	; (8001078 <MX_TIM3_Init+0xfc>)
 800101e:	f003 f837 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001028:	f000 f8d3 	bl	80011d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102c:	2360      	movs	r3, #96	; 0x60
 800102e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_TIM3_Init+0xfc>)
 8001044:	f002 fbdc 	bl	8003800 <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800104e:	f000 f8c0 	bl	80011d2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2204      	movs	r2, #4
 8001056:	4619      	mov	r1, r3
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <MX_TIM3_Init+0xfc>)
 800105a:	f002 fbd1 	bl	8003800 <HAL_TIM_PWM_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001064:	f000 f8b5 	bl	80011d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <MX_TIM3_Init+0xfc>)
 800106a:	f000 fd8b 	bl	8001b84 <HAL_TIM_MspPostInit>

}
 800106e:	bf00      	nop
 8001070:	3738      	adds	r7, #56	; 0x38
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000015c 	.word	0x2000015c
 800107c:	40000400 	.word	0x40000400

08001080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_USART2_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800108c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b8:	f003 f854 	bl	8004164 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f000 f886 	bl	80011d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200001a4 	.word	0x200001a4
 80010d0:	40004400 	.word	0x40004400

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <MX_GPIO_Init+0xd4>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a2e      	ldr	r2, [pc, #184]	; (80011a8 <MX_GPIO_Init+0xd4>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <MX_GPIO_Init+0xd4>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <MX_GPIO_Init+0xd4>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <MX_GPIO_Init+0xd4>)
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <MX_GPIO_Init+0xd4>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2120      	movs	r1, #32
 800111c:	4823      	ldr	r0, [pc, #140]	; (80011ac <MX_GPIO_Init+0xd8>)
 800111e:	f001 fc96 	bl	8002a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|GPIO_PIN_2|GPIO_PIN_10
 8001122:	2200      	movs	r2, #0
 8001124:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001128:	4821      	ldr	r0, [pc, #132]	; (80011b0 <MX_GPIO_Init+0xdc>)
 800112a:	f001 fc90 	bl	8002a4e <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin|TRAFFIC1_GREEN_Pin
                          |GPIO_PIN_15|GPIO_PIN_3|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin
                          |TRAFFIC0_GREEN_Pin|GPIO_PIN_7|PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800112e:	2320      	movs	r3, #32
 8001130:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001136:	2301      	movs	r3, #1
 8001138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2302      	movs	r3, #2
 800113c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	4619      	mov	r1, r3
 8001144:	4819      	ldr	r0, [pc, #100]	; (80011ac <MX_GPIO_Init+0xd8>)
 8001146:	f001 faef 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDESTRIAN0_RED_Pin PEDESTRIAN0_GREEN_Pin TRAFFIC1_RED_Pin TRAFFIC1_YELLOW_Pin
                           TRAFFIC1_GREEN_Pin TRAFFIC0_RED_Pin TRAFFIC0_YELLOW_Pin TRAFFIC0_GREEN_Pin
                           PEDESTRIAN1_RED_Pin PEDESTRIAN1_GREEN_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin
 800114a:	f247 3373 	movw	r3, #29555	; 0x7373
 800114e:	60bb      	str	r3, [r7, #8]
                          |TRAFFIC1_GREEN_Pin|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin|TRAFFIC0_GREEN_Pin
                          |PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001154:	2301      	movs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2302      	movs	r3, #2
 800115a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4619      	mov	r1, r3
 8001162:	4813      	ldr	r0, [pc, #76]	; (80011b0 <MX_GPIO_Init+0xdc>)
 8001164:	f001 fae0 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB15
                           PB3 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 8001168:	f648 438c 	movw	r3, #35980	; 0x8c8c
 800116c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001172:	2302      	movs	r3, #2
 8001174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2302      	movs	r3, #2
 8001178:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <MX_GPIO_Init+0xdc>)
 8001182:	f001 fad1 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001186:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800118a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4619      	mov	r1, r3
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_GPIO_Init+0xd8>)
 800119c:	f001 fac4 	bl	8002728 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c4:	d101      	bne.n	80011ca <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 80011c6:	f000 f94d 	bl	8001464 <SCH_Update>
	}
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d6:	b672      	cpsid	i
}
 80011d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011da:	e7fe      	b.n	80011da <Error_Handler+0x8>

080011dc <pedestrianToggle>:
static GPIO_TypeDef* pedestrianGreenPorts[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_GPIO_Port};

static uint16_t pedestrianRedPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_RED_Pin, PEDESTRIAN1_RED_Pin};
static uint16_t pedestrianGreenPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_Pin, PEDESTRIAN1_GREEN_Pin};
//uint8_t test;
void pedestrianToggle(uint8_t index, enum PEDESTRIAN_STATE state) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d05e      	beq.n	80012b0 <pedestrianToggle+0xd4>
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	f300 8081 	bgt.w	80012fa <pedestrianToggle+0x11e>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <pedestrianToggle+0x26>
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d01d      	beq.n	800123c <pedestrianToggle+0x60>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
		pedestrianStates[index] = PEDESTRIAN_GREEN;
		pedestrianCounters[index] = trafficCounters[index];
		break;
	default:
		break;
 8001200:	e07b      	b.n	80012fa <pedestrianToggle+0x11e>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4a3f      	ldr	r2, [pc, #252]	; (8001304 <pedestrianToggle+0x128>)
 8001206:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4a3e      	ldr	r2, [pc, #248]	; (8001308 <pedestrianToggle+0x12c>)
 800120e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001212:	2201      	movs	r2, #1
 8001214:	4619      	mov	r1, r3
 8001216:	f001 fc1a 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4a3b      	ldr	r2, [pc, #236]	; (800130c <pedestrianToggle+0x130>)
 800121e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4a3a      	ldr	r2, [pc, #232]	; (8001310 <pedestrianToggle+0x134>)
 8001226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800122a:	2201      	movs	r2, #1
 800122c:	4619      	mov	r1, r3
 800122e:	f001 fc0e 	bl	8002a4e <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_OFF;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4a37      	ldr	r2, [pc, #220]	; (8001314 <pedestrianToggle+0x138>)
 8001236:	2100      	movs	r1, #0
 8001238:	54d1      	strb	r1, [r2, r3]
		break;
 800123a:	e05f      	b.n	80012fc <pedestrianToggle+0x120>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_RESET);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4a31      	ldr	r2, [pc, #196]	; (8001304 <pedestrianToggle+0x128>)
 8001240:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4a30      	ldr	r2, [pc, #192]	; (8001308 <pedestrianToggle+0x12c>)
 8001248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	f001 fbfd 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	4a2d      	ldr	r2, [pc, #180]	; (800130c <pedestrianToggle+0x130>)
 8001258:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <pedestrianToggle+0x134>)
 8001260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	f001 fbf1 	bl	8002a4e <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_RED;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4a29      	ldr	r2, [pc, #164]	; (8001314 <pedestrianToggle+0x138>)
 8001270:	2101      	movs	r1, #1
 8001272:	54d1      	strb	r1, [r2, r3]
		switch (trafficStates[index]) {
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4a28      	ldr	r2, [pc, #160]	; (8001318 <pedestrianToggle+0x13c>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d002      	beq.n	8001284 <pedestrianToggle+0xa8>
 800127e:	2b03      	cmp	r3, #3
 8001280:	d00c      	beq.n	800129c <pedestrianToggle+0xc0>
			break;
 8001282:	e014      	b.n	80012ae <pedestrianToggle+0xd2>
			pedestrianCounters[index] = trafficCounters[index] + trafficYellowDuration;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4a25      	ldr	r2, [pc, #148]	; (800131c <pedestrianToggle+0x140>)
 8001288:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <pedestrianToggle+0x144>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	440a      	add	r2, r1
 8001294:	4923      	ldr	r1, [pc, #140]	; (8001324 <pedestrianToggle+0x148>)
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800129a:	e008      	b.n	80012ae <pedestrianToggle+0xd2>
			pedestrianCounters[index] = trafficCounters[index];
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	491e      	ldr	r1, [pc, #120]	; (800131c <pedestrianToggle+0x140>)
 80012a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012a6:	491f      	ldr	r1, [pc, #124]	; (8001324 <pedestrianToggle+0x148>)
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 80012ac:	bf00      	nop
		break;
 80012ae:	e025      	b.n	80012fc <pedestrianToggle+0x120>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4a14      	ldr	r2, [pc, #80]	; (8001304 <pedestrianToggle+0x128>)
 80012b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <pedestrianToggle+0x12c>)
 80012bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c0:	2201      	movs	r2, #1
 80012c2:	4619      	mov	r1, r3
 80012c4:	f001 fbc3 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <pedestrianToggle+0x130>)
 80012cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <pedestrianToggle+0x134>)
 80012d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	f001 fbb7 	bl	8002a4e <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_GREEN;
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <pedestrianToggle+0x138>)
 80012e4:	2102      	movs	r1, #2
 80012e6:	54d1      	strb	r1, [r2, r3]
		pedestrianCounters[index] = trafficCounters[index];
 80012e8:	79fa      	ldrb	r2, [r7, #7]
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	490b      	ldr	r1, [pc, #44]	; (800131c <pedestrianToggle+0x140>)
 80012ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012f2:	490c      	ldr	r1, [pc, #48]	; (8001324 <pedestrianToggle+0x148>)
 80012f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80012f8:	e000      	b.n	80012fc <pedestrianToggle+0x120>
		break;
 80012fa:	bf00      	nop
	}
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000018 	.word	0x20000018
 8001308:	20000028 	.word	0x20000028
 800130c:	20000020 	.word	0x20000020
 8001310:	2000002c 	.word	0x2000002c
 8001314:	200001f0 	.word	0x200001f0
 8001318:	20000390 	.word	0x20000390
 800131c:	20000394 	.word	0x20000394
 8001320:	2000003c 	.word	0x2000003c
 8001324:	200001f4 	.word	0x200001f4

08001328 <pedestrian0On>:

void pedestrian0On(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	switch (trafficStates[0]) {
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <pedestrian0On+0x3c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d005      	beq.n	8001340 <pedestrian0On+0x18>
 8001334:	2b00      	cmp	r3, #0
 8001336:	dd11      	ble.n	800135c <pedestrian0On+0x34>
 8001338:	3b02      	subs	r3, #2
 800133a:	2b01      	cmp	r3, #1
 800133c:	d80e      	bhi.n	800135c <pedestrian0On+0x34>
 800133e:	e006      	b.n	800134e <pedestrian0On+0x26>
	case TRAFFIC_RED:
		pedestrianToggle(0, PEDESTRIAN_GREEN);
 8001340:	2102      	movs	r1, #2
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff ff4a 	bl	80011dc <pedestrianToggle>
		buzzer0On();
 8001348:	f7fe fff8 	bl	800033c <buzzer0On>
		break;
 800134c:	e007      	b.n	800135e <pedestrian0On+0x36>
	case TRAFFIC_YELLOW:
	case TRAFFIC_GREEN:
		pedestrianToggle(0, PEDESTRIAN_RED);
 800134e:	2101      	movs	r1, #1
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff ff43 	bl	80011dc <pedestrianToggle>
		buzzer0Off();
 8001356:	f7ff f817 	bl	8000388 <buzzer0Off>
		break;
 800135a:	e000      	b.n	800135e <pedestrian0On+0x36>
	default:
		break;
 800135c:	bf00      	nop
	}
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000390 	.word	0x20000390

08001368 <pedestrian1On>:

void pedestrian1On(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	switch (trafficStates[1]) {
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <pedestrian1On+0x3c>)
 800136e:	785b      	ldrb	r3, [r3, #1]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d005      	beq.n	8001380 <pedestrian1On+0x18>
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd11      	ble.n	800139c <pedestrian1On+0x34>
 8001378:	3b02      	subs	r3, #2
 800137a:	2b01      	cmp	r3, #1
 800137c:	d80e      	bhi.n	800139c <pedestrian1On+0x34>
 800137e:	e006      	b.n	800138e <pedestrian1On+0x26>
	case TRAFFIC_RED:
		pedestrianToggle(1, PEDESTRIAN_GREEN);
 8001380:	2102      	movs	r1, #2
 8001382:	2001      	movs	r0, #1
 8001384:	f7ff ff2a 	bl	80011dc <pedestrianToggle>
		buzzer1On();
 8001388:	f7ff f806 	bl	8000398 <buzzer1On>
		break;
 800138c:	e007      	b.n	800139e <pedestrian1On+0x36>
	case TRAFFIC_YELLOW:
	case TRAFFIC_GREEN:
		pedestrianToggle(1, PEDESTRIAN_RED);
 800138e:	2101      	movs	r1, #1
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff ff23 	bl	80011dc <pedestrianToggle>
		buzzer1Off();
 8001396:	f7ff f825 	bl	80003e4 <buzzer1Off>
		break;
 800139a:	e000      	b.n	800139e <pedestrian1On+0x36>
	default:
		break;
 800139c:	bf00      	nop
	}
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000390 	.word	0x20000390

080013a8 <pedestrian0Off>:

void pedestrian0Off(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	pedestrianToggle(0, PEDESTRIAN_OFF);
 80013ac:	2100      	movs	r1, #0
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff ff14 	bl	80011dc <pedestrianToggle>
	buzzer0Off();
 80013b4:	f7fe ffe8 	bl	8000388 <buzzer0Off>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <pedestrian1Off>:

void pedestrian1Off(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	pedestrianToggle(1, PEDESTRIAN_OFF);
 80013c0:	2100      	movs	r1, #0
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff ff0a 	bl	80011dc <pedestrianToggle>
	buzzer1Off();
 80013c8:	f7ff f80c 	bl	80003e4 <buzzer1Off>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
 80013da:	e037      	b.n	800144c <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	4920      	ldr	r1, [pc, #128]	; (8001460 <SCH_Init+0x90>)
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i - 1;
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f1c3 0313 	rsb	r3, r3, #19
 80013f6:	b2d8      	uxtb	r0, r3
 80013f8:	4919      	ldr	r1, [pc, #100]	; (8001460 <SCH_Init+0x90>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	3304      	adds	r3, #4
 8001406:	4602      	mov	r2, r0
 8001408:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	4914      	ldr	r1, [pc, #80]	; (8001460 <SCH_Init+0x90>)
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	3308      	adds	r3, #8
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	490f      	ldr	r1, [pc, #60]	; (8001460 <SCH_Init+0x90>)
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	330c      	adds	r3, #12
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 8001432:	79fa      	ldrb	r2, [r7, #7]
 8001434:	490a      	ldr	r1, [pc, #40]	; (8001460 <SCH_Init+0x90>)
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	3310      	adds	r3, #16
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	3301      	adds	r3, #1
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b13      	cmp	r3, #19
 8001450:	d9c4      	bls.n	80013dc <SCH_Init+0xc>
    }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	200001fc 	.word	0x200001fc

08001464 <SCH_Update>:

void SCH_Update(void) {
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <SCH_Update+0x48>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d018      	beq.n	80014a2 <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <SCH_Update+0x48>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00c      	beq.n	8001492 <SCH_Update+0x2e>
		if (tasks[0].delay > TIMER_TICK) {
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <SCH_Update+0x48>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b0a      	cmp	r3, #10
 800147e:	d905      	bls.n	800148c <SCH_Update+0x28>
			tasks[0].delay -= TIMER_TICK;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <SCH_Update+0x48>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	3b0a      	subs	r3, #10
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <SCH_Update+0x48>)
 8001488:	6093      	str	r3, [r2, #8]
 800148a:	e002      	b.n	8001492 <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <SCH_Update+0x48>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SCH_Update+0x48>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <SCH_Update+0x40>
		tasks[0].flag = 1;
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SCH_Update+0x48>)
 800149c:	2201      	movs	r2, #1
 800149e:	741a      	strb	r2, [r3, #16]
 80014a0:	e000      	b.n	80014a4 <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 80014a2:	bf00      	nop
	}
}
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200001fc 	.word	0x200001fc

080014b0 <SCH_Dispatch>:

void SCH_Dispatch(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <SCH_Dispatch+0x30>)
 80014b6:	7c1b      	ldrb	r3, [r3, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00f      	beq.n	80014dc <SCH_Dispatch+0x2c>
    (*tasks[0].functionPointer)();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <SCH_Dispatch+0x30>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4798      	blx	r3
    if (tasks[0].period > 0) {
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <SCH_Dispatch+0x30>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <SCH_Dispatch+0x20>
        SCH_RefreshTask();
 80014ca:	f000 f9a3 	bl	8001814 <SCH_RefreshTask>
 80014ce:	e006      	b.n	80014de <SCH_Dispatch+0x2e>
    }
    else {
        SCH_DeleteTask(tasks[0].id);
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <SCH_Dispatch+0x30>)
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f90b 	bl	80016f0 <SCH_DeleteTask>
 80014da:	e000      	b.n	80014de <SCH_Dispatch+0x2e>
    if (tasks[0].flag == 0) return;
 80014dc:	bf00      	nop
    }
}
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200001fc 	.word	0x200001fc

080014e4 <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 80014e4:	b4b0      	push	{r4, r5, r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return SCH_TASKNUMBER;
 80014f0:	4b7e      	ldr	r3, [pc, #504]	; (80016ec <SCH_AddTask+0x208>)
 80014f2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SCH_AddTask+0x1a>
 80014fa:	2314      	movs	r3, #20
 80014fc:	e0f1      	b.n	80016e2 <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 80014fe:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <SCH_AddTask+0x208>)
 8001500:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8001504:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800150a:	2300      	movs	r3, #0
 800150c:	76fb      	strb	r3, [r7, #27]
 800150e:	e0e3      	b.n	80016d8 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 8001510:	7efa      	ldrb	r2, [r7, #27]
 8001512:	4976      	ldr	r1, [pc, #472]	; (80016ec <SCH_AddTask+0x208>)
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	3308      	adds	r3, #8
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d80a      	bhi.n	8001546 <SCH_AddTask+0x62>
 8001530:	7efa      	ldrb	r2, [r7, #27]
 8001532:	496e      	ldr	r1, [pc, #440]	; (80016ec <SCH_AddTask+0x208>)
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	f040 80c6 	bne.w	80016d2 <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8001546:	2313      	movs	r3, #19
 8001548:	76bb      	strb	r3, [r7, #26]
 800154a:	e017      	b.n	800157c <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 800154c:	7ebb      	ldrb	r3, [r7, #26]
 800154e:	1e5a      	subs	r2, r3, #1
 8001550:	7eb9      	ldrb	r1, [r7, #26]
 8001552:	4866      	ldr	r0, [pc, #408]	; (80016ec <SCH_AddTask+0x208>)
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4418      	add	r0, r3
 800155e:	4963      	ldr	r1, [pc, #396]	; (80016ec <SCH_AddTask+0x208>)
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	4604      	mov	r4, r0
 800156c:	461d      	mov	r5, r3
 800156e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001572:	682b      	ldr	r3, [r5, #0]
 8001574:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8001576:	7ebb      	ldrb	r3, [r7, #26]
 8001578:	3b01      	subs	r3, #1
 800157a:	76bb      	strb	r3, [r7, #26]
 800157c:	7eba      	ldrb	r2, [r7, #26]
 800157e:	7efb      	ldrb	r3, [r7, #27]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8e3      	bhi.n	800154c <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 8001584:	7efa      	ldrb	r2, [r7, #27]
 8001586:	4959      	ldr	r1, [pc, #356]	; (80016ec <SCH_AddTask+0x208>)
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 8001596:	7efa      	ldrb	r2, [r7, #27]
 8001598:	4954      	ldr	r1, [pc, #336]	; (80016ec <SCH_AddTask+0x208>)
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	3304      	adds	r3, #4
 80015a6:	7e7a      	ldrb	r2, [r7, #25]
 80015a8:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 80015aa:	7efa      	ldrb	r2, [r7, #27]
 80015ac:	494f      	ldr	r1, [pc, #316]	; (80016ec <SCH_AddTask+0x208>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	330c      	adds	r3, #12
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 80015be:	7efa      	ldrb	r2, [r7, #27]
 80015c0:	494a      	ldr	r1, [pc, #296]	; (80016ec <SCH_AddTask+0x208>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3310      	adds	r3, #16
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d950      	bls.n	800167c <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 80015e2:	7efb      	ldrb	r3, [r7, #27]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	4941      	ldr	r1, [pc, #260]	; (80016ec <SCH_AddTask+0x208>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3308      	adds	r3, #8
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	7efa      	ldrb	r2, [r7, #27]
 80015fa:	1ac9      	subs	r1, r1, r3
 80015fc:	483b      	ldr	r0, [pc, #236]	; (80016ec <SCH_AddTask+0x208>)
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4403      	add	r3, r0
 8001608:	3308      	adds	r3, #8
 800160a:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 800160c:	7efa      	ldrb	r2, [r7, #27]
 800160e:	4937      	ldr	r1, [pc, #220]	; (80016ec <SCH_AddTask+0x208>)
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3308      	adds	r3, #8
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 8001622:	7efa      	ldrb	r2, [r7, #27]
 8001624:	4931      	ldr	r1, [pc, #196]	; (80016ec <SCH_AddTask+0x208>)
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3310      	adds	r3, #16
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8001636:	7efb      	ldrb	r3, [r7, #27]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	6979      	ldr	r1, [r7, #20]
 800163c:	482b      	ldr	r0, [pc, #172]	; (80016ec <SCH_AddTask+0x208>)
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4403      	add	r3, r0
 8001648:	3308      	adds	r3, #8
 800164a:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 800164c:	7efb      	ldrb	r3, [r7, #27]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	4926      	ldr	r1, [pc, #152]	; (80016ec <SCH_AddTask+0x208>)
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	3308      	adds	r3, #8
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d12c      	bne.n	80016be <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 8001664:	7efb      	ldrb	r3, [r7, #27]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	4920      	ldr	r1, [pc, #128]	; (80016ec <SCH_AddTask+0x208>)
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3310      	adds	r3, #16
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e020      	b.n	80016be <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 800167c:	7efa      	ldrb	r2, [r7, #27]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	1ac9      	subs	r1, r1, r3
 8001684:	4819      	ldr	r0, [pc, #100]	; (80016ec <SCH_AddTask+0x208>)
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4403      	add	r3, r0
 8001690:	3308      	adds	r3, #8
 8001692:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8001694:	7efa      	ldrb	r2, [r7, #27]
 8001696:	4915      	ldr	r1, [pc, #84]	; (80016ec <SCH_AddTask+0x208>)
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	3308      	adds	r3, #8
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 80016aa:	7efa      	ldrb	r2, [r7, #27]
 80016ac:	490f      	ldr	r1, [pc, #60]	; (80016ec <SCH_AddTask+0x208>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3310      	adds	r3, #16
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 80016be:	7efa      	ldrb	r2, [r7, #27]
 80016c0:	490a      	ldr	r1, [pc, #40]	; (80016ec <SCH_AddTask+0x208>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	3304      	adds	r3, #4
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	e007      	b.n	80016e2 <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80016d2:	7efb      	ldrb	r3, [r7, #27]
 80016d4:	3301      	adds	r3, #1
 80016d6:	76fb      	strb	r3, [r7, #27]
 80016d8:	7efb      	ldrb	r3, [r7, #27]
 80016da:	2b13      	cmp	r3, #19
 80016dc:	f67f af18 	bls.w	8001510 <SCH_AddTask+0x2c>
        }
    }
    return SCH_TASKNUMBER;
 80016e0:	2314      	movs	r3, #20
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bcb0      	pop	{r4, r5, r7}
 80016ea:	4770      	bx	lr
 80016ec:	200001fc 	.word	0x200001fc

080016f0 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 80016f0:	b4b0      	push	{r4, r5, r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	e07c      	b.n	80017fa <SCH_DeleteTask+0x10a>
        if (tasks[i].id == id) {
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	4943      	ldr	r1, [pc, #268]	; (8001810 <SCH_DeleteTask+0x120>)
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	3304      	adds	r3, #4
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	79fa      	ldrb	r2, [r7, #7]
 8001714:	429a      	cmp	r2, r3
 8001716:	d16d      	bne.n	80017f4 <SCH_DeleteTask+0x104>
            uint8_t currentID = tasks[i].id;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	493d      	ldr	r1, [pc, #244]	; (8001810 <SCH_DeleteTask+0x120>)
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	3304      	adds	r3, #4
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	4937      	ldr	r1, [pc, #220]	; (8001810 <SCH_DeleteTask+0x120>)
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d01d      	beq.n	800177e <SCH_DeleteTask+0x8e>
                tasks[i + 1].delay += tasks[i].delay;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	4932      	ldr	r1, [pc, #200]	; (8001810 <SCH_DeleteTask+0x120>)
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3308      	adds	r3, #8
 8001754:	6819      	ldr	r1, [r3, #0]
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	482d      	ldr	r0, [pc, #180]	; (8001810 <SCH_DeleteTask+0x120>)
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4403      	add	r3, r0
 8001764:	3308      	adds	r3, #8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	3201      	adds	r2, #1
 800176c:	4419      	add	r1, r3
 800176e:	4828      	ldr	r0, [pc, #160]	; (8001810 <SCH_DeleteTask+0x120>)
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4403      	add	r3, r0
 800177a:	3308      	adds	r3, #8
 800177c:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	73bb      	strb	r3, [r7, #14]
 8001782:	e017      	b.n	80017b4 <SCH_DeleteTask+0xc4>
                tasks[j] = tasks[j + 1];
 8001784:	7bbb      	ldrb	r3, [r7, #14]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	7bb9      	ldrb	r1, [r7, #14]
 800178a:	4821      	ldr	r0, [pc, #132]	; (8001810 <SCH_DeleteTask+0x120>)
 800178c:	460b      	mov	r3, r1
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4418      	add	r0, r3
 8001796:	491e      	ldr	r1, [pc, #120]	; (8001810 <SCH_DeleteTask+0x120>)
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	4604      	mov	r4, r0
 80017a4:	461d      	mov	r5, r3
 80017a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017aa:	682b      	ldr	r3, [r5, #0]
 80017ac:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80017ae:	7bbb      	ldrb	r3, [r7, #14]
 80017b0:	3301      	adds	r3, #1
 80017b2:	73bb      	strb	r3, [r7, #14]
 80017b4:	7bbb      	ldrb	r3, [r7, #14]
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d9e4      	bls.n	8001784 <SCH_DeleteTask+0x94>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <SCH_DeleteTask+0x120>)
 80017bc:	2200      	movs	r2, #0
 80017be:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <SCH_DeleteTask+0x120>)
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <SCH_DeleteTask+0x120>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            tasks[SCH_TASKNUMBER - 1].period = 0;
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <SCH_DeleteTask+0x120>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <SCH_DeleteTask+0x120>)
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <SCH_DeleteTask+0x120>)
 80017e4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e007      	b.n	8001804 <SCH_DeleteTask+0x114>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	3301      	adds	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b13      	cmp	r3, #19
 80017fe:	f67f af7f 	bls.w	8001700 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bcb0      	pop	{r4, r5, r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200001fc 	.word	0x200001fc

08001814 <SCH_RefreshTask>:

unsigned char SCH_RefreshTask(void) {
 8001814:	b4b0      	push	{r4, r5, r7}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return 0;
 800181a:	4b96      	ldr	r3, [pc, #600]	; (8001a74 <SCH_RefreshTask+0x260>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <SCH_RefreshTask+0x12>
 8001822:	2300      	movs	r3, #0
 8001824:	e120      	b.n	8001a68 <SCH_RefreshTask+0x254>
    SCH_Task currentTask = tasks[0];
 8001826:	4b93      	ldr	r3, [pc, #588]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001828:	463c      	mov	r4, r7
 800182a:	461d      	mov	r5, r3
 800182c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001830:	682b      	ldr	r3, [r5, #0]
 8001832:	6023      	str	r3, [r4, #0]
    uint32_t currentDelay = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001838:	2300      	movs	r3, #0
 800183a:	76fb      	strb	r3, [r7, #27]
 800183c:	e10f      	b.n	8001a5e <SCH_RefreshTask+0x24a>
        if (i + 1 == SCH_TASKNUMBER || tasks[i + 1].functionPointer == NULL) {
 800183e:	7efb      	ldrb	r3, [r7, #27]
 8001840:	2b13      	cmp	r3, #19
 8001842:	d00a      	beq.n	800185a <SCH_RefreshTask+0x46>
 8001844:	7efb      	ldrb	r3, [r7, #27]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	498a      	ldr	r1, [pc, #552]	; (8001a74 <SCH_RefreshTask+0x260>)
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d14a      	bne.n	80018f0 <SCH_RefreshTask+0xdc>
            tasks[i].functionPointer = currentTask.functionPointer;
 800185a:	7efa      	ldrb	r2, [r7, #27]
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	4885      	ldr	r0, [pc, #532]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4403      	add	r3, r0
 800186a:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 800186c:	7efa      	ldrb	r2, [r7, #27]
 800186e:	7938      	ldrb	r0, [r7, #4]
 8001870:	4980      	ldr	r1, [pc, #512]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3304      	adds	r3, #4
 800187e:	4602      	mov	r2, r0
 8001880:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 8001882:	7efa      	ldrb	r2, [r7, #27]
 8001884:	68f9      	ldr	r1, [r7, #12]
 8001886:	487b      	ldr	r0, [pc, #492]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4403      	add	r3, r0
 8001892:	330c      	adds	r3, #12
 8001894:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8001896:	7efa      	ldrb	r2, [r7, #27]
 8001898:	4976      	ldr	r1, [pc, #472]	; (8001a74 <SCH_RefreshTask+0x260>)
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3310      	adds	r3, #16
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 80018aa:	68f9      	ldr	r1, [r7, #12]
 80018ac:	7efa      	ldrb	r2, [r7, #27]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	1ac9      	subs	r1, r1, r3
 80018b2:	4870      	ldr	r0, [pc, #448]	; (8001a74 <SCH_RefreshTask+0x260>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4403      	add	r3, r0
 80018be:	3308      	adds	r3, #8
 80018c0:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 80018c2:	7efa      	ldrb	r2, [r7, #27]
 80018c4:	496b      	ldr	r1, [pc, #428]	; (8001a74 <SCH_RefreshTask+0x260>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	3308      	adds	r3, #8
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <SCH_RefreshTask+0xd8>
                tasks[i].flag = 1;
 80018d8:	7efa      	ldrb	r2, [r7, #27]
 80018da:	4966      	ldr	r1, [pc, #408]	; (8001a74 <SCH_RefreshTask+0x260>)
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3310      	adds	r3, #16
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0bb      	b.n	8001a68 <SCH_RefreshTask+0x254>
        }
        currentDelay += tasks[i + 1].delay;
 80018f0:	7efb      	ldrb	r3, [r7, #27]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	495f      	ldr	r1, [pc, #380]	; (8001a74 <SCH_RefreshTask+0x260>)
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3308      	adds	r3, #8
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	4413      	add	r3, r2
 8001908:	61fb      	str	r3, [r7, #28]
        if (currentDelay > currentTask.period) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	429a      	cmp	r2, r3
 8001910:	f240 808d 	bls.w	8001a2e <SCH_RefreshTask+0x21a>
            tasks[i].functionPointer = currentTask.functionPointer;
 8001914:	7efa      	ldrb	r2, [r7, #27]
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	4856      	ldr	r0, [pc, #344]	; (8001a74 <SCH_RefreshTask+0x260>)
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4403      	add	r3, r0
 8001924:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8001926:	7efa      	ldrb	r2, [r7, #27]
 8001928:	7938      	ldrb	r0, [r7, #4]
 800192a:	4952      	ldr	r1, [pc, #328]	; (8001a74 <SCH_RefreshTask+0x260>)
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	3304      	adds	r3, #4
 8001938:	4602      	mov	r2, r0
 800193a:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 800193c:	7efa      	ldrb	r2, [r7, #27]
 800193e:	68f9      	ldr	r1, [r7, #12]
 8001940:	484c      	ldr	r0, [pc, #304]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4403      	add	r3, r0
 800194c:	330c      	adds	r3, #12
 800194e:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8001950:	7efa      	ldrb	r2, [r7, #27]
 8001952:	4948      	ldr	r1, [pc, #288]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3310      	adds	r3, #16
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 800196c:	7efb      	ldrb	r3, [r7, #27]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	4940      	ldr	r1, [pc, #256]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	3308      	adds	r3, #8
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	7efa      	ldrb	r2, [r7, #27]
 8001984:	1ac9      	subs	r1, r1, r3
 8001986:	483b      	ldr	r0, [pc, #236]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4403      	add	r3, r0
 8001992:	3308      	adds	r3, #8
 8001994:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8001996:	7efa      	ldrb	r2, [r7, #27]
 8001998:	4936      	ldr	r1, [pc, #216]	; (8001a74 <SCH_RefreshTask+0x260>)
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	3308      	adds	r3, #8
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <SCH_RefreshTask+0x1ac>
                tasks[i].flag = 1;
 80019ac:	7efa      	ldrb	r2, [r7, #27]
 80019ae:	4931      	ldr	r1, [pc, #196]	; (8001a74 <SCH_RefreshTask+0x260>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	3310      	adds	r3, #16
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 80019c0:	7efb      	ldrb	r3, [r7, #27]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	492b      	ldr	r1, [pc, #172]	; (8001a74 <SCH_RefreshTask+0x260>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	3308      	adds	r3, #8
 80019d2:	6819      	ldr	r1, [r3, #0]
 80019d4:	7efa      	ldrb	r2, [r7, #27]
 80019d6:	4827      	ldr	r0, [pc, #156]	; (8001a74 <SCH_RefreshTask+0x260>)
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4403      	add	r3, r0
 80019e2:	3308      	adds	r3, #8
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	7efa      	ldrb	r2, [r7, #27]
 80019e8:	3201      	adds	r2, #1
 80019ea:	1ac9      	subs	r1, r1, r3
 80019ec:	4821      	ldr	r0, [pc, #132]	; (8001a74 <SCH_RefreshTask+0x260>)
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4403      	add	r3, r0
 80019f8:	3308      	adds	r3, #8
 80019fa:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 80019fc:	7efb      	ldrb	r3, [r7, #27]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	491c      	ldr	r1, [pc, #112]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3308      	adds	r3, #8
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <SCH_RefreshTask+0x216>
                tasks[i + 1].flag = 1;
 8001a14:	7efb      	ldrb	r3, [r7, #27]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	4916      	ldr	r1, [pc, #88]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3310      	adds	r3, #16
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e01c      	b.n	8001a68 <SCH_RefreshTask+0x254>
        }
        else {
            tasks[i] = tasks[i + 1];
 8001a2e:	7efb      	ldrb	r3, [r7, #27]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	7ef9      	ldrb	r1, [r7, #27]
 8001a34:	480f      	ldr	r0, [pc, #60]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001a36:	460b      	mov	r3, r1
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4418      	add	r0, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	; (8001a74 <SCH_RefreshTask+0x260>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	461d      	mov	r5, r3
 8001a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001a58:	7efb      	ldrb	r3, [r7, #27]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	76fb      	strb	r3, [r7, #27]
 8001a5e:	7efb      	ldrb	r3, [r7, #27]
 8001a60:	2b13      	cmp	r3, #19
 8001a62:	f67f aeec 	bls.w	800183e <SCH_RefreshTask+0x2a>
        }
    }
    return 0;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3724      	adds	r7, #36	; 0x24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bcb0      	pop	{r4, r5, r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200001fc 	.word	0x200001fc

08001a78 <SCH_Report>:

uint8_t SCH_Report(void) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	71bb      	strb	r3, [r7, #6]
 8001a86:	e00f      	b.n	8001aa8 <SCH_Report+0x30>
		if (tasks[i].functionPointer != 0) {
 8001a88:	79ba      	ldrb	r2, [r7, #6]
 8001a8a:	490c      	ldr	r1, [pc, #48]	; (8001abc <SCH_Report+0x44>)
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <SCH_Report+0x2a>
			count ++;
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	71bb      	strb	r3, [r7, #6]
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	2b13      	cmp	r3, #19
 8001aac:	d9ec      	bls.n	8001a88 <SCH_Report+0x10>
		}
	}
	return count;
 8001aae:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	200001fc 	.word	0x200001fc

08001ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_MspInit+0x40>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_MspInit+0x40>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6193      	str	r3, [r2, #24]
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_MspInit+0x40>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_MspInit+0x40>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_MspInit+0x40>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_MspInit+0x40>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b14:	d114      	bne.n	8001b40 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_TIM_Base_MspInit+0x78>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_TIM_Base_MspInit+0x78>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_TIM_Base_MspInit+0x78>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	201c      	movs	r0, #28
 8001b34:	f000 fd0f 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b38:	201c      	movs	r0, #28
 8001b3a:	f000 fd28 	bl	800258e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b3e:	e018      	b.n	8001b72 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <HAL_TIM_Base_MspInit+0x7c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d113      	bne.n	8001b72 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_TIM_Base_MspInit+0x78>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <HAL_TIM_Base_MspInit+0x78>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	61d3      	str	r3, [r2, #28]
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_TIM_Base_MspInit+0x78>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	201d      	movs	r0, #29
 8001b68:	f000 fcf5 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b6c:	201d      	movs	r0, #29
 8001b6e:	f000 fd0e 	bl	800258e <HAL_NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40000400 	.word	0x40000400

08001b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	; (8001bdc <HAL_TIM_MspPostInit+0x58>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d117      	bne.n	8001bd4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_TIM_MspPostInit+0x5c>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <HAL_TIM_MspPostInit+0x5c>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_TIM_MspPostInit+0x5c>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bbc:	23c0      	movs	r3, #192	; 0xc0
 8001bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <HAL_TIM_MspPostInit+0x60>)
 8001bd0:	f000 fdaa 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010800 	.word	0x40010800

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <HAL_UART_MspInit+0x98>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d137      	bne.n	8001c78 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c08:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_UART_MspInit+0x9c>)
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <HAL_UART_MspInit+0x9c>)
 8001c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c12:	61d3      	str	r3, [r2, #28]
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_UART_MspInit+0x9c>)
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_UART_MspInit+0x9c>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <HAL_UART_MspInit+0x9c>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_UART_MspInit+0x9c>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480f      	ldr	r0, [pc, #60]	; (8001c88 <HAL_UART_MspInit+0xa0>)
 8001c4c:	f000 fd6c 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c50:	2308      	movs	r3, #8
 8001c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	4619      	mov	r1, r3
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <HAL_UART_MspInit+0xa0>)
 8001c64:	f000 fd60 	bl	8002728 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2026      	movs	r0, #38	; 0x26
 8001c6e:	f000 fc72 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c72:	2026      	movs	r0, #38	; 0x26
 8001c74:	f000 fc8b 	bl	800258e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40004400 	.word	0x40004400
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010800 	.word	0x40010800

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <NMI_Handler+0x4>

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd2:	f000 fb4d 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <TIM2_IRQHandler+0x10>)
 8001ce2:	f001 fc85 	bl	80035f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000114 	.word	0x20000114

08001cf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <TIM3_IRQHandler+0x10>)
 8001cf6:	f001 fc7b 	bl	80035f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000015c 	.word	0x2000015c

08001d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <USART2_IRQHandler+0x10>)
 8001d0a:	f002 fb23 	bl	8004354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200001a4 	.word	0x200001a4

08001d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <_sbrk+0x5c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <_sbrk+0x60>)
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <_sbrk+0x64>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <_sbrk+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d207      	bcs.n	8001d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d48:	f003 f8ac 	bl	8004ea4 <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	220c      	movs	r2, #12
 8001d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <_sbrk+0x64>)
 8001d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20002800 	.word	0x20002800
 8001d78:	00000400 	.word	0x00000400
 8001d7c:	2000038c 	.word	0x2000038c
 8001d80:	200004e8 	.word	0x200004e8

08001d84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <testMCU>:

#include "test.h"

extern TIM_HandleTypeDef htim3;

void testMCU(void) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001d94:	2120      	movs	r1, #32
 8001d96:	4802      	ldr	r0, [pc, #8]	; (8001da0 <testMCU+0x10>)
 8001d98:	f000 fe71 	bl	8002a7e <HAL_GPIO_TogglePin>
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40010800 	.word	0x40010800

08001da4 <testButton>:

void testButton(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	if (buttonPressed(1) || buttonPressed(2) || buttonPressed(3)) {
 8001da8:	2001      	movs	r0, #1
 8001daa:	f7fe fa59 	bl	8000260 <buttonPressed>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10b      	bne.n	8001dcc <testButton+0x28>
 8001db4:	2002      	movs	r0, #2
 8001db6:	f7fe fa53 	bl	8000260 <buttonPressed>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <testButton+0x28>
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f7fe fa4d 	bl	8000260 <buttonPressed>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d02c      	beq.n	8001e26 <testButton+0x82>
		HAL_GPIO_TogglePin(TRAFFIC0_RED_GPIO_Port, TRAFFIC0_RED_Pin);
 8001dcc:	2110      	movs	r1, #16
 8001dce:	4817      	ldr	r0, [pc, #92]	; (8001e2c <testButton+0x88>)
 8001dd0:	f000 fe55 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC0_GREEN_GPIO_Port, TRAFFIC0_GREEN_Pin);
 8001dd4:	2140      	movs	r1, #64	; 0x40
 8001dd6:	4815      	ldr	r0, [pc, #84]	; (8001e2c <testButton+0x88>)
 8001dd8:	f000 fe51 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC0_YELLOW_GPIO_Port, TRAFFIC0_YELLOW_Pin);
 8001ddc:	2120      	movs	r1, #32
 8001dde:	4813      	ldr	r0, [pc, #76]	; (8001e2c <testButton+0x88>)
 8001de0:	f000 fe4d 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_RED_GPIO_Port, TRAFFIC1_RED_Pin);
 8001de4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de8:	4810      	ldr	r0, [pc, #64]	; (8001e2c <testButton+0x88>)
 8001dea:	f000 fe48 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_GREEN_GPIO_Port, TRAFFIC1_GREEN_Pin);
 8001dee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001df2:	480e      	ldr	r0, [pc, #56]	; (8001e2c <testButton+0x88>)
 8001df4:	f000 fe43 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_YELLOW_GPIO_Port, TRAFFIC1_YELLOW_Pin);
 8001df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dfc:	480b      	ldr	r0, [pc, #44]	; (8001e2c <testButton+0x88>)
 8001dfe:	f000 fe3e 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN0_RED_GPIO_Port, PEDESTRIAN0_RED_Pin);
 8001e02:	2101      	movs	r1, #1
 8001e04:	4809      	ldr	r0, [pc, #36]	; (8001e2c <testButton+0x88>)
 8001e06:	f000 fe3a 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN0_GREEN_Pin);
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4807      	ldr	r0, [pc, #28]	; (8001e2c <testButton+0x88>)
 8001e0e:	f000 fe36 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN1_RED_GPIO_Port, PEDESTRIAN1_RED_Pin);
 8001e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <testButton+0x88>)
 8001e18:	f000 fe31 	bl	8002a7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN1_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_Pin);
 8001e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <testButton+0x88>)
 8001e22:	f000 fe2c 	bl	8002a7e <HAL_GPIO_TogglePin>
	}
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40010c00 	.word	0x40010c00

08001e30 <testBuzzer>:

void testBuzzer(void) {
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period);
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <testBuzzer+0x20>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <testBuzzer+0x20>)
 8001e3a:	68d2      	ldr	r2, [r2, #12]
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period);
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <testBuzzer+0x20>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <testBuzzer+0x20>)
 8001e44:	68d2      	ldr	r2, [r2, #12]
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	2000015c 	.word	0x2000015c

08001e54 <testLED>:

void testLED(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRAFFIC0_RED_GPIO_Port, TRAFFIC0_RED_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	481b      	ldr	r0, [pc, #108]	; (8001ecc <testLED+0x78>)
 8001e5e:	f000 fdf6 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC0_GREEN_GPIO_Port, TRAFFIC0_GREEN_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2140      	movs	r1, #64	; 0x40
 8001e66:	4819      	ldr	r0, [pc, #100]	; (8001ecc <testLED+0x78>)
 8001e68:	f000 fdf1 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC0_YELLOW_GPIO_Port, TRAFFIC0_YELLOW_Pin, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2120      	movs	r1, #32
 8001e70:	4816      	ldr	r0, [pc, #88]	; (8001ecc <testLED+0x78>)
 8001e72:	f000 fdec 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_RED_GPIO_Port, TRAFFIC1_RED_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7c:	4813      	ldr	r0, [pc, #76]	; (8001ecc <testLED+0x78>)
 8001e7e:	f000 fde6 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_GREEN_GPIO_Port, TRAFFIC1_GREEN_Pin, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e88:	4810      	ldr	r0, [pc, #64]	; (8001ecc <testLED+0x78>)
 8001e8a:	f000 fde0 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_YELLOW_GPIO_Port, TRAFFIC1_YELLOW_Pin, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <testLED+0x78>)
 8001e96:	f000 fdda 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN0_RED_GPIO_Port, PEDESTRIAN0_RED_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	480b      	ldr	r0, [pc, #44]	; (8001ecc <testLED+0x78>)
 8001ea0:	f000 fdd5 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN0_GREEN_Pin, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	4808      	ldr	r0, [pc, #32]	; (8001ecc <testLED+0x78>)
 8001eaa:	f000 fdd0 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN1_RED_GPIO_Port, PEDESTRIAN1_RED_Pin, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <testLED+0x78>)
 8001eb6:	f000 fdca 	bl	8002a4e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN1_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <testLED+0x78>)
 8001ec2:	f000 fdc4 	bl	8002a4e <HAL_GPIO_WritePin>
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40010c00 	.word	0x40010c00

08001ed0 <trafficToggle>:

static uint16_t trafficRedPins[TRAFFIC_NUMBER] = {TRAFFIC0_RED_Pin, TRAFFIC1_RED_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMBER] = {TRAFFIC0_GREEN_Pin, TRAFFIC1_GREEN_Pin};
static uint16_t trafficYellowPins[TRAFFIC_NUMBER] = {TRAFFIC0_YELLOW_Pin, TRAFFIC1_YELLOW_Pin};

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460a      	mov	r2, r1
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8001ee0:	79bb      	ldrb	r3, [r7, #6]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	f200 80ce 	bhi.w	8002084 <trafficToggle+0x1b4>
 8001ee8:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <trafficToggle+0x20>)
 8001eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eee:	bf00      	nop
 8001ef0:	08001f01 	.word	0x08001f01
 8001ef4:	08001f53 	.word	0x08001f53
 8001ef8:	08001fb9 	.word	0x08001fb9
 8001efc:	0800201f 	.word	0x0800201f
	case TRAFFIC_OFF:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4a66      	ldr	r2, [pc, #408]	; (800209c <trafficToggle+0x1cc>)
 8001f04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <trafficToggle+0x1d0>)
 8001f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4619      	mov	r1, r3
 8001f14:	f000 fd9b 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	4a62      	ldr	r2, [pc, #392]	; (80020a4 <trafficToggle+0x1d4>)
 8001f1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	4a61      	ldr	r2, [pc, #388]	; (80020a8 <trafficToggle+0x1d8>)
 8001f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f000 fd8f 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <trafficToggle+0x1dc>)
 8001f34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4a5d      	ldr	r2, [pc, #372]	; (80020b0 <trafficToggle+0x1e0>)
 8001f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4619      	mov	r1, r3
 8001f44:	f000 fd83 	bl	8002a4e <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_OFF;
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	4a5a      	ldr	r2, [pc, #360]	; (80020b4 <trafficToggle+0x1e4>)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	54d1      	strb	r1, [r2, r3]
		break;
 8001f50:	e09f      	b.n	8002092 <trafficToggle+0x1c2>
	case TRAFFIC_RED:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_RESET);
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	4a51      	ldr	r2, [pc, #324]	; (800209c <trafficToggle+0x1cc>)
 8001f56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4a50      	ldr	r2, [pc, #320]	; (80020a0 <trafficToggle+0x1d0>)
 8001f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f62:	2200      	movs	r2, #0
 8001f64:	4619      	mov	r1, r3
 8001f66:	f000 fd72 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4a4d      	ldr	r2, [pc, #308]	; (80020a4 <trafficToggle+0x1d4>)
 8001f6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <trafficToggle+0x1d8>)
 8001f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f000 fd66 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4a49      	ldr	r2, [pc, #292]	; (80020ac <trafficToggle+0x1dc>)
 8001f86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4a48      	ldr	r2, [pc, #288]	; (80020b0 <trafficToggle+0x1e0>)
 8001f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f92:	2201      	movs	r2, #1
 8001f94:	4619      	mov	r1, r3
 8001f96:	f000 fd5a 	bl	8002a4e <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_RED;
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4a45      	ldr	r2, [pc, #276]	; (80020b4 <trafficToggle+0x1e4>)
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001fa2:	4b45      	ldr	r3, [pc, #276]	; (80020b8 <trafficToggle+0x1e8>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d16e      	bne.n	8002088 <trafficToggle+0x1b8>
			trafficCounters[index] = trafficRedDuration;
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4a43      	ldr	r2, [pc, #268]	; (80020bc <trafficToggle+0x1ec>)
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4943      	ldr	r1, [pc, #268]	; (80020c0 <trafficToggle+0x1f0>)
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001fb6:	e067      	b.n	8002088 <trafficToggle+0x1b8>
	case TRAFFIC_GREEN:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	4a38      	ldr	r2, [pc, #224]	; (800209c <trafficToggle+0x1cc>)
 8001fbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	4a37      	ldr	r2, [pc, #220]	; (80020a0 <trafficToggle+0x1d0>)
 8001fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f000 fd3f 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <trafficToggle+0x1d4>)
 8001fd4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <trafficToggle+0x1d8>)
 8001fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f000 fd33 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_RESET);
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	4a30      	ldr	r2, [pc, #192]	; (80020ac <trafficToggle+0x1dc>)
 8001fec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4a2f      	ldr	r2, [pc, #188]	; (80020b0 <trafficToggle+0x1e0>)
 8001ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f000 fd27 	bl	8002a4e <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_GREEN;
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <trafficToggle+0x1e4>)
 8002004:	2102      	movs	r1, #2
 8002006:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <trafficToggle+0x1e8>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d13d      	bne.n	800208c <trafficToggle+0x1bc>
			trafficCounters[index] = trafficGreenDuration;
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <trafficToggle+0x1f4>)
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	492a      	ldr	r1, [pc, #168]	; (80020c0 <trafficToggle+0x1f0>)
 8002018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 800201c:	e036      	b.n	800208c <trafficToggle+0x1bc>
	case TRAFFIC_YELLOW:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4a1e      	ldr	r2, [pc, #120]	; (800209c <trafficToggle+0x1cc>)
 8002022:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <trafficToggle+0x1d0>)
 800202a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800202e:	2201      	movs	r2, #1
 8002030:	4619      	mov	r1, r3
 8002032:	f000 fd0c 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_RESET);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <trafficToggle+0x1d4>)
 800203a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <trafficToggle+0x1d8>)
 8002042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002046:	2200      	movs	r2, #0
 8002048:	4619      	mov	r1, r3
 800204a:	f000 fd00 	bl	8002a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	4a16      	ldr	r2, [pc, #88]	; (80020ac <trafficToggle+0x1dc>)
 8002052:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <trafficToggle+0x1e0>)
 800205a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	f000 fcf4 	bl	8002a4e <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_YELLOW;
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <trafficToggle+0x1e4>)
 800206a:	2103      	movs	r1, #3
 800206c:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <trafficToggle+0x1e8>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d10c      	bne.n	8002090 <trafficToggle+0x1c0>
			trafficCounters[index] = trafficYellowDuration;
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <trafficToggle+0x1f8>)
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4910      	ldr	r1, [pc, #64]	; (80020c0 <trafficToggle+0x1f0>)
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8002082:	e005      	b.n	8002090 <trafficToggle+0x1c0>
	default:
		break;
 8002084:	bf00      	nop
 8002086:	e004      	b.n	8002092 <trafficToggle+0x1c2>
		break;
 8002088:	bf00      	nop
 800208a:	e002      	b.n	8002092 <trafficToggle+0x1c2>
		break;
 800208c:	bf00      	nop
 800208e:	e000      	b.n	8002092 <trafficToggle+0x1c2>
		break;
 8002090:	bf00      	nop
	}
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000040 	.word	0x20000040
 80020a0:	20000058 	.word	0x20000058
 80020a4:	20000050 	.word	0x20000050
 80020a8:	20000060 	.word	0x20000060
 80020ac:	20000048 	.word	0x20000048
 80020b0:	2000005c 	.word	0x2000005c
 80020b4:	20000390 	.word	0x20000390
 80020b8:	200000f4 	.word	0x200000f4
 80020bc:	20000034 	.word	0x20000034
 80020c0:	20000394 	.word	0x20000394
 80020c4:	20000038 	.word	0x20000038
 80020c8:	2000003c 	.word	0x2000003c

080020cc <traffic0Off>:

void traffic0Off(void) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_OFF);
 80020d0:	2100      	movs	r1, #0
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff fefc 	bl	8001ed0 <trafficToggle>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <traffic0Red>:
void traffic0Red(void) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 80020e0:	2101      	movs	r1, #1
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff fef4 	bl	8001ed0 <trafficToggle>
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <traffic0Green>:
void traffic0Green(void) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 80020f0:	2102      	movs	r1, #2
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff feec 	bl	8001ed0 <trafficToggle>
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <traffic0Yellow>:
void traffic0Yellow(void) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 8002100:	2103      	movs	r1, #3
 8002102:	2000      	movs	r0, #0
 8002104:	f7ff fee4 	bl	8001ed0 <trafficToggle>
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <traffic1Off>:

void traffic1Off(void) {
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_OFF);
 8002110:	2100      	movs	r1, #0
 8002112:	2001      	movs	r0, #1
 8002114:	f7ff fedc 	bl	8001ed0 <trafficToggle>
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <traffic1Red>:
void traffic1Red(void) {
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 8002120:	2101      	movs	r1, #1
 8002122:	2001      	movs	r0, #1
 8002124:	f7ff fed4 	bl	8001ed0 <trafficToggle>
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <traffic1Green>:
void traffic1Green(void) {
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 8002130:	2102      	movs	r1, #2
 8002132:	2001      	movs	r0, #1
 8002134:	f7ff fecc 	bl	8001ed0 <trafficToggle>
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}

0800213c <traffic1Yellow>:
void traffic1Yellow(void) {
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 8002140:	2103      	movs	r1, #3
 8002142:	2001      	movs	r0, #1
 8002144:	f7ff fec4 	bl	8001ed0 <trafficToggle>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <uartReport>:

#include "uart.h"

extern UART_HandleTypeDef huart2;

void uartReport(void) {
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b08b      	sub	sp, #44	; 0x2c
 8002150:	af00      	add	r7, sp, #0
	char str[40];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Time: %lu - Task: %u\r\n", HAL_GetTick(), SCH_Report()), 100);
 8002152:	f000 f91f 	bl	8002394 <HAL_GetTick>
 8002156:	4604      	mov	r4, r0
 8002158:	f7ff fc8e 	bl	8001a78 <SCH_Report>
 800215c:	4603      	mov	r3, r0
 800215e:	4638      	mov	r0, r7
 8002160:	4622      	mov	r2, r4
 8002162:	4907      	ldr	r1, [pc, #28]	; (8002180 <uartReport+0x34>)
 8002164:	f002 fe76 	bl	8004e54 <siprintf>
 8002168:	4603      	mov	r3, r0
 800216a:	b29a      	uxth	r2, r3
 800216c:	4639      	mov	r1, r7
 800216e:	2364      	movs	r3, #100	; 0x64
 8002170:	4804      	ldr	r0, [pc, #16]	; (8002184 <uartReport+0x38>)
 8002172:	f002 f847 	bl	8004204 <HAL_UART_Transmit>
}
 8002176:	bf00      	nop
 8002178:	372c      	adds	r7, #44	; 0x2c
 800217a:	46bd      	mov	sp, r7
 800217c:	bd90      	pop	{r4, r7, pc}
 800217e:	bf00      	nop
 8002180:	080057d0 	.word	0x080057d0
 8002184:	200001a4 	.word	0x200001a4

08002188 <uartRedDuration>:

void uartRedDuration(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficRedDuration / 1000), 100);
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <uartRedDuration+0x34>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <uartRedDuration+0x38>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099a      	lsrs	r2, r3, #6
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	4909      	ldr	r1, [pc, #36]	; (80021c4 <uartRedDuration+0x3c>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 fe58 	bl	8004e54 <siprintf>
 80021a4:	4603      	mov	r3, r0
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	1d39      	adds	r1, r7, #4
 80021aa:	2364      	movs	r3, #100	; 0x64
 80021ac:	4806      	ldr	r0, [pc, #24]	; (80021c8 <uartRedDuration+0x40>)
 80021ae:	f002 f829 	bl	8004204 <HAL_UART_Transmit>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000034 	.word	0x20000034
 80021c0:	10624dd3 	.word	0x10624dd3
 80021c4:	080057e8 	.word	0x080057e8
 80021c8:	200001a4 	.word	0x200001a4

080021cc <uartGreenDuration>:

void uartGreenDuration(void) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficGreenDuration / 1000), 100);
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <uartGreenDuration+0x34>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <uartGreenDuration+0x38>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	099a      	lsrs	r2, r3, #6
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	4909      	ldr	r1, [pc, #36]	; (8002208 <uartGreenDuration+0x3c>)
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 fe36 	bl	8004e54 <siprintf>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	1d39      	adds	r1, r7, #4
 80021ee:	2364      	movs	r3, #100	; 0x64
 80021f0:	4806      	ldr	r0, [pc, #24]	; (800220c <uartGreenDuration+0x40>)
 80021f2:	f002 f807 	bl	8004204 <HAL_UART_Transmit>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000038 	.word	0x20000038
 8002204:	10624dd3 	.word	0x10624dd3
 8002208:	080057e8 	.word	0x080057e8
 800220c:	200001a4 	.word	0x200001a4

08002210 <uartYellowDuration>:

void uartYellowDuration(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficYellowDuration / 1000), 100);
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <uartYellowDuration+0x34>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <uartYellowDuration+0x38>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	099a      	lsrs	r2, r3, #6
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	4909      	ldr	r1, [pc, #36]	; (800224c <uartYellowDuration+0x3c>)
 8002226:	4618      	mov	r0, r3
 8002228:	f002 fe14 	bl	8004e54 <siprintf>
 800222c:	4603      	mov	r3, r0
 800222e:	b29a      	uxth	r2, r3
 8002230:	1d39      	adds	r1, r7, #4
 8002232:	2364      	movs	r3, #100	; 0x64
 8002234:	4806      	ldr	r0, [pc, #24]	; (8002250 <uartYellowDuration+0x40>)
 8002236:	f001 ffe5 	bl	8004204 <HAL_UART_Transmit>
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000003c 	.word	0x2000003c
 8002248:	10624dd3 	.word	0x10624dd3
 800224c:	080057e8 	.word	0x080057e8
 8002250:	200001a4 	.word	0x200001a4

08002254 <uartCounter>:

void uartCounter(void) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficCounters[0] / 1000), 100);
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <uartCounter+0x34>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <uartCounter+0x38>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	099a      	lsrs	r2, r3, #6
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	4909      	ldr	r1, [pc, #36]	; (8002290 <uartCounter+0x3c>)
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fdf2 	bl	8004e54 <siprintf>
 8002270:	4603      	mov	r3, r0
 8002272:	b29a      	uxth	r2, r3
 8002274:	1d39      	adds	r1, r7, #4
 8002276:	2364      	movs	r3, #100	; 0x64
 8002278:	4806      	ldr	r0, [pc, #24]	; (8002294 <uartCounter+0x40>)
 800227a:	f001 ffc3 	bl	8004204 <HAL_UART_Transmit>
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000394 	.word	0x20000394
 800228c:	10624dd3 	.word	0x10624dd3
 8002290:	080057e8 	.word	0x080057e8
 8002294:	200001a4 	.word	0x200001a4

08002298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002298:	f7ff fd74 	bl	8001d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800229c:	480b      	ldr	r0, [pc, #44]	; (80022cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800229e:	490c      	ldr	r1, [pc, #48]	; (80022d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022a0:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022b4:	4c09      	ldr	r4, [pc, #36]	; (80022dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022c2:	f002 fdf5 	bl	8004eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022c6:	f7fe fd81 	bl	8000dcc <main>
  bx lr
 80022ca:	4770      	bx	lr
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80022d4:	08005860 	.word	0x08005860
  ldr r2, =_sbss
 80022d8:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80022dc:	200004e8 	.word	0x200004e8

080022e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC1_2_IRQHandler>
	...

080022e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_Init+0x28>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_Init+0x28>)
 80022ee:	f043 0310 	orr.w	r3, r3, #16
 80022f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 f923 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fa:	200f      	movs	r0, #15
 80022fc:	f000 f808 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002300:	f7ff fbde 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40022000 	.word	0x40022000

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f93b 	bl	80025aa <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 f903 	bl	8002556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000030 	.word	0x20000030
 8002368:	20000068 	.word	0x20000068
 800236c:	20000064 	.word	0x20000064

08002370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_IncTick+0x1c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_IncTick+0x20>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a03      	ldr	r2, [pc, #12]	; (8002390 <HAL_IncTick+0x20>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	20000068 	.word	0x20000068
 8002390:	2000039c 	.word	0x2000039c

08002394 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <HAL_GetTick+0x10>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	2000039c 	.word	0x2000039c

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4906      	ldr	r1, [pc, #24]	; (8002440 <__NVIC_EnableIRQ+0x34>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	e000e100 	.word	0xe000e100

08002444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db0a      	blt.n	800246e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	490c      	ldr	r1, [pc, #48]	; (8002490 <__NVIC_SetPriority+0x4c>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	0112      	lsls	r2, r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	440b      	add	r3, r1
 8002468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800246c:	e00a      	b.n	8002484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <__NVIC_SetPriority+0x50>)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3b04      	subs	r3, #4
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	440b      	add	r3, r1
 8002482:	761a      	strb	r2, [r3, #24]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f1c3 0307 	rsb	r3, r3, #7
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	bf28      	it	cs
 80024b6:	2304      	movcs	r3, #4
 80024b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3304      	adds	r3, #4
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d902      	bls.n	80024c8 <NVIC_EncodePriority+0x30>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3b03      	subs	r3, #3
 80024c6:	e000      	b.n	80024ca <NVIC_EncodePriority+0x32>
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	f04f 32ff 	mov.w	r2, #4294967295
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	401a      	ands	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e0:	f04f 31ff 	mov.w	r1, #4294967295
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	43d9      	mvns	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	4313      	orrs	r3, r2
         );
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250c:	d301      	bcc.n	8002512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2301      	movs	r3, #1
 8002510:	e00f      	b.n	8002532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <SysTick_Config+0x40>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251a:	210f      	movs	r1, #15
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f7ff ff90 	bl	8002444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <SysTick_Config+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <SysTick_Config+0x40>)
 800252c:	2207      	movs	r2, #7
 800252e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff2d 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002568:	f7ff ff42 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 800256c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff ff90 	bl	8002498 <NVIC_EncodePriority>
 8002578:	4602      	mov	r2, r0
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff5f 	bl	8002444 <__NVIC_SetPriority>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff35 	bl	800240c <__NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffa2 	bl	80024fc <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d008      	beq.n	80025ec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2204      	movs	r2, #4
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e020      	b.n	800262e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 020e 	bic.w	r2, r2, #14
 80025fa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f202 	lsl.w	r2, r1, r2
 800261a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d005      	beq.n	800265c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2204      	movs	r2, #4
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e051      	b.n	8002700 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 020e 	bic.w	r2, r2, #14
 800266a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a22      	ldr	r2, [pc, #136]	; (800270c <HAL_DMA_Abort_IT+0xd4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d029      	beq.n	80026da <HAL_DMA_Abort_IT+0xa2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a21      	ldr	r2, [pc, #132]	; (8002710 <HAL_DMA_Abort_IT+0xd8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d022      	beq.n	80026d6 <HAL_DMA_Abort_IT+0x9e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_DMA_Abort_IT+0xdc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01a      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x98>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_DMA_Abort_IT+0xe0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d012      	beq.n	80026ca <HAL_DMA_Abort_IT+0x92>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_DMA_Abort_IT+0xe4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00a      	beq.n	80026c4 <HAL_DMA_Abort_IT+0x8c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_DMA_Abort_IT+0xe8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d102      	bne.n	80026be <HAL_DMA_Abort_IT+0x86>
 80026b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026bc:	e00e      	b.n	80026dc <HAL_DMA_Abort_IT+0xa4>
 80026be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c2:	e00b      	b.n	80026dc <HAL_DMA_Abort_IT+0xa4>
 80026c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c8:	e008      	b.n	80026dc <HAL_DMA_Abort_IT+0xa4>
 80026ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ce:	e005      	b.n	80026dc <HAL_DMA_Abort_IT+0xa4>
 80026d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026d4:	e002      	b.n	80026dc <HAL_DMA_Abort_IT+0xa4>
 80026d6:	2310      	movs	r3, #16
 80026d8:	e000      	b.n	80026dc <HAL_DMA_Abort_IT+0xa4>
 80026da:	2301      	movs	r3, #1
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <HAL_DMA_Abort_IT+0xec>)
 80026de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
    } 
  }
  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40020008 	.word	0x40020008
 8002710:	4002001c 	.word	0x4002001c
 8002714:	40020030 	.word	0x40020030
 8002718:	40020044 	.word	0x40020044
 800271c:	40020058 	.word	0x40020058
 8002720:	4002006c 	.word	0x4002006c
 8002724:	40020000 	.word	0x40020000

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b08b      	sub	sp, #44	; 0x2c
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	e161      	b.n	8002a00 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800273c:	2201      	movs	r2, #1
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8150 	bne.w	80029fa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a97      	ldr	r2, [pc, #604]	; (80029bc <HAL_GPIO_Init+0x294>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d05e      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002764:	4a95      	ldr	r2, [pc, #596]	; (80029bc <HAL_GPIO_Init+0x294>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d875      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800276a:	4a95      	ldr	r2, [pc, #596]	; (80029c0 <HAL_GPIO_Init+0x298>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d058      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002770:	4a93      	ldr	r2, [pc, #588]	; (80029c0 <HAL_GPIO_Init+0x298>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d86f      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 8002776:	4a93      	ldr	r2, [pc, #588]	; (80029c4 <HAL_GPIO_Init+0x29c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d052      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 800277c:	4a91      	ldr	r2, [pc, #580]	; (80029c4 <HAL_GPIO_Init+0x29c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d869      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 8002782:	4a91      	ldr	r2, [pc, #580]	; (80029c8 <HAL_GPIO_Init+0x2a0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04c      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002788:	4a8f      	ldr	r2, [pc, #572]	; (80029c8 <HAL_GPIO_Init+0x2a0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d863      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800278e:	4a8f      	ldr	r2, [pc, #572]	; (80029cc <HAL_GPIO_Init+0x2a4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d046      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002794:	4a8d      	ldr	r2, [pc, #564]	; (80029cc <HAL_GPIO_Init+0x2a4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d85d      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800279a:	2b12      	cmp	r3, #18
 800279c:	d82a      	bhi.n	80027f4 <HAL_GPIO_Init+0xcc>
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d859      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 80027a2:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <HAL_GPIO_Init+0x80>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	08002823 	.word	0x08002823
 80027ac:	080027fd 	.word	0x080027fd
 80027b0:	0800280f 	.word	0x0800280f
 80027b4:	08002851 	.word	0x08002851
 80027b8:	08002857 	.word	0x08002857
 80027bc:	08002857 	.word	0x08002857
 80027c0:	08002857 	.word	0x08002857
 80027c4:	08002857 	.word	0x08002857
 80027c8:	08002857 	.word	0x08002857
 80027cc:	08002857 	.word	0x08002857
 80027d0:	08002857 	.word	0x08002857
 80027d4:	08002857 	.word	0x08002857
 80027d8:	08002857 	.word	0x08002857
 80027dc:	08002857 	.word	0x08002857
 80027e0:	08002857 	.word	0x08002857
 80027e4:	08002857 	.word	0x08002857
 80027e8:	08002857 	.word	0x08002857
 80027ec:	08002805 	.word	0x08002805
 80027f0:	08002819 	.word	0x08002819
 80027f4:	4a76      	ldr	r2, [pc, #472]	; (80029d0 <HAL_GPIO_Init+0x2a8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027fa:	e02c      	b.n	8002856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	623b      	str	r3, [r7, #32]
          break;
 8002802:	e029      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	3304      	adds	r3, #4
 800280a:	623b      	str	r3, [r7, #32]
          break;
 800280c:	e024      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	3308      	adds	r3, #8
 8002814:	623b      	str	r3, [r7, #32]
          break;
 8002816:	e01f      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	330c      	adds	r3, #12
 800281e:	623b      	str	r3, [r7, #32]
          break;
 8002820:	e01a      	b.n	8002858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800282a:	2304      	movs	r3, #4
 800282c:	623b      	str	r3, [r7, #32]
          break;
 800282e:	e013      	b.n	8002858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002838:	2308      	movs	r3, #8
 800283a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	611a      	str	r2, [r3, #16]
          break;
 8002842:	e009      	b.n	8002858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002844:	2308      	movs	r3, #8
 8002846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	615a      	str	r2, [r3, #20]
          break;
 800284e:	e003      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002850:	2300      	movs	r3, #0
 8002852:	623b      	str	r3, [r7, #32]
          break;
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x130>
          break;
 8002856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	d801      	bhi.n	8002862 <HAL_GPIO_Init+0x13a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	e001      	b.n	8002866 <HAL_GPIO_Init+0x13e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2bff      	cmp	r3, #255	; 0xff
 800286c:	d802      	bhi.n	8002874 <HAL_GPIO_Init+0x14c>
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	e002      	b.n	800287a <HAL_GPIO_Init+0x152>
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3b08      	subs	r3, #8
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	210f      	movs	r1, #15
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	401a      	ands	r2, r3
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	431a      	orrs	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80a9 	beq.w	80029fa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028a8:	4b4a      	ldr	r3, [pc, #296]	; (80029d4 <HAL_GPIO_Init+0x2ac>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a49      	ldr	r2, [pc, #292]	; (80029d4 <HAL_GPIO_Init+0x2ac>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_GPIO_Init+0x2ac>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028c0:	4a45      	ldr	r2, [pc, #276]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	3302      	adds	r3, #2
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3d      	ldr	r2, [pc, #244]	; (80029dc <HAL_GPIO_Init+0x2b4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00d      	beq.n	8002908 <HAL_GPIO_Init+0x1e0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3c      	ldr	r2, [pc, #240]	; (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d007      	beq.n	8002904 <HAL_GPIO_Init+0x1dc>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3b      	ldr	r2, [pc, #236]	; (80029e4 <HAL_GPIO_Init+0x2bc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d101      	bne.n	8002900 <HAL_GPIO_Init+0x1d8>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e004      	b.n	800290a <HAL_GPIO_Init+0x1e2>
 8002900:	2303      	movs	r3, #3
 8002902:	e002      	b.n	800290a <HAL_GPIO_Init+0x1e2>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_GPIO_Init+0x1e2>
 8002908:	2300      	movs	r3, #0
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	f002 0203 	and.w	r2, r2, #3
 8002910:	0092      	lsls	r2, r2, #2
 8002912:	4093      	lsls	r3, r2
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800291a:	492f      	ldr	r1, [pc, #188]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002934:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	492b      	ldr	r1, [pc, #172]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002942:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	43db      	mvns	r3, r3
 800294a:	4927      	ldr	r1, [pc, #156]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 800294c:	4013      	ands	r3, r2
 800294e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	4921      	ldr	r1, [pc, #132]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	60cb      	str	r3, [r1, #12]
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	43db      	mvns	r3, r3
 8002972:	491d      	ldr	r1, [pc, #116]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 8002974:	4013      	ands	r3, r2
 8002976:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	4917      	ldr	r1, [pc, #92]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	43db      	mvns	r3, r3
 800299a:	4913      	ldr	r1, [pc, #76]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 800299c:	4013      	ands	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01f      	beq.n	80029ec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	490d      	ldr	r1, [pc, #52]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
 80029b8:	e01f      	b.n	80029fa <HAL_GPIO_Init+0x2d2>
 80029ba:	bf00      	nop
 80029bc:	10320000 	.word	0x10320000
 80029c0:	10310000 	.word	0x10310000
 80029c4:	10220000 	.word	0x10220000
 80029c8:	10210000 	.word	0x10210000
 80029cc:	10120000 	.word	0x10120000
 80029d0:	10110000 	.word	0x10110000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40010800 	.word	0x40010800
 80029e0:	40010c00 	.word	0x40010c00
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_GPIO_Init+0x2f4>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	4909      	ldr	r1, [pc, #36]	; (8002a1c <HAL_GPIO_Init+0x2f4>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	3301      	adds	r3, #1
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f47f ae96 	bne.w	800273c <HAL_GPIO_Init+0x14>
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	372c      	adds	r7, #44	; 0x2c
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	40010400 	.word	0x40010400

08002a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e001      	b.n	8002a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	807b      	strh	r3, [r7, #2]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a5e:	787b      	ldrb	r3, [r7, #1]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a64:	887a      	ldrh	r2, [r7, #2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a6a:	e003      	b.n	8002a74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a6c:	887b      	ldrh	r3, [r7, #2]
 8002a6e:	041a      	lsls	r2, r3, #16
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	611a      	str	r2, [r3, #16]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a90:	887a      	ldrh	r2, [r7, #2]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	041a      	lsls	r2, r3, #16
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	400b      	ands	r3, r1
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	611a      	str	r2, [r3, #16]
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e272      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8087 	beq.w	8002bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad0:	4b92      	ldr	r3, [pc, #584]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d00c      	beq.n	8002af6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002adc:	4b8f      	ldr	r3, [pc, #572]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d112      	bne.n	8002b0e <HAL_RCC_OscConfig+0x5e>
 8002ae8:	4b8c      	ldr	r3, [pc, #560]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af4:	d10b      	bne.n	8002b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af6:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d06c      	beq.n	8002bdc <HAL_RCC_OscConfig+0x12c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d168      	bne.n	8002bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e24c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x76>
 8002b18:	4b80      	ldr	r3, [pc, #512]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a7f      	ldr	r2, [pc, #508]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e02e      	b.n	8002b84 <HAL_RCC_OscConfig+0xd4>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x98>
 8002b2e:	4b7b      	ldr	r3, [pc, #492]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7a      	ldr	r2, [pc, #488]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b78      	ldr	r3, [pc, #480]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a77      	ldr	r2, [pc, #476]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xd4>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0xbc>
 8002b52:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a71      	ldr	r2, [pc, #452]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b6f      	ldr	r3, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6e      	ldr	r2, [pc, #440]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xd4>
 8002b6c:	4b6b      	ldr	r3, [pc, #428]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6a      	ldr	r2, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a67      	ldr	r2, [pc, #412]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff fc02 	bl	8002394 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff fbfe 	bl	8002394 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e200      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b5d      	ldr	r3, [pc, #372]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xe4>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7ff fbee 	bl	8002394 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7ff fbea 	bl	8002394 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1ec      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x10c>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d063      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bea:	4b4c      	ldr	r3, [pc, #304]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bf6:	4b49      	ldr	r3, [pc, #292]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x18c>
 8002c02:	4b46      	ldr	r3, [pc, #280]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x176>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1c0      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b3d      	ldr	r3, [pc, #244]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4939      	ldr	r1, [pc, #228]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	e03a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_RCC_OscConfig+0x270>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7ff fba3 	bl	8002394 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c52:	f7ff fb9f 	bl	8002394 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1a1      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4927      	ldr	r1, [pc, #156]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c86:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <HAL_RCC_OscConfig+0x270>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7ff fb82 	bl	8002394 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7ff fb7e 	bl	8002394 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e180      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d03a      	beq.n	8002d34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d019      	beq.n	8002cfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ccc:	f7ff fb62 	bl	8002394 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7ff fb5e 	bl	8002394 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e160      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f000 face 	bl	8003294 <RCC_Delay>
 8002cf8:	e01c      	b.n	8002d34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_RCC_OscConfig+0x274>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d00:	f7ff fb48 	bl	8002394 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d06:	e00f      	b.n	8002d28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d08:	f7ff fb44 	bl	8002394 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d908      	bls.n	8002d28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e146      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	42420000 	.word	0x42420000
 8002d24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	4b92      	ldr	r3, [pc, #584]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e9      	bne.n	8002d08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80a6 	beq.w	8002e8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d46:	4b8b      	ldr	r3, [pc, #556]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10d      	bne.n	8002d6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	4b88      	ldr	r3, [pc, #544]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	4a87      	ldr	r2, [pc, #540]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	61d3      	str	r3, [r2, #28]
 8002d5e:	4b85      	ldr	r3, [pc, #532]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b82      	ldr	r3, [pc, #520]	; (8002f78 <HAL_RCC_OscConfig+0x4c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b7f      	ldr	r3, [pc, #508]	; (8002f78 <HAL_RCC_OscConfig+0x4c8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a7e      	ldr	r2, [pc, #504]	; (8002f78 <HAL_RCC_OscConfig+0x4c8>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7ff fb05 	bl	8002394 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7ff fb01 	bl	8002394 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b64      	cmp	r3, #100	; 0x64
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e103      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b75      	ldr	r3, [pc, #468]	; (8002f78 <HAL_RCC_OscConfig+0x4c8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x312>
 8002db4:	4b6f      	ldr	r3, [pc, #444]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4a6e      	ldr	r2, [pc, #440]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6213      	str	r3, [r2, #32]
 8002dc0:	e02d      	b.n	8002e1e <HAL_RCC_OscConfig+0x36e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x334>
 8002dca:	4b6a      	ldr	r3, [pc, #424]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a69      	ldr	r2, [pc, #420]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	6213      	str	r3, [r2, #32]
 8002dd6:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4a66      	ldr	r2, [pc, #408]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	6213      	str	r3, [r2, #32]
 8002de2:	e01c      	b.n	8002e1e <HAL_RCC_OscConfig+0x36e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d10c      	bne.n	8002e06 <HAL_RCC_OscConfig+0x356>
 8002dec:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a60      	ldr	r2, [pc, #384]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	4b5e      	ldr	r3, [pc, #376]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6213      	str	r3, [r2, #32]
 8002e04:	e00b      	b.n	8002e1e <HAL_RCC_OscConfig+0x36e>
 8002e06:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	4a5a      	ldr	r2, [pc, #360]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	6213      	str	r3, [r2, #32]
 8002e12:	4b58      	ldr	r3, [pc, #352]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4a57      	ldr	r2, [pc, #348]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	f023 0304 	bic.w	r3, r3, #4
 8002e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d015      	beq.n	8002e52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7ff fab5 	bl	8002394 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7ff fab1 	bl	8002394 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0b1      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ee      	beq.n	8002e2e <HAL_RCC_OscConfig+0x37e>
 8002e50:	e014      	b.n	8002e7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7ff fa9f 	bl	8002394 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7ff fa9b 	bl	8002394 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e09b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ee      	bne.n	8002e5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d105      	bne.n	8002e8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e82:	4b3c      	ldr	r3, [pc, #240]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8087 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e98:	4b36      	ldr	r3, [pc, #216]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d061      	beq.n	8002f68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d146      	bne.n	8002f3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eac:	4b33      	ldr	r3, [pc, #204]	; (8002f7c <HAL_RCC_OscConfig+0x4cc>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7ff fa6f 	bl	8002394 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7ff fa6b 	bl	8002394 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e06d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ecc:	4b29      	ldr	r3, [pc, #164]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d108      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4921      	ldr	r1, [pc, #132]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a19      	ldr	r1, [r3, #32]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	430b      	orrs	r3, r1
 8002f06:	491b      	ldr	r1, [pc, #108]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_RCC_OscConfig+0x4cc>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f12:	f7ff fa3f 	bl	8002394 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7ff fa3b 	bl	8002394 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e03d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x46a>
 8002f38:	e035      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_RCC_OscConfig+0x4cc>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7ff fa28 	bl	8002394 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7ff fa24 	bl	8002394 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e026      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x498>
 8002f66:	e01e      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e019      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_OscConfig+0x500>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0d0      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d910      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b67      	ldr	r3, [pc, #412]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 0207 	bic.w	r2, r3, #7
 8002fde:	4965      	ldr	r1, [pc, #404]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b63      	ldr	r3, [pc, #396]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0b8      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003010:	4b59      	ldr	r3, [pc, #356]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4a58      	ldr	r2, [pc, #352]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800301a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003028:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a52      	ldr	r2, [pc, #328]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003032:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	494d      	ldr	r1, [pc, #308]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d040      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d115      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e07f      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e073      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06b      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003092:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4936      	ldr	r1, [pc, #216]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a4:	f7ff f976 	bl	8002394 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ac:	f7ff f972 	bl	8002394 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e053      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 020c 	and.w	r2, r3, #12
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1eb      	bne.n	80030ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b27      	ldr	r3, [pc, #156]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d210      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 0207 	bic.w	r2, r3, #7
 80030ea:	4922      	ldr	r1, [pc, #136]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e032      	b.n	800316a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4916      	ldr	r1, [pc, #88]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	490e      	ldr	r1, [pc, #56]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003142:	f000 f821 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8003146:	4602      	mov	r2, r0
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	490a      	ldr	r1, [pc, #40]	; (800317c <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	5ccb      	ldrb	r3, [r1, r3]
 8003156:	fa22 f303 	lsr.w	r3, r2, r3
 800315a:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x1cc>)
 800315c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_ClockConfig+0x1d0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff f8d4 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40022000 	.word	0x40022000
 8003178:	40021000 	.word	0x40021000
 800317c:	080057f8 	.word	0x080057f8
 8003180:	20000030 	.word	0x20000030
 8003184:	20000064 	.word	0x20000064

08003188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031a2:	4b1e      	ldr	r3, [pc, #120]	; (800321c <HAL_RCC_GetSysClockFreq+0x94>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d002      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x30>
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d003      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0x36>
 80031b6:	e027      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ba:	613b      	str	r3, [r7, #16]
      break;
 80031bc:	e027      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	0c9b      	lsrs	r3, r3, #18
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	4a17      	ldr	r2, [pc, #92]	; (8003224 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031c8:	5cd3      	ldrb	r3, [r2, r3]
 80031ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_GetSysClockFreq+0x94>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	0c5b      	lsrs	r3, r3, #17
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	4a11      	ldr	r2, [pc, #68]	; (8003228 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a0d      	ldr	r2, [pc, #52]	; (8003220 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ea:	fb03 f202 	mul.w	r2, r3, r2
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e004      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a0c      	ldr	r2, [pc, #48]	; (800322c <HAL_RCC_GetSysClockFreq+0xa4>)
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	613b      	str	r3, [r7, #16]
      break;
 8003206:	e002      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetSysClockFreq+0x98>)
 800320a:	613b      	str	r3, [r7, #16]
      break;
 800320c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320e:	693b      	ldr	r3, [r7, #16]
}
 8003210:	4618      	mov	r0, r3
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	007a1200 	.word	0x007a1200
 8003224:	08005810 	.word	0x08005810
 8003228:	08005820 	.word	0x08005820
 800322c:	003d0900 	.word	0x003d0900

08003230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003234:	4b02      	ldr	r3, [pc, #8]	; (8003240 <HAL_RCC_GetHCLKFreq+0x10>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	20000030 	.word	0x20000030

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003248:	f7ff fff2 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4903      	ldr	r1, [pc, #12]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	08005808 	.word	0x08005808

0800326c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003270:	f7ff ffde 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	0adb      	lsrs	r3, r3, #11
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4903      	ldr	r1, [pc, #12]	; (8003290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	08005808 	.word	0x08005808

08003294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <RCC_Delay+0x34>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <RCC_Delay+0x38>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	0a5b      	lsrs	r3, r3, #9
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032b0:	bf00      	nop
  }
  while (Delay --);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1e5a      	subs	r2, r3, #1
 80032b6:	60fa      	str	r2, [r7, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f9      	bne.n	80032b0 <RCC_Delay+0x1c>
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	20000030 	.word	0x20000030
 80032cc:	10624dd3 	.word	0x10624dd3

080032d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e041      	b.n	8003366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fe fc04 	bl	8001b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 fc24 	bl	8003b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d001      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e035      	b.n	80033f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a16      	ldr	r2, [pc, #88]	; (8003400 <HAL_TIM_Base_Start_IT+0x90>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d009      	beq.n	80033be <HAL_TIM_Base_Start_IT+0x4e>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b2:	d004      	beq.n	80033be <HAL_TIM_Base_Start_IT+0x4e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a12      	ldr	r2, [pc, #72]	; (8003404 <HAL_TIM_Base_Start_IT+0x94>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d111      	bne.n	80033e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b06      	cmp	r3, #6
 80033ce:	d010      	beq.n	80033f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e0:	e007      	b.n	80033f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40000400 	.word	0x40000400

08003408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e041      	b.n	800349e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f839 	bl	80034a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f000 fb88 	bl	8003b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <HAL_TIM_PWM_Start+0x24>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e022      	b.n	8003522 <HAL_TIM_PWM_Start+0x6a>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d109      	bne.n	80034f6 <HAL_TIM_PWM_Start+0x3e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	e015      	b.n	8003522 <HAL_TIM_PWM_Start+0x6a>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d109      	bne.n	8003510 <HAL_TIM_PWM_Start+0x58>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e008      	b.n	8003522 <HAL_TIM_PWM_Start+0x6a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e059      	b.n	80035de <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start+0x82>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003538:	e013      	b.n	8003562 <HAL_TIM_PWM_Start+0xaa>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b04      	cmp	r3, #4
 800353e:	d104      	bne.n	800354a <HAL_TIM_PWM_Start+0x92>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003548:	e00b      	b.n	8003562 <HAL_TIM_PWM_Start+0xaa>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d104      	bne.n	800355a <HAL_TIM_PWM_Start+0xa2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003558:	e003      	b.n	8003562 <HAL_TIM_PWM_Start+0xaa>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fd6c 	bl	8004048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_TIM_PWM_Start+0x130>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d107      	bne.n	800358a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <HAL_TIM_PWM_Start+0x130>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d009      	beq.n	80035a8 <HAL_TIM_PWM_Start+0xf0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359c:	d004      	beq.n	80035a8 <HAL_TIM_PWM_Start+0xf0>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <HAL_TIM_PWM_Start+0x134>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d111      	bne.n	80035cc <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d010      	beq.n	80035dc <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ca:	e007      	b.n	80035dc <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40000400 	.word	0x40000400

080035f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b02      	cmp	r3, #2
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0202 	mvn.w	r2, #2
 800361c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fa76 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa69 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa78 	bl	8003b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0204 	mvn.w	r2, #4
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa4c 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fa3f 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fa4e 	bl	8003b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0208 	mvn.w	r2, #8
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2204      	movs	r2, #4
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa22 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fa15 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fa24 	bl	8003b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0210 	mvn.w	r2, #16
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2208      	movs	r2, #8
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9f8 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f9eb 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f9fa 	bl	8003b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0201 	mvn.w	r2, #1
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fd20 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fcd9 	bl	8004152 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f9be 	bl	8003b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d10e      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0220 	mvn.w	r2, #32
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fca4 	bl	8004140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800381a:	2302      	movs	r3, #2
 800381c:	e0ae      	b.n	800397c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	f200 809f 	bhi.w	800396c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800382e:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	08003869 	.word	0x08003869
 8003838:	0800396d 	.word	0x0800396d
 800383c:	0800396d 	.word	0x0800396d
 8003840:	0800396d 	.word	0x0800396d
 8003844:	080038a9 	.word	0x080038a9
 8003848:	0800396d 	.word	0x0800396d
 800384c:	0800396d 	.word	0x0800396d
 8003850:	0800396d 	.word	0x0800396d
 8003854:	080038eb 	.word	0x080038eb
 8003858:	0800396d 	.word	0x0800396d
 800385c:	0800396d 	.word	0x0800396d
 8003860:	0800396d 	.word	0x0800396d
 8003864:	0800392b 	.word	0x0800392b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f9cc 	bl	8003c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0208 	orr.w	r2, r2, #8
 8003882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0204 	bic.w	r2, r2, #4
 8003892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6999      	ldr	r1, [r3, #24]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	619a      	str	r2, [r3, #24]
      break;
 80038a6:	e064      	b.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fa12 	bl	8003cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6999      	ldr	r1, [r3, #24]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	021a      	lsls	r2, r3, #8
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	619a      	str	r2, [r3, #24]
      break;
 80038e8:	e043      	b.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fa5b 	bl	8003dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0208 	orr.w	r2, r2, #8
 8003904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0204 	bic.w	r2, r2, #4
 8003914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69d9      	ldr	r1, [r3, #28]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	61da      	str	r2, [r3, #28]
      break;
 8003928:	e023      	b.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 faa5 	bl	8003e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69d9      	ldr	r1, [r3, #28]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	021a      	lsls	r2, r3, #8
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	61da      	str	r2, [r3, #28]
      break;
 800396a:	e002      	b.n	8003972 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	75fb      	strb	r3, [r7, #23]
      break;
 8003970:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800397a:	7dfb      	ldrb	r3, [r7, #23]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_TIM_ConfigClockSource+0x1c>
 800399c:	2302      	movs	r3, #2
 800399e:	e0b4      	b.n	8003b0a <HAL_TIM_ConfigClockSource+0x186>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d8:	d03e      	beq.n	8003a58 <HAL_TIM_ConfigClockSource+0xd4>
 80039da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039de:	f200 8087 	bhi.w	8003af0 <HAL_TIM_ConfigClockSource+0x16c>
 80039e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e6:	f000 8086 	beq.w	8003af6 <HAL_TIM_ConfigClockSource+0x172>
 80039ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ee:	d87f      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x16c>
 80039f0:	2b70      	cmp	r3, #112	; 0x70
 80039f2:	d01a      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0xa6>
 80039f4:	2b70      	cmp	r3, #112	; 0x70
 80039f6:	d87b      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x16c>
 80039f8:	2b60      	cmp	r3, #96	; 0x60
 80039fa:	d050      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x11a>
 80039fc:	2b60      	cmp	r3, #96	; 0x60
 80039fe:	d877      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x16c>
 8003a00:	2b50      	cmp	r3, #80	; 0x50
 8003a02:	d03c      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0xfa>
 8003a04:	2b50      	cmp	r3, #80	; 0x50
 8003a06:	d873      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x16c>
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d058      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x13a>
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d86f      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x16c>
 8003a10:	2b30      	cmp	r3, #48	; 0x30
 8003a12:	d064      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x15a>
 8003a14:	2b30      	cmp	r3, #48	; 0x30
 8003a16:	d86b      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x16c>
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d060      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x15a>
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d867      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x16c>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d05c      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x15a>
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d05a      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x15a>
 8003a28:	e062      	b.n	8003af0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a3a:	f000 fae6 	bl	800400a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	609a      	str	r2, [r3, #8]
      break;
 8003a56:	e04f      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a68:	f000 facf 	bl	800400a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7a:	609a      	str	r2, [r3, #8]
      break;
 8003a7c:	e03c      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f000 fa46 	bl	8003f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2150      	movs	r1, #80	; 0x50
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fa9d 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e02c      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 fa64 	bl	8003f78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2160      	movs	r1, #96	; 0x60
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fa8d 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003abc:	e01c      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 fa26 	bl	8003f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2140      	movs	r1, #64	; 0x40
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fa7d 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003adc:	e00c      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f000 fa74 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003aee:	e003      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      break;
 8003af4:	e000      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
	...

08003b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <TIM_Base_SetConfig+0xa8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <TIM_Base_SetConfig+0x28>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d003      	beq.n	8003b84 <TIM_Base_SetConfig+0x28>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a22      	ldr	r2, [pc, #136]	; (8003c08 <TIM_Base_SetConfig+0xac>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d108      	bne.n	8003b96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1a      	ldr	r2, [pc, #104]	; (8003c04 <TIM_Base_SetConfig+0xa8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0x52>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0x52>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a17      	ldr	r2, [pc, #92]	; (8003c08 <TIM_Base_SetConfig+0xac>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <TIM_Base_SetConfig+0xa8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d103      	bne.n	8003bf4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	615a      	str	r2, [r3, #20]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40000400 	.word	0x40000400

08003c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f023 0201 	bic.w	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 0302 	bic.w	r3, r3, #2
 8003c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <TIM_OC1_SetConfig+0xc8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d10c      	bne.n	8003c82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f023 0308 	bic.w	r3, r3, #8
 8003c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <TIM_OC1_SetConfig+0xc8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d111      	bne.n	8003cae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	621a      	str	r2, [r3, #32]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00

08003cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f023 0210 	bic.w	r2, r3, #16
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0320 	bic.w	r3, r3, #32
 8003d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <TIM_OC2_SetConfig+0xd0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d10d      	bne.n	8003d54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a14      	ldr	r2, [pc, #80]	; (8003da8 <TIM_OC2_SetConfig+0xd0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d113      	bne.n	8003d84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	40012c00 	.word	0x40012c00

08003dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <TIM_OC3_SetConfig+0xd0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10d      	bne.n	8003e26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <TIM_OC3_SetConfig+0xd0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d113      	bne.n	8003e56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	621a      	str	r2, [r3, #32]
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40012c00 	.word	0x40012c00

08003e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	031b      	lsls	r3, r3, #12
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a0f      	ldr	r2, [pc, #60]	; (8003f18 <TIM_OC4_SetConfig+0x98>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d109      	bne.n	8003ef4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	40012c00 	.word	0x40012c00

08003f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f023 0201 	bic.w	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f023 030a 	bic.w	r3, r3, #10
 8003f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 0210 	bic.w	r2, r3, #16
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	031b      	lsls	r3, r3, #12
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	621a      	str	r2, [r3, #32]
}
 8003fcc:	bf00      	nop
 8003fce:	371c      	adds	r7, #28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f043 0307 	orr.w	r3, r3, #7
 8003ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800400a:	b480      	push	{r7}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004024:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	021a      	lsls	r2, r3, #8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	431a      	orrs	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	609a      	str	r2, [r3, #8]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2201      	movs	r2, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	43db      	mvns	r3, r3
 800406a:	401a      	ands	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	fa01 f303 	lsl.w	r3, r1, r3
 8004080:	431a      	orrs	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e041      	b.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a14      	ldr	r2, [pc, #80]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d004      	beq.n	8004100 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a10      	ldr	r2, [pc, #64]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d10c      	bne.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004106:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	4313      	orrs	r3, r2
 8004110:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40000400 	.word	0x40000400

08004140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e042      	b.n	80041fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fd fd2c 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2224      	movs	r2, #36	; 0x24
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fdc5 	bl	8004d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b20      	cmp	r3, #32
 8004222:	d16d      	bne.n	8004300 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_UART_Transmit+0x2c>
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e066      	b.n	8004302 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2221      	movs	r2, #33	; 0x21
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004242:	f7fe f8a7 	bl	8002394 <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	88fa      	ldrh	r2, [r7, #6]
 8004252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425c:	d108      	bne.n	8004270 <HAL_UART_Transmit+0x6c>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	e003      	b.n	8004278 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004278:	e02a      	b.n	80042d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fb14 	bl	80048b2 <UART_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e036      	b.n	8004302 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	3302      	adds	r3, #2
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	e007      	b.n	80042c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	781a      	ldrb	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	3301      	adds	r3, #1
 80042c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1cf      	bne.n	800427a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	2140      	movs	r1, #64	; 0x40
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fae4 	bl	80048b2 <UART_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e006      	b.n	8004302 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e000      	b.n	8004302 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004300:	2302      	movs	r3, #2
  }
}
 8004302:	4618      	mov	r0, r3
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	4613      	mov	r3, r2
 8004316:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b20      	cmp	r3, #32
 8004322:	d112      	bne.n	800434a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_UART_Receive_IT+0x26>
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e00b      	b.n	800434c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	461a      	mov	r2, r3
 800433e:	68b9      	ldr	r1, [r7, #8]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fb24 	bl	800498e <UART_Start_Receive_IT>
 8004346:	4603      	mov	r3, r0
 8004348:	e000      	b.n	800434c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
  }
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b0ba      	sub	sp, #232	; 0xe8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10f      	bne.n	80043ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_UART_IRQHandler+0x66>
 80043a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fc01 	bl	8004bba <UART_Receive_IT>
      return;
 80043b8:	e25b      	b.n	8004872 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80de 	beq.w	8004580 <HAL_UART_IRQHandler+0x22c>
 80043c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80d1 	beq.w	8004580 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00b      	beq.n	8004402 <HAL_UART_IRQHandler+0xae>
 80043ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f043 0201 	orr.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_UART_IRQHandler+0xd2>
 800440e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f043 0202 	orr.w	r2, r3, #2
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_UART_IRQHandler+0xf6>
 8004432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f043 0204 	orr.w	r2, r3, #4
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d011      	beq.n	800447a <HAL_UART_IRQHandler+0x126>
 8004456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	f043 0208 	orr.w	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 81f2 	beq.w	8004868 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_UART_IRQHandler+0x14e>
 8004490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fb8c 	bl	8004bba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f003 0308 	and.w	r3, r3, #8
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <HAL_UART_IRQHandler+0x17a>
 80044c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d04f      	beq.n	800456e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fa96 	bl	8004a00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d041      	beq.n	8004566 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3314      	adds	r3, #20
 80044e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800450e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800451a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1d9      	bne.n	80044e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d013      	beq.n	800455e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	4a7e      	ldr	r2, [pc, #504]	; (8004734 <HAL_UART_IRQHandler+0x3e0>)
 800453c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe f878 	bl	8002638 <HAL_DMA_Abort_IT>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d016      	beq.n	800457c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004558:	4610      	mov	r0, r2
 800455a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	e00e      	b.n	800457c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f993 	bl	800488a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004564:	e00a      	b.n	800457c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f98f 	bl	800488a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456c:	e006      	b.n	800457c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f98b 	bl	800488a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800457a:	e175      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	bf00      	nop
    return;
 800457e:	e173      	b.n	8004868 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	2b01      	cmp	r3, #1
 8004586:	f040 814f 	bne.w	8004828 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8148 	beq.w	8004828 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8141 	beq.w	8004828 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80b6 	beq.w	8004738 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8145 	beq.w	800486c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ea:	429a      	cmp	r2, r3
 80045ec:	f080 813e 	bcs.w	800486c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b20      	cmp	r3, #32
 8004600:	f000 8088 	beq.w	8004714 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800461a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800461e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004630:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800463c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1d9      	bne.n	8004604 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3314      	adds	r3, #20
 8004656:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3314      	adds	r3, #20
 8004670:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004674:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004678:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800467c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e1      	bne.n	8004650 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3314      	adds	r3, #20
 8004692:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004696:	e853 3f00 	ldrex	r3, [r3]
 800469a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800469c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3314      	adds	r3, #20
 80046ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046b8:	e841 2300 	strex	r3, r2, [r1]
 80046bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e3      	bne.n	800468c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e4:	f023 0310 	bic.w	r3, r3, #16
 80046e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	330c      	adds	r3, #12
 80046f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80046f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e3      	bne.n	80046d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd ff57 	bl	80025c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004722:	b29b      	uxth	r3, r3
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	b29b      	uxth	r3, r3
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8b6 	bl	800489c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004730:	e09c      	b.n	800486c <HAL_UART_IRQHandler+0x518>
 8004732:	bf00      	nop
 8004734:	08004ac5 	.word	0x08004ac5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004740:	b29b      	uxth	r3, r3
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 808e 	beq.w	8004870 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8089 	beq.w	8004870 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	330c      	adds	r3, #12
 8004764:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800476e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004782:	647a      	str	r2, [r7, #68]	; 0x44
 8004784:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e3      	bne.n	800475e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3314      	adds	r3, #20
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	623b      	str	r3, [r7, #32]
   return(result);
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3314      	adds	r3, #20
 80047b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047ba:	633a      	str	r2, [r7, #48]	; 0x30
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e3      	bne.n	8004796 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0310 	bic.w	r3, r3, #16
 80047f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	330c      	adds	r3, #12
 80047fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004800:	61fa      	str	r2, [r7, #28]
 8004802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	617b      	str	r3, [r7, #20]
   return(result);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e3      	bne.n	80047dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800481a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800481e:	4619      	mov	r1, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f83b 	bl	800489c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004826:	e023      	b.n	8004870 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <HAL_UART_IRQHandler+0x4f4>
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f953 	bl	8004aec <UART_Transmit_IT>
    return;
 8004846:	e014      	b.n	8004872 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <HAL_UART_IRQHandler+0x51e>
 8004854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f992 	bl	8004b8a <UART_EndTransmit_IT>
    return;
 8004866:	e004      	b.n	8004872 <HAL_UART_IRQHandler+0x51e>
    return;
 8004868:	bf00      	nop
 800486a:	e002      	b.n	8004872 <HAL_UART_IRQHandler+0x51e>
      return;
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_UART_IRQHandler+0x51e>
      return;
 8004870:	bf00      	nop
  }
}
 8004872:	37e8      	adds	r7, #232	; 0xe8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b090      	sub	sp, #64	; 0x40
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c2:	e050      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d04c      	beq.n	8004966 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80048d2:	f7fd fd5f 	bl	8002394 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048de:	429a      	cmp	r2, r3
 80048e0:	d241      	bcs.n	8004966 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004902:	637a      	str	r2, [r7, #52]	; 0x34
 8004904:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3314      	adds	r3, #20
 800491c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	613b      	str	r3, [r7, #16]
   return(result);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	63bb      	str	r3, [r7, #56]	; 0x38
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004936:	623a      	str	r2, [r7, #32]
 8004938:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	69f9      	ldr	r1, [r7, #28]
 800493c:	6a3a      	ldr	r2, [r7, #32]
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	61bb      	str	r3, [r7, #24]
   return(result);
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e5      	bne.n	8004916 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e00f      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4013      	ands	r3, r2
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	429a      	cmp	r2, r3
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	429a      	cmp	r2, r3
 8004982:	d09f      	beq.n	80048c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3740      	adds	r7, #64	; 0x40
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	4613      	mov	r3, r2
 800499a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	88fa      	ldrh	r2, [r7, #6]
 80049a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2222      	movs	r2, #34	; 0x22
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695a      	ldr	r2, [r3, #20]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0220 	orr.w	r2, r2, #32
 80049f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b095      	sub	sp, #84	; 0x54
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	330c      	adds	r3, #12
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a28:	643a      	str	r2, [r7, #64]	; 0x40
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3314      	adds	r3, #20
 8004a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d119      	bne.n	8004aac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f023 0310 	bic.w	r3, r3, #16
 8004a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a98:	61ba      	str	r2, [r7, #24]
 8004a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6979      	ldr	r1, [r7, #20]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004aba:	bf00      	nop
 8004abc:	3754      	adds	r7, #84	; 0x54
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fed3 	bl	800488a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b21      	cmp	r3, #33	; 0x21
 8004afe:	d13e      	bne.n	8004b7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d114      	bne.n	8004b34 <UART_Transmit_IT+0x48>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d110      	bne.n	8004b34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	1c9a      	adds	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	621a      	str	r2, [r3, #32]
 8004b32:	e008      	b.n	8004b46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	1c59      	adds	r1, r3, #1
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6211      	str	r1, [r2, #32]
 8004b3e:	781a      	ldrb	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4619      	mov	r1, r3
 8004b54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e000      	b.n	8004b80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b7e:	2302      	movs	r3, #2
  }
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff fe64 	bl	8004878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b08c      	sub	sp, #48	; 0x30
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b22      	cmp	r3, #34	; 0x22
 8004bcc:	f040 80ae 	bne.w	8004d2c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd8:	d117      	bne.n	8004c0a <UART_Receive_IT+0x50>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d113      	bne.n	8004c0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	1c9a      	adds	r2, r3, #2
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
 8004c08:	e026      	b.n	8004c58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1c:	d007      	beq.n	8004c2e <UART_Receive_IT+0x74>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10a      	bne.n	8004c3c <UART_Receive_IT+0x82>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	e008      	b.n	8004c4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4619      	mov	r1, r3
 8004c66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d15d      	bne.n	8004d28 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0220 	bic.w	r2, r2, #32
 8004c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d135      	bne.n	8004d1e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f023 0310 	bic.w	r3, r3, #16
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd8:	623a      	str	r2, [r7, #32]
 8004cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	69f9      	ldr	r1, [r7, #28]
 8004cde:	6a3a      	ldr	r2, [r7, #32]
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d10a      	bne.n	8004d10 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fdc0 	bl	800489c <HAL_UARTEx_RxEventCallback>
 8004d1c:	e002      	b.n	8004d24 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fc f836 	bl	8000d90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e002      	b.n	8004d2e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e000      	b.n	8004d2e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d2c:	2302      	movs	r3, #2
  }
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3730      	adds	r7, #48	; 0x30
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d72:	f023 030c 	bic.w	r3, r3, #12
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a2c      	ldr	r2, [pc, #176]	; (8004e4c <UART_SetConfig+0x114>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d103      	bne.n	8004da8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004da0:	f7fe fa64 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	e002      	b.n	8004dae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7fe fa4c 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8004dac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009a      	lsls	r2, r3, #2
 8004db8:	441a      	add	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <UART_SetConfig+0x118>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	0119      	lsls	r1, r3, #4
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009a      	lsls	r2, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004de4:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <UART_SetConfig+0x118>)
 8004de6:	fba3 0302 	umull	r0, r3, r3, r2
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	2064      	movs	r0, #100	; 0x64
 8004dee:	fb00 f303 	mul.w	r3, r0, r3
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	3332      	adds	r3, #50	; 0x32
 8004df8:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <UART_SetConfig+0x118>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e04:	4419      	add	r1, r3
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009a      	lsls	r2, r3, #2
 8004e10:	441a      	add	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <UART_SetConfig+0x118>)
 8004e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	2064      	movs	r0, #100	; 0x64
 8004e26:	fb00 f303 	mul.w	r3, r0, r3
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	3332      	adds	r3, #50	; 0x32
 8004e30:	4a07      	ldr	r2, [pc, #28]	; (8004e50 <UART_SetConfig+0x118>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	f003 020f 	and.w	r2, r3, #15
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	440a      	add	r2, r1
 8004e42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40013800 	.word	0x40013800
 8004e50:	51eb851f 	.word	0x51eb851f

08004e54 <siprintf>:
 8004e54:	b40e      	push	{r1, r2, r3}
 8004e56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e5a:	b500      	push	{lr}
 8004e5c:	b09c      	sub	sp, #112	; 0x70
 8004e5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e60:	9002      	str	r0, [sp, #8]
 8004e62:	9006      	str	r0, [sp, #24]
 8004e64:	9107      	str	r1, [sp, #28]
 8004e66:	9104      	str	r1, [sp, #16]
 8004e68:	4808      	ldr	r0, [pc, #32]	; (8004e8c <siprintf+0x38>)
 8004e6a:	4909      	ldr	r1, [pc, #36]	; (8004e90 <siprintf+0x3c>)
 8004e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e70:	9105      	str	r1, [sp, #20]
 8004e72:	6800      	ldr	r0, [r0, #0]
 8004e74:	a902      	add	r1, sp, #8
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	f000 f98e 	bl	8005198 <_svfiprintf_r>
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	9b02      	ldr	r3, [sp, #8]
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	b01c      	add	sp, #112	; 0x70
 8004e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e88:	b003      	add	sp, #12
 8004e8a:	4770      	bx	lr
 8004e8c:	200000b8 	.word	0x200000b8
 8004e90:	ffff0208 	.word	0xffff0208

08004e94 <memset>:
 8004e94:	4603      	mov	r3, r0
 8004e96:	4402      	add	r2, r0
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d100      	bne.n	8004e9e <memset+0xa>
 8004e9c:	4770      	bx	lr
 8004e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ea2:	e7f9      	b.n	8004e98 <memset+0x4>

08004ea4 <__errno>:
 8004ea4:	4b01      	ldr	r3, [pc, #4]	; (8004eac <__errno+0x8>)
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	200000b8 	.word	0x200000b8

08004eb0 <__libc_init_array>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	4d0c      	ldr	r5, [pc, #48]	; (8004ee8 <__libc_init_array+0x38>)
 8004eb6:	4c0d      	ldr	r4, [pc, #52]	; (8004eec <__libc_init_array+0x3c>)
 8004eb8:	1b64      	subs	r4, r4, r5
 8004eba:	10a4      	asrs	r4, r4, #2
 8004ebc:	42a6      	cmp	r6, r4
 8004ebe:	d109      	bne.n	8004ed4 <__libc_init_array+0x24>
 8004ec0:	f000 fc7a 	bl	80057b8 <_init>
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	4d0a      	ldr	r5, [pc, #40]	; (8004ef0 <__libc_init_array+0x40>)
 8004ec8:	4c0a      	ldr	r4, [pc, #40]	; (8004ef4 <__libc_init_array+0x44>)
 8004eca:	1b64      	subs	r4, r4, r5
 8004ecc:	10a4      	asrs	r4, r4, #2
 8004ece:	42a6      	cmp	r6, r4
 8004ed0:	d105      	bne.n	8004ede <__libc_init_array+0x2e>
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed8:	4798      	blx	r3
 8004eda:	3601      	adds	r6, #1
 8004edc:	e7ee      	b.n	8004ebc <__libc_init_array+0xc>
 8004ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee2:	4798      	blx	r3
 8004ee4:	3601      	adds	r6, #1
 8004ee6:	e7f2      	b.n	8004ece <__libc_init_array+0x1e>
 8004ee8:	08005858 	.word	0x08005858
 8004eec:	08005858 	.word	0x08005858
 8004ef0:	08005858 	.word	0x08005858
 8004ef4:	0800585c 	.word	0x0800585c

08004ef8 <__retarget_lock_acquire_recursive>:
 8004ef8:	4770      	bx	lr

08004efa <__retarget_lock_release_recursive>:
 8004efa:	4770      	bx	lr

08004efc <_free_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4605      	mov	r5, r0
 8004f00:	2900      	cmp	r1, #0
 8004f02:	d040      	beq.n	8004f86 <_free_r+0x8a>
 8004f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f08:	1f0c      	subs	r4, r1, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bfb8      	it	lt
 8004f0e:	18e4      	addlt	r4, r4, r3
 8004f10:	f000 f8dc 	bl	80050cc <__malloc_lock>
 8004f14:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <_free_r+0x8c>)
 8004f16:	6813      	ldr	r3, [r2, #0]
 8004f18:	b933      	cbnz	r3, 8004f28 <_free_r+0x2c>
 8004f1a:	6063      	str	r3, [r4, #4]
 8004f1c:	6014      	str	r4, [r2, #0]
 8004f1e:	4628      	mov	r0, r5
 8004f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f24:	f000 b8d8 	b.w	80050d8 <__malloc_unlock>
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	d908      	bls.n	8004f3e <_free_r+0x42>
 8004f2c:	6820      	ldr	r0, [r4, #0]
 8004f2e:	1821      	adds	r1, r4, r0
 8004f30:	428b      	cmp	r3, r1
 8004f32:	bf01      	itttt	eq
 8004f34:	6819      	ldreq	r1, [r3, #0]
 8004f36:	685b      	ldreq	r3, [r3, #4]
 8004f38:	1809      	addeq	r1, r1, r0
 8004f3a:	6021      	streq	r1, [r4, #0]
 8004f3c:	e7ed      	b.n	8004f1a <_free_r+0x1e>
 8004f3e:	461a      	mov	r2, r3
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	b10b      	cbz	r3, 8004f48 <_free_r+0x4c>
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d9fa      	bls.n	8004f3e <_free_r+0x42>
 8004f48:	6811      	ldr	r1, [r2, #0]
 8004f4a:	1850      	adds	r0, r2, r1
 8004f4c:	42a0      	cmp	r0, r4
 8004f4e:	d10b      	bne.n	8004f68 <_free_r+0x6c>
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	4401      	add	r1, r0
 8004f54:	1850      	adds	r0, r2, r1
 8004f56:	4283      	cmp	r3, r0
 8004f58:	6011      	str	r1, [r2, #0]
 8004f5a:	d1e0      	bne.n	8004f1e <_free_r+0x22>
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4408      	add	r0, r1
 8004f62:	6010      	str	r0, [r2, #0]
 8004f64:	6053      	str	r3, [r2, #4]
 8004f66:	e7da      	b.n	8004f1e <_free_r+0x22>
 8004f68:	d902      	bls.n	8004f70 <_free_r+0x74>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	602b      	str	r3, [r5, #0]
 8004f6e:	e7d6      	b.n	8004f1e <_free_r+0x22>
 8004f70:	6820      	ldr	r0, [r4, #0]
 8004f72:	1821      	adds	r1, r4, r0
 8004f74:	428b      	cmp	r3, r1
 8004f76:	bf01      	itttt	eq
 8004f78:	6819      	ldreq	r1, [r3, #0]
 8004f7a:	685b      	ldreq	r3, [r3, #4]
 8004f7c:	1809      	addeq	r1, r1, r0
 8004f7e:	6021      	streq	r1, [r4, #0]
 8004f80:	6063      	str	r3, [r4, #4]
 8004f82:	6054      	str	r4, [r2, #4]
 8004f84:	e7cb      	b.n	8004f1e <_free_r+0x22>
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	200004e0 	.word	0x200004e0

08004f8c <sbrk_aligned>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4e0e      	ldr	r6, [pc, #56]	; (8004fc8 <sbrk_aligned+0x3c>)
 8004f90:	460c      	mov	r4, r1
 8004f92:	6831      	ldr	r1, [r6, #0]
 8004f94:	4605      	mov	r5, r0
 8004f96:	b911      	cbnz	r1, 8004f9e <sbrk_aligned+0x12>
 8004f98:	f000 fbaa 	bl	80056f0 <_sbrk_r>
 8004f9c:	6030      	str	r0, [r6, #0]
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f000 fba5 	bl	80056f0 <_sbrk_r>
 8004fa6:	1c43      	adds	r3, r0, #1
 8004fa8:	d00a      	beq.n	8004fc0 <sbrk_aligned+0x34>
 8004faa:	1cc4      	adds	r4, r0, #3
 8004fac:	f024 0403 	bic.w	r4, r4, #3
 8004fb0:	42a0      	cmp	r0, r4
 8004fb2:	d007      	beq.n	8004fc4 <sbrk_aligned+0x38>
 8004fb4:	1a21      	subs	r1, r4, r0
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 fb9a 	bl	80056f0 <_sbrk_r>
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d101      	bne.n	8004fc4 <sbrk_aligned+0x38>
 8004fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	200004e4 	.word	0x200004e4

08004fcc <_malloc_r>:
 8004fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd0:	1ccd      	adds	r5, r1, #3
 8004fd2:	f025 0503 	bic.w	r5, r5, #3
 8004fd6:	3508      	adds	r5, #8
 8004fd8:	2d0c      	cmp	r5, #12
 8004fda:	bf38      	it	cc
 8004fdc:	250c      	movcc	r5, #12
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	db01      	blt.n	8004fe8 <_malloc_r+0x1c>
 8004fe4:	42a9      	cmp	r1, r5
 8004fe6:	d905      	bls.n	8004ff4 <_malloc_r+0x28>
 8004fe8:	230c      	movs	r3, #12
 8004fea:	2600      	movs	r6, #0
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4630      	mov	r0, r6
 8004ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ff4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80050c8 <_malloc_r+0xfc>
 8004ff8:	f000 f868 	bl	80050cc <__malloc_lock>
 8004ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8005000:	461c      	mov	r4, r3
 8005002:	bb5c      	cbnz	r4, 800505c <_malloc_r+0x90>
 8005004:	4629      	mov	r1, r5
 8005006:	4638      	mov	r0, r7
 8005008:	f7ff ffc0 	bl	8004f8c <sbrk_aligned>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	4604      	mov	r4, r0
 8005010:	d155      	bne.n	80050be <_malloc_r+0xf2>
 8005012:	f8d8 4000 	ldr.w	r4, [r8]
 8005016:	4626      	mov	r6, r4
 8005018:	2e00      	cmp	r6, #0
 800501a:	d145      	bne.n	80050a8 <_malloc_r+0xdc>
 800501c:	2c00      	cmp	r4, #0
 800501e:	d048      	beq.n	80050b2 <_malloc_r+0xe6>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	4631      	mov	r1, r6
 8005024:	4638      	mov	r0, r7
 8005026:	eb04 0903 	add.w	r9, r4, r3
 800502a:	f000 fb61 	bl	80056f0 <_sbrk_r>
 800502e:	4581      	cmp	r9, r0
 8005030:	d13f      	bne.n	80050b2 <_malloc_r+0xe6>
 8005032:	6821      	ldr	r1, [r4, #0]
 8005034:	4638      	mov	r0, r7
 8005036:	1a6d      	subs	r5, r5, r1
 8005038:	4629      	mov	r1, r5
 800503a:	f7ff ffa7 	bl	8004f8c <sbrk_aligned>
 800503e:	3001      	adds	r0, #1
 8005040:	d037      	beq.n	80050b2 <_malloc_r+0xe6>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	442b      	add	r3, r5
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	f8d8 3000 	ldr.w	r3, [r8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d038      	beq.n	80050c2 <_malloc_r+0xf6>
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	42a2      	cmp	r2, r4
 8005054:	d12b      	bne.n	80050ae <_malloc_r+0xe2>
 8005056:	2200      	movs	r2, #0
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	e00f      	b.n	800507c <_malloc_r+0xb0>
 800505c:	6822      	ldr	r2, [r4, #0]
 800505e:	1b52      	subs	r2, r2, r5
 8005060:	d41f      	bmi.n	80050a2 <_malloc_r+0xd6>
 8005062:	2a0b      	cmp	r2, #11
 8005064:	d917      	bls.n	8005096 <_malloc_r+0xca>
 8005066:	1961      	adds	r1, r4, r5
 8005068:	42a3      	cmp	r3, r4
 800506a:	6025      	str	r5, [r4, #0]
 800506c:	bf18      	it	ne
 800506e:	6059      	strne	r1, [r3, #4]
 8005070:	6863      	ldr	r3, [r4, #4]
 8005072:	bf08      	it	eq
 8005074:	f8c8 1000 	streq.w	r1, [r8]
 8005078:	5162      	str	r2, [r4, r5]
 800507a:	604b      	str	r3, [r1, #4]
 800507c:	4638      	mov	r0, r7
 800507e:	f104 060b 	add.w	r6, r4, #11
 8005082:	f000 f829 	bl	80050d8 <__malloc_unlock>
 8005086:	f026 0607 	bic.w	r6, r6, #7
 800508a:	1d23      	adds	r3, r4, #4
 800508c:	1af2      	subs	r2, r6, r3
 800508e:	d0ae      	beq.n	8004fee <_malloc_r+0x22>
 8005090:	1b9b      	subs	r3, r3, r6
 8005092:	50a3      	str	r3, [r4, r2]
 8005094:	e7ab      	b.n	8004fee <_malloc_r+0x22>
 8005096:	42a3      	cmp	r3, r4
 8005098:	6862      	ldr	r2, [r4, #4]
 800509a:	d1dd      	bne.n	8005058 <_malloc_r+0x8c>
 800509c:	f8c8 2000 	str.w	r2, [r8]
 80050a0:	e7ec      	b.n	800507c <_malloc_r+0xb0>
 80050a2:	4623      	mov	r3, r4
 80050a4:	6864      	ldr	r4, [r4, #4]
 80050a6:	e7ac      	b.n	8005002 <_malloc_r+0x36>
 80050a8:	4634      	mov	r4, r6
 80050aa:	6876      	ldr	r6, [r6, #4]
 80050ac:	e7b4      	b.n	8005018 <_malloc_r+0x4c>
 80050ae:	4613      	mov	r3, r2
 80050b0:	e7cc      	b.n	800504c <_malloc_r+0x80>
 80050b2:	230c      	movs	r3, #12
 80050b4:	4638      	mov	r0, r7
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	f000 f80e 	bl	80050d8 <__malloc_unlock>
 80050bc:	e797      	b.n	8004fee <_malloc_r+0x22>
 80050be:	6025      	str	r5, [r4, #0]
 80050c0:	e7dc      	b.n	800507c <_malloc_r+0xb0>
 80050c2:	605b      	str	r3, [r3, #4]
 80050c4:	deff      	udf	#255	; 0xff
 80050c6:	bf00      	nop
 80050c8:	200004e0 	.word	0x200004e0

080050cc <__malloc_lock>:
 80050cc:	4801      	ldr	r0, [pc, #4]	; (80050d4 <__malloc_lock+0x8>)
 80050ce:	f7ff bf13 	b.w	8004ef8 <__retarget_lock_acquire_recursive>
 80050d2:	bf00      	nop
 80050d4:	200004dc 	.word	0x200004dc

080050d8 <__malloc_unlock>:
 80050d8:	4801      	ldr	r0, [pc, #4]	; (80050e0 <__malloc_unlock+0x8>)
 80050da:	f7ff bf0e 	b.w	8004efa <__retarget_lock_release_recursive>
 80050de:	bf00      	nop
 80050e0:	200004dc 	.word	0x200004dc

080050e4 <__ssputs_r>:
 80050e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	461f      	mov	r7, r3
 80050ea:	688e      	ldr	r6, [r1, #8]
 80050ec:	4682      	mov	sl, r0
 80050ee:	42be      	cmp	r6, r7
 80050f0:	460c      	mov	r4, r1
 80050f2:	4690      	mov	r8, r2
 80050f4:	680b      	ldr	r3, [r1, #0]
 80050f6:	d82c      	bhi.n	8005152 <__ssputs_r+0x6e>
 80050f8:	898a      	ldrh	r2, [r1, #12]
 80050fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050fe:	d026      	beq.n	800514e <__ssputs_r+0x6a>
 8005100:	6965      	ldr	r5, [r4, #20]
 8005102:	6909      	ldr	r1, [r1, #16]
 8005104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005108:	eba3 0901 	sub.w	r9, r3, r1
 800510c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005110:	1c7b      	adds	r3, r7, #1
 8005112:	444b      	add	r3, r9
 8005114:	106d      	asrs	r5, r5, #1
 8005116:	429d      	cmp	r5, r3
 8005118:	bf38      	it	cc
 800511a:	461d      	movcc	r5, r3
 800511c:	0553      	lsls	r3, r2, #21
 800511e:	d527      	bpl.n	8005170 <__ssputs_r+0x8c>
 8005120:	4629      	mov	r1, r5
 8005122:	f7ff ff53 	bl	8004fcc <_malloc_r>
 8005126:	4606      	mov	r6, r0
 8005128:	b360      	cbz	r0, 8005184 <__ssputs_r+0xa0>
 800512a:	464a      	mov	r2, r9
 800512c:	6921      	ldr	r1, [r4, #16]
 800512e:	f000 fafd 	bl	800572c <memcpy>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513c:	81a3      	strh	r3, [r4, #12]
 800513e:	6126      	str	r6, [r4, #16]
 8005140:	444e      	add	r6, r9
 8005142:	6026      	str	r6, [r4, #0]
 8005144:	463e      	mov	r6, r7
 8005146:	6165      	str	r5, [r4, #20]
 8005148:	eba5 0509 	sub.w	r5, r5, r9
 800514c:	60a5      	str	r5, [r4, #8]
 800514e:	42be      	cmp	r6, r7
 8005150:	d900      	bls.n	8005154 <__ssputs_r+0x70>
 8005152:	463e      	mov	r6, r7
 8005154:	4632      	mov	r2, r6
 8005156:	4641      	mov	r1, r8
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	f000 faaf 	bl	80056bc <memmove>
 800515e:	2000      	movs	r0, #0
 8005160:	68a3      	ldr	r3, [r4, #8]
 8005162:	1b9b      	subs	r3, r3, r6
 8005164:	60a3      	str	r3, [r4, #8]
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	4433      	add	r3, r6
 800516a:	6023      	str	r3, [r4, #0]
 800516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005170:	462a      	mov	r2, r5
 8005172:	f000 fae9 	bl	8005748 <_realloc_r>
 8005176:	4606      	mov	r6, r0
 8005178:	2800      	cmp	r0, #0
 800517a:	d1e0      	bne.n	800513e <__ssputs_r+0x5a>
 800517c:	4650      	mov	r0, sl
 800517e:	6921      	ldr	r1, [r4, #16]
 8005180:	f7ff febc 	bl	8004efc <_free_r>
 8005184:	230c      	movs	r3, #12
 8005186:	f8ca 3000 	str.w	r3, [sl]
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f04f 30ff 	mov.w	r0, #4294967295
 8005190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005194:	81a3      	strh	r3, [r4, #12]
 8005196:	e7e9      	b.n	800516c <__ssputs_r+0x88>

08005198 <_svfiprintf_r>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	4698      	mov	r8, r3
 800519e:	898b      	ldrh	r3, [r1, #12]
 80051a0:	4607      	mov	r7, r0
 80051a2:	061b      	lsls	r3, r3, #24
 80051a4:	460d      	mov	r5, r1
 80051a6:	4614      	mov	r4, r2
 80051a8:	b09d      	sub	sp, #116	; 0x74
 80051aa:	d50e      	bpl.n	80051ca <_svfiprintf_r+0x32>
 80051ac:	690b      	ldr	r3, [r1, #16]
 80051ae:	b963      	cbnz	r3, 80051ca <_svfiprintf_r+0x32>
 80051b0:	2140      	movs	r1, #64	; 0x40
 80051b2:	f7ff ff0b 	bl	8004fcc <_malloc_r>
 80051b6:	6028      	str	r0, [r5, #0]
 80051b8:	6128      	str	r0, [r5, #16]
 80051ba:	b920      	cbnz	r0, 80051c6 <_svfiprintf_r+0x2e>
 80051bc:	230c      	movs	r3, #12
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	e0d0      	b.n	8005368 <_svfiprintf_r+0x1d0>
 80051c6:	2340      	movs	r3, #64	; 0x40
 80051c8:	616b      	str	r3, [r5, #20]
 80051ca:	2300      	movs	r3, #0
 80051cc:	9309      	str	r3, [sp, #36]	; 0x24
 80051ce:	2320      	movs	r3, #32
 80051d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051d4:	2330      	movs	r3, #48	; 0x30
 80051d6:	f04f 0901 	mov.w	r9, #1
 80051da:	f8cd 800c 	str.w	r8, [sp, #12]
 80051de:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005380 <_svfiprintf_r+0x1e8>
 80051e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051e6:	4623      	mov	r3, r4
 80051e8:	469a      	mov	sl, r3
 80051ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ee:	b10a      	cbz	r2, 80051f4 <_svfiprintf_r+0x5c>
 80051f0:	2a25      	cmp	r2, #37	; 0x25
 80051f2:	d1f9      	bne.n	80051e8 <_svfiprintf_r+0x50>
 80051f4:	ebba 0b04 	subs.w	fp, sl, r4
 80051f8:	d00b      	beq.n	8005212 <_svfiprintf_r+0x7a>
 80051fa:	465b      	mov	r3, fp
 80051fc:	4622      	mov	r2, r4
 80051fe:	4629      	mov	r1, r5
 8005200:	4638      	mov	r0, r7
 8005202:	f7ff ff6f 	bl	80050e4 <__ssputs_r>
 8005206:	3001      	adds	r0, #1
 8005208:	f000 80a9 	beq.w	800535e <_svfiprintf_r+0x1c6>
 800520c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800520e:	445a      	add	r2, fp
 8005210:	9209      	str	r2, [sp, #36]	; 0x24
 8005212:	f89a 3000 	ldrb.w	r3, [sl]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80a1 	beq.w	800535e <_svfiprintf_r+0x1c6>
 800521c:	2300      	movs	r3, #0
 800521e:	f04f 32ff 	mov.w	r2, #4294967295
 8005222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005226:	f10a 0a01 	add.w	sl, sl, #1
 800522a:	9304      	str	r3, [sp, #16]
 800522c:	9307      	str	r3, [sp, #28]
 800522e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005232:	931a      	str	r3, [sp, #104]	; 0x68
 8005234:	4654      	mov	r4, sl
 8005236:	2205      	movs	r2, #5
 8005238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800523c:	4850      	ldr	r0, [pc, #320]	; (8005380 <_svfiprintf_r+0x1e8>)
 800523e:	f000 fa67 	bl	8005710 <memchr>
 8005242:	9a04      	ldr	r2, [sp, #16]
 8005244:	b9d8      	cbnz	r0, 800527e <_svfiprintf_r+0xe6>
 8005246:	06d0      	lsls	r0, r2, #27
 8005248:	bf44      	itt	mi
 800524a:	2320      	movmi	r3, #32
 800524c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005250:	0711      	lsls	r1, r2, #28
 8005252:	bf44      	itt	mi
 8005254:	232b      	movmi	r3, #43	; 0x2b
 8005256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800525a:	f89a 3000 	ldrb.w	r3, [sl]
 800525e:	2b2a      	cmp	r3, #42	; 0x2a
 8005260:	d015      	beq.n	800528e <_svfiprintf_r+0xf6>
 8005262:	4654      	mov	r4, sl
 8005264:	2000      	movs	r0, #0
 8005266:	f04f 0c0a 	mov.w	ip, #10
 800526a:	9a07      	ldr	r2, [sp, #28]
 800526c:	4621      	mov	r1, r4
 800526e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005272:	3b30      	subs	r3, #48	; 0x30
 8005274:	2b09      	cmp	r3, #9
 8005276:	d94d      	bls.n	8005314 <_svfiprintf_r+0x17c>
 8005278:	b1b0      	cbz	r0, 80052a8 <_svfiprintf_r+0x110>
 800527a:	9207      	str	r2, [sp, #28]
 800527c:	e014      	b.n	80052a8 <_svfiprintf_r+0x110>
 800527e:	eba0 0308 	sub.w	r3, r0, r8
 8005282:	fa09 f303 	lsl.w	r3, r9, r3
 8005286:	4313      	orrs	r3, r2
 8005288:	46a2      	mov	sl, r4
 800528a:	9304      	str	r3, [sp, #16]
 800528c:	e7d2      	b.n	8005234 <_svfiprintf_r+0x9c>
 800528e:	9b03      	ldr	r3, [sp, #12]
 8005290:	1d19      	adds	r1, r3, #4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	9103      	str	r1, [sp, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	bfbb      	ittet	lt
 800529a:	425b      	neglt	r3, r3
 800529c:	f042 0202 	orrlt.w	r2, r2, #2
 80052a0:	9307      	strge	r3, [sp, #28]
 80052a2:	9307      	strlt	r3, [sp, #28]
 80052a4:	bfb8      	it	lt
 80052a6:	9204      	strlt	r2, [sp, #16]
 80052a8:	7823      	ldrb	r3, [r4, #0]
 80052aa:	2b2e      	cmp	r3, #46	; 0x2e
 80052ac:	d10c      	bne.n	80052c8 <_svfiprintf_r+0x130>
 80052ae:	7863      	ldrb	r3, [r4, #1]
 80052b0:	2b2a      	cmp	r3, #42	; 0x2a
 80052b2:	d134      	bne.n	800531e <_svfiprintf_r+0x186>
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	3402      	adds	r4, #2
 80052b8:	1d1a      	adds	r2, r3, #4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	9203      	str	r2, [sp, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bfb8      	it	lt
 80052c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80052c6:	9305      	str	r3, [sp, #20]
 80052c8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005384 <_svfiprintf_r+0x1ec>
 80052cc:	2203      	movs	r2, #3
 80052ce:	4650      	mov	r0, sl
 80052d0:	7821      	ldrb	r1, [r4, #0]
 80052d2:	f000 fa1d 	bl	8005710 <memchr>
 80052d6:	b138      	cbz	r0, 80052e8 <_svfiprintf_r+0x150>
 80052d8:	2240      	movs	r2, #64	; 0x40
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	eba0 000a 	sub.w	r0, r0, sl
 80052e0:	4082      	lsls	r2, r0
 80052e2:	4313      	orrs	r3, r2
 80052e4:	3401      	adds	r4, #1
 80052e6:	9304      	str	r3, [sp, #16]
 80052e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ec:	2206      	movs	r2, #6
 80052ee:	4826      	ldr	r0, [pc, #152]	; (8005388 <_svfiprintf_r+0x1f0>)
 80052f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052f4:	f000 fa0c 	bl	8005710 <memchr>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d038      	beq.n	800536e <_svfiprintf_r+0x1d6>
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <_svfiprintf_r+0x1f4>)
 80052fe:	bb1b      	cbnz	r3, 8005348 <_svfiprintf_r+0x1b0>
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	3307      	adds	r3, #7
 8005304:	f023 0307 	bic.w	r3, r3, #7
 8005308:	3308      	adds	r3, #8
 800530a:	9303      	str	r3, [sp, #12]
 800530c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530e:	4433      	add	r3, r6
 8005310:	9309      	str	r3, [sp, #36]	; 0x24
 8005312:	e768      	b.n	80051e6 <_svfiprintf_r+0x4e>
 8005314:	460c      	mov	r4, r1
 8005316:	2001      	movs	r0, #1
 8005318:	fb0c 3202 	mla	r2, ip, r2, r3
 800531c:	e7a6      	b.n	800526c <_svfiprintf_r+0xd4>
 800531e:	2300      	movs	r3, #0
 8005320:	f04f 0c0a 	mov.w	ip, #10
 8005324:	4619      	mov	r1, r3
 8005326:	3401      	adds	r4, #1
 8005328:	9305      	str	r3, [sp, #20]
 800532a:	4620      	mov	r0, r4
 800532c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005330:	3a30      	subs	r2, #48	; 0x30
 8005332:	2a09      	cmp	r2, #9
 8005334:	d903      	bls.n	800533e <_svfiprintf_r+0x1a6>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0c6      	beq.n	80052c8 <_svfiprintf_r+0x130>
 800533a:	9105      	str	r1, [sp, #20]
 800533c:	e7c4      	b.n	80052c8 <_svfiprintf_r+0x130>
 800533e:	4604      	mov	r4, r0
 8005340:	2301      	movs	r3, #1
 8005342:	fb0c 2101 	mla	r1, ip, r1, r2
 8005346:	e7f0      	b.n	800532a <_svfiprintf_r+0x192>
 8005348:	ab03      	add	r3, sp, #12
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	462a      	mov	r2, r5
 800534e:	4638      	mov	r0, r7
 8005350:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <_svfiprintf_r+0x1f8>)
 8005352:	a904      	add	r1, sp, #16
 8005354:	f3af 8000 	nop.w
 8005358:	1c42      	adds	r2, r0, #1
 800535a:	4606      	mov	r6, r0
 800535c:	d1d6      	bne.n	800530c <_svfiprintf_r+0x174>
 800535e:	89ab      	ldrh	r3, [r5, #12]
 8005360:	065b      	lsls	r3, r3, #25
 8005362:	f53f af2d 	bmi.w	80051c0 <_svfiprintf_r+0x28>
 8005366:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005368:	b01d      	add	sp, #116	; 0x74
 800536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536e:	ab03      	add	r3, sp, #12
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	462a      	mov	r2, r5
 8005374:	4638      	mov	r0, r7
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <_svfiprintf_r+0x1f8>)
 8005378:	a904      	add	r1, sp, #16
 800537a:	f000 f87d 	bl	8005478 <_printf_i>
 800537e:	e7eb      	b.n	8005358 <_svfiprintf_r+0x1c0>
 8005380:	08005822 	.word	0x08005822
 8005384:	08005828 	.word	0x08005828
 8005388:	0800582c 	.word	0x0800582c
 800538c:	00000000 	.word	0x00000000
 8005390:	080050e5 	.word	0x080050e5

08005394 <_printf_common>:
 8005394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	4616      	mov	r6, r2
 800539a:	4699      	mov	r9, r3
 800539c:	688a      	ldr	r2, [r1, #8]
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	4607      	mov	r7, r0
 80053a2:	4293      	cmp	r3, r2
 80053a4:	bfb8      	it	lt
 80053a6:	4613      	movlt	r3, r2
 80053a8:	6033      	str	r3, [r6, #0]
 80053aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053ae:	460c      	mov	r4, r1
 80053b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053b4:	b10a      	cbz	r2, 80053ba <_printf_common+0x26>
 80053b6:	3301      	adds	r3, #1
 80053b8:	6033      	str	r3, [r6, #0]
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	0699      	lsls	r1, r3, #26
 80053be:	bf42      	ittt	mi
 80053c0:	6833      	ldrmi	r3, [r6, #0]
 80053c2:	3302      	addmi	r3, #2
 80053c4:	6033      	strmi	r3, [r6, #0]
 80053c6:	6825      	ldr	r5, [r4, #0]
 80053c8:	f015 0506 	ands.w	r5, r5, #6
 80053cc:	d106      	bne.n	80053dc <_printf_common+0x48>
 80053ce:	f104 0a19 	add.w	sl, r4, #25
 80053d2:	68e3      	ldr	r3, [r4, #12]
 80053d4:	6832      	ldr	r2, [r6, #0]
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	42ab      	cmp	r3, r5
 80053da:	dc2b      	bgt.n	8005434 <_printf_common+0xa0>
 80053dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053e0:	1e13      	subs	r3, r2, #0
 80053e2:	6822      	ldr	r2, [r4, #0]
 80053e4:	bf18      	it	ne
 80053e6:	2301      	movne	r3, #1
 80053e8:	0692      	lsls	r2, r2, #26
 80053ea:	d430      	bmi.n	800544e <_printf_common+0xba>
 80053ec:	4649      	mov	r1, r9
 80053ee:	4638      	mov	r0, r7
 80053f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f4:	47c0      	blx	r8
 80053f6:	3001      	adds	r0, #1
 80053f8:	d023      	beq.n	8005442 <_printf_common+0xae>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	6922      	ldr	r2, [r4, #16]
 80053fe:	f003 0306 	and.w	r3, r3, #6
 8005402:	2b04      	cmp	r3, #4
 8005404:	bf14      	ite	ne
 8005406:	2500      	movne	r5, #0
 8005408:	6833      	ldreq	r3, [r6, #0]
 800540a:	f04f 0600 	mov.w	r6, #0
 800540e:	bf08      	it	eq
 8005410:	68e5      	ldreq	r5, [r4, #12]
 8005412:	f104 041a 	add.w	r4, r4, #26
 8005416:	bf08      	it	eq
 8005418:	1aed      	subeq	r5, r5, r3
 800541a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800541e:	bf08      	it	eq
 8005420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005424:	4293      	cmp	r3, r2
 8005426:	bfc4      	itt	gt
 8005428:	1a9b      	subgt	r3, r3, r2
 800542a:	18ed      	addgt	r5, r5, r3
 800542c:	42b5      	cmp	r5, r6
 800542e:	d11a      	bne.n	8005466 <_printf_common+0xd2>
 8005430:	2000      	movs	r0, #0
 8005432:	e008      	b.n	8005446 <_printf_common+0xb2>
 8005434:	2301      	movs	r3, #1
 8005436:	4652      	mov	r2, sl
 8005438:	4649      	mov	r1, r9
 800543a:	4638      	mov	r0, r7
 800543c:	47c0      	blx	r8
 800543e:	3001      	adds	r0, #1
 8005440:	d103      	bne.n	800544a <_printf_common+0xb6>
 8005442:	f04f 30ff 	mov.w	r0, #4294967295
 8005446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544a:	3501      	adds	r5, #1
 800544c:	e7c1      	b.n	80053d2 <_printf_common+0x3e>
 800544e:	2030      	movs	r0, #48	; 0x30
 8005450:	18e1      	adds	r1, r4, r3
 8005452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800545c:	4422      	add	r2, r4
 800545e:	3302      	adds	r3, #2
 8005460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005464:	e7c2      	b.n	80053ec <_printf_common+0x58>
 8005466:	2301      	movs	r3, #1
 8005468:	4622      	mov	r2, r4
 800546a:	4649      	mov	r1, r9
 800546c:	4638      	mov	r0, r7
 800546e:	47c0      	blx	r8
 8005470:	3001      	adds	r0, #1
 8005472:	d0e6      	beq.n	8005442 <_printf_common+0xae>
 8005474:	3601      	adds	r6, #1
 8005476:	e7d9      	b.n	800542c <_printf_common+0x98>

08005478 <_printf_i>:
 8005478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800547c:	7e0f      	ldrb	r7, [r1, #24]
 800547e:	4691      	mov	r9, r2
 8005480:	2f78      	cmp	r7, #120	; 0x78
 8005482:	4680      	mov	r8, r0
 8005484:	460c      	mov	r4, r1
 8005486:	469a      	mov	sl, r3
 8005488:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800548a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800548e:	d807      	bhi.n	80054a0 <_printf_i+0x28>
 8005490:	2f62      	cmp	r7, #98	; 0x62
 8005492:	d80a      	bhi.n	80054aa <_printf_i+0x32>
 8005494:	2f00      	cmp	r7, #0
 8005496:	f000 80d5 	beq.w	8005644 <_printf_i+0x1cc>
 800549a:	2f58      	cmp	r7, #88	; 0x58
 800549c:	f000 80c1 	beq.w	8005622 <_printf_i+0x1aa>
 80054a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a8:	e03a      	b.n	8005520 <_printf_i+0xa8>
 80054aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ae:	2b15      	cmp	r3, #21
 80054b0:	d8f6      	bhi.n	80054a0 <_printf_i+0x28>
 80054b2:	a101      	add	r1, pc, #4	; (adr r1, 80054b8 <_printf_i+0x40>)
 80054b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054b8:	08005511 	.word	0x08005511
 80054bc:	08005525 	.word	0x08005525
 80054c0:	080054a1 	.word	0x080054a1
 80054c4:	080054a1 	.word	0x080054a1
 80054c8:	080054a1 	.word	0x080054a1
 80054cc:	080054a1 	.word	0x080054a1
 80054d0:	08005525 	.word	0x08005525
 80054d4:	080054a1 	.word	0x080054a1
 80054d8:	080054a1 	.word	0x080054a1
 80054dc:	080054a1 	.word	0x080054a1
 80054e0:	080054a1 	.word	0x080054a1
 80054e4:	0800562b 	.word	0x0800562b
 80054e8:	08005551 	.word	0x08005551
 80054ec:	080055e5 	.word	0x080055e5
 80054f0:	080054a1 	.word	0x080054a1
 80054f4:	080054a1 	.word	0x080054a1
 80054f8:	0800564d 	.word	0x0800564d
 80054fc:	080054a1 	.word	0x080054a1
 8005500:	08005551 	.word	0x08005551
 8005504:	080054a1 	.word	0x080054a1
 8005508:	080054a1 	.word	0x080054a1
 800550c:	080055ed 	.word	0x080055ed
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	1d1a      	adds	r2, r3, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	602a      	str	r2, [r5, #0]
 8005518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800551c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005520:	2301      	movs	r3, #1
 8005522:	e0a0      	b.n	8005666 <_printf_i+0x1ee>
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	682b      	ldr	r3, [r5, #0]
 8005528:	0607      	lsls	r7, r0, #24
 800552a:	f103 0104 	add.w	r1, r3, #4
 800552e:	6029      	str	r1, [r5, #0]
 8005530:	d501      	bpl.n	8005536 <_printf_i+0xbe>
 8005532:	681e      	ldr	r6, [r3, #0]
 8005534:	e003      	b.n	800553e <_printf_i+0xc6>
 8005536:	0646      	lsls	r6, r0, #25
 8005538:	d5fb      	bpl.n	8005532 <_printf_i+0xba>
 800553a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800553e:	2e00      	cmp	r6, #0
 8005540:	da03      	bge.n	800554a <_printf_i+0xd2>
 8005542:	232d      	movs	r3, #45	; 0x2d
 8005544:	4276      	negs	r6, r6
 8005546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800554a:	230a      	movs	r3, #10
 800554c:	4859      	ldr	r0, [pc, #356]	; (80056b4 <_printf_i+0x23c>)
 800554e:	e012      	b.n	8005576 <_printf_i+0xfe>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	6820      	ldr	r0, [r4, #0]
 8005554:	1d19      	adds	r1, r3, #4
 8005556:	6029      	str	r1, [r5, #0]
 8005558:	0605      	lsls	r5, r0, #24
 800555a:	d501      	bpl.n	8005560 <_printf_i+0xe8>
 800555c:	681e      	ldr	r6, [r3, #0]
 800555e:	e002      	b.n	8005566 <_printf_i+0xee>
 8005560:	0641      	lsls	r1, r0, #25
 8005562:	d5fb      	bpl.n	800555c <_printf_i+0xe4>
 8005564:	881e      	ldrh	r6, [r3, #0]
 8005566:	2f6f      	cmp	r7, #111	; 0x6f
 8005568:	bf0c      	ite	eq
 800556a:	2308      	moveq	r3, #8
 800556c:	230a      	movne	r3, #10
 800556e:	4851      	ldr	r0, [pc, #324]	; (80056b4 <_printf_i+0x23c>)
 8005570:	2100      	movs	r1, #0
 8005572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005576:	6865      	ldr	r5, [r4, #4]
 8005578:	2d00      	cmp	r5, #0
 800557a:	bfa8      	it	ge
 800557c:	6821      	ldrge	r1, [r4, #0]
 800557e:	60a5      	str	r5, [r4, #8]
 8005580:	bfa4      	itt	ge
 8005582:	f021 0104 	bicge.w	r1, r1, #4
 8005586:	6021      	strge	r1, [r4, #0]
 8005588:	b90e      	cbnz	r6, 800558e <_printf_i+0x116>
 800558a:	2d00      	cmp	r5, #0
 800558c:	d04b      	beq.n	8005626 <_printf_i+0x1ae>
 800558e:	4615      	mov	r5, r2
 8005590:	fbb6 f1f3 	udiv	r1, r6, r3
 8005594:	fb03 6711 	mls	r7, r3, r1, r6
 8005598:	5dc7      	ldrb	r7, [r0, r7]
 800559a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800559e:	4637      	mov	r7, r6
 80055a0:	42bb      	cmp	r3, r7
 80055a2:	460e      	mov	r6, r1
 80055a4:	d9f4      	bls.n	8005590 <_printf_i+0x118>
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d10b      	bne.n	80055c2 <_printf_i+0x14a>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	07de      	lsls	r6, r3, #31
 80055ae:	d508      	bpl.n	80055c2 <_printf_i+0x14a>
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	6861      	ldr	r1, [r4, #4]
 80055b4:	4299      	cmp	r1, r3
 80055b6:	bfde      	ittt	le
 80055b8:	2330      	movle	r3, #48	; 0x30
 80055ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055c2:	1b52      	subs	r2, r2, r5
 80055c4:	6122      	str	r2, [r4, #16]
 80055c6:	464b      	mov	r3, r9
 80055c8:	4621      	mov	r1, r4
 80055ca:	4640      	mov	r0, r8
 80055cc:	f8cd a000 	str.w	sl, [sp]
 80055d0:	aa03      	add	r2, sp, #12
 80055d2:	f7ff fedf 	bl	8005394 <_printf_common>
 80055d6:	3001      	adds	r0, #1
 80055d8:	d14a      	bne.n	8005670 <_printf_i+0x1f8>
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	b004      	add	sp, #16
 80055e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	f043 0320 	orr.w	r3, r3, #32
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	2778      	movs	r7, #120	; 0x78
 80055ee:	4832      	ldr	r0, [pc, #200]	; (80056b8 <_printf_i+0x240>)
 80055f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	6829      	ldr	r1, [r5, #0]
 80055f8:	061f      	lsls	r7, r3, #24
 80055fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80055fe:	d402      	bmi.n	8005606 <_printf_i+0x18e>
 8005600:	065f      	lsls	r7, r3, #25
 8005602:	bf48      	it	mi
 8005604:	b2b6      	uxthmi	r6, r6
 8005606:	07df      	lsls	r7, r3, #31
 8005608:	bf48      	it	mi
 800560a:	f043 0320 	orrmi.w	r3, r3, #32
 800560e:	6029      	str	r1, [r5, #0]
 8005610:	bf48      	it	mi
 8005612:	6023      	strmi	r3, [r4, #0]
 8005614:	b91e      	cbnz	r6, 800561e <_printf_i+0x1a6>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	f023 0320 	bic.w	r3, r3, #32
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	2310      	movs	r3, #16
 8005620:	e7a6      	b.n	8005570 <_printf_i+0xf8>
 8005622:	4824      	ldr	r0, [pc, #144]	; (80056b4 <_printf_i+0x23c>)
 8005624:	e7e4      	b.n	80055f0 <_printf_i+0x178>
 8005626:	4615      	mov	r5, r2
 8005628:	e7bd      	b.n	80055a6 <_printf_i+0x12e>
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	6826      	ldr	r6, [r4, #0]
 800562e:	1d18      	adds	r0, r3, #4
 8005630:	6961      	ldr	r1, [r4, #20]
 8005632:	6028      	str	r0, [r5, #0]
 8005634:	0635      	lsls	r5, r6, #24
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	d501      	bpl.n	800563e <_printf_i+0x1c6>
 800563a:	6019      	str	r1, [r3, #0]
 800563c:	e002      	b.n	8005644 <_printf_i+0x1cc>
 800563e:	0670      	lsls	r0, r6, #25
 8005640:	d5fb      	bpl.n	800563a <_printf_i+0x1c2>
 8005642:	8019      	strh	r1, [r3, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	4615      	mov	r5, r2
 8005648:	6123      	str	r3, [r4, #16]
 800564a:	e7bc      	b.n	80055c6 <_printf_i+0x14e>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	2100      	movs	r1, #0
 8005650:	1d1a      	adds	r2, r3, #4
 8005652:	602a      	str	r2, [r5, #0]
 8005654:	681d      	ldr	r5, [r3, #0]
 8005656:	6862      	ldr	r2, [r4, #4]
 8005658:	4628      	mov	r0, r5
 800565a:	f000 f859 	bl	8005710 <memchr>
 800565e:	b108      	cbz	r0, 8005664 <_printf_i+0x1ec>
 8005660:	1b40      	subs	r0, r0, r5
 8005662:	6060      	str	r0, [r4, #4]
 8005664:	6863      	ldr	r3, [r4, #4]
 8005666:	6123      	str	r3, [r4, #16]
 8005668:	2300      	movs	r3, #0
 800566a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566e:	e7aa      	b.n	80055c6 <_printf_i+0x14e>
 8005670:	462a      	mov	r2, r5
 8005672:	4649      	mov	r1, r9
 8005674:	4640      	mov	r0, r8
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	47d0      	blx	sl
 800567a:	3001      	adds	r0, #1
 800567c:	d0ad      	beq.n	80055da <_printf_i+0x162>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	079b      	lsls	r3, r3, #30
 8005682:	d413      	bmi.n	80056ac <_printf_i+0x234>
 8005684:	68e0      	ldr	r0, [r4, #12]
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	4298      	cmp	r0, r3
 800568a:	bfb8      	it	lt
 800568c:	4618      	movlt	r0, r3
 800568e:	e7a6      	b.n	80055de <_printf_i+0x166>
 8005690:	2301      	movs	r3, #1
 8005692:	4632      	mov	r2, r6
 8005694:	4649      	mov	r1, r9
 8005696:	4640      	mov	r0, r8
 8005698:	47d0      	blx	sl
 800569a:	3001      	adds	r0, #1
 800569c:	d09d      	beq.n	80055da <_printf_i+0x162>
 800569e:	3501      	adds	r5, #1
 80056a0:	68e3      	ldr	r3, [r4, #12]
 80056a2:	9903      	ldr	r1, [sp, #12]
 80056a4:	1a5b      	subs	r3, r3, r1
 80056a6:	42ab      	cmp	r3, r5
 80056a8:	dcf2      	bgt.n	8005690 <_printf_i+0x218>
 80056aa:	e7eb      	b.n	8005684 <_printf_i+0x20c>
 80056ac:	2500      	movs	r5, #0
 80056ae:	f104 0619 	add.w	r6, r4, #25
 80056b2:	e7f5      	b.n	80056a0 <_printf_i+0x228>
 80056b4:	08005833 	.word	0x08005833
 80056b8:	08005844 	.word	0x08005844

080056bc <memmove>:
 80056bc:	4288      	cmp	r0, r1
 80056be:	b510      	push	{r4, lr}
 80056c0:	eb01 0402 	add.w	r4, r1, r2
 80056c4:	d902      	bls.n	80056cc <memmove+0x10>
 80056c6:	4284      	cmp	r4, r0
 80056c8:	4623      	mov	r3, r4
 80056ca:	d807      	bhi.n	80056dc <memmove+0x20>
 80056cc:	1e43      	subs	r3, r0, #1
 80056ce:	42a1      	cmp	r1, r4
 80056d0:	d008      	beq.n	80056e4 <memmove+0x28>
 80056d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056da:	e7f8      	b.n	80056ce <memmove+0x12>
 80056dc:	4601      	mov	r1, r0
 80056de:	4402      	add	r2, r0
 80056e0:	428a      	cmp	r2, r1
 80056e2:	d100      	bne.n	80056e6 <memmove+0x2a>
 80056e4:	bd10      	pop	{r4, pc}
 80056e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ee:	e7f7      	b.n	80056e0 <memmove+0x24>

080056f0 <_sbrk_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	2300      	movs	r3, #0
 80056f4:	4d05      	ldr	r5, [pc, #20]	; (800570c <_sbrk_r+0x1c>)
 80056f6:	4604      	mov	r4, r0
 80056f8:	4608      	mov	r0, r1
 80056fa:	602b      	str	r3, [r5, #0]
 80056fc:	f7fc fb0c 	bl	8001d18 <_sbrk>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_sbrk_r+0x1a>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_sbrk_r+0x1a>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	200004d8 	.word	0x200004d8

08005710 <memchr>:
 8005710:	4603      	mov	r3, r0
 8005712:	b510      	push	{r4, lr}
 8005714:	b2c9      	uxtb	r1, r1
 8005716:	4402      	add	r2, r0
 8005718:	4293      	cmp	r3, r2
 800571a:	4618      	mov	r0, r3
 800571c:	d101      	bne.n	8005722 <memchr+0x12>
 800571e:	2000      	movs	r0, #0
 8005720:	e003      	b.n	800572a <memchr+0x1a>
 8005722:	7804      	ldrb	r4, [r0, #0]
 8005724:	3301      	adds	r3, #1
 8005726:	428c      	cmp	r4, r1
 8005728:	d1f6      	bne.n	8005718 <memchr+0x8>
 800572a:	bd10      	pop	{r4, pc}

0800572c <memcpy>:
 800572c:	440a      	add	r2, r1
 800572e:	4291      	cmp	r1, r2
 8005730:	f100 33ff 	add.w	r3, r0, #4294967295
 8005734:	d100      	bne.n	8005738 <memcpy+0xc>
 8005736:	4770      	bx	lr
 8005738:	b510      	push	{r4, lr}
 800573a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800573e:	4291      	cmp	r1, r2
 8005740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005744:	d1f9      	bne.n	800573a <memcpy+0xe>
 8005746:	bd10      	pop	{r4, pc}

08005748 <_realloc_r>:
 8005748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574c:	4680      	mov	r8, r0
 800574e:	4614      	mov	r4, r2
 8005750:	460e      	mov	r6, r1
 8005752:	b921      	cbnz	r1, 800575e <_realloc_r+0x16>
 8005754:	4611      	mov	r1, r2
 8005756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800575a:	f7ff bc37 	b.w	8004fcc <_malloc_r>
 800575e:	b92a      	cbnz	r2, 800576c <_realloc_r+0x24>
 8005760:	f7ff fbcc 	bl	8004efc <_free_r>
 8005764:	4625      	mov	r5, r4
 8005766:	4628      	mov	r0, r5
 8005768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800576c:	f000 f81b 	bl	80057a6 <_malloc_usable_size_r>
 8005770:	4284      	cmp	r4, r0
 8005772:	4607      	mov	r7, r0
 8005774:	d802      	bhi.n	800577c <_realloc_r+0x34>
 8005776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800577a:	d812      	bhi.n	80057a2 <_realloc_r+0x5a>
 800577c:	4621      	mov	r1, r4
 800577e:	4640      	mov	r0, r8
 8005780:	f7ff fc24 	bl	8004fcc <_malloc_r>
 8005784:	4605      	mov	r5, r0
 8005786:	2800      	cmp	r0, #0
 8005788:	d0ed      	beq.n	8005766 <_realloc_r+0x1e>
 800578a:	42bc      	cmp	r4, r7
 800578c:	4622      	mov	r2, r4
 800578e:	4631      	mov	r1, r6
 8005790:	bf28      	it	cs
 8005792:	463a      	movcs	r2, r7
 8005794:	f7ff ffca 	bl	800572c <memcpy>
 8005798:	4631      	mov	r1, r6
 800579a:	4640      	mov	r0, r8
 800579c:	f7ff fbae 	bl	8004efc <_free_r>
 80057a0:	e7e1      	b.n	8005766 <_realloc_r+0x1e>
 80057a2:	4635      	mov	r5, r6
 80057a4:	e7df      	b.n	8005766 <_realloc_r+0x1e>

080057a6 <_malloc_usable_size_r>:
 80057a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057aa:	1f18      	subs	r0, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bfbc      	itt	lt
 80057b0:	580b      	ldrlt	r3, [r1, r0]
 80057b2:	18c0      	addlt	r0, r0, r3
 80057b4:	4770      	bx	lr
	...

080057b8 <_init>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr

080057c4 <_fini>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr
