
PEDESTRIAN_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005770  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005904  08005904  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08005904  08005904  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005904  08005904  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800590c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  200000bc  080059c8  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  080059c8  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e42a  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028b4  00000000  00000000  0002e552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00030e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b34  00000000  00000000  00031c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019198  00000000  00000000  000327c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013011  00000000  00000000  0004b95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088bb3  00000000  00000000  0005e96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ec0  00000000  00000000  000e7520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000eb3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08005864 	.word	0x08005864

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	08005864 	.word	0x08005864

0800014c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	; (8000240 <buttonReading+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	; (8000244 <buttonReading+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	; (8000248 <buttonReading+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	; (8000240 <buttonReading+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <buttonReading+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	; (8000250 <buttonReading+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f002 fca1 	bl	8002acc <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <buttonReading+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2c      	ldr	r2, [pc, #176]	; (8000248 <buttonReading+0xfc>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	; (8000240 <buttonReading+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d143      	bne.n	800022a <buttonReading+0xde>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a28      	ldr	r2, [pc, #160]	; (8000248 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <buttonReading+0xf8>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d13b      	bne.n	800022a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a27      	ldr	r2, [pc, #156]	; (8000254 <buttonReading+0x108>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4923      	ldr	r1, [pc, #140]	; (8000248 <buttonReading+0xfc>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	; (8000248 <buttonReading+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	; (8000254 <buttonReading+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a20      	ldr	r2, [pc, #128]	; (8000254 <buttonReading+0x108>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d128      	bne.n	800022a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <buttonReading+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / TIMER_TICK;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <buttonReading+0x110>)
 80001e4:	21c8      	movs	r1, #200	; 0xc8
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001ea:	e01e      	b.n	800022a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <buttonReading+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d119      	bne.n	800022a <buttonReading+0xde>
					buttonCounters[i] --;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <buttonReading+0x110>)
 80001fa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80001fe:	b292      	uxth	r2, r2
 8000200:	3a01      	subs	r2, #1
 8000202:	b292      	uxth	r2, r2
 8000204:	b211      	sxth	r1, r2
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <buttonReading+0x110>)
 8000208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <buttonReading+0x110>)
 8000210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dc08      	bgt.n	800022a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <buttonReading+0x10c>)
 800021c:	2101      	movs	r1, #1
 800021e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / TIMER_TICK;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a0e      	ldr	r2, [pc, #56]	; (800025c <buttonReading+0x110>)
 8000224:	2114      	movs	r1, #20
 8000226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d990      	bls.n	8000158 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	200000e0 	.word	0x200000e0
 8000244:	200000e4 	.word	0x200000e4
 8000248:	200000dc 	.word	0x200000dc
 800024c:	20000000 	.word	0x20000000
 8000250:	20000010 	.word	0x20000010
 8000254:	200000d8 	.word	0x200000d8
 8000258:	200000e8 	.word	0x200000e8
 800025c:	200000ec 	.word	0x200000ec

08000260 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d901      	bls.n	8000274 <buttonPressed+0x14>
 8000270:	2300      	movs	r3, #0
 8000272:	e00b      	b.n	800028c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <buttonPressed+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d105      	bne.n	800028a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a05      	ldr	r2, [pc, #20]	; (8000298 <buttonPressed+0x38>)
 8000282:	2100      	movs	r1, #0
 8000284:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <buttonPressed+0x2c>
	}
	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	200000e8 	.word	0x200000e8

0800029c <buzzer0Set>:

#include "buzzer.h"

extern TIM_HandleTypeDef htim3;

void buzzer0Set(void) {
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
	uint32_t pulseWidth = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	607b      	str	r3, [r7, #4]
	if (pedestrianCounters[0] > BUZZER_TIMEOUT) {
 80002a6:	4b22      	ldr	r3, [pc, #136]	; (8000330 <buzzer0Set+0x94>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002ae:	d915      	bls.n	80002dc <buzzer0Set+0x40>
    	pulseWidth = BUZZER_MAX * BUZZER_RATIO * 10 / 100;
 80002b0:	4b20      	ldr	r3, [pc, #128]	; (8000334 <buzzer0Set+0x98>)
 80002b2:	68da      	ldr	r2, [r3, #12]
 80002b4:	4613      	mov	r3, r2
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	4413      	add	r3, r2
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	461a      	mov	r2, r3
 80002be:	4b1e      	ldr	r3, [pc, #120]	; (8000338 <buzzer0Set+0x9c>)
 80002c0:	fba3 2302 	umull	r2, r3, r3, r2
 80002c4:	095a      	lsrs	r2, r3, #5
 80002c6:	4613      	mov	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	4413      	add	r3, r2
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b19      	ldr	r3, [pc, #100]	; (8000338 <buzzer0Set+0x9c>)
 80002d2:	fba3 2302 	umull	r2, r3, r3, r2
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	e020      	b.n	800031e <buzzer0Set+0x82>
	}
	else {
		pulseWidth = BUZZER_MAX * BUZZER_RATIO * (BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[1]) / BUZZER_TIMEOUT) / 100;
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <buzzer0Set+0x98>)
 80002de:	68da      	ldr	r2, [r3, #12]
 80002e0:	4613      	mov	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	4413      	add	r3, r2
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b13      	ldr	r3, [pc, #76]	; (8000338 <buzzer0Set+0x9c>)
 80002ec:	fba3 2302 	umull	r2, r3, r3, r2
 80002f0:	095a      	lsrs	r2, r3, #5
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <buzzer0Set+0x94>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	f06f 0159 	mvn.w	r1, #89	; 0x59
 80002fa:	fb01 f303 	mul.w	r3, r1, r3
 80002fe:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 8000302:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <buzzer0Set+0xa0>)
 8000308:	fba1 1303 	umull	r1, r3, r1, r3
 800030c:	09db      	lsrs	r3, r3, #7
 800030e:	330a      	adds	r3, #10
 8000310:	fb02 f303 	mul.w	r3, r2, r3
 8000314:	4a08      	ldr	r2, [pc, #32]	; (8000338 <buzzer0Set+0x9c>)
 8000316:	fba2 2303 	umull	r2, r3, r2, r3
 800031a:	095b      	lsrs	r3, r3, #5
 800031c:	607b      	str	r3, [r7, #4]
	}
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseWidth);
 800031e:	4b05      	ldr	r3, [pc, #20]	; (8000334 <buzzer0Set+0x98>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	200001f4 	.word	0x200001f4
 8000334:	2000015c 	.word	0x2000015c
 8000338:	51eb851f 	.word	0x51eb851f
 800033c:	10624dd3 	.word	0x10624dd3

08000340 <buzzer0On>:

void buzzer0On(void) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
	uint32_t period = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
	uint32_t delay = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	603b      	str	r3, [r7, #0]
	if (pedestrianCounters[0] > BUZZER_TIMEOUT) {
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <buzzer0On+0x64>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000356:	d904      	bls.n	8000362 <buzzer0On+0x22>
		period = 200;
 8000358:	23c8      	movs	r3, #200	; 0xc8
 800035a:	607b      	str	r3, [r7, #4]
		delay = 100;
 800035c:	2364      	movs	r3, #100	; 0x64
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	e009      	b.n	8000376 <buzzer0On+0x36>
	}
	else {
		period = pedestrianCounters[0] / 20;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <buzzer0On+0x64>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <buzzer0On+0x68>)
 8000368:	fba2 2303 	umull	r2, r3, r2, r3
 800036c:	091b      	lsrs	r3, r3, #4
 800036e:	607b      	str	r3, [r7, #4]
		delay = period / 2;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	085b      	lsrs	r3, r3, #1
 8000374:	603b      	str	r3, [r7, #0]
	}
	SCH_AddTask(buzzer0Set, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	480c      	ldr	r0, [pc, #48]	; (80003ac <buzzer0On+0x6c>)
 800037c:	f001 f93e 	bl	80015fc <SCH_AddTask>
	SCH_AddTask(buzzer0Off, delay, 0);
 8000380:	2200      	movs	r2, #0
 8000382:	6839      	ldr	r1, [r7, #0]
 8000384:	480a      	ldr	r0, [pc, #40]	; (80003b0 <buzzer0On+0x70>)
 8000386:	f001 f939 	bl	80015fc <SCH_AddTask>
	if (period > 0) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d004      	beq.n	800039a <buzzer0On+0x5a>
		SCH_AddTask(buzzer0On, period, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	4807      	ldr	r0, [pc, #28]	; (80003b4 <buzzer0On+0x74>)
 8000396:	f001 f931 	bl	80015fc <SCH_AddTask>
	}
}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	200001f4 	.word	0x200001f4
 80003a8:	cccccccd 	.word	0xcccccccd
 80003ac:	0800029d 	.word	0x0800029d
 80003b0:	080004d5 	.word	0x080004d5
 80003b4:	08000341 	.word	0x08000341

080003b8 <buzzer1Set>:

void buzzer1Set(void) {
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
	uint32_t pulseWidth = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	607b      	str	r3, [r7, #4]
	if (pedestrianCounters[1] > BUZZER_TIMEOUT) {
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <buzzer1Set+0x94>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003ca:	d915      	bls.n	80003f8 <buzzer1Set+0x40>
    	pulseWidth = BUZZER_MAX * BUZZER_RATIO * 10 / 100;
 80003cc:	4b20      	ldr	r3, [pc, #128]	; (8000450 <buzzer1Set+0x98>)
 80003ce:	68da      	ldr	r2, [r3, #12]
 80003d0:	4613      	mov	r3, r2
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	4413      	add	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	461a      	mov	r2, r3
 80003da:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <buzzer1Set+0x9c>)
 80003dc:	fba3 2302 	umull	r2, r3, r3, r2
 80003e0:	095a      	lsrs	r2, r3, #5
 80003e2:	4613      	mov	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	461a      	mov	r2, r3
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <buzzer1Set+0x9c>)
 80003ee:	fba3 2302 	umull	r2, r3, r3, r2
 80003f2:	095b      	lsrs	r3, r3, #5
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	e020      	b.n	800043a <buzzer1Set+0x82>
	}
	else {
		pulseWidth = BUZZER_MAX * BUZZER_RATIO * (BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[1]) / BUZZER_TIMEOUT) / 100;
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <buzzer1Set+0x98>)
 80003fa:	68da      	ldr	r2, [r3, #12]
 80003fc:	4613      	mov	r3, r2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	4413      	add	r3, r2
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	461a      	mov	r2, r3
 8000406:	4b13      	ldr	r3, [pc, #76]	; (8000454 <buzzer1Set+0x9c>)
 8000408:	fba3 2302 	umull	r2, r3, r3, r2
 800040c:	095a      	lsrs	r2, r3, #5
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <buzzer1Set+0x94>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8000416:	fb01 f303 	mul.w	r3, r1, r3
 800041a:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 800041e:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000422:	490d      	ldr	r1, [pc, #52]	; (8000458 <buzzer1Set+0xa0>)
 8000424:	fba1 1303 	umull	r1, r3, r1, r3
 8000428:	09db      	lsrs	r3, r3, #7
 800042a:	330a      	adds	r3, #10
 800042c:	fb02 f303 	mul.w	r3, r2, r3
 8000430:	4a08      	ldr	r2, [pc, #32]	; (8000454 <buzzer1Set+0x9c>)
 8000432:	fba2 2303 	umull	r2, r3, r2, r3
 8000436:	095b      	lsrs	r3, r3, #5
 8000438:	607b      	str	r3, [r7, #4]
	}
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseWidth);
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <buzzer1Set+0x98>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	200001f4 	.word	0x200001f4
 8000450:	2000015c 	.word	0x2000015c
 8000454:	51eb851f 	.word	0x51eb851f
 8000458:	10624dd3 	.word	0x10624dd3

0800045c <buzzer1On>:

void buzzer1On(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
	uint32_t period = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]
	uint32_t delay = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	603b      	str	r3, [r7, #0]
	if (pedestrianCounters[1] > BUZZER_TIMEOUT) {
 800046a:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <buzzer1On+0x64>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000472:	d904      	bls.n	800047e <buzzer1On+0x22>
		period = 200;
 8000474:	23c8      	movs	r3, #200	; 0xc8
 8000476:	607b      	str	r3, [r7, #4]
		delay = 100;
 8000478:	2364      	movs	r3, #100	; 0x64
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	e009      	b.n	8000492 <buzzer1On+0x36>
	}
	else {
		period = pedestrianCounters[1] / 20;
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <buzzer1On+0x64>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <buzzer1On+0x68>)
 8000484:	fba2 2303 	umull	r2, r3, r2, r3
 8000488:	091b      	lsrs	r3, r3, #4
 800048a:	607b      	str	r3, [r7, #4]
		delay = period / 2;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	085b      	lsrs	r3, r3, #1
 8000490:	603b      	str	r3, [r7, #0]
	}
	SCH_AddTask(buzzer1Set, 0, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2100      	movs	r1, #0
 8000496:	480c      	ldr	r0, [pc, #48]	; (80004c8 <buzzer1On+0x6c>)
 8000498:	f001 f8b0 	bl	80015fc <SCH_AddTask>
	SCH_AddTask(buzzer1Off, delay, 0);
 800049c:	2200      	movs	r2, #0
 800049e:	6839      	ldr	r1, [r7, #0]
 80004a0:	480a      	ldr	r0, [pc, #40]	; (80004cc <buzzer1On+0x70>)
 80004a2:	f001 f8ab 	bl	80015fc <SCH_AddTask>
	if (period > 0) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d004      	beq.n	80004b6 <buzzer1On+0x5a>
		SCH_AddTask(buzzer1On, period, 0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	4807      	ldr	r0, [pc, #28]	; (80004d0 <buzzer1On+0x74>)
 80004b2:	f001 f8a3 	bl	80015fc <SCH_AddTask>
	}
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200001f4 	.word	0x200001f4
 80004c4:	cccccccd 	.word	0xcccccccd
 80004c8:	080003b9 	.word	0x080003b9
 80004cc:	080004ed 	.word	0x080004ed
 80004d0:	0800045d 	.word	0x0800045d

080004d4 <buzzer0Off>:

void buzzer0Off(void) {
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <buzzer0Off+0x14>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2200      	movs	r2, #0
 80004de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	2000015c 	.word	0x2000015c

080004ec <buzzer1Off>:

void buzzer1Off(void) {
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <buzzer1Off+0x14>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2200      	movs	r2, #0
 80004f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	2000015c 	.word	0x2000015c

08000504 <counterRun>:
 *      Author: Nhat Khai
 */

#include "counter.h"

void counterRun(void) {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	if (trafficCounters[0] > TIMER_TICK) {
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <counterRun+0x74>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b0a      	cmp	r3, #10
 800050e:	d905      	bls.n	800051c <counterRun+0x18>
		trafficCounters[0] -= TIMER_TICK;
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <counterRun+0x74>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	3b0a      	subs	r3, #10
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <counterRun+0x74>)
 8000518:	6013      	str	r3, [r2, #0]
 800051a:	e002      	b.n	8000522 <counterRun+0x1e>
	}
	else {
		trafficCounters[0] = 0;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <counterRun+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
	}
	if (trafficCounters[1] > TIMER_TICK) {
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <counterRun+0x74>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	2b0a      	cmp	r3, #10
 8000528:	d905      	bls.n	8000536 <counterRun+0x32>
		trafficCounters[1] -= TIMER_TICK;
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <counterRun+0x74>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	3b0a      	subs	r3, #10
 8000530:	4a11      	ldr	r2, [pc, #68]	; (8000578 <counterRun+0x74>)
 8000532:	6053      	str	r3, [r2, #4]
 8000534:	e002      	b.n	800053c <counterRun+0x38>
	}
	else {
		trafficCounters[1] = 0;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <counterRun+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
	}
	if (pedestrianCounters[0] > TIMER_TICK) {
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <counterRun+0x78>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b0a      	cmp	r3, #10
 8000542:	d905      	bls.n	8000550 <counterRun+0x4c>
		pedestrianCounters[0] -= TIMER_TICK;
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <counterRun+0x78>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3b0a      	subs	r3, #10
 800054a:	4a0c      	ldr	r2, [pc, #48]	; (800057c <counterRun+0x78>)
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e002      	b.n	8000556 <counterRun+0x52>
	}
	else {
		pedestrianCounters[0] = 0;
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <counterRun+0x78>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
	}
	if (pedestrianCounters[1] > TIMER_TICK) {
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <counterRun+0x78>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	2b0a      	cmp	r3, #10
 800055c:	d905      	bls.n	800056a <counterRun+0x66>
		pedestrianCounters[1] -= TIMER_TICK;
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <counterRun+0x78>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	3b0a      	subs	r3, #10
 8000564:	4a05      	ldr	r2, [pc, #20]	; (800057c <counterRun+0x78>)
 8000566:	6053      	str	r3, [r2, #4]
	}
	else {
		pedestrianCounters[1] = 0;
	}
}
 8000568:	e002      	b.n	8000570 <counterRun+0x6c>
		pedestrianCounters[1] = 0;
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <counterRun+0x78>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000398 	.word	0x20000398
 800057c:	200001f4 	.word	0x200001f4

08000580 <counterReset>:

void counterReset(void) {
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	trafficCounters[0] = 0;
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <counterReset+0x24>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
	trafficCounters[1] = 0;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <counterReset+0x24>)
 800058c:	2200      	movs	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
	pedestrianCounters[0] = 0;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <counterReset+0x28>)
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
	pedestrianCounters[1] = 0;
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <counterReset+0x28>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	20000398 	.word	0x20000398
 80005a8:	200001f4 	.word	0x200001f4

080005ac <fsmAutoStop>:
static uint8_t fsmIDs[FSM_TASK] = {};
static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmAutoStop(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	SCH_AddTask(counterReset, 0, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2100      	movs	r1, #0
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <fsmAutoStop+0x14>)
 80005b6:	f001 f821 	bl	80015fc <SCH_AddTask>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	08000581 	.word	0x08000581

080005c4 <fsmAutoProcessing>:

void fsmAutoProcessing(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff fe49 	bl	8000260 <buttonPressed>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d008      	beq.n	80005e6 <fsmAutoProcessing+0x22>
		fsmAutoIDs[9] = SCH_AddTask(pedestrian0On, 0, TIMER_TICK);
 80005d4:	220a      	movs	r2, #10
 80005d6:	2100      	movs	r1, #0
 80005d8:	4820      	ldr	r0, [pc, #128]	; (800065c <fsmAutoProcessing+0x98>)
 80005da:	f001 f80f 	bl	80015fc <SCH_AddTask>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <fsmAutoProcessing+0x9c>)
 80005e4:	725a      	strb	r2, [r3, #9]
	}
	if (pedestrianStates[0] == PEDESTRIAN_GREEN && pedestrianCounters[0] <= 10) {
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <fsmAutoProcessing+0xa0>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d110      	bne.n	8000610 <fsmAutoProcessing+0x4c>
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <fsmAutoProcessing+0xa4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b0a      	cmp	r3, #10
 80005f4:	d80c      	bhi.n	8000610 <fsmAutoProcessing+0x4c>
		SCH_DeleteTask(fsmAutoIDs[9]);
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <fsmAutoProcessing+0x9c>)
 80005f8:	7a5b      	ldrb	r3, [r3, #9]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f904 	bl	8001808 <SCH_DeleteTask>
		fsmAutoIDs[9] = 0;
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <fsmAutoProcessing+0x9c>)
 8000602:	2200      	movs	r2, #0
 8000604:	725a      	strb	r2, [r3, #9]
		SCH_AddTask(pedestrian0Off, 10, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	210a      	movs	r1, #10
 800060a:	4818      	ldr	r0, [pc, #96]	; (800066c <fsmAutoProcessing+0xa8>)
 800060c:	f000 fff6 	bl	80015fc <SCH_AddTask>
	}
	if (buttonPressed(2)) {
 8000610:	2002      	movs	r0, #2
 8000612:	f7ff fe25 	bl	8000260 <buttonPressed>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d008      	beq.n	800062e <fsmAutoProcessing+0x6a>
		fsmAutoIDs[10] = SCH_AddTask(pedestrian1On, 0, TIMER_TICK);
 800061c:	220a      	movs	r2, #10
 800061e:	2100      	movs	r1, #0
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <fsmAutoProcessing+0xac>)
 8000622:	f000 ffeb 	bl	80015fc <SCH_AddTask>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <fsmAutoProcessing+0x9c>)
 800062c:	729a      	strb	r2, [r3, #10]
	}
	if (pedestrianStates[1] == PEDESTRIAN_GREEN && pedestrianCounters[1] <= 10) {
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <fsmAutoProcessing+0xa0>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	2b02      	cmp	r3, #2
 8000634:	d110      	bne.n	8000658 <fsmAutoProcessing+0x94>
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <fsmAutoProcessing+0xa4>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	2b0a      	cmp	r3, #10
 800063c:	d80c      	bhi.n	8000658 <fsmAutoProcessing+0x94>
		SCH_DeleteTask(fsmAutoIDs[10]);
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <fsmAutoProcessing+0x9c>)
 8000640:	7a9b      	ldrb	r3, [r3, #10]
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f8e0 	bl	8001808 <SCH_DeleteTask>
		fsmAutoIDs[10] = 0;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <fsmAutoProcessing+0x9c>)
 800064a:	2200      	movs	r2, #0
 800064c:	729a      	strb	r2, [r3, #10]
		SCH_AddTask(pedestrian1Off, 10, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	210a      	movs	r1, #10
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <fsmAutoProcessing+0xb0>)
 8000654:	f000 ffd2 	bl	80015fc <SCH_AddTask>
	}
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08001419 	.word	0x08001419
 8000660:	200000fc 	.word	0x200000fc
 8000664:	200001f0 	.word	0x200001f0
 8000668:	200001f4 	.word	0x200001f4
 800066c:	080014c1 	.word	0x080014c1
 8000670:	0800146d 	.word	0x0800146d
 8000674:	080014d5 	.word	0x080014d5

08000678 <fsmAuto>:

void fsmAuto(void) {
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	SCH_AddTask(pedestrian0Off, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	484a      	ldr	r0, [pc, #296]	; (80007ac <fsmAuto+0x134>)
 8000682:	f000 ffbb 	bl	80015fc <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	4849      	ldr	r0, [pc, #292]	; (80007b0 <fsmAuto+0x138>)
 800068c:	f000 ffb6 	bl	80015fc <SCH_AddTask>
	fsmAutoIDs[0] = SCH_AddTask(fsmAutoProcessing, 10, TIMER_TICK);
 8000690:	220a      	movs	r2, #10
 8000692:	210a      	movs	r1, #10
 8000694:	4847      	ldr	r0, [pc, #284]	; (80007b4 <fsmAuto+0x13c>)
 8000696:	f000 ffb1 	bl	80015fc <SCH_AddTask>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	4b46      	ldr	r3, [pc, #280]	; (80007b8 <fsmAuto+0x140>)
 80006a0:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(counterRun, 0, TIMER_TICK);
 80006a2:	220a      	movs	r2, #10
 80006a4:	2100      	movs	r1, #0
 80006a6:	4845      	ldr	r0, [pc, #276]	; (80007bc <fsmAuto+0x144>)
 80006a8:	f000 ffa8 	bl	80015fc <SCH_AddTask>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b41      	ldr	r3, [pc, #260]	; (80007b8 <fsmAuto+0x140>)
 80006b2:	705a      	strb	r2, [r3, #1]
	fsmAutoIDs[2] = SCH_AddTask(uartCounter, 50, 1000);
 80006b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006b8:	2132      	movs	r1, #50	; 0x32
 80006ba:	4841      	ldr	r0, [pc, #260]	; (80007c0 <fsmAuto+0x148>)
 80006bc:	f000 ff9e 	bl	80015fc <SCH_AddTask>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <fsmAuto+0x140>)
 80006c6:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80006c8:	4b3e      	ldr	r3, [pc, #248]	; (80007c4 <fsmAuto+0x14c>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b3e      	ldr	r3, [pc, #248]	; (80007c8 <fsmAuto+0x150>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	441a      	add	r2, r3
 80006d2:	4b3e      	ldr	r3, [pc, #248]	; (80007cc <fsmAuto+0x154>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	461a      	mov	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	483c      	ldr	r0, [pc, #240]	; (80007d0 <fsmAuto+0x158>)
 80006de:	f000 ff8d 	bl	80015fc <SCH_AddTask>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b34      	ldr	r3, [pc, #208]	; (80007b8 <fsmAuto+0x140>)
 80006e8:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80006ea:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <fsmAuto+0x14c>)
 80006ec:	6819      	ldr	r1, [r3, #0]
 80006ee:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <fsmAuto+0x14c>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <fsmAuto+0x150>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	441a      	add	r2, r3
 80006f8:	4b34      	ldr	r3, [pc, #208]	; (80007cc <fsmAuto+0x154>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	461a      	mov	r2, r3
 8000700:	4834      	ldr	r0, [pc, #208]	; (80007d4 <fsmAuto+0x15c>)
 8000702:	f000 ff7b 	bl	80015fc <SCH_AddTask>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <fsmAuto+0x140>)
 800070c:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800070e:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <fsmAuto+0x14c>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <fsmAuto+0x154>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	18d1      	adds	r1, r2, r3
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <fsmAuto+0x14c>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <fsmAuto+0x150>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	441a      	add	r2, r3
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <fsmAuto+0x154>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	461a      	mov	r2, r3
 800072a:	482b      	ldr	r0, [pc, #172]	; (80007d8 <fsmAuto+0x160>)
 800072c:	f000 ff66 	bl	80015fc <SCH_AddTask>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <fsmAuto+0x140>)
 8000736:	715a      	strb	r2, [r3, #5]
	fsmAutoIDs[6] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <fsmAuto+0x14c>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <fsmAuto+0x150>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	441a      	add	r2, r3
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <fsmAuto+0x154>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	461a      	mov	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <fsmAuto+0x164>)
 800074e:	f000 ff55 	bl	80015fc <SCH_AddTask>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <fsmAuto+0x140>)
 8000758:	719a      	strb	r2, [r3, #6]
	fsmAutoIDs[7] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <fsmAuto+0x154>)
 800075c:	6819      	ldr	r1, [r3, #0]
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <fsmAuto+0x14c>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <fsmAuto+0x150>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	441a      	add	r2, r3
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <fsmAuto+0x154>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4413      	add	r3, r2
 800076e:	461a      	mov	r2, r3
 8000770:	481b      	ldr	r0, [pc, #108]	; (80007e0 <fsmAuto+0x168>)
 8000772:	f000 ff43 	bl	80015fc <SCH_AddTask>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <fsmAuto+0x140>)
 800077c:	71da      	strb	r2, [r3, #7]
	fsmAutoIDs[8] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <fsmAuto+0x154>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <fsmAuto+0x150>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	18d1      	adds	r1, r2, r3
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <fsmAuto+0x14c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <fsmAuto+0x150>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	441a      	add	r2, r3
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <fsmAuto+0x154>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	461a      	mov	r2, r3
 800079a:	4812      	ldr	r0, [pc, #72]	; (80007e4 <fsmAuto+0x16c>)
 800079c:	f000 ff2e 	bl	80015fc <SCH_AddTask>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <fsmAuto+0x140>)
 80007a6:	721a      	strb	r2, [r3, #8]
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	080014c1 	.word	0x080014c1
 80007b0:	080014d5 	.word	0x080014d5
 80007b4:	080005c5 	.word	0x080005c5
 80007b8:	200000fc 	.word	0x200000fc
 80007bc:	08000505 	.word	0x08000505
 80007c0:	08002301 	.word	0x08002301
 80007c4:	20000034 	.word	0x20000034
 80007c8:	2000003c 	.word	0x2000003c
 80007cc:	20000038 	.word	0x20000038
 80007d0:	080021c5 	.word	0x080021c5
 80007d4:	080021d5 	.word	0x080021d5
 80007d8:	080021e5 	.word	0x080021e5
 80007dc:	08002215 	.word	0x08002215
 80007e0:	08002225 	.word	0x08002225
 80007e4:	08002205 	.word	0x08002205

080007e8 <fsmManualStop>:

void fsmManualStop(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	SCH_AddTask(traffic0Off, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <fsmManualStop+0x30>)
 80007f2:	f000 ff03 	bl	80015fc <SCH_AddTask>
	SCH_AddTask(traffic1Off, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <fsmManualStop+0x34>)
 80007fc:	f000 fefe 	bl	80015fc <SCH_AddTask>
	SCH_AddTask(pedestrian0Off, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4806      	ldr	r0, [pc, #24]	; (8000820 <fsmManualStop+0x38>)
 8000806:	f000 fef9 	bl	80015fc <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <fsmManualStop+0x3c>)
 8000810:	f000 fef4 	bl	80015fc <SCH_AddTask>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	080021b5 	.word	0x080021b5
 800081c:	080021f5 	.word	0x080021f5
 8000820:	080014c1 	.word	0x080014c1
 8000824:	080014d5 	.word	0x080014d5

08000828 <fsmManualProcessing>:

void fsmManualProcessing(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fd17 	bl	8000260 <buttonPressed>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d01d      	beq.n	8000874 <fsmManualProcessing+0x4c>
		switch (trafficStates[0]) {
 8000838:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <fsmManualProcessing+0x98>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b03      	cmp	r3, #3
 800083e:	d012      	beq.n	8000866 <fsmManualProcessing+0x3e>
 8000840:	2b03      	cmp	r3, #3
 8000842:	dc16      	bgt.n	8000872 <fsmManualProcessing+0x4a>
 8000844:	2b01      	cmp	r3, #1
 8000846:	d002      	beq.n	800084e <fsmManualProcessing+0x26>
 8000848:	2b02      	cmp	r3, #2
 800084a:	d006      	beq.n	800085a <fsmManualProcessing+0x32>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Red, 0, 0);
			break;
		default:
			break;
 800084c:	e011      	b.n	8000872 <fsmManualProcessing+0x4a>
			SCH_AddTask(traffic0Green, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	481c      	ldr	r0, [pc, #112]	; (80008c4 <fsmManualProcessing+0x9c>)
 8000854:	f000 fed2 	bl	80015fc <SCH_AddTask>
			break;
 8000858:	e00c      	b.n	8000874 <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Yellow, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	481a      	ldr	r0, [pc, #104]	; (80008c8 <fsmManualProcessing+0xa0>)
 8000860:	f000 fecc 	bl	80015fc <SCH_AddTask>
			break;
 8000864:	e006      	b.n	8000874 <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Red, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	4818      	ldr	r0, [pc, #96]	; (80008cc <fsmManualProcessing+0xa4>)
 800086c:	f000 fec6 	bl	80015fc <SCH_AddTask>
			break;
 8000870:	e000      	b.n	8000874 <fsmManualProcessing+0x4c>
			break;
 8000872:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fcf3 	bl	8000260 <buttonPressed>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d01d      	beq.n	80008bc <fsmManualProcessing+0x94>
		switch (trafficStates[1]) {
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <fsmManualProcessing+0x98>)
 8000882:	785b      	ldrb	r3, [r3, #1]
 8000884:	2b03      	cmp	r3, #3
 8000886:	d012      	beq.n	80008ae <fsmManualProcessing+0x86>
 8000888:	2b03      	cmp	r3, #3
 800088a:	dc16      	bgt.n	80008ba <fsmManualProcessing+0x92>
 800088c:	2b01      	cmp	r3, #1
 800088e:	d002      	beq.n	8000896 <fsmManualProcessing+0x6e>
 8000890:	2b02      	cmp	r3, #2
 8000892:	d006      	beq.n	80008a2 <fsmManualProcessing+0x7a>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Red, 0, 0);
			break;
		default:
			break;
 8000894:	e011      	b.n	80008ba <fsmManualProcessing+0x92>
			SCH_AddTask(traffic1Green, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <fsmManualProcessing+0xa8>)
 800089c:	f000 feae 	bl	80015fc <SCH_AddTask>
			break;
 80008a0:	e00c      	b.n	80008bc <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Yellow, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <fsmManualProcessing+0xac>)
 80008a8:	f000 fea8 	bl	80015fc <SCH_AddTask>
			break;
 80008ac:	e006      	b.n	80008bc <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Red, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	4809      	ldr	r0, [pc, #36]	; (80008d8 <fsmManualProcessing+0xb0>)
 80008b4:	f000 fea2 	bl	80015fc <SCH_AddTask>
			break;
 80008b8:	e000      	b.n	80008bc <fsmManualProcessing+0x94>
			break;
 80008ba:	bf00      	nop
		}
	}
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000394 	.word	0x20000394
 80008c4:	080021d5 	.word	0x080021d5
 80008c8:	080021e5 	.word	0x080021e5
 80008cc:	080021c5 	.word	0x080021c5
 80008d0:	08002215 	.word	0x08002215
 80008d4:	08002225 	.word	0x08002225
 80008d8:	08002205 	.word	0x08002205

080008dc <fsmManual>:

void fsmManual(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	fsmManualIDs[0] = SCH_AddTask(fsmManualProcessing, 10, TIMER_TICK);
 80008e0:	220a      	movs	r2, #10
 80008e2:	210a      	movs	r1, #10
 80008e4:	4812      	ldr	r0, [pc, #72]	; (8000930 <fsmManual+0x54>)
 80008e6:	f000 fe89 	bl	80015fc <SCH_AddTask>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <fsmManual+0x58>)
 80008f0:	701a      	strb	r2, [r3, #0]
	fsmManualIDs[1] = SCH_AddTask(pedestrian0On, 10, TIMER_TICK);
 80008f2:	220a      	movs	r2, #10
 80008f4:	210a      	movs	r1, #10
 80008f6:	4810      	ldr	r0, [pc, #64]	; (8000938 <fsmManual+0x5c>)
 80008f8:	f000 fe80 	bl	80015fc <SCH_AddTask>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <fsmManual+0x58>)
 8000902:	705a      	strb	r2, [r3, #1]
	fsmManualIDs[2] = SCH_AddTask(pedestrian1On, 10, TIMER_TICK);
 8000904:	220a      	movs	r2, #10
 8000906:	210a      	movs	r1, #10
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <fsmManual+0x60>)
 800090a:	f000 fe77 	bl	80015fc <SCH_AddTask>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <fsmManual+0x58>)
 8000914:	709a      	strb	r2, [r3, #2]
	// Initialize for Manual Mode
	SCH_AddTask(traffic0Red, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	4809      	ldr	r0, [pc, #36]	; (8000940 <fsmManual+0x64>)
 800091c:	f000 fe6e 	bl	80015fc <SCH_AddTask>
	SCH_AddTask(traffic1Green, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	4807      	ldr	r0, [pc, #28]	; (8000944 <fsmManual+0x68>)
 8000926:	f000 fe69 	bl	80015fc <SCH_AddTask>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	08000829 	.word	0x08000829
 8000934:	20000108 	.word	0x20000108
 8000938:	08001419 	.word	0x08001419
 800093c:	0800146d 	.word	0x0800146d
 8000940:	080021c5 	.word	0x080021c5
 8000944:	08002215 	.word	0x08002215

08000948 <fsmTunningStop>:

void fsmTunningStop(void) {
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	return;
 800094c:	bf00      	nop
}
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <fsmTunningProcessing>:

void fsmTunningProcessing(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff fc81 	bl	8000260 <buttonPressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	f000 80cb 	beq.w	8000afc <fsmTunningProcessing+0x1a8>
		SCH_DeleteTask(fsmTunningIDs[1]);
 8000966:	4bad      	ldr	r3, [pc, #692]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000968:	785b      	ldrb	r3, [r3, #1]
 800096a:	4618      	mov	r0, r3
 800096c:	f000 ff4c 	bl	8001808 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[2]);
 8000970:	4baa      	ldr	r3, [pc, #680]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000972:	789b      	ldrb	r3, [r3, #2]
 8000974:	4618      	mov	r0, r3
 8000976:	f000 ff47 	bl	8001808 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[3]);
 800097a:	4ba8      	ldr	r3, [pc, #672]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 800097c:	78db      	ldrb	r3, [r3, #3]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 ff42 	bl	8001808 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[4]);
 8000984:	4ba5      	ldr	r3, [pc, #660]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 ff3d 	bl	8001808 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[5]);
 800098e:	4ba3      	ldr	r3, [pc, #652]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000990:	795b      	ldrb	r3, [r3, #5]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 ff38 	bl	8001808 <SCH_DeleteTask>
		switch (fsmTunningState) {
 8000998:	4ba1      	ldr	r3, [pc, #644]	; (8000c20 <fsmTunningProcessing+0x2cc>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b03      	cmp	r3, #3
 800099e:	d075      	beq.n	8000a8c <fsmTunningProcessing+0x138>
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	f300 80aa 	bgt.w	8000afa <fsmTunningProcessing+0x1a6>
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d002      	beq.n	80009b0 <fsmTunningProcessing+0x5c>
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d037      	beq.n	8000a1e <fsmTunningProcessing+0xca>
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
			fsmTunningState = TRAFFIC_RED;
			break;
		default:
			break;
 80009ae:	e0a4      	b.n	8000afa <fsmTunningProcessing+0x1a6>
			fsmTunningIDs[1] = SCH_AddTask(uartGreenDuration, 50, 100);
 80009b0:	2264      	movs	r2, #100	; 0x64
 80009b2:	2132      	movs	r1, #50	; 0x32
 80009b4:	489b      	ldr	r0, [pc, #620]	; (8000c24 <fsmTunningProcessing+0x2d0>)
 80009b6:	f000 fe21 	bl	80015fc <SCH_AddTask>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	4b97      	ldr	r3, [pc, #604]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 80009c0:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Green, 0, 1000);
 80009c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c6:	2100      	movs	r1, #0
 80009c8:	4897      	ldr	r0, [pc, #604]	; (8000c28 <fsmTunningProcessing+0x2d4>)
 80009ca:	f000 fe17 	bl	80015fc <SCH_AddTask>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b92      	ldr	r3, [pc, #584]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 80009d4:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Green, 0, 1000);
 80009d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009da:	2100      	movs	r1, #0
 80009dc:	4893      	ldr	r0, [pc, #588]	; (8000c2c <fsmTunningProcessing+0x2d8>)
 80009de:	f000 fe0d 	bl	80015fc <SCH_AddTask>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b8d      	ldr	r3, [pc, #564]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 80009e8:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 80009ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009f2:	488f      	ldr	r0, [pc, #572]	; (8000c30 <fsmTunningProcessing+0x2dc>)
 80009f4:	f000 fe02 	bl	80015fc <SCH_AddTask>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b87      	ldr	r3, [pc, #540]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 80009fe:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 8000a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a08:	488a      	ldr	r0, [pc, #552]	; (8000c34 <fsmTunningProcessing+0x2e0>)
 8000a0a:	f000 fdf7 	bl	80015fc <SCH_AddTask>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b82      	ldr	r3, [pc, #520]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000a14:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_GREEN;
 8000a16:	4b82      	ldr	r3, [pc, #520]	; (8000c20 <fsmTunningProcessing+0x2cc>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	701a      	strb	r2, [r3, #0]
			break;
 8000a1c:	e06e      	b.n	8000afc <fsmTunningProcessing+0x1a8>
			fsmTunningIDs[1] = SCH_AddTask(uartYellowDuration, 50, 100);
 8000a1e:	2264      	movs	r2, #100	; 0x64
 8000a20:	2132      	movs	r1, #50	; 0x32
 8000a22:	4885      	ldr	r0, [pc, #532]	; (8000c38 <fsmTunningProcessing+0x2e4>)
 8000a24:	f000 fdea 	bl	80015fc <SCH_AddTask>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b7b      	ldr	r3, [pc, #492]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000a2e:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Yellow, 0, 1000);
 8000a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a34:	2100      	movs	r1, #0
 8000a36:	4881      	ldr	r0, [pc, #516]	; (8000c3c <fsmTunningProcessing+0x2e8>)
 8000a38:	f000 fde0 	bl	80015fc <SCH_AddTask>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b76      	ldr	r3, [pc, #472]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000a42:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Yellow, 0, 1000);
 8000a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a48:	2100      	movs	r1, #0
 8000a4a:	487d      	ldr	r0, [pc, #500]	; (8000c40 <fsmTunningProcessing+0x2ec>)
 8000a4c:	f000 fdd6 	bl	80015fc <SCH_AddTask>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b71      	ldr	r3, [pc, #452]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000a56:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 8000a58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a60:	4873      	ldr	r0, [pc, #460]	; (8000c30 <fsmTunningProcessing+0x2dc>)
 8000a62:	f000 fdcb 	bl	80015fc <SCH_AddTask>
 8000a66:	4603      	mov	r3, r0
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000a6c:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 8000a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a72:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a76:	486f      	ldr	r0, [pc, #444]	; (8000c34 <fsmTunningProcessing+0x2e0>)
 8000a78:	f000 fdc0 	bl	80015fc <SCH_AddTask>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b66      	ldr	r3, [pc, #408]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000a82:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_YELLOW;
 8000a84:	4b66      	ldr	r3, [pc, #408]	; (8000c20 <fsmTunningProcessing+0x2cc>)
 8000a86:	2203      	movs	r2, #3
 8000a88:	701a      	strb	r2, [r3, #0]
			break;
 8000a8a:	e037      	b.n	8000afc <fsmTunningProcessing+0x1a8>
			fsmTunningIDs[1] = SCH_AddTask(uartRedDuration, 50, 100);
 8000a8c:	2264      	movs	r2, #100	; 0x64
 8000a8e:	2132      	movs	r1, #50	; 0x32
 8000a90:	486c      	ldr	r0, [pc, #432]	; (8000c44 <fsmTunningProcessing+0x2f0>)
 8000a92:	f000 fdb3 	bl	80015fc <SCH_AddTask>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b60      	ldr	r3, [pc, #384]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000a9c:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Red, 0, 1000);
 8000a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4868      	ldr	r0, [pc, #416]	; (8000c48 <fsmTunningProcessing+0x2f4>)
 8000aa6:	f000 fda9 	bl	80015fc <SCH_AddTask>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b5b      	ldr	r3, [pc, #364]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000ab0:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Red, 0, 1000);
 8000ab2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4864      	ldr	r0, [pc, #400]	; (8000c4c <fsmTunningProcessing+0x2f8>)
 8000aba:	f000 fd9f 	bl	80015fc <SCH_AddTask>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b56      	ldr	r3, [pc, #344]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000ac4:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 8000ac6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ace:	4858      	ldr	r0, [pc, #352]	; (8000c30 <fsmTunningProcessing+0x2dc>)
 8000ad0:	f000 fd94 	bl	80015fc <SCH_AddTask>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000ada:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 8000adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ae4:	4853      	ldr	r0, [pc, #332]	; (8000c34 <fsmTunningProcessing+0x2e0>)
 8000ae6:	f000 fd89 	bl	80015fc <SCH_AddTask>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b4b      	ldr	r3, [pc, #300]	; (8000c1c <fsmTunningProcessing+0x2c8>)
 8000af0:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_RED;
 8000af2:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <fsmTunningProcessing+0x2cc>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
			break;
 8000af8:	e000      	b.n	8000afc <fsmTunningProcessing+0x1a8>
			break;
 8000afa:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 8000afc:	2002      	movs	r0, #2
 8000afe:	f7ff fbaf 	bl	8000260 <buttonPressed>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d041      	beq.n	8000b8c <fsmTunningProcessing+0x238>
		switch (fsmTunningState) {
 8000b08:	4b45      	ldr	r3, [pc, #276]	; (8000c20 <fsmTunningProcessing+0x2cc>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d02a      	beq.n	8000b66 <fsmTunningProcessing+0x212>
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	dc3a      	bgt.n	8000b8a <fsmTunningProcessing+0x236>
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d002      	beq.n	8000b1e <fsmTunningProcessing+0x1ca>
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d012      	beq.n	8000b42 <fsmTunningProcessing+0x1ee>
			else {
				trafficYellowDuration = TRAFFIC_DURARION_MAX;
			}
			break;
		default:
			break;
 8000b1c:	e035      	b.n	8000b8a <fsmTunningProcessing+0x236>
			if (trafficRedDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000b1e:	4b4c      	ldr	r3, [pc, #304]	; (8000c50 <fsmTunningProcessing+0x2fc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d806      	bhi.n	8000b38 <fsmTunningProcessing+0x1e4>
				trafficRedDuration += TRAFFIC_DURARION_AUTO;
 8000b2a:	4b49      	ldr	r3, [pc, #292]	; (8000c50 <fsmTunningProcessing+0x2fc>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b32:	4a47      	ldr	r2, [pc, #284]	; (8000c50 <fsmTunningProcessing+0x2fc>)
 8000b34:	6013      	str	r3, [r2, #0]
			break;
 8000b36:	e029      	b.n	8000b8c <fsmTunningProcessing+0x238>
				trafficRedDuration = TRAFFIC_DURARION_MAX;
 8000b38:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <fsmTunningProcessing+0x2fc>)
 8000b3a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000b3e:	601a      	str	r2, [r3, #0]
			break;
 8000b40:	e024      	b.n	8000b8c <fsmTunningProcessing+0x238>
			if (trafficGreenDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000b42:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <fsmTunningProcessing+0x300>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d806      	bhi.n	8000b5c <fsmTunningProcessing+0x208>
				trafficGreenDuration += TRAFFIC_DURARION_AUTO;
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <fsmTunningProcessing+0x300>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b56:	4a3f      	ldr	r2, [pc, #252]	; (8000c54 <fsmTunningProcessing+0x300>)
 8000b58:	6013      	str	r3, [r2, #0]
			break;
 8000b5a:	e017      	b.n	8000b8c <fsmTunningProcessing+0x238>
				trafficGreenDuration = TRAFFIC_DURARION_MAX;
 8000b5c:	4b3d      	ldr	r3, [pc, #244]	; (8000c54 <fsmTunningProcessing+0x300>)
 8000b5e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000b62:	601a      	str	r2, [r3, #0]
			break;
 8000b64:	e012      	b.n	8000b8c <fsmTunningProcessing+0x238>
			if (trafficYellowDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000b66:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <fsmTunningProcessing+0x304>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d806      	bhi.n	8000b80 <fsmTunningProcessing+0x22c>
				trafficYellowDuration += TRAFFIC_DURARION_AUTO;
 8000b72:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <fsmTunningProcessing+0x304>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b7a:	4a37      	ldr	r2, [pc, #220]	; (8000c58 <fsmTunningProcessing+0x304>)
 8000b7c:	6013      	str	r3, [r2, #0]
			break;
 8000b7e:	e005      	b.n	8000b8c <fsmTunningProcessing+0x238>
				trafficYellowDuration = TRAFFIC_DURARION_MAX;
 8000b80:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <fsmTunningProcessing+0x304>)
 8000b82:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000b86:	601a      	str	r2, [r3, #0]
			break;
 8000b88:	e000      	b.n	8000b8c <fsmTunningProcessing+0x238>
			break;
 8000b8a:	bf00      	nop
		}
	}
	if (buttonPressed(3)) {
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f7ff fb67 	bl	8000260 <buttonPressed>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d03e      	beq.n	8000c16 <fsmTunningProcessing+0x2c2>
		switch (fsmTunningState) {
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <fsmTunningProcessing+0x2cc>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d028      	beq.n	8000bf2 <fsmTunningProcessing+0x29e>
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	dc37      	bgt.n	8000c14 <fsmTunningProcessing+0x2c0>
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d002      	beq.n	8000bae <fsmTunningProcessing+0x25a>
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d011      	beq.n	8000bd0 <fsmTunningProcessing+0x27c>
			else {
				trafficYellowDuration = TRAFFIC_DURARION_MIN;
			}
			break;
		default:
			break;
 8000bac:	e032      	b.n	8000c14 <fsmTunningProcessing+0x2c0>
			if (trafficRedDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000bae:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <fsmTunningProcessing+0x2fc>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bb6:	d906      	bls.n	8000bc6 <fsmTunningProcessing+0x272>
				trafficRedDuration -= TRAFFIC_DURARION_AUTO;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <fsmTunningProcessing+0x2fc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000bc0:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <fsmTunningProcessing+0x2fc>)
 8000bc2:	6013      	str	r3, [r2, #0]
			break;
 8000bc4:	e027      	b.n	8000c16 <fsmTunningProcessing+0x2c2>
				trafficRedDuration = TRAFFIC_DURARION_MIN;
 8000bc6:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <fsmTunningProcessing+0x2fc>)
 8000bc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bcc:	601a      	str	r2, [r3, #0]
			break;
 8000bce:	e022      	b.n	8000c16 <fsmTunningProcessing+0x2c2>
			if (trafficGreenDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <fsmTunningProcessing+0x300>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bd8:	d906      	bls.n	8000be8 <fsmTunningProcessing+0x294>
				trafficGreenDuration -= TRAFFIC_DURARION_AUTO;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <fsmTunningProcessing+0x300>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <fsmTunningProcessing+0x300>)
 8000be4:	6013      	str	r3, [r2, #0]
			break;
 8000be6:	e016      	b.n	8000c16 <fsmTunningProcessing+0x2c2>
				trafficGreenDuration = TRAFFIC_DURARION_MIN;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <fsmTunningProcessing+0x300>)
 8000bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bee:	601a      	str	r2, [r3, #0]
			break;
 8000bf0:	e011      	b.n	8000c16 <fsmTunningProcessing+0x2c2>
			if (trafficYellowDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <fsmTunningProcessing+0x304>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bfa:	d906      	bls.n	8000c0a <fsmTunningProcessing+0x2b6>
				trafficYellowDuration -= TRAFFIC_DURARION_AUTO;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <fsmTunningProcessing+0x304>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <fsmTunningProcessing+0x304>)
 8000c06:	6013      	str	r3, [r2, #0]
			break;
 8000c08:	e005      	b.n	8000c16 <fsmTunningProcessing+0x2c2>
				trafficYellowDuration = TRAFFIC_DURARION_MIN;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <fsmTunningProcessing+0x304>)
 8000c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c10:	601a      	str	r2, [r3, #0]
			break;
 8000c12:	e000      	b.n	8000c16 <fsmTunningProcessing+0x2c2>
			break;
 8000c14:	bf00      	nop
		}
	}
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000010c 	.word	0x2000010c
 8000c20:	200000f5 	.word	0x200000f5
 8000c24:	08002279 	.word	0x08002279
 8000c28:	080021d5 	.word	0x080021d5
 8000c2c:	08002215 	.word	0x08002215
 8000c30:	080021b5 	.word	0x080021b5
 8000c34:	080021f5 	.word	0x080021f5
 8000c38:	080022bd 	.word	0x080022bd
 8000c3c:	080021e5 	.word	0x080021e5
 8000c40:	08002225 	.word	0x08002225
 8000c44:	08002235 	.word	0x08002235
 8000c48:	080021c5 	.word	0x080021c5
 8000c4c:	08002205 	.word	0x08002205
 8000c50:	20000034 	.word	0x20000034
 8000c54:	20000038 	.word	0x20000038
 8000c58:	2000003c 	.word	0x2000003c

08000c5c <fsmTunning>:

void fsmTunning(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	fsmTunningIDs[0] = SCH_AddTask(fsmTunningProcessing, 10, TIMER_TICK);
 8000c60:	220a      	movs	r2, #10
 8000c62:	210a      	movs	r1, #10
 8000c64:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <fsmTunning+0x88>)
 8000c66:	f000 fcc9 	bl	80015fc <SCH_AddTask>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <fsmTunning+0x8c>)
 8000c70:	701a      	strb	r2, [r3, #0]
	// Initialize for Tunning Mode
	fsmTunningState = TRAFFIC_RED;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <fsmTunning+0x90>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
	fsmTunningIDs[1] = SCH_AddTask(uartRedDuration, 50, 100);
 8000c78:	2264      	movs	r2, #100	; 0x64
 8000c7a:	2132      	movs	r1, #50	; 0x32
 8000c7c:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <fsmTunning+0x94>)
 8000c7e:	f000 fcbd 	bl	80015fc <SCH_AddTask>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <fsmTunning+0x8c>)
 8000c88:	705a      	strb	r2, [r3, #1]
	fsmTunningIDs[2] = SCH_AddTask(traffic0Red, 0, 1000);
 8000c8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <fsmTunning+0x98>)
 8000c92:	f000 fcb3 	bl	80015fc <SCH_AddTask>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <fsmTunning+0x8c>)
 8000c9c:	709a      	strb	r2, [r3, #2]
	fsmTunningIDs[3] = SCH_AddTask(traffic1Red, 0, 1000);
 8000c9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <fsmTunning+0x9c>)
 8000ca6:	f000 fca9 	bl	80015fc <SCH_AddTask>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <fsmTunning+0x8c>)
 8000cb0:	70da      	strb	r2, [r3, #3]
	fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 8000cb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cb6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cba:	4810      	ldr	r0, [pc, #64]	; (8000cfc <fsmTunning+0xa0>)
 8000cbc:	f000 fc9e 	bl	80015fc <SCH_AddTask>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <fsmTunning+0x8c>)
 8000cc6:	711a      	strb	r2, [r3, #4]
	fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 8000cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ccc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <fsmTunning+0xa4>)
 8000cd2:	f000 fc93 	bl	80015fc <SCH_AddTask>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <fsmTunning+0x8c>)
 8000cdc:	715a      	strb	r2, [r3, #5]
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08000955 	.word	0x08000955
 8000ce8:	2000010c 	.word	0x2000010c
 8000cec:	200000f5 	.word	0x200000f5
 8000cf0:	08002235 	.word	0x08002235
 8000cf4:	080021c5 	.word	0x080021c5
 8000cf8:	08002205 	.word	0x08002205
 8000cfc:	080021b5 	.word	0x080021b5
 8000d00:	080021f5 	.word	0x080021f5

08000d04 <fsmInit>:

void fsmInit(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	fsmState = FSM_INIT;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <fsmInit+0x34>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
	fsmIDs[0] = SCH_AddTask(testButton, 0, TIMER_TICK);
 8000d0e:	220a      	movs	r2, #10
 8000d10:	2100      	movs	r1, #0
 8000d12:	480a      	ldr	r0, [pc, #40]	; (8000d3c <fsmInit+0x38>)
 8000d14:	f000 fc72 	bl	80015fc <SCH_AddTask>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <fsmInit+0x3c>)
 8000d1e:	701a      	strb	r2, [r3, #0]
	SCH_AddTask(testBuzzer, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <fsmInit+0x40>)
 8000d26:	f000 fc69 	bl	80015fc <SCH_AddTask>
	SCH_AddTask(testLED, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <fsmInit+0x44>)
 8000d30:	f000 fc64 	bl	80015fc <SCH_AddTask>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000f4 	.word	0x200000f4
 8000d3c:	08001e8d 	.word	0x08001e8d
 8000d40:	200000f8 	.word	0x200000f8
 8000d44:	08001f19 	.word	0x08001f19
 8000d48:	08001f3d 	.word	0x08001f3d

08000d4c <fsmProcessing>:

void fsmProcessing(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	if (buttonPressed(0)) {
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fa84 	bl	8000260 <buttonPressed>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d07e      	beq.n	8000e5c <fsmProcessing+0x110>
		switch (fsmState) {
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <fsmProcessing+0x118>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d879      	bhi.n	8000e5a <fsmProcessing+0x10e>
 8000d66:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <fsmProcessing+0x20>)
 8000d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6c:	08000d7d 	.word	0x08000d7d
 8000d70:	08000dad 	.word	0x08000dad
 8000d74:	08000de7 	.word	0x08000de7
 8000d78:	08000e21 	.word	0x08000e21
		case FSM_INIT:
			for (uint8_t i = 0; i < FSM_TASK; i ++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	e008      	b.n	8000d94 <fsmProcessing+0x48>
				SCH_DeleteTask(fsmIDs[i]);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4a38      	ldr	r2, [pc, #224]	; (8000e68 <fsmProcessing+0x11c>)
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fd3d 	bl	8001808 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TASK; i ++) {
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	3301      	adds	r3, #1
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f3      	beq.n	8000d82 <fsmProcessing+0x36>
			}
			SCH_AddTask(fsmAuto, 10, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	210a      	movs	r1, #10
 8000d9e:	4833      	ldr	r0, [pc, #204]	; (8000e6c <fsmProcessing+0x120>)
 8000da0:	f000 fc2c 	bl	80015fc <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <fsmProcessing+0x118>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
			break;
 8000daa:	e057      	b.n	8000e5c <fsmProcessing+0x110>
		case FSM_AUTO:
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000dac:	2300      	movs	r3, #0
 8000dae:	71bb      	strb	r3, [r7, #6]
 8000db0:	e008      	b.n	8000dc4 <fsmProcessing+0x78>
				SCH_DeleteTask(fsmAutoIDs[i]);
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	4a2e      	ldr	r2, [pc, #184]	; (8000e70 <fsmProcessing+0x124>)
 8000db6:	5cd3      	ldrb	r3, [r2, r3]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fd25 	bl	8001808 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	71bb      	strb	r3, [r7, #6]
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	2b0a      	cmp	r3, #10
 8000dc8:	d9f3      	bls.n	8000db2 <fsmProcessing+0x66>
			}
			SCH_AddTask(fsmAutoStop, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4829      	ldr	r0, [pc, #164]	; (8000e74 <fsmProcessing+0x128>)
 8000dd0:	f000 fc14 	bl	80015fc <SCH_AddTask>
			SCH_AddTask(fsmManual, 10, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	210a      	movs	r1, #10
 8000dd8:	4827      	ldr	r0, [pc, #156]	; (8000e78 <fsmProcessing+0x12c>)
 8000dda:	f000 fc0f 	bl	80015fc <SCH_AddTask>
			fsmState = FSM_MANUAL;
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <fsmProcessing+0x118>)
 8000de0:	2202      	movs	r2, #2
 8000de2:	701a      	strb	r2, [r3, #0]
			break;
 8000de4:	e03a      	b.n	8000e5c <fsmProcessing+0x110>
		case FSM_MANUAL:
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	717b      	strb	r3, [r7, #5]
 8000dea:	e008      	b.n	8000dfe <fsmProcessing+0xb2>
				SCH_DeleteTask(fsmManualIDs[i]);
 8000dec:	797b      	ldrb	r3, [r7, #5]
 8000dee:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <fsmProcessing+0x130>)
 8000df0:	5cd3      	ldrb	r3, [r2, r3]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fd08 	bl	8001808 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000df8:	797b      	ldrb	r3, [r7, #5]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	717b      	strb	r3, [r7, #5]
 8000dfe:	797b      	ldrb	r3, [r7, #5]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d9f3      	bls.n	8000dec <fsmProcessing+0xa0>
			}
			SCH_AddTask(fsmManualStop, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	481d      	ldr	r0, [pc, #116]	; (8000e80 <fsmProcessing+0x134>)
 8000e0a:	f000 fbf7 	bl	80015fc <SCH_AddTask>
			SCH_AddTask(fsmTunning, 10, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	210a      	movs	r1, #10
 8000e12:	481c      	ldr	r0, [pc, #112]	; (8000e84 <fsmProcessing+0x138>)
 8000e14:	f000 fbf2 	bl	80015fc <SCH_AddTask>
			fsmState = FSM_TUNNING;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <fsmProcessing+0x118>)
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	701a      	strb	r2, [r3, #0]
			break;
 8000e1e:	e01d      	b.n	8000e5c <fsmProcessing+0x110>
		case FSM_TUNNING:
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	713b      	strb	r3, [r7, #4]
 8000e24:	e008      	b.n	8000e38 <fsmProcessing+0xec>
				SCH_DeleteTask(fsmTunningIDs[i]);
 8000e26:	793b      	ldrb	r3, [r7, #4]
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <fsmProcessing+0x13c>)
 8000e2a:	5cd3      	ldrb	r3, [r2, r3]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fceb 	bl	8001808 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000e32:	793b      	ldrb	r3, [r7, #4]
 8000e34:	3301      	adds	r3, #1
 8000e36:	713b      	strb	r3, [r7, #4]
 8000e38:	793b      	ldrb	r3, [r7, #4]
 8000e3a:	2b05      	cmp	r3, #5
 8000e3c:	d9f3      	bls.n	8000e26 <fsmProcessing+0xda>
			}
			SCH_AddTask(fsmTunningStop, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	4812      	ldr	r0, [pc, #72]	; (8000e8c <fsmProcessing+0x140>)
 8000e44:	f000 fbda 	bl	80015fc <SCH_AddTask>
			SCH_AddTask(fsmAuto, 10, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	210a      	movs	r1, #10
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <fsmProcessing+0x120>)
 8000e4e:	f000 fbd5 	bl	80015fc <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <fsmProcessing+0x118>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
			break;
 8000e58:	e000      	b.n	8000e5c <fsmProcessing+0x110>
		default:
			break;
 8000e5a:	bf00      	nop
		}
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000f4 	.word	0x200000f4
 8000e68:	200000f8 	.word	0x200000f8
 8000e6c:	08000679 	.word	0x08000679
 8000e70:	200000fc 	.word	0x200000fc
 8000e74:	080005ad 	.word	0x080005ad
 8000e78:	080008dd 	.word	0x080008dd
 8000e7c:	20000108 	.word	0x20000108
 8000e80:	080007e9 	.word	0x080007e9
 8000e84:	08000c5d 	.word	0x08000c5d
 8000e88:	2000010c 	.word	0x2000010c
 8000e8c:	08000949 	.word	0x08000949

08000e90 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_UART_RxCpltCallback+0x30>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10a      	bne.n	8000eb8 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <HAL_UART_RxCpltCallback+0x34>)
 8000ea6:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <HAL_UART_RxCpltCallback+0x38>)
 8000ea8:	f003 fa85 	bl	80043b6 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000eac:	2332      	movs	r3, #50	; 0x32
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4904      	ldr	r1, [pc, #16]	; (8000ec4 <HAL_UART_RxCpltCallback+0x34>)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_UART_RxCpltCallback+0x38>)
 8000eb4:	f003 f9fc 	bl	80042b0 <HAL_UART_Transmit>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	200001ec 	.word	0x200001ec
 8000ec8:	200001a4 	.word	0x200001a4

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f001 fa5e 	bl	8002390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f842 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 f974 	bl	80011c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000edc:	f000 f87a 	bl	8000fd4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ee0:	f000 f946 	bl	8001170 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ee4:	f000 f8c2 	bl	800106c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ee8:	4814      	ldr	r0, [pc, #80]	; (8000f3c <main+0x70>)
 8000eea:	f002 fa97 	bl	800341c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4813      	ldr	r0, [pc, #76]	; (8000f40 <main+0x74>)
 8000ef2:	f002 fb37 	bl	8003564 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4811      	ldr	r0, [pc, #68]	; (8000f40 <main+0x74>)
 8000efa:	f002 fb33 	bl	8003564 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000efe:	2201      	movs	r2, #1
 8000f00:	4910      	ldr	r1, [pc, #64]	; (8000f44 <main+0x78>)
 8000f02:	4811      	ldr	r0, [pc, #68]	; (8000f48 <main+0x7c>)
 8000f04:	f003 fa57 	bl	80043b6 <HAL_UART_Receive_IT>
  SCH_Init();
 8000f08:	f000 faee 	bl	80014e8 <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(testMCU, 0, 500);
 8000f0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f10:	2100      	movs	r1, #0
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <main+0x80>)
 8000f14:	f000 fb72 	bl	80015fc <SCH_AddTask>
//  SCH_AddTask(uartReport, 100, 5000);
  SCH_AddTask(buttonReading, 0, TIMER_TICK);
 8000f18:	220a      	movs	r2, #10
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <main+0x84>)
 8000f1e:	f000 fb6d 	bl	80015fc <SCH_AddTask>
  SCH_AddTask(fsmInit, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	480b      	ldr	r0, [pc, #44]	; (8000f54 <main+0x88>)
 8000f28:	f000 fb68 	bl	80015fc <SCH_AddTask>
  SCH_AddTask(fsmProcessing, 10, TIMER_TICK);
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	210a      	movs	r1, #10
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <main+0x8c>)
 8000f32:	f000 fb63 	bl	80015fc <SCH_AddTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch();
 8000f36:	f000 fb47 	bl	80015c8 <SCH_Dispatch>
 8000f3a:	e7fc      	b.n	8000f36 <main+0x6a>
 8000f3c:	20000114 	.word	0x20000114
 8000f40:	2000015c 	.word	0x2000015c
 8000f44:	200001ec 	.word	0x200001ec
 8000f48:	200001a4 	.word	0x200001a4
 8000f4c:	08001e79 	.word	0x08001e79
 8000f50:	0800014d 	.word	0x0800014d
 8000f54:	08000d05 	.word	0x08000d05
 8000f58:	08000d4d 	.word	0x08000d4d

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b090      	sub	sp, #64	; 0x40
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	2228      	movs	r2, #40	; 0x28
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 ffe8 	bl	8004f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f82:	2301      	movs	r3, #1
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f86:	2310      	movs	r3, #16
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 fde2 	bl	8002b5c <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f9e:	f000 f990 	bl	80012c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 f850 	bl	8003060 <HAL_RCC_ClockConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fc6:	f000 f97c 	bl	80012c2 <Error_Handler>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3740      	adds	r7, #64	; 0x40
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_TIM2_Init+0x94>)
 8000ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_TIM2_Init+0x94>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_TIM2_Init+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_TIM2_Init+0x94>)
 8001006:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800100a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_TIM2_Init+0x94>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_TIM2_Init+0x94>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001018:	4813      	ldr	r0, [pc, #76]	; (8001068 <MX_TIM2_Init+0x94>)
 800101a:	f002 f9af 	bl	800337c <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001024:	f000 f94d 	bl	80012c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_TIM2_Init+0x94>)
 8001036:	f002 fcfb 	bl	8003a30 <HAL_TIM_ConfigClockSource>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001040:	f000 f93f 	bl	80012c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_TIM2_Init+0x94>)
 8001052:	f003 f873 	bl	800413c <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800105c:	f000 f931 	bl	80012c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000114 	.word	0x20000114

0800106c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <MX_TIM3_Init+0xfc>)
 800109e:	4a33      	ldr	r2, [pc, #204]	; (800116c <MX_TIM3_Init+0x100>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <MX_TIM3_Init+0xfc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <MX_TIM3_Init+0xfc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <MX_TIM3_Init+0xfc>)
 80010b0:	f640 729f 	movw	r2, #3999	; 0xf9f
 80010b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <MX_TIM3_Init+0xfc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <MX_TIM3_Init+0xfc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010c2:	4829      	ldr	r0, [pc, #164]	; (8001168 <MX_TIM3_Init+0xfc>)
 80010c4:	f002 f95a 	bl	800337c <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80010ce:	f000 f8f8 	bl	80012c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010dc:	4619      	mov	r1, r3
 80010de:	4822      	ldr	r0, [pc, #136]	; (8001168 <MX_TIM3_Init+0xfc>)
 80010e0:	f002 fca6 	bl	8003a30 <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010ea:	f000 f8ea 	bl	80012c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_TIM3_Init+0xfc>)
 80010f0:	f002 f9e0 	bl	80034b4 <HAL_TIM_PWM_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010fa:	f000 f8e2 	bl	80012c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4619      	mov	r1, r3
 800110c:	4816      	ldr	r0, [pc, #88]	; (8001168 <MX_TIM3_Init+0xfc>)
 800110e:	f003 f815 	bl	800413c <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001118:	f000 f8d3 	bl	80012c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111c:	2360      	movs	r3, #96	; 0x60
 800111e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_TIM3_Init+0xfc>)
 8001134:	f002 fbba 	bl	80038ac <HAL_TIM_PWM_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800113e:	f000 f8c0 	bl	80012c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2204      	movs	r2, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM3_Init+0xfc>)
 800114a:	f002 fbaf 	bl	80038ac <HAL_TIM_PWM_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001154:	f000 f8b5 	bl	80012c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM3_Init+0xfc>)
 800115a:	f000 fd87 	bl	8001c6c <HAL_TIM_MspPostInit>

}
 800115e:	bf00      	nop
 8001160:	3738      	adds	r7, #56	; 0x38
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000015c 	.word	0x2000015c
 800116c:	40000400 	.word	0x40000400

08001170 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_USART2_UART_Init+0x50>)
 8001178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800117c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a8:	f003 f832 	bl	8004210 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011b2:	f000 f886 	bl	80012c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001a4 	.word	0x200001a4
 80011c0:	40004400 	.word	0x40004400

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a2e      	ldr	r2, [pc, #184]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2120      	movs	r1, #32
 800120c:	4823      	ldr	r0, [pc, #140]	; (800129c <MX_GPIO_Init+0xd8>)
 800120e:	f001 fc74 	bl	8002afa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|GPIO_PIN_2|GPIO_PIN_10
 8001212:	2200      	movs	r2, #0
 8001214:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001218:	4821      	ldr	r0, [pc, #132]	; (80012a0 <MX_GPIO_Init+0xdc>)
 800121a:	f001 fc6e 	bl	8002afa <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin|TRAFFIC1_GREEN_Pin
                          |GPIO_PIN_15|GPIO_PIN_3|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin
                          |TRAFFIC0_GREEN_Pin|GPIO_PIN_7|PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800121e:	2320      	movs	r3, #32
 8001220:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001226:	2301      	movs	r3, #1
 8001228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2302      	movs	r3, #2
 800122c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	4619      	mov	r1, r3
 8001234:	4819      	ldr	r0, [pc, #100]	; (800129c <MX_GPIO_Init+0xd8>)
 8001236:	f001 facd 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDESTRIAN0_RED_Pin PEDESTRIAN0_GREEN_Pin TRAFFIC1_RED_Pin TRAFFIC1_YELLOW_Pin
                           TRAFFIC1_GREEN_Pin TRAFFIC0_RED_Pin TRAFFIC0_YELLOW_Pin TRAFFIC0_GREEN_Pin
                           PEDESTRIAN1_RED_Pin PEDESTRIAN1_GREEN_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin
 800123a:	f247 3373 	movw	r3, #29555	; 0x7373
 800123e:	60bb      	str	r3, [r7, #8]
                          |TRAFFIC1_GREEN_Pin|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin|TRAFFIC0_GREEN_Pin
                          |PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2302      	movs	r3, #2
 800124a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4619      	mov	r1, r3
 8001252:	4813      	ldr	r0, [pc, #76]	; (80012a0 <MX_GPIO_Init+0xdc>)
 8001254:	f001 fabe 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB15
                           PB3 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 8001258:	f648 438c 	movw	r3, #35980	; 0x8c8c
 800125c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125e:	2301      	movs	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001262:	2302      	movs	r3, #2
 8001264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2302      	movs	r3, #2
 8001268:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	4619      	mov	r1, r3
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <MX_GPIO_Init+0xdc>)
 8001272:	f001 faaf 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001276:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800127a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001280:	2301      	movs	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4619      	mov	r1, r3
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_GPIO_Init+0xd8>)
 800128c:	f001 faa2 	bl	80027d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000
 800129c:	40010800 	.word	0x40010800
 80012a0:	40010c00 	.word	0x40010c00

080012a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b4:	d101      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 80012b6:	f000 f961 	bl	800157c <SCH_Update>
	}
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c6:	b672      	cpsid	i
}
 80012c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ca:	e7fe      	b.n	80012ca <Error_Handler+0x8>

080012cc <pedestrianToggle>:
static GPIO_TypeDef* pedestrianGreenPorts[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_GPIO_Port};

static uint16_t pedestrianRedPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_RED_Pin, PEDESTRIAN1_RED_Pin};
static uint16_t pedestrianGreenPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_Pin, PEDESTRIAN1_GREEN_Pin};
//uint8_t test;
void pedestrianToggle(uint8_t index, enum PEDESTRIAN_STATE state) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	4613      	mov	r3, r2
 80012da:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d05e      	beq.n	80013a0 <pedestrianToggle+0xd4>
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	f300 8081 	bgt.w	80013ea <pedestrianToggle+0x11e>
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <pedestrianToggle+0x26>
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d01d      	beq.n	800132c <pedestrianToggle+0x60>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
		pedestrianStates[index] = PEDESTRIAN_GREEN;
		pedestrianCounters[index] = trafficCounters[index];
		break;
	default:
		break;
 80012f0:	e07b      	b.n	80013ea <pedestrianToggle+0x11e>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <pedestrianToggle+0x128>)
 80012f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4a3e      	ldr	r2, [pc, #248]	; (80013f8 <pedestrianToggle+0x12c>)
 80012fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001302:	2201      	movs	r2, #1
 8001304:	4619      	mov	r1, r3
 8001306:	f001 fbf8 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4a3b      	ldr	r2, [pc, #236]	; (80013fc <pedestrianToggle+0x130>)
 800130e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4a3a      	ldr	r2, [pc, #232]	; (8001400 <pedestrianToggle+0x134>)
 8001316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131a:	2201      	movs	r2, #1
 800131c:	4619      	mov	r1, r3
 800131e:	f001 fbec 	bl	8002afa <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_OFF;
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4a37      	ldr	r2, [pc, #220]	; (8001404 <pedestrianToggle+0x138>)
 8001326:	2100      	movs	r1, #0
 8001328:	54d1      	strb	r1, [r2, r3]
		break;
 800132a:	e05f      	b.n	80013ec <pedestrianToggle+0x120>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_RESET);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <pedestrianToggle+0x128>)
 8001330:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <pedestrianToggle+0x12c>)
 8001338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800133c:	2200      	movs	r2, #0
 800133e:	4619      	mov	r1, r3
 8001340:	f001 fbdb 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	4a2d      	ldr	r2, [pc, #180]	; (80013fc <pedestrianToggle+0x130>)
 8001348:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4a2c      	ldr	r2, [pc, #176]	; (8001400 <pedestrianToggle+0x134>)
 8001350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001354:	2201      	movs	r2, #1
 8001356:	4619      	mov	r1, r3
 8001358:	f001 fbcf 	bl	8002afa <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_RED;
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4a29      	ldr	r2, [pc, #164]	; (8001404 <pedestrianToggle+0x138>)
 8001360:	2101      	movs	r1, #1
 8001362:	54d1      	strb	r1, [r2, r3]
		switch (trafficStates[index]) {
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4a28      	ldr	r2, [pc, #160]	; (8001408 <pedestrianToggle+0x13c>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d002      	beq.n	8001374 <pedestrianToggle+0xa8>
 800136e:	2b03      	cmp	r3, #3
 8001370:	d00c      	beq.n	800138c <pedestrianToggle+0xc0>
			break;
 8001372:	e014      	b.n	800139e <pedestrianToggle+0xd2>
			pedestrianCounters[index] = trafficCounters[index] + trafficYellowDuration;
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4a25      	ldr	r2, [pc, #148]	; (800140c <pedestrianToggle+0x140>)
 8001378:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <pedestrianToggle+0x144>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	440a      	add	r2, r1
 8001384:	4923      	ldr	r1, [pc, #140]	; (8001414 <pedestrianToggle+0x148>)
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800138a:	e008      	b.n	800139e <pedestrianToggle+0xd2>
			pedestrianCounters[index] = trafficCounters[index];
 800138c:	79fa      	ldrb	r2, [r7, #7]
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	491e      	ldr	r1, [pc, #120]	; (800140c <pedestrianToggle+0x140>)
 8001392:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001396:	491f      	ldr	r1, [pc, #124]	; (8001414 <pedestrianToggle+0x148>)
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800139c:	bf00      	nop
		break;
 800139e:	e025      	b.n	80013ec <pedestrianToggle+0x120>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <pedestrianToggle+0x128>)
 80013a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <pedestrianToggle+0x12c>)
 80013ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4619      	mov	r1, r3
 80013b4:	f001 fba1 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <pedestrianToggle+0x130>)
 80013bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <pedestrianToggle+0x134>)
 80013c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	f001 fb95 	bl	8002afa <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_GREEN;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <pedestrianToggle+0x138>)
 80013d4:	2102      	movs	r1, #2
 80013d6:	54d1      	strb	r1, [r2, r3]
		pedestrianCounters[index] = trafficCounters[index];
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	490b      	ldr	r1, [pc, #44]	; (800140c <pedestrianToggle+0x140>)
 80013de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013e2:	490c      	ldr	r1, [pc, #48]	; (8001414 <pedestrianToggle+0x148>)
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80013e8:	e000      	b.n	80013ec <pedestrianToggle+0x120>
		break;
 80013ea:	bf00      	nop
	}
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000018 	.word	0x20000018
 80013f8:	20000028 	.word	0x20000028
 80013fc:	20000020 	.word	0x20000020
 8001400:	2000002c 	.word	0x2000002c
 8001404:	200001f0 	.word	0x200001f0
 8001408:	20000394 	.word	0x20000394
 800140c:	20000398 	.word	0x20000398
 8001410:	2000003c 	.word	0x2000003c
 8001414:	200001f4 	.word	0x200001f4

08001418 <pedestrian0On>:

unsigned char buzzer0Flag = 0;
void pedestrian0On(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	switch (trafficStates[0]) {
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <pedestrian0On+0x4c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d005      	beq.n	8001430 <pedestrian0On+0x18>
 8001424:	2b00      	cmp	r3, #0
 8001426:	dd18      	ble.n	800145a <pedestrian0On+0x42>
 8001428:	3b02      	subs	r3, #2
 800142a:	2b01      	cmp	r3, #1
 800142c:	d815      	bhi.n	800145a <pedestrian0On+0x42>
 800142e:	e00d      	b.n	800144c <pedestrian0On+0x34>
	case TRAFFIC_RED:
		pedestrianToggle(0, PEDESTRIAN_GREEN);
 8001430:	2102      	movs	r1, #2
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff ff4a 	bl	80012cc <pedestrianToggle>
		if (buzzer0Flag == 0) {
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <pedestrian0On+0x50>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10e      	bne.n	800145e <pedestrian0On+0x46>
			buzzer0On();
 8001440:	f7fe ff7e 	bl	8000340 <buzzer0On>
			buzzer0Flag = 1;
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <pedestrian0On+0x50>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
		}
		break;
 800144a:	e008      	b.n	800145e <pedestrian0On+0x46>
	case TRAFFIC_YELLOW:
	case TRAFFIC_GREEN:
		pedestrianToggle(0, PEDESTRIAN_RED);
 800144c:	2101      	movs	r1, #1
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff ff3c 	bl	80012cc <pedestrianToggle>
		buzzer0Off();
 8001454:	f7ff f83e 	bl	80004d4 <buzzer0Off>
		break;
 8001458:	e002      	b.n	8001460 <pedestrian0On+0x48>
	default:
		break;
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <pedestrian0On+0x48>
		break;
 800145e:	bf00      	nop
	}
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000394 	.word	0x20000394
 8001468:	200001fc 	.word	0x200001fc

0800146c <pedestrian1On>:

unsigned char buzzer1Flag = 0;
void pedestrian1On(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	switch (trafficStates[1]) {
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <pedestrian1On+0x4c>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d005      	beq.n	8001484 <pedestrian1On+0x18>
 8001478:	2b00      	cmp	r3, #0
 800147a:	dd18      	ble.n	80014ae <pedestrian1On+0x42>
 800147c:	3b02      	subs	r3, #2
 800147e:	2b01      	cmp	r3, #1
 8001480:	d815      	bhi.n	80014ae <pedestrian1On+0x42>
 8001482:	e00d      	b.n	80014a0 <pedestrian1On+0x34>
	case TRAFFIC_RED:
		pedestrianToggle(1, PEDESTRIAN_GREEN);
 8001484:	2102      	movs	r1, #2
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff ff20 	bl	80012cc <pedestrianToggle>
		if (buzzer1Flag == 0) {
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <pedestrian1On+0x50>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10e      	bne.n	80014b2 <pedestrian1On+0x46>
			buzzer1On();
 8001494:	f7fe ffe2 	bl	800045c <buzzer1On>
			buzzer1Flag = 1;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <pedestrian1On+0x50>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800149e:	e008      	b.n	80014b2 <pedestrian1On+0x46>
	case TRAFFIC_YELLOW:
	case TRAFFIC_GREEN:
		pedestrianToggle(1, PEDESTRIAN_RED);
 80014a0:	2101      	movs	r1, #1
 80014a2:	2001      	movs	r0, #1
 80014a4:	f7ff ff12 	bl	80012cc <pedestrianToggle>
		buzzer1Off();
 80014a8:	f7ff f820 	bl	80004ec <buzzer1Off>
		break;
 80014ac:	e002      	b.n	80014b4 <pedestrian1On+0x48>
	default:
		break;
 80014ae:	bf00      	nop
 80014b0:	e000      	b.n	80014b4 <pedestrian1On+0x48>
		break;
 80014b2:	bf00      	nop
	}
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000394 	.word	0x20000394
 80014bc:	200001fd 	.word	0x200001fd

080014c0 <pedestrian0Off>:

void pedestrian0Off(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	pedestrianToggle(0, PEDESTRIAN_OFF);
 80014c4:	2100      	movs	r1, #0
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff ff00 	bl	80012cc <pedestrianToggle>
	buzzer0Off();
 80014cc:	f7ff f802 	bl	80004d4 <buzzer0Off>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <pedestrian1Off>:

void pedestrian1Off(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	pedestrianToggle(1, PEDESTRIAN_OFF);
 80014d8:	2100      	movs	r1, #0
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fef6 	bl	80012cc <pedestrianToggle>
	buzzer1Off();
 80014e0:	f7ff f804 	bl	80004ec <buzzer1Off>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	e037      	b.n	8001564 <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 80014f4:	79fa      	ldrb	r2, [r7, #7]
 80014f6:	4920      	ldr	r1, [pc, #128]	; (8001578 <SCH_Init+0x90>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i;
 8001506:	79fa      	ldrb	r2, [r7, #7]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f1c3 0314 	rsb	r3, r3, #20
 800150e:	b2d8      	uxtb	r0, r3
 8001510:	4919      	ldr	r1, [pc, #100]	; (8001578 <SCH_Init+0x90>)
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3304      	adds	r3, #4
 800151e:	4602      	mov	r2, r0
 8001520:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	4914      	ldr	r1, [pc, #80]	; (8001578 <SCH_Init+0x90>)
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3308      	adds	r3, #8
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 8001536:	79fa      	ldrb	r2, [r7, #7]
 8001538:	490f      	ldr	r1, [pc, #60]	; (8001578 <SCH_Init+0x90>)
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	330c      	adds	r3, #12
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	490a      	ldr	r1, [pc, #40]	; (8001578 <SCH_Init+0x90>)
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	3310      	adds	r3, #16
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	3301      	adds	r3, #1
 8001562:	71fb      	strb	r3, [r7, #7]
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b13      	cmp	r3, #19
 8001568:	d9c4      	bls.n	80014f4 <SCH_Init+0xc>
    }
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000200 	.word	0x20000200

0800157c <SCH_Update>:

void SCH_Update(void) {
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <SCH_Update+0x48>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d018      	beq.n	80015ba <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <SCH_Update+0x48>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00c      	beq.n	80015aa <SCH_Update+0x2e>
		if (tasks[0].delay > TIMER_TICK) {
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <SCH_Update+0x48>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b0a      	cmp	r3, #10
 8001596:	d905      	bls.n	80015a4 <SCH_Update+0x28>
			tasks[0].delay -= TIMER_TICK;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <SCH_Update+0x48>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	3b0a      	subs	r3, #10
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <SCH_Update+0x48>)
 80015a0:	6093      	str	r3, [r2, #8]
 80015a2:	e002      	b.n	80015aa <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <SCH_Update+0x48>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <SCH_Update+0x48>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d104      	bne.n	80015bc <SCH_Update+0x40>
		tasks[0].flag = 1;
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SCH_Update+0x48>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	741a      	strb	r2, [r3, #16]
 80015b8:	e000      	b.n	80015bc <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 80015ba:	bf00      	nop
	}
}
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000200 	.word	0x20000200

080015c8 <SCH_Dispatch>:

void SCH_Dispatch(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <SCH_Dispatch+0x30>)
 80015ce:	7c1b      	ldrb	r3, [r3, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00f      	beq.n	80015f4 <SCH_Dispatch+0x2c>
    (*tasks[0].functionPointer)();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <SCH_Dispatch+0x30>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4798      	blx	r3
    if (tasks[0].period > 0) {
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <SCH_Dispatch+0x30>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <SCH_Dispatch+0x20>
        SCH_RefreshTask();
 80015e2:	f000 f9af 	bl	8001944 <SCH_RefreshTask>
 80015e6:	e006      	b.n	80015f6 <SCH_Dispatch+0x2e>
    }
    else {
        SCH_DeleteTask(tasks[0].id);
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <SCH_Dispatch+0x30>)
 80015ea:	791b      	ldrb	r3, [r3, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f90b 	bl	8001808 <SCH_DeleteTask>
 80015f2:	e000      	b.n	80015f6 <SCH_Dispatch+0x2e>
    if (tasks[0].flag == 0) return;
 80015f4:	bf00      	nop
    }
}
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000200 	.word	0x20000200

080015fc <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 80015fc:	b4b0      	push	{r4, r5, r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return 0;
 8001608:	4b7e      	ldr	r3, [pc, #504]	; (8001804 <SCH_AddTask+0x208>)
 800160a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SCH_AddTask+0x1a>
 8001612:	2300      	movs	r3, #0
 8001614:	e0f1      	b.n	80017fa <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <SCH_AddTask+0x208>)
 8001618:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800161c:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001622:	2300      	movs	r3, #0
 8001624:	76fb      	strb	r3, [r7, #27]
 8001626:	e0e3      	b.n	80017f0 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 8001628:	7efa      	ldrb	r2, [r7, #27]
 800162a:	4976      	ldr	r1, [pc, #472]	; (8001804 <SCH_AddTask+0x208>)
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	3308      	adds	r3, #8
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	4413      	add	r3, r2
 800163e:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	429a      	cmp	r2, r3
 8001646:	d80a      	bhi.n	800165e <SCH_AddTask+0x62>
 8001648:	7efa      	ldrb	r2, [r7, #27]
 800164a:	496e      	ldr	r1, [pc, #440]	; (8001804 <SCH_AddTask+0x208>)
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f040 80c6 	bne.w	80017ea <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 800165e:	2313      	movs	r3, #19
 8001660:	76bb      	strb	r3, [r7, #26]
 8001662:	e017      	b.n	8001694 <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 8001664:	7ebb      	ldrb	r3, [r7, #26]
 8001666:	1e5a      	subs	r2, r3, #1
 8001668:	7eb9      	ldrb	r1, [r7, #26]
 800166a:	4866      	ldr	r0, [pc, #408]	; (8001804 <SCH_AddTask+0x208>)
 800166c:	460b      	mov	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4418      	add	r0, r3
 8001676:	4963      	ldr	r1, [pc, #396]	; (8001804 <SCH_AddTask+0x208>)
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	4604      	mov	r4, r0
 8001684:	461d      	mov	r5, r3
 8001686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168a:	682b      	ldr	r3, [r5, #0]
 800168c:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 800168e:	7ebb      	ldrb	r3, [r7, #26]
 8001690:	3b01      	subs	r3, #1
 8001692:	76bb      	strb	r3, [r7, #26]
 8001694:	7eba      	ldrb	r2, [r7, #26]
 8001696:	7efb      	ldrb	r3, [r7, #27]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8e3      	bhi.n	8001664 <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 800169c:	7efa      	ldrb	r2, [r7, #27]
 800169e:	4959      	ldr	r1, [pc, #356]	; (8001804 <SCH_AddTask+0x208>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 80016ae:	7efa      	ldrb	r2, [r7, #27]
 80016b0:	4954      	ldr	r1, [pc, #336]	; (8001804 <SCH_AddTask+0x208>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3304      	adds	r3, #4
 80016be:	7e7a      	ldrb	r2, [r7, #25]
 80016c0:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 80016c2:	7efa      	ldrb	r2, [r7, #27]
 80016c4:	494f      	ldr	r1, [pc, #316]	; (8001804 <SCH_AddTask+0x208>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	330c      	adds	r3, #12
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 80016d6:	7efa      	ldrb	r2, [r7, #27]
 80016d8:	494a      	ldr	r1, [pc, #296]	; (8001804 <SCH_AddTask+0x208>)
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	3310      	adds	r3, #16
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d950      	bls.n	8001794 <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 80016fa:	7efb      	ldrb	r3, [r7, #27]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	4941      	ldr	r1, [pc, #260]	; (8001804 <SCH_AddTask+0x208>)
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3308      	adds	r3, #8
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	7efa      	ldrb	r2, [r7, #27]
 8001712:	1ac9      	subs	r1, r1, r3
 8001714:	483b      	ldr	r0, [pc, #236]	; (8001804 <SCH_AddTask+0x208>)
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4403      	add	r3, r0
 8001720:	3308      	adds	r3, #8
 8001722:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8001724:	7efa      	ldrb	r2, [r7, #27]
 8001726:	4937      	ldr	r1, [pc, #220]	; (8001804 <SCH_AddTask+0x208>)
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	3308      	adds	r3, #8
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 800173a:	7efa      	ldrb	r2, [r7, #27]
 800173c:	4931      	ldr	r1, [pc, #196]	; (8001804 <SCH_AddTask+0x208>)
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	3310      	adds	r3, #16
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 800174e:	7efb      	ldrb	r3, [r7, #27]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	6979      	ldr	r1, [r7, #20]
 8001754:	482b      	ldr	r0, [pc, #172]	; (8001804 <SCH_AddTask+0x208>)
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4403      	add	r3, r0
 8001760:	3308      	adds	r3, #8
 8001762:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 8001764:	7efb      	ldrb	r3, [r7, #27]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	4926      	ldr	r1, [pc, #152]	; (8001804 <SCH_AddTask+0x208>)
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	3308      	adds	r3, #8
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d12c      	bne.n	80017d6 <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 800177c:	7efb      	ldrb	r3, [r7, #27]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	4920      	ldr	r1, [pc, #128]	; (8001804 <SCH_AddTask+0x208>)
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3310      	adds	r3, #16
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e020      	b.n	80017d6 <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 8001794:	7efa      	ldrb	r2, [r7, #27]
 8001796:	68b9      	ldr	r1, [r7, #8]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	1ac9      	subs	r1, r1, r3
 800179c:	4819      	ldr	r0, [pc, #100]	; (8001804 <SCH_AddTask+0x208>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4403      	add	r3, r0
 80017a8:	3308      	adds	r3, #8
 80017aa:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 80017ac:	7efa      	ldrb	r2, [r7, #27]
 80017ae:	4915      	ldr	r1, [pc, #84]	; (8001804 <SCH_AddTask+0x208>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	3308      	adds	r3, #8
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 80017c2:	7efa      	ldrb	r2, [r7, #27]
 80017c4:	490f      	ldr	r1, [pc, #60]	; (8001804 <SCH_AddTask+0x208>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	3310      	adds	r3, #16
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 80017d6:	7efa      	ldrb	r2, [r7, #27]
 80017d8:	490a      	ldr	r1, [pc, #40]	; (8001804 <SCH_AddTask+0x208>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	3304      	adds	r3, #4
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	e007      	b.n	80017fa <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80017ea:	7efb      	ldrb	r3, [r7, #27]
 80017ec:	3301      	adds	r3, #1
 80017ee:	76fb      	strb	r3, [r7, #27]
 80017f0:	7efb      	ldrb	r3, [r7, #27]
 80017f2:	2b13      	cmp	r3, #19
 80017f4:	f67f af18 	bls.w	8001628 <SCH_AddTask+0x2c>
        }
    }
    return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bcb0      	pop	{r4, r5, r7}
 8001802:	4770      	bx	lr
 8001804:	20000200 	.word	0x20000200

08001808 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 8001808:	b4b0      	push	{r4, r5, r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
 8001816:	e088      	b.n	800192a <SCH_DeleteTask+0x122>
    	if (tasks[i].functionPointer == 0) return 0;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	4949      	ldr	r1, [pc, #292]	; (8001940 <SCH_DeleteTask+0x138>)
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <SCH_DeleteTask+0x28>
 800182c:	2300      	movs	r3, #0
 800182e:	e081      	b.n	8001934 <SCH_DeleteTask+0x12c>
        if (tasks[i].id == id) {
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	4943      	ldr	r1, [pc, #268]	; (8001940 <SCH_DeleteTask+0x138>)
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3304      	adds	r3, #4
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	429a      	cmp	r2, r3
 8001846:	d16d      	bne.n	8001924 <SCH_DeleteTask+0x11c>
            uint8_t currentID = tasks[i].id;
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	493d      	ldr	r1, [pc, #244]	; (8001940 <SCH_DeleteTask+0x138>)
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	3304      	adds	r3, #4
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	4937      	ldr	r1, [pc, #220]	; (8001940 <SCH_DeleteTask+0x138>)
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01d      	beq.n	80018ae <SCH_DeleteTask+0xa6>
                tasks[i + 1].delay += tasks[i].delay;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	4932      	ldr	r1, [pc, #200]	; (8001940 <SCH_DeleteTask+0x138>)
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	3308      	adds	r3, #8
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	482d      	ldr	r0, [pc, #180]	; (8001940 <SCH_DeleteTask+0x138>)
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4403      	add	r3, r0
 8001894:	3308      	adds	r3, #8
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	3201      	adds	r2, #1
 800189c:	4419      	add	r1, r3
 800189e:	4828      	ldr	r0, [pc, #160]	; (8001940 <SCH_DeleteTask+0x138>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4403      	add	r3, r0
 80018aa:	3308      	adds	r3, #8
 80018ac:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	73bb      	strb	r3, [r7, #14]
 80018b2:	e017      	b.n	80018e4 <SCH_DeleteTask+0xdc>
                tasks[j] = tasks[j + 1];
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	7bb9      	ldrb	r1, [r7, #14]
 80018ba:	4821      	ldr	r0, [pc, #132]	; (8001940 <SCH_DeleteTask+0x138>)
 80018bc:	460b      	mov	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4418      	add	r0, r3
 80018c6:	491e      	ldr	r1, [pc, #120]	; (8001940 <SCH_DeleteTask+0x138>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	4604      	mov	r4, r0
 80018d4:	461d      	mov	r5, r3
 80018d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018da:	682b      	ldr	r3, [r5, #0]
 80018dc:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	3301      	adds	r3, #1
 80018e2:	73bb      	strb	r3, [r7, #14]
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d9e4      	bls.n	80018b4 <SCH_DeleteTask+0xac>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <SCH_DeleteTask+0x138>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 80018f2:	4a13      	ldr	r2, [pc, #76]	; (8001940 <SCH_DeleteTask+0x138>)
 80018f4:	7b7b      	ldrb	r3, [r7, #13]
 80018f6:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <SCH_DeleteTask+0x138>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            tasks[SCH_TASKNUMBER - 1].period = 0;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <SCH_DeleteTask+0x138>)
 8001904:	2200      	movs	r2, #0
 8001906:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <SCH_DeleteTask+0x138>)
 800190c:	2200      	movs	r2, #0
 800190e:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <SCH_DeleteTask+0x138>)
 8001914:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	e007      	b.n	8001934 <SCH_DeleteTask+0x12c>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	3301      	adds	r3, #1
 8001928:	73fb      	strb	r3, [r7, #15]
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	2b13      	cmp	r3, #19
 800192e:	f67f af73 	bls.w	8001818 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bcb0      	pop	{r4, r5, r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000200 	.word	0x20000200

08001944 <SCH_RefreshTask>:

unsigned char SCH_RefreshTask(void) {
 8001944:	b4b0      	push	{r4, r5, r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return 0;
 800194a:	4b96      	ldr	r3, [pc, #600]	; (8001ba4 <SCH_RefreshTask+0x260>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <SCH_RefreshTask+0x12>
 8001952:	2300      	movs	r3, #0
 8001954:	e120      	b.n	8001b98 <SCH_RefreshTask+0x254>
    SCH_Task currentTask = tasks[0];
 8001956:	4b93      	ldr	r3, [pc, #588]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001958:	463c      	mov	r4, r7
 800195a:	461d      	mov	r5, r3
 800195c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	6023      	str	r3, [r4, #0]
    uint32_t currentDelay = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001968:	2300      	movs	r3, #0
 800196a:	76fb      	strb	r3, [r7, #27]
 800196c:	e10f      	b.n	8001b8e <SCH_RefreshTask+0x24a>
        if (i + 1 == SCH_TASKNUMBER || tasks[i + 1].functionPointer == NULL) {
 800196e:	7efb      	ldrb	r3, [r7, #27]
 8001970:	2b13      	cmp	r3, #19
 8001972:	d00a      	beq.n	800198a <SCH_RefreshTask+0x46>
 8001974:	7efb      	ldrb	r3, [r7, #27]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	498a      	ldr	r1, [pc, #552]	; (8001ba4 <SCH_RefreshTask+0x260>)
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d14a      	bne.n	8001a20 <SCH_RefreshTask+0xdc>
            tasks[i].functionPointer = currentTask.functionPointer;
 800198a:	7efa      	ldrb	r2, [r7, #27]
 800198c:	6839      	ldr	r1, [r7, #0]
 800198e:	4885      	ldr	r0, [pc, #532]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4403      	add	r3, r0
 800199a:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 800199c:	7efa      	ldrb	r2, [r7, #27]
 800199e:	7938      	ldrb	r0, [r7, #4]
 80019a0:	4980      	ldr	r1, [pc, #512]	; (8001ba4 <SCH_RefreshTask+0x260>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	3304      	adds	r3, #4
 80019ae:	4602      	mov	r2, r0
 80019b0:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 80019b2:	7efa      	ldrb	r2, [r7, #27]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	487b      	ldr	r0, [pc, #492]	; (8001ba4 <SCH_RefreshTask+0x260>)
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4403      	add	r3, r0
 80019c2:	330c      	adds	r3, #12
 80019c4:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 80019c6:	7efa      	ldrb	r2, [r7, #27]
 80019c8:	4976      	ldr	r1, [pc, #472]	; (8001ba4 <SCH_RefreshTask+0x260>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	3310      	adds	r3, #16
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 80019da:	68f9      	ldr	r1, [r7, #12]
 80019dc:	7efa      	ldrb	r2, [r7, #27]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	1ac9      	subs	r1, r1, r3
 80019e2:	4870      	ldr	r0, [pc, #448]	; (8001ba4 <SCH_RefreshTask+0x260>)
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4403      	add	r3, r0
 80019ee:	3308      	adds	r3, #8
 80019f0:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 80019f2:	7efa      	ldrb	r2, [r7, #27]
 80019f4:	496b      	ldr	r1, [pc, #428]	; (8001ba4 <SCH_RefreshTask+0x260>)
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	3308      	adds	r3, #8
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <SCH_RefreshTask+0xd8>
                tasks[i].flag = 1;
 8001a08:	7efa      	ldrb	r2, [r7, #27]
 8001a0a:	4966      	ldr	r1, [pc, #408]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	3310      	adds	r3, #16
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0bb      	b.n	8001b98 <SCH_RefreshTask+0x254>
        }
        currentDelay += tasks[i + 1].delay;
 8001a20:	7efb      	ldrb	r3, [r7, #27]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	495f      	ldr	r1, [pc, #380]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	3308      	adds	r3, #8
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	4413      	add	r3, r2
 8001a38:	61fb      	str	r3, [r7, #28]
        if (currentDelay > currentTask.period) {
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	f240 808d 	bls.w	8001b5e <SCH_RefreshTask+0x21a>
            tasks[i].functionPointer = currentTask.functionPointer;
 8001a44:	7efa      	ldrb	r2, [r7, #27]
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	4856      	ldr	r0, [pc, #344]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4403      	add	r3, r0
 8001a54:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8001a56:	7efa      	ldrb	r2, [r7, #27]
 8001a58:	7938      	ldrb	r0, [r7, #4]
 8001a5a:	4952      	ldr	r1, [pc, #328]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	3304      	adds	r3, #4
 8001a68:	4602      	mov	r2, r0
 8001a6a:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 8001a6c:	7efa      	ldrb	r2, [r7, #27]
 8001a6e:	68f9      	ldr	r1, [r7, #12]
 8001a70:	484c      	ldr	r0, [pc, #304]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4403      	add	r3, r0
 8001a7c:	330c      	adds	r3, #12
 8001a7e:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8001a80:	7efa      	ldrb	r2, [r7, #27]
 8001a82:	4948      	ldr	r1, [pc, #288]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3310      	adds	r3, #16
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 8001a9c:	7efb      	ldrb	r3, [r7, #27]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	4940      	ldr	r1, [pc, #256]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	3308      	adds	r3, #8
 8001aae:	6819      	ldr	r1, [r3, #0]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	7efa      	ldrb	r2, [r7, #27]
 8001ab4:	1ac9      	subs	r1, r1, r3
 8001ab6:	483b      	ldr	r0, [pc, #236]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4403      	add	r3, r0
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 8001ac6:	7efa      	ldrb	r2, [r7, #27]
 8001ac8:	4936      	ldr	r1, [pc, #216]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3308      	adds	r3, #8
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <SCH_RefreshTask+0x1ac>
                tasks[i].flag = 1;
 8001adc:	7efa      	ldrb	r2, [r7, #27]
 8001ade:	4931      	ldr	r1, [pc, #196]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	3310      	adds	r3, #16
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 8001af0:	7efb      	ldrb	r3, [r7, #27]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	492b      	ldr	r1, [pc, #172]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	3308      	adds	r3, #8
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	7efa      	ldrb	r2, [r7, #27]
 8001b06:	4827      	ldr	r0, [pc, #156]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4403      	add	r3, r0
 8001b12:	3308      	adds	r3, #8
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	7efa      	ldrb	r2, [r7, #27]
 8001b18:	3201      	adds	r2, #1
 8001b1a:	1ac9      	subs	r1, r1, r3
 8001b1c:	4821      	ldr	r0, [pc, #132]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4403      	add	r3, r0
 8001b28:	3308      	adds	r3, #8
 8001b2a:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 8001b2c:	7efb      	ldrb	r3, [r7, #27]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	491c      	ldr	r1, [pc, #112]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3308      	adds	r3, #8
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10a      	bne.n	8001b5a <SCH_RefreshTask+0x216>
                tasks[i + 1].flag = 1;
 8001b44:	7efb      	ldrb	r3, [r7, #27]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	4916      	ldr	r1, [pc, #88]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	3310      	adds	r3, #16
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e01c      	b.n	8001b98 <SCH_RefreshTask+0x254>
        }
        else {
            tasks[i] = tasks[i + 1];
 8001b5e:	7efb      	ldrb	r3, [r7, #27]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	7ef9      	ldrb	r1, [r7, #27]
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001b66:	460b      	mov	r3, r1
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4418      	add	r0, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <SCH_RefreshTask+0x260>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	461d      	mov	r5, r3
 8001b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b84:	682b      	ldr	r3, [r5, #0]
 8001b86:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001b88:	7efb      	ldrb	r3, [r7, #27]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	76fb      	strb	r3, [r7, #27]
 8001b8e:	7efb      	ldrb	r3, [r7, #27]
 8001b90:	2b13      	cmp	r3, #19
 8001b92:	f67f aeec 	bls.w	800196e <SCH_RefreshTask+0x2a>
        }
    }
    return 0;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3724      	adds	r7, #36	; 0x24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bcb0      	pop	{r4, r5, r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000200 	.word	0x20000200

08001ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_MspInit+0x40>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_MspInit+0x40>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6193      	str	r3, [r2, #24]
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_MspInit+0x40>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_MspInit+0x40>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_MspInit+0x40>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	61d3      	str	r3, [r2, #28]
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_MspInit+0x40>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d114      	bne.n	8001c28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	201c      	movs	r0, #28
 8001c1c:	f000 fcf1 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c20:	201c      	movs	r0, #28
 8001c22:	f000 fd0a 	bl	800263a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c26:	e018      	b.n	8001c5a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_TIM_Base_MspInit+0x7c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d113      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_TIM_Base_MspInit+0x78>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	201d      	movs	r0, #29
 8001c50:	f000 fcd7 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c54:	201d      	movs	r0, #29
 8001c56:	f000 fcf0 	bl	800263a <HAL_NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40000400 	.word	0x40000400

08001c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_TIM_MspPostInit+0x58>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d117      	bne.n	8001cbc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_TIM_MspPostInit+0x5c>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a0d      	ldr	r2, [pc, #52]	; (8001cc8 <HAL_TIM_MspPostInit+0x5c>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_TIM_MspPostInit+0x5c>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ca4:	23c0      	movs	r3, #192	; 0xc0
 8001ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_TIM_MspPostInit+0x60>)
 8001cb8:	f000 fd8c 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_UART_MspInit+0x98>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d137      	bne.n	8001d60 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_UART_MspInit+0x9c>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_UART_MspInit+0x9c>)
 8001cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_UART_MspInit+0x9c>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_UART_MspInit+0x9c>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_UART_MspInit+0x9c>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_UART_MspInit+0x9c>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d20:	2304      	movs	r3, #4
 8001d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	480f      	ldr	r0, [pc, #60]	; (8001d70 <HAL_UART_MspInit+0xa0>)
 8001d34:	f000 fd4e 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4809      	ldr	r0, [pc, #36]	; (8001d70 <HAL_UART_MspInit+0xa0>)
 8001d4c:	f000 fd42 	bl	80027d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	2026      	movs	r0, #38	; 0x26
 8001d56:	f000 fc54 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d5a:	2026      	movs	r0, #38	; 0x26
 8001d5c:	f000 fc6d 	bl	800263a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40004400 	.word	0x40004400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010800 	.word	0x40010800

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <NMI_Handler+0x4>

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dba:	f000 fb2f 	bl	800241c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <TIM2_IRQHandler+0x10>)
 8001dca:	f001 fc67 	bl	800369c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000114 	.word	0x20000114

08001dd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <TIM3_IRQHandler+0x10>)
 8001dde:	f001 fc5d 	bl	800369c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000015c 	.word	0x2000015c

08001dec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <USART2_IRQHandler+0x10>)
 8001df2:	f002 fb05 	bl	8004400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200001a4 	.word	0x200001a4

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e30:	f003 f88e 	bl	8004f50 <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	e009      	b.n	8001e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <_sbrk+0x64>)
 8001e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20002800 	.word	0x20002800
 8001e60:	00000400 	.word	0x00000400
 8001e64:	20000390 	.word	0x20000390
 8001e68:	200004f0 	.word	0x200004f0

08001e6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <testMCU>:

#include "test.h"

extern TIM_HandleTypeDef htim3;

void testMCU(void) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	4802      	ldr	r0, [pc, #8]	; (8001e88 <testMCU+0x10>)
 8001e80:	f000 fe53 	bl	8002b2a <HAL_GPIO_TogglePin>
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40010800 	.word	0x40010800

08001e8c <testButton>:

void testButton(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	if (buttonPressed(1) || buttonPressed(2) || buttonPressed(3)) {
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7fe f9e5 	bl	8000260 <buttonPressed>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10b      	bne.n	8001eb4 <testButton+0x28>
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f7fe f9df 	bl	8000260 <buttonPressed>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <testButton+0x28>
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f7fe f9d9 	bl	8000260 <buttonPressed>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d02c      	beq.n	8001f0e <testButton+0x82>
		HAL_GPIO_TogglePin(TRAFFIC0_RED_GPIO_Port, TRAFFIC0_RED_Pin);
 8001eb4:	2110      	movs	r1, #16
 8001eb6:	4817      	ldr	r0, [pc, #92]	; (8001f14 <testButton+0x88>)
 8001eb8:	f000 fe37 	bl	8002b2a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC0_GREEN_GPIO_Port, TRAFFIC0_GREEN_Pin);
 8001ebc:	2140      	movs	r1, #64	; 0x40
 8001ebe:	4815      	ldr	r0, [pc, #84]	; (8001f14 <testButton+0x88>)
 8001ec0:	f000 fe33 	bl	8002b2a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC0_YELLOW_GPIO_Port, TRAFFIC0_YELLOW_Pin);
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	4813      	ldr	r0, [pc, #76]	; (8001f14 <testButton+0x88>)
 8001ec8:	f000 fe2f 	bl	8002b2a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_RED_GPIO_Port, TRAFFIC1_RED_Pin);
 8001ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed0:	4810      	ldr	r0, [pc, #64]	; (8001f14 <testButton+0x88>)
 8001ed2:	f000 fe2a 	bl	8002b2a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_GREEN_GPIO_Port, TRAFFIC1_GREEN_Pin);
 8001ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eda:	480e      	ldr	r0, [pc, #56]	; (8001f14 <testButton+0x88>)
 8001edc:	f000 fe25 	bl	8002b2a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_YELLOW_GPIO_Port, TRAFFIC1_YELLOW_Pin);
 8001ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ee4:	480b      	ldr	r0, [pc, #44]	; (8001f14 <testButton+0x88>)
 8001ee6:	f000 fe20 	bl	8002b2a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN0_RED_GPIO_Port, PEDESTRIAN0_RED_Pin);
 8001eea:	2101      	movs	r1, #1
 8001eec:	4809      	ldr	r0, [pc, #36]	; (8001f14 <testButton+0x88>)
 8001eee:	f000 fe1c 	bl	8002b2a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN0_GREEN_Pin);
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	4807      	ldr	r0, [pc, #28]	; (8001f14 <testButton+0x88>)
 8001ef6:	f000 fe18 	bl	8002b2a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN1_RED_GPIO_Port, PEDESTRIAN1_RED_Pin);
 8001efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <testButton+0x88>)
 8001f00:	f000 fe13 	bl	8002b2a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN1_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_Pin);
 8001f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <testButton+0x88>)
 8001f0a:	f000 fe0e 	bl	8002b2a <HAL_GPIO_TogglePin>
	}
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40010c00 	.word	0x40010c00

08001f18 <testBuzzer>:

void testBuzzer(void) {
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period);
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <testBuzzer+0x20>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <testBuzzer+0x20>)
 8001f22:	68d2      	ldr	r2, [r2, #12]
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period);
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <testBuzzer+0x20>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <testBuzzer+0x20>)
 8001f2c:	68d2      	ldr	r2, [r2, #12]
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	2000015c 	.word	0x2000015c

08001f3c <testLED>:

void testLED(void) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRAFFIC0_RED_GPIO_Port, TRAFFIC0_RED_Pin, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2110      	movs	r1, #16
 8001f44:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <testLED+0x78>)
 8001f46:	f000 fdd8 	bl	8002afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC0_GREEN_GPIO_Port, TRAFFIC0_GREEN_Pin, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2140      	movs	r1, #64	; 0x40
 8001f4e:	4819      	ldr	r0, [pc, #100]	; (8001fb4 <testLED+0x78>)
 8001f50:	f000 fdd3 	bl	8002afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC0_YELLOW_GPIO_Port, TRAFFIC0_YELLOW_Pin, GPIO_PIN_RESET);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2120      	movs	r1, #32
 8001f58:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <testLED+0x78>)
 8001f5a:	f000 fdce 	bl	8002afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_RED_GPIO_Port, TRAFFIC1_RED_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f64:	4813      	ldr	r0, [pc, #76]	; (8001fb4 <testLED+0x78>)
 8001f66:	f000 fdc8 	bl	8002afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_GREEN_GPIO_Port, TRAFFIC1_GREEN_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f70:	4810      	ldr	r0, [pc, #64]	; (8001fb4 <testLED+0x78>)
 8001f72:	f000 fdc2 	bl	8002afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_YELLOW_GPIO_Port, TRAFFIC1_YELLOW_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <testLED+0x78>)
 8001f7e:	f000 fdbc 	bl	8002afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN0_RED_GPIO_Port, PEDESTRIAN0_RED_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <testLED+0x78>)
 8001f88:	f000 fdb7 	bl	8002afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN0_GREEN_Pin, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2102      	movs	r1, #2
 8001f90:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <testLED+0x78>)
 8001f92:	f000 fdb2 	bl	8002afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN1_RED_GPIO_Port, PEDESTRIAN1_RED_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <testLED+0x78>)
 8001f9e:	f000 fdac 	bl	8002afa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN1_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <testLED+0x78>)
 8001faa:	f000 fda6 	bl	8002afa <HAL_GPIO_WritePin>
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40010c00 	.word	0x40010c00

08001fb8 <trafficToggle>:

static uint16_t trafficRedPins[TRAFFIC_NUMBER] = {TRAFFIC0_RED_Pin, TRAFFIC1_RED_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMBER] = {TRAFFIC0_GREEN_Pin, TRAFFIC1_GREEN_Pin};
static uint16_t trafficYellowPins[TRAFFIC_NUMBER] = {TRAFFIC0_YELLOW_Pin, TRAFFIC1_YELLOW_Pin};

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8001fc8:	79bb      	ldrb	r3, [r7, #6]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	f200 80ce 	bhi.w	800216c <trafficToggle+0x1b4>
 8001fd0:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <trafficToggle+0x20>)
 8001fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd6:	bf00      	nop
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	0800203b 	.word	0x0800203b
 8001fe0:	080020a1 	.word	0x080020a1
 8001fe4:	08002107 	.word	0x08002107
	case TRAFFIC_OFF:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	4a66      	ldr	r2, [pc, #408]	; (8002184 <trafficToggle+0x1cc>)
 8001fec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4a65      	ldr	r2, [pc, #404]	; (8002188 <trafficToggle+0x1d0>)
 8001ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f000 fd7d 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	4a62      	ldr	r2, [pc, #392]	; (800218c <trafficToggle+0x1d4>)
 8002004:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	4a61      	ldr	r2, [pc, #388]	; (8002190 <trafficToggle+0x1d8>)
 800200c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002010:	2201      	movs	r2, #1
 8002012:	4619      	mov	r1, r3
 8002014:	f000 fd71 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	4a5e      	ldr	r2, [pc, #376]	; (8002194 <trafficToggle+0x1dc>)
 800201c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	4a5d      	ldr	r2, [pc, #372]	; (8002198 <trafficToggle+0x1e0>)
 8002024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002028:	2201      	movs	r2, #1
 800202a:	4619      	mov	r1, r3
 800202c:	f000 fd65 	bl	8002afa <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_OFF;
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4a5a      	ldr	r2, [pc, #360]	; (800219c <trafficToggle+0x1e4>)
 8002034:	2100      	movs	r1, #0
 8002036:	54d1      	strb	r1, [r2, r3]
		break;
 8002038:	e09f      	b.n	800217a <trafficToggle+0x1c2>
	case TRAFFIC_RED:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_RESET);
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	4a51      	ldr	r2, [pc, #324]	; (8002184 <trafficToggle+0x1cc>)
 800203e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	4a50      	ldr	r2, [pc, #320]	; (8002188 <trafficToggle+0x1d0>)
 8002046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800204a:	2200      	movs	r2, #0
 800204c:	4619      	mov	r1, r3
 800204e:	f000 fd54 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	4a4d      	ldr	r2, [pc, #308]	; (800218c <trafficToggle+0x1d4>)
 8002056:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4a4c      	ldr	r2, [pc, #304]	; (8002190 <trafficToggle+0x1d8>)
 800205e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002062:	2201      	movs	r2, #1
 8002064:	4619      	mov	r1, r3
 8002066:	f000 fd48 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <trafficToggle+0x1dc>)
 800206e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	4a48      	ldr	r2, [pc, #288]	; (8002198 <trafficToggle+0x1e0>)
 8002076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800207a:	2201      	movs	r2, #1
 800207c:	4619      	mov	r1, r3
 800207e:	f000 fd3c 	bl	8002afa <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_RED;
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4a45      	ldr	r2, [pc, #276]	; (800219c <trafficToggle+0x1e4>)
 8002086:	2101      	movs	r1, #1
 8002088:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 800208a:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <trafficToggle+0x1e8>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d16e      	bne.n	8002170 <trafficToggle+0x1b8>
			trafficCounters[index] = trafficRedDuration;
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4a43      	ldr	r2, [pc, #268]	; (80021a4 <trafficToggle+0x1ec>)
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	4943      	ldr	r1, [pc, #268]	; (80021a8 <trafficToggle+0x1f0>)
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 800209e:	e067      	b.n	8002170 <trafficToggle+0x1b8>
	case TRAFFIC_GREEN:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4a38      	ldr	r2, [pc, #224]	; (8002184 <trafficToggle+0x1cc>)
 80020a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	4a37      	ldr	r2, [pc, #220]	; (8002188 <trafficToggle+0x1d0>)
 80020ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4619      	mov	r1, r3
 80020b4:	f000 fd21 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	4a34      	ldr	r2, [pc, #208]	; (800218c <trafficToggle+0x1d4>)
 80020bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	4a33      	ldr	r2, [pc, #204]	; (8002190 <trafficToggle+0x1d8>)
 80020c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4619      	mov	r1, r3
 80020cc:	f000 fd15 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_RESET);
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	4a30      	ldr	r2, [pc, #192]	; (8002194 <trafficToggle+0x1dc>)
 80020d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <trafficToggle+0x1e0>)
 80020dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020e0:	2200      	movs	r2, #0
 80020e2:	4619      	mov	r1, r3
 80020e4:	f000 fd09 	bl	8002afa <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_GREEN;
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	4a2c      	ldr	r2, [pc, #176]	; (800219c <trafficToggle+0x1e4>)
 80020ec:	2102      	movs	r1, #2
 80020ee:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <trafficToggle+0x1e8>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d13d      	bne.n	8002174 <trafficToggle+0x1bc>
			trafficCounters[index] = trafficGreenDuration;
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	4a2c      	ldr	r2, [pc, #176]	; (80021ac <trafficToggle+0x1f4>)
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	492a      	ldr	r1, [pc, #168]	; (80021a8 <trafficToggle+0x1f0>)
 8002100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8002104:	e036      	b.n	8002174 <trafficToggle+0x1bc>
	case TRAFFIC_YELLOW:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <trafficToggle+0x1cc>)
 800210a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <trafficToggle+0x1d0>)
 8002112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002116:	2201      	movs	r2, #1
 8002118:	4619      	mov	r1, r3
 800211a:	f000 fcee 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_RESET);
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	4a1a      	ldr	r2, [pc, #104]	; (800218c <trafficToggle+0x1d4>)
 8002122:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	4a19      	ldr	r2, [pc, #100]	; (8002190 <trafficToggle+0x1d8>)
 800212a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800212e:	2200      	movs	r2, #0
 8002130:	4619      	mov	r1, r3
 8002132:	f000 fce2 	bl	8002afa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	4a16      	ldr	r2, [pc, #88]	; (8002194 <trafficToggle+0x1dc>)
 800213a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	4a15      	ldr	r2, [pc, #84]	; (8002198 <trafficToggle+0x1e0>)
 8002142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002146:	2201      	movs	r2, #1
 8002148:	4619      	mov	r1, r3
 800214a:	f000 fcd6 	bl	8002afa <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_YELLOW;
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4a12      	ldr	r2, [pc, #72]	; (800219c <trafficToggle+0x1e4>)
 8002152:	2103      	movs	r1, #3
 8002154:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <trafficToggle+0x1e8>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10c      	bne.n	8002178 <trafficToggle+0x1c0>
			trafficCounters[index] = trafficYellowDuration;
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <trafficToggle+0x1f8>)
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	4910      	ldr	r1, [pc, #64]	; (80021a8 <trafficToggle+0x1f0>)
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 800216a:	e005      	b.n	8002178 <trafficToggle+0x1c0>
	default:
		break;
 800216c:	bf00      	nop
 800216e:	e004      	b.n	800217a <trafficToggle+0x1c2>
		break;
 8002170:	bf00      	nop
 8002172:	e002      	b.n	800217a <trafficToggle+0x1c2>
		break;
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <trafficToggle+0x1c2>
		break;
 8002178:	bf00      	nop
	}
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000040 	.word	0x20000040
 8002188:	20000058 	.word	0x20000058
 800218c:	20000050 	.word	0x20000050
 8002190:	20000060 	.word	0x20000060
 8002194:	20000048 	.word	0x20000048
 8002198:	2000005c 	.word	0x2000005c
 800219c:	20000394 	.word	0x20000394
 80021a0:	200000f4 	.word	0x200000f4
 80021a4:	20000034 	.word	0x20000034
 80021a8:	20000398 	.word	0x20000398
 80021ac:	20000038 	.word	0x20000038
 80021b0:	2000003c 	.word	0x2000003c

080021b4 <traffic0Off>:

void traffic0Off(void) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_OFF);
 80021b8:	2100      	movs	r1, #0
 80021ba:	2000      	movs	r0, #0
 80021bc:	f7ff fefc 	bl	8001fb8 <trafficToggle>
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <traffic0Red>:
void traffic0Red(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 80021c8:	2101      	movs	r1, #1
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7ff fef4 	bl	8001fb8 <trafficToggle>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <traffic0Green>:
void traffic0Green(void) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 80021d8:	2102      	movs	r1, #2
 80021da:	2000      	movs	r0, #0
 80021dc:	f7ff feec 	bl	8001fb8 <trafficToggle>
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <traffic0Yellow>:
void traffic0Yellow(void) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 80021e8:	2103      	movs	r1, #3
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7ff fee4 	bl	8001fb8 <trafficToggle>
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <traffic1Off>:

void traffic1Off(void) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_OFF);
 80021f8:	2100      	movs	r1, #0
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7ff fedc 	bl	8001fb8 <trafficToggle>
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <traffic1Red>:
void traffic1Red(void) {
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 8002208:	2101      	movs	r1, #1
 800220a:	2001      	movs	r0, #1
 800220c:	f7ff fed4 	bl	8001fb8 <trafficToggle>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <traffic1Green>:
void traffic1Green(void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 8002218:	2102      	movs	r1, #2
 800221a:	2001      	movs	r0, #1
 800221c:	f7ff fecc 	bl	8001fb8 <trafficToggle>
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <traffic1Yellow>:
void traffic1Yellow(void) {
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 8002228:	2103      	movs	r1, #3
 800222a:	2001      	movs	r0, #1
 800222c:	f7ff fec4 	bl	8001fb8 <trafficToggle>
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}

08002234 <uartRedDuration>:
void uartReport(void) {
	char str[40];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Time: %lu - Task: %u\r\n", HAL_GetTick(), SCH_Report()), 100);
}

void uartRedDuration(void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG:%02lu#\r\n", trafficRedDuration / 1000), 100);
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <uartRedDuration+0x34>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <uartRedDuration+0x38>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	099a      	lsrs	r2, r3, #6
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	4909      	ldr	r1, [pc, #36]	; (8002270 <uartRedDuration+0x3c>)
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fe58 	bl	8004f00 <siprintf>
 8002250:	4603      	mov	r3, r0
 8002252:	b29a      	uxth	r2, r3
 8002254:	1d39      	adds	r1, r7, #4
 8002256:	2364      	movs	r3, #100	; 0x64
 8002258:	4806      	ldr	r0, [pc, #24]	; (8002274 <uartRedDuration+0x40>)
 800225a:	f002 f829 	bl	80042b0 <HAL_UART_Transmit>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000034 	.word	0x20000034
 800226c:	10624dd3 	.word	0x10624dd3
 8002270:	08005894 	.word	0x08005894
 8002274:	200001a4 	.word	0x200001a4

08002278 <uartGreenDuration>:

void uartGreenDuration(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG:%02lu#\r\n", trafficGreenDuration / 1000), 100);
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <uartGreenDuration+0x34>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <uartGreenDuration+0x38>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	099a      	lsrs	r2, r3, #6
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	4909      	ldr	r1, [pc, #36]	; (80022b4 <uartGreenDuration+0x3c>)
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fe36 	bl	8004f00 <siprintf>
 8002294:	4603      	mov	r3, r0
 8002296:	b29a      	uxth	r2, r3
 8002298:	1d39      	adds	r1, r7, #4
 800229a:	2364      	movs	r3, #100	; 0x64
 800229c:	4806      	ldr	r0, [pc, #24]	; (80022b8 <uartGreenDuration+0x40>)
 800229e:	f002 f807 	bl	80042b0 <HAL_UART_Transmit>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000038 	.word	0x20000038
 80022b0:	10624dd3 	.word	0x10624dd3
 80022b4:	08005894 	.word	0x08005894
 80022b8:	200001a4 	.word	0x200001a4

080022bc <uartYellowDuration>:

void uartYellowDuration(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG:%02lu#\r\n", trafficYellowDuration / 1000), 100);
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <uartYellowDuration+0x34>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <uartYellowDuration+0x38>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	099a      	lsrs	r2, r3, #6
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	4909      	ldr	r1, [pc, #36]	; (80022f8 <uartYellowDuration+0x3c>)
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fe14 	bl	8004f00 <siprintf>
 80022d8:	4603      	mov	r3, r0
 80022da:	b29a      	uxth	r2, r3
 80022dc:	1d39      	adds	r1, r7, #4
 80022de:	2364      	movs	r3, #100	; 0x64
 80022e0:	4806      	ldr	r0, [pc, #24]	; (80022fc <uartYellowDuration+0x40>)
 80022e2:	f001 ffe5 	bl	80042b0 <HAL_UART_Transmit>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000003c 	.word	0x2000003c
 80022f4:	10624dd3 	.word	0x10624dd3
 80022f8:	08005894 	.word	0x08005894
 80022fc:	200001a4 	.word	0x200001a4

08002300 <uartCounter>:

void uartCounter(void) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG:%02lu#\r\n", trafficCounters[0] / 1000), 100);
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <uartCounter+0x34>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <uartCounter+0x38>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	099a      	lsrs	r2, r3, #6
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	4909      	ldr	r1, [pc, #36]	; (800233c <uartCounter+0x3c>)
 8002316:	4618      	mov	r0, r3
 8002318:	f002 fdf2 	bl	8004f00 <siprintf>
 800231c:	4603      	mov	r3, r0
 800231e:	b29a      	uxth	r2, r3
 8002320:	1d39      	adds	r1, r7, #4
 8002322:	2364      	movs	r3, #100	; 0x64
 8002324:	4806      	ldr	r0, [pc, #24]	; (8002340 <uartCounter+0x40>)
 8002326:	f001 ffc3 	bl	80042b0 <HAL_UART_Transmit>
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000398 	.word	0x20000398
 8002338:	10624dd3 	.word	0x10624dd3
 800233c:	08005894 	.word	0x08005894
 8002340:	200001a4 	.word	0x200001a4

08002344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002344:	f7ff fd92 	bl	8001e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002348:	480b      	ldr	r0, [pc, #44]	; (8002378 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800234a:	490c      	ldr	r1, [pc, #48]	; (800237c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <LoopFillZerobss+0x16>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002350:	e002      	b.n	8002358 <LoopCopyDataInit>

08002352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002356:	3304      	adds	r3, #4

08002358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800235c:	d3f9      	bcc.n	8002352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002360:	4c09      	ldr	r4, [pc, #36]	; (8002388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002364:	e001      	b.n	800236a <LoopFillZerobss>

08002366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002368:	3204      	adds	r2, #4

0800236a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800236c:	d3fb      	bcc.n	8002366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800236e:	f002 fdf5 	bl	8004f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002372:	f7fe fdab 	bl	8000ecc <main>
  bx lr
 8002376:	4770      	bx	lr
  ldr r0, =_sdata
 8002378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800237c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8002380:	0800590c 	.word	0x0800590c
  ldr r2, =_sbss
 8002384:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8002388:	200004ec 	.word	0x200004ec

0800238c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800238c:	e7fe      	b.n	800238c <ADC1_2_IRQHandler>
	...

08002390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_Init+0x28>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_Init+0x28>)
 800239a:	f043 0310 	orr.w	r3, r3, #16
 800239e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 f923 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a6:	200f      	movs	r0, #15
 80023a8:	f000 f808 	bl	80023bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ac:	f7ff fbfc 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40022000 	.word	0x40022000

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_InitTick+0x54>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_InitTick+0x58>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f93b 	bl	8002656 <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00e      	b.n	8002408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d80a      	bhi.n	8002406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f000 f903 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <HAL_InitTick+0x5c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000030 	.word	0x20000030
 8002414:	20000068 	.word	0x20000068
 8002418:	20000064 	.word	0x20000064

0800241c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_IncTick+0x1c>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_IncTick+0x20>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <HAL_IncTick+0x20>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000068 	.word	0x20000068
 800243c:	200003a0 	.word	0x200003a0

08002440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return uwTick;
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <HAL_GetTick+0x10>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	200003a0 	.word	0x200003a0

08002454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800247c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002486:	4a04      	ldr	r2, [pc, #16]	; (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	60d3      	str	r3, [r2, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <__NVIC_GetPriorityGrouping+0x18>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0307 	and.w	r3, r3, #7
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	db0b      	blt.n	80024e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4906      	ldr	r1, [pc, #24]	; (80024ec <__NVIC_EnableIRQ+0x34>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2001      	movs	r0, #1
 80024da:	fa00 f202 	lsl.w	r2, r0, r2
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	; (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	; (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff90 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff2d 	bl	8002454 <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff42 	bl	800249c <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff90 	bl	8002544 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5f 	bl	80024f0 <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff35 	bl	80024b8 <__NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffa2 	bl	80025a8 <SysTick_Config>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d008      	beq.n	8002698 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2204      	movs	r2, #4
 800268a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e020      	b.n	80026da <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 020e 	bic.w	r2, r2, #14
 80026a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f202 	lsl.w	r2, r1, r2
 80026c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d005      	beq.n	8002708 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2204      	movs	r2, #4
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e051      	b.n	80027ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 020e 	bic.w	r2, r2, #14
 8002716:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <HAL_DMA_Abort_IT+0xd4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d029      	beq.n	8002786 <HAL_DMA_Abort_IT+0xa2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a21      	ldr	r2, [pc, #132]	; (80027bc <HAL_DMA_Abort_IT+0xd8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d022      	beq.n	8002782 <HAL_DMA_Abort_IT+0x9e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_DMA_Abort_IT+0xdc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01a      	beq.n	800277c <HAL_DMA_Abort_IT+0x98>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <HAL_DMA_Abort_IT+0xe0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d012      	beq.n	8002776 <HAL_DMA_Abort_IT+0x92>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_DMA_Abort_IT+0xe4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00a      	beq.n	8002770 <HAL_DMA_Abort_IT+0x8c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <HAL_DMA_Abort_IT+0xe8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d102      	bne.n	800276a <HAL_DMA_Abort_IT+0x86>
 8002764:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002768:	e00e      	b.n	8002788 <HAL_DMA_Abort_IT+0xa4>
 800276a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800276e:	e00b      	b.n	8002788 <HAL_DMA_Abort_IT+0xa4>
 8002770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002774:	e008      	b.n	8002788 <HAL_DMA_Abort_IT+0xa4>
 8002776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277a:	e005      	b.n	8002788 <HAL_DMA_Abort_IT+0xa4>
 800277c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002780:	e002      	b.n	8002788 <HAL_DMA_Abort_IT+0xa4>
 8002782:	2310      	movs	r3, #16
 8002784:	e000      	b.n	8002788 <HAL_DMA_Abort_IT+0xa4>
 8002786:	2301      	movs	r3, #1
 8002788:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <HAL_DMA_Abort_IT+0xec>)
 800278a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
    } 
  }
  return status;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40020008 	.word	0x40020008
 80027bc:	4002001c 	.word	0x4002001c
 80027c0:	40020030 	.word	0x40020030
 80027c4:	40020044 	.word	0x40020044
 80027c8:	40020058 	.word	0x40020058
 80027cc:	4002006c 	.word	0x4002006c
 80027d0:	40020000 	.word	0x40020000

080027d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b08b      	sub	sp, #44	; 0x2c
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e6:	e161      	b.n	8002aac <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027e8:	2201      	movs	r2, #1
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	429a      	cmp	r2, r3
 8002802:	f040 8150 	bne.w	8002aa6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a97      	ldr	r2, [pc, #604]	; (8002a68 <HAL_GPIO_Init+0x294>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d05e      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002810:	4a95      	ldr	r2, [pc, #596]	; (8002a68 <HAL_GPIO_Init+0x294>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d875      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 8002816:	4a95      	ldr	r2, [pc, #596]	; (8002a6c <HAL_GPIO_Init+0x298>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d058      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 800281c:	4a93      	ldr	r2, [pc, #588]	; (8002a6c <HAL_GPIO_Init+0x298>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d86f      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 8002822:	4a93      	ldr	r2, [pc, #588]	; (8002a70 <HAL_GPIO_Init+0x29c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d052      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002828:	4a91      	ldr	r2, [pc, #580]	; (8002a70 <HAL_GPIO_Init+0x29c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d869      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 800282e:	4a91      	ldr	r2, [pc, #580]	; (8002a74 <HAL_GPIO_Init+0x2a0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d04c      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002834:	4a8f      	ldr	r2, [pc, #572]	; (8002a74 <HAL_GPIO_Init+0x2a0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d863      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 800283a:	4a8f      	ldr	r2, [pc, #572]	; (8002a78 <HAL_GPIO_Init+0x2a4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d046      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002840:	4a8d      	ldr	r2, [pc, #564]	; (8002a78 <HAL_GPIO_Init+0x2a4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d85d      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 8002846:	2b12      	cmp	r3, #18
 8002848:	d82a      	bhi.n	80028a0 <HAL_GPIO_Init+0xcc>
 800284a:	2b12      	cmp	r3, #18
 800284c:	d859      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 800284e:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <HAL_GPIO_Init+0x80>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	080028cf 	.word	0x080028cf
 8002858:	080028a9 	.word	0x080028a9
 800285c:	080028bb 	.word	0x080028bb
 8002860:	080028fd 	.word	0x080028fd
 8002864:	08002903 	.word	0x08002903
 8002868:	08002903 	.word	0x08002903
 800286c:	08002903 	.word	0x08002903
 8002870:	08002903 	.word	0x08002903
 8002874:	08002903 	.word	0x08002903
 8002878:	08002903 	.word	0x08002903
 800287c:	08002903 	.word	0x08002903
 8002880:	08002903 	.word	0x08002903
 8002884:	08002903 	.word	0x08002903
 8002888:	08002903 	.word	0x08002903
 800288c:	08002903 	.word	0x08002903
 8002890:	08002903 	.word	0x08002903
 8002894:	08002903 	.word	0x08002903
 8002898:	080028b1 	.word	0x080028b1
 800289c:	080028c5 	.word	0x080028c5
 80028a0:	4a76      	ldr	r2, [pc, #472]	; (8002a7c <HAL_GPIO_Init+0x2a8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028a6:	e02c      	b.n	8002902 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	623b      	str	r3, [r7, #32]
          break;
 80028ae:	e029      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	3304      	adds	r3, #4
 80028b6:	623b      	str	r3, [r7, #32]
          break;
 80028b8:	e024      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	3308      	adds	r3, #8
 80028c0:	623b      	str	r3, [r7, #32]
          break;
 80028c2:	e01f      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	330c      	adds	r3, #12
 80028ca:	623b      	str	r3, [r7, #32]
          break;
 80028cc:	e01a      	b.n	8002904 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028d6:	2304      	movs	r3, #4
 80028d8:	623b      	str	r3, [r7, #32]
          break;
 80028da:	e013      	b.n	8002904 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e4:	2308      	movs	r3, #8
 80028e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	611a      	str	r2, [r3, #16]
          break;
 80028ee:	e009      	b.n	8002904 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f0:	2308      	movs	r3, #8
 80028f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	615a      	str	r2, [r3, #20]
          break;
 80028fa:	e003      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028fc:	2300      	movs	r3, #0
 80028fe:	623b      	str	r3, [r7, #32]
          break;
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x130>
          break;
 8002902:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2bff      	cmp	r3, #255	; 0xff
 8002908:	d801      	bhi.n	800290e <HAL_GPIO_Init+0x13a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	e001      	b.n	8002912 <HAL_GPIO_Init+0x13e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2bff      	cmp	r3, #255	; 0xff
 8002918:	d802      	bhi.n	8002920 <HAL_GPIO_Init+0x14c>
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	e002      	b.n	8002926 <HAL_GPIO_Init+0x152>
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	3b08      	subs	r3, #8
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	210f      	movs	r1, #15
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	401a      	ands	r2, r3
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	431a      	orrs	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80a9 	beq.w	8002aa6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002954:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <HAL_GPIO_Init+0x2ac>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4a49      	ldr	r2, [pc, #292]	; (8002a80 <HAL_GPIO_Init+0x2ac>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6193      	str	r3, [r2, #24]
 8002960:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_GPIO_Init+0x2ac>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800296c:	4a45      	ldr	r2, [pc, #276]	; (8002a84 <HAL_GPIO_Init+0x2b0>)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a3d      	ldr	r2, [pc, #244]	; (8002a88 <HAL_GPIO_Init+0x2b4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00d      	beq.n	80029b4 <HAL_GPIO_Init+0x1e0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a3c      	ldr	r2, [pc, #240]	; (8002a8c <HAL_GPIO_Init+0x2b8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <HAL_GPIO_Init+0x1dc>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a3b      	ldr	r2, [pc, #236]	; (8002a90 <HAL_GPIO_Init+0x2bc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_GPIO_Init+0x1d8>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e004      	b.n	80029b6 <HAL_GPIO_Init+0x1e2>
 80029ac:	2303      	movs	r3, #3
 80029ae:	e002      	b.n	80029b6 <HAL_GPIO_Init+0x1e2>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_GPIO_Init+0x1e2>
 80029b4:	2300      	movs	r3, #0
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	f002 0203 	and.w	r2, r2, #3
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	4093      	lsls	r3, r2
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029c6:	492f      	ldr	r1, [pc, #188]	; (8002a84 <HAL_GPIO_Init+0x2b0>)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3302      	adds	r3, #2
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029e0:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	492b      	ldr	r1, [pc, #172]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]
 80029ec:	e006      	b.n	80029fc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ee:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4927      	ldr	r1, [pc, #156]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4921      	ldr	r1, [pc, #132]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a16:	4b1f      	ldr	r3, [pc, #124]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	491d      	ldr	r1, [pc, #116]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d006      	beq.n	8002a3e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	4917      	ldr	r1, [pc, #92]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
 8002a3c:	e006      	b.n	8002a4c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	4913      	ldr	r1, [pc, #76]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01f      	beq.n	8002a98 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a58:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	490d      	ldr	r1, [pc, #52]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]
 8002a64:	e01f      	b.n	8002aa6 <HAL_GPIO_Init+0x2d2>
 8002a66:	bf00      	nop
 8002a68:	10320000 	.word	0x10320000
 8002a6c:	10310000 	.word	0x10310000
 8002a70:	10220000 	.word	0x10220000
 8002a74:	10210000 	.word	0x10210000
 8002a78:	10120000 	.word	0x10120000
 8002a7c:	10110000 	.word	0x10110000
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40010800 	.word	0x40010800
 8002a8c:	40010c00 	.word	0x40010c00
 8002a90:	40011000 	.word	0x40011000
 8002a94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_GPIO_Init+0x2f4>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	4909      	ldr	r1, [pc, #36]	; (8002ac8 <HAL_GPIO_Init+0x2f4>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f47f ae96 	bne.w	80027e8 <HAL_GPIO_Init+0x14>
  }
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	372c      	adds	r7, #44	; 0x2c
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40010400 	.word	0x40010400

08002acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	e001      	b.n	8002aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	807b      	strh	r3, [r7, #2]
 8002b06:	4613      	mov	r3, r2
 8002b08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b0a:	787b      	ldrb	r3, [r7, #1]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b10:	887a      	ldrh	r2, [r7, #2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b16:	e003      	b.n	8002b20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b18:	887b      	ldrh	r3, [r7, #2]
 8002b1a:	041a      	lsls	r2, r3, #16
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	611a      	str	r2, [r3, #16]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b3c:	887a      	ldrh	r2, [r7, #2]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4013      	ands	r3, r2
 8002b42:	041a      	lsls	r2, r3, #16
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	887b      	ldrh	r3, [r7, #2]
 8002b4a:	400b      	ands	r3, r1
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	611a      	str	r2, [r3, #16]
}
 8002b52:	bf00      	nop
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e272      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8087 	beq.w	8002c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b7c:	4b92      	ldr	r3, [pc, #584]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d00c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b88:	4b8f      	ldr	r3, [pc, #572]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d112      	bne.n	8002bba <HAL_RCC_OscConfig+0x5e>
 8002b94:	4b8c      	ldr	r3, [pc, #560]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d10b      	bne.n	8002bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	4b89      	ldr	r3, [pc, #548]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d06c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x12c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d168      	bne.n	8002c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e24c      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x76>
 8002bc4:	4b80      	ldr	r3, [pc, #512]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a7f      	ldr	r2, [pc, #508]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	e02e      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b7b      	ldr	r3, [pc, #492]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a7a      	ldr	r2, [pc, #488]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b78      	ldr	r3, [pc, #480]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a77      	ldr	r2, [pc, #476]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0xbc>
 8002bfe:	4b72      	ldr	r3, [pc, #456]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a71      	ldr	r2, [pc, #452]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6e      	ldr	r2, [pc, #440]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xd4>
 8002c18:	4b6b      	ldr	r3, [pc, #428]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a6a      	ldr	r2, [pc, #424]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b68      	ldr	r3, [pc, #416]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a67      	ldr	r2, [pc, #412]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff fc02 	bl	8002440 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff fbfe 	bl	8002440 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e200      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b5d      	ldr	r3, [pc, #372]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xe4>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fbee 	bl	8002440 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff fbea 	bl	8002440 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1ec      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x10c>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d063      	beq.n	8002d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c96:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ca2:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x18c>
 8002cae:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x176>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1c0      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4939      	ldr	r1, [pc, #228]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e03a      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7ff fba3 	bl	8002440 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7ff fb9f 	bl	8002440 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e1a1      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	4b2d      	ldr	r3, [pc, #180]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4927      	ldr	r1, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e015      	b.n	8002d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7ff fb82 	bl	8002440 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d40:	f7ff fb7e 	bl	8002440 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e180      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03a      	beq.n	8002de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d019      	beq.n	8002da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_RCC_OscConfig+0x274>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d78:	f7ff fb62 	bl	8002440 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d80:	f7ff fb5e 	bl	8002440 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e160      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f000 face 	bl	8003340 <RCC_Delay>
 8002da4:	e01c      	b.n	8002de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_RCC_OscConfig+0x274>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dac:	f7ff fb48 	bl	8002440 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db2:	e00f      	b.n	8002dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db4:	f7ff fb44 	bl	8002440 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d908      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e146      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	42420000 	.word	0x42420000
 8002dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b92      	ldr	r3, [pc, #584]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e9      	bne.n	8002db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a6 	beq.w	8002f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df2:	4b8b      	ldr	r3, [pc, #556]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	4b88      	ldr	r3, [pc, #544]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a87      	ldr	r2, [pc, #540]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]
 8002e0a:	4b85      	ldr	r3, [pc, #532]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e16:	2301      	movs	r3, #1
 8002e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b82      	ldr	r3, [pc, #520]	; (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d118      	bne.n	8002e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e26:	4b7f      	ldr	r3, [pc, #508]	; (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7e      	ldr	r2, [pc, #504]	; (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e32:	f7ff fb05 	bl	8002440 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3a:	f7ff fb01 	bl	8002440 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b64      	cmp	r3, #100	; 0x64
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e103      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4c:	4b75      	ldr	r3, [pc, #468]	; (8003024 <HAL_RCC_OscConfig+0x4c8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x312>
 8002e60:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4a6e      	ldr	r2, [pc, #440]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	e02d      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x334>
 8002e76:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4a69      	ldr	r2, [pc, #420]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6213      	str	r3, [r2, #32]
 8002e82:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4a66      	ldr	r2, [pc, #408]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	6213      	str	r3, [r2, #32]
 8002e8e:	e01c      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d10c      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x356>
 8002e98:	4b61      	ldr	r3, [pc, #388]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4a60      	ldr	r2, [pc, #384]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6213      	str	r3, [r2, #32]
 8002ea4:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4a5d      	ldr	r2, [pc, #372]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6213      	str	r3, [r2, #32]
 8002eb0:	e00b      	b.n	8002eca <HAL_RCC_OscConfig+0x36e>
 8002eb2:	4b5b      	ldr	r3, [pc, #364]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a5a      	ldr	r2, [pc, #360]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	4a57      	ldr	r2, [pc, #348]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d015      	beq.n	8002efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7ff fab5 	bl	8002440 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7ff fab1 	bl	8002440 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0b1      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ee      	beq.n	8002eda <HAL_RCC_OscConfig+0x37e>
 8002efc:	e014      	b.n	8002f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7ff fa9f 	bl	8002440 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7ff fa9b 	bl	8002440 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e09b      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	4b40      	ldr	r3, [pc, #256]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ee      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d105      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2e:	4b3c      	ldr	r3, [pc, #240]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4a3b      	ldr	r2, [pc, #236]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8087 	beq.w	8003052 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f44:	4b36      	ldr	r3, [pc, #216]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d061      	beq.n	8003014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d146      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f58:	4b33      	ldr	r3, [pc, #204]	; (8003028 <HAL_RCC_OscConfig+0x4cc>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7ff fa6f 	bl	8002440 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f66:	f7ff fa6b 	bl	8002440 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e06d      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f78:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8c:	d108      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	4921      	ldr	r1, [pc, #132]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a19      	ldr	r1, [r3, #32]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	491b      	ldr	r1, [pc, #108]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <HAL_RCC_OscConfig+0x4cc>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7ff fa3f 	bl	8002440 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc6:	f7ff fa3b 	bl	8002440 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e03d      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x46a>
 8002fe4:	e035      	b.n	8003052 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7ff fa28 	bl	8002440 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7ff fa24 	bl	8002440 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e026      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x498>
 8003012:	e01e      	b.n	8003052 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e019      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
 8003028:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_OscConfig+0x500>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	429a      	cmp	r2, r3
 800303e:	d106      	bne.n	800304e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0d0      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003074:	4b6a      	ldr	r3, [pc, #424]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d910      	bls.n	80030a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b67      	ldr	r3, [pc, #412]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 0207 	bic.w	r2, r3, #7
 800308a:	4965      	ldr	r1, [pc, #404]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b63      	ldr	r3, [pc, #396]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0b8      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d020      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030bc:	4b59      	ldr	r3, [pc, #356]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a58      	ldr	r2, [pc, #352]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d4:	4b53      	ldr	r3, [pc, #332]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a52      	ldr	r2, [pc, #328]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e0:	4b50      	ldr	r3, [pc, #320]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	494d      	ldr	r1, [pc, #308]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d040      	beq.n	8003180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	4b47      	ldr	r3, [pc, #284]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d115      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e07f      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e073      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06b      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4936      	ldr	r1, [pc, #216]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003150:	f7ff f976 	bl	8002440 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	e00a      	b.n	800316e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7ff f972 	bl	8002440 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e053      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 020c 	and.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	429a      	cmp	r2, r3
 800317e:	d1eb      	bne.n	8003158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d210      	bcs.n	80031b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 0207 	bic.w	r2, r3, #7
 8003196:	4922      	ldr	r1, [pc, #136]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e032      	b.n	8003216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4916      	ldr	r1, [pc, #88]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	490e      	ldr	r1, [pc, #56]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ee:	f000 f821 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031f2:	4602      	mov	r2, r0
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	490a      	ldr	r1, [pc, #40]	; (8003228 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	5ccb      	ldrb	r3, [r1, r3]
 8003202:	fa22 f303 	lsr.w	r3, r2, r3
 8003206:	4a09      	ldr	r2, [pc, #36]	; (800322c <HAL_RCC_ClockConfig+0x1cc>)
 8003208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1d0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f8d4 	bl	80023bc <HAL_InitTick>

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40022000 	.word	0x40022000
 8003224:	40021000 	.word	0x40021000
 8003228:	080058a4 	.word	0x080058a4
 800322c:	20000030 	.word	0x20000030
 8003230:	20000064 	.word	0x20000064

08003234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d002      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x30>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d003      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x36>
 8003262:	e027      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003266:	613b      	str	r3, [r7, #16]
      break;
 8003268:	e027      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	0c9b      	lsrs	r3, r3, #18
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003274:	5cd3      	ldrb	r3, [r2, r3]
 8003276:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d010      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0c5b      	lsrs	r3, r3, #17
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800328e:	5cd3      	ldrb	r3, [r2, r3]
 8003290:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 8003296:	fb03 f202 	mul.w	r2, r3, r2
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e004      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
 80032ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	613b      	str	r3, [r7, #16]
      break;
 80032b2:	e002      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetSysClockFreq+0x98>)
 80032b6:	613b      	str	r3, [r7, #16]
      break;
 80032b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ba:	693b      	ldr	r3, [r7, #16]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	371c      	adds	r7, #28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	007a1200 	.word	0x007a1200
 80032d0:	080058bc 	.word	0x080058bc
 80032d4:	080058cc 	.word	0x080058cc
 80032d8:	003d0900 	.word	0x003d0900

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e0:	4b02      	ldr	r3, [pc, #8]	; (80032ec <HAL_RCC_GetHCLKFreq+0x10>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	20000030 	.word	0x20000030

080032f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032f4:	f7ff fff2 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4903      	ldr	r1, [pc, #12]	; (8003314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	080058b4 	.word	0x080058b4

08003318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800331c:	f7ff ffde 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0adb      	lsrs	r3, r3, #11
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	4903      	ldr	r1, [pc, #12]	; (800333c <HAL_RCC_GetPCLK2Freq+0x24>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	080058b4 	.word	0x080058b4

08003340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <RCC_Delay+0x34>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <RCC_Delay+0x38>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	0a5b      	lsrs	r3, r3, #9
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800335c:	bf00      	nop
  }
  while (Delay --);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	60fa      	str	r2, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f9      	bne.n	800335c <RCC_Delay+0x1c>
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	20000030 	.word	0x20000030
 8003378:	10624dd3 	.word	0x10624dd3

0800337c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e041      	b.n	8003412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fe fc22 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f000 fc24 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d001      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e035      	b.n	80034a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a16      	ldr	r2, [pc, #88]	; (80034ac <HAL_TIM_Base_Start_IT+0x90>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_TIM_Base_Start_IT+0x4e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345e:	d004      	beq.n	800346a <HAL_TIM_Base_Start_IT+0x4e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <HAL_TIM_Base_Start_IT+0x94>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d111      	bne.n	800348e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b06      	cmp	r3, #6
 800347a:	d010      	beq.n	800349e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348c:	e007      	b.n	800349e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40000400 	.word	0x40000400

080034b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e041      	b.n	800354a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f839 	bl	8003552 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f000 fb88 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_TIM_PWM_Start+0x24>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e022      	b.n	80035ce <HAL_TIM_PWM_Start+0x6a>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b04      	cmp	r3, #4
 800358c:	d109      	bne.n	80035a2 <HAL_TIM_PWM_Start+0x3e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e015      	b.n	80035ce <HAL_TIM_PWM_Start+0x6a>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d109      	bne.n	80035bc <HAL_TIM_PWM_Start+0x58>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	e008      	b.n	80035ce <HAL_TIM_PWM_Start+0x6a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e059      	b.n	800368a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_PWM_Start+0x82>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e4:	e013      	b.n	800360e <HAL_TIM_PWM_Start+0xaa>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d104      	bne.n	80035f6 <HAL_TIM_PWM_Start+0x92>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f4:	e00b      	b.n	800360e <HAL_TIM_PWM_Start+0xaa>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_PWM_Start+0xa2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003604:	e003      	b.n	800360e <HAL_TIM_PWM_Start+0xaa>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fd6c 	bl	80040f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <HAL_TIM_PWM_Start+0x130>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d107      	bne.n	8003636 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a16      	ldr	r2, [pc, #88]	; (8003694 <HAL_TIM_PWM_Start+0x130>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_TIM_PWM_Start+0xf0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d004      	beq.n	8003654 <HAL_TIM_PWM_Start+0xf0>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <HAL_TIM_PWM_Start+0x134>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d111      	bne.n	8003678 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b06      	cmp	r3, #6
 8003664:	d010      	beq.n	8003688 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003676:	e007      	b.n	8003688 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40000400 	.word	0x40000400

0800369c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d122      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d11b      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0202 	mvn.w	r2, #2
 80036c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fa76 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa69 	bl	8003bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fa78 	bl	8003be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d122      	bne.n	800374c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d11b      	bne.n	800374c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0204 	mvn.w	r2, #4
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fa4c 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa3f 	bl	8003bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fa4e 	bl	8003be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b08      	cmp	r3, #8
 8003758:	d122      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b08      	cmp	r3, #8
 8003766:	d11b      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0208 	mvn.w	r2, #8
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2204      	movs	r2, #4
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa22 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fa15 	bl	8003bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fa24 	bl	8003be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d122      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0210 	mvn.w	r2, #16
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2208      	movs	r2, #8
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f9f8 	bl	8003bd0 <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f9eb 	bl	8003bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f9fa 	bl	8003be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d10e      	bne.n	8003820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d107      	bne.n	8003820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0201 	mvn.w	r2, #1
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fd42 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382a:	2b80      	cmp	r3, #128	; 0x80
 800382c:	d10e      	bne.n	800384c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d107      	bne.n	800384c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fcd9 	bl	80041fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d10e      	bne.n	8003878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d107      	bne.n	8003878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9be 	bl	8003bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b20      	cmp	r3, #32
 8003884:	d10e      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b20      	cmp	r3, #32
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0220 	mvn.w	r2, #32
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fca4 	bl	80041ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e0ae      	b.n	8003a28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	f200 809f 	bhi.w	8003a18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038da:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	08003915 	.word	0x08003915
 80038e4:	08003a19 	.word	0x08003a19
 80038e8:	08003a19 	.word	0x08003a19
 80038ec:	08003a19 	.word	0x08003a19
 80038f0:	08003955 	.word	0x08003955
 80038f4:	08003a19 	.word	0x08003a19
 80038f8:	08003a19 	.word	0x08003a19
 80038fc:	08003a19 	.word	0x08003a19
 8003900:	08003997 	.word	0x08003997
 8003904:	08003a19 	.word	0x08003a19
 8003908:	08003a19 	.word	0x08003a19
 800390c:	08003a19 	.word	0x08003a19
 8003910:	080039d7 	.word	0x080039d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f9cc 	bl	8003cb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0208 	orr.w	r2, r2, #8
 800392e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6999      	ldr	r1, [r3, #24]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	619a      	str	r2, [r3, #24]
      break;
 8003952:	e064      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fa12 	bl	8003d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800396e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6999      	ldr	r1, [r3, #24]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	619a      	str	r2, [r3, #24]
      break;
 8003994:	e043      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fa5b 	bl	8003e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0208 	orr.w	r2, r2, #8
 80039b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0204 	bic.w	r2, r2, #4
 80039c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69d9      	ldr	r1, [r3, #28]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	61da      	str	r2, [r3, #28]
      break;
 80039d4:	e023      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 faa5 	bl	8003f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69d9      	ldr	r1, [r3, #28]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	021a      	lsls	r2, r3, #8
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	61da      	str	r2, [r3, #28]
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_TIM_ConfigClockSource+0x1c>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e0b4      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x186>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a84:	d03e      	beq.n	8003b04 <HAL_TIM_ConfigClockSource+0xd4>
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8a:	f200 8087 	bhi.w	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a92:	f000 8086 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x172>
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9a:	d87f      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003a9c:	2b70      	cmp	r3, #112	; 0x70
 8003a9e:	d01a      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0xa6>
 8003aa0:	2b70      	cmp	r3, #112	; 0x70
 8003aa2:	d87b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003aa4:	2b60      	cmp	r3, #96	; 0x60
 8003aa6:	d050      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x11a>
 8003aa8:	2b60      	cmp	r3, #96	; 0x60
 8003aaa:	d877      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b50      	cmp	r3, #80	; 0x50
 8003aae:	d03c      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0xfa>
 8003ab0:	2b50      	cmp	r3, #80	; 0x50
 8003ab2:	d873      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d058      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x13a>
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d86f      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003abc:	2b30      	cmp	r3, #48	; 0x30
 8003abe:	d064      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15a>
 8003ac0:	2b30      	cmp	r3, #48	; 0x30
 8003ac2:	d86b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d060      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15a>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d867      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d05c      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15a>
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d05a      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15a>
 8003ad4:	e062      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ae6:	f000 fae6 	bl	80040b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	609a      	str	r2, [r3, #8]
      break;
 8003b02:	e04f      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b14:	f000 facf 	bl	80040b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b26:	609a      	str	r2, [r3, #8]
      break;
 8003b28:	e03c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b36:	461a      	mov	r2, r3
 8003b38:	f000 fa46 	bl	8003fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2150      	movs	r1, #80	; 0x50
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fa9d 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003b48:	e02c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b56:	461a      	mov	r2, r3
 8003b58:	f000 fa64 	bl	8004024 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2160      	movs	r1, #96	; 0x60
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fa8d 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003b68:	e01c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b76:	461a      	mov	r2, r3
 8003b78:	f000 fa26 	bl	8003fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fa7d 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003b88:	e00c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f000 fa74 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003b9a:	e003      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba0:	e000      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr

08003be2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
	...

08003c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <TIM_Base_SetConfig+0xa8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_Base_SetConfig+0x28>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d003      	beq.n	8003c30 <TIM_Base_SetConfig+0x28>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <TIM_Base_SetConfig+0xac>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d108      	bne.n	8003c42 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <TIM_Base_SetConfig+0xa8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <TIM_Base_SetConfig+0x52>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d003      	beq.n	8003c5a <TIM_Base_SetConfig+0x52>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <TIM_Base_SetConfig+0xac>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d108      	bne.n	8003c6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <TIM_Base_SetConfig+0xa8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d103      	bne.n	8003ca0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	615a      	str	r2, [r3, #20]
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40000400 	.word	0x40000400

08003cb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f023 0201 	bic.w	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 0302 	bic.w	r3, r3, #2
 8003d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <TIM_OC1_SetConfig+0xc8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d10c      	bne.n	8003d2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 0308 	bic.w	r3, r3, #8
 8003d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <TIM_OC1_SetConfig+0xc8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d111      	bne.n	8003d5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	621a      	str	r2, [r3, #32]
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40012c00 	.word	0x40012c00

08003d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f023 0210 	bic.w	r2, r3, #16
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f023 0320 	bic.w	r3, r3, #32
 8003dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <TIM_OC2_SetConfig+0xd0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10d      	bne.n	8003e00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <TIM_OC2_SetConfig+0xd0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d113      	bne.n	8003e30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	40012c00 	.word	0x40012c00

08003e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0303 	bic.w	r3, r3, #3
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	; (8003f28 <TIM_OC3_SetConfig+0xd0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d10d      	bne.n	8003ed2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <TIM_OC3_SetConfig+0xd0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d113      	bne.n	8003f02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	621a      	str	r2, [r3, #32]
}
 8003f1c:	bf00      	nop
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40012c00 	.word	0x40012c00

08003f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	031b      	lsls	r3, r3, #12
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <TIM_OC4_SetConfig+0x98>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d109      	bne.n	8003fa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	019b      	lsls	r3, r3, #6
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr
 8003fc4:	40012c00 	.word	0x40012c00

08003fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0201 	bic.w	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 030a 	bic.w	r3, r3, #10
 8004004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0210 	bic.w	r2, r3, #16
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800404e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	031b      	lsls	r3, r3, #12
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004060:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	621a      	str	r2, [r3, #32]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004082:	b480      	push	{r7}
 8004084:	b085      	sub	sp, #20
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	f043 0307 	orr.w	r3, r3, #7
 80040a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr

080040b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	021a      	lsls	r2, r3, #8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	431a      	orrs	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4313      	orrs	r3, r2
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	609a      	str	r2, [r3, #8]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2201      	movs	r2, #1
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	43db      	mvns	r3, r3
 8004116:	401a      	ands	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004150:	2302      	movs	r3, #2
 8004152:	e041      	b.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d009      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d004      	beq.n	80041ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d10c      	bne.n	80041c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40000400 	.word	0x40000400

080041ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e042      	b.n	80042a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fd fd4a 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2224      	movs	r2, #36	; 0x24
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fdc5 	bl	8004de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	4613      	mov	r3, r2
 80042be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d16d      	bne.n	80043ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Transmit+0x2c>
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e066      	b.n	80043ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2221      	movs	r2, #33	; 0x21
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ee:	f7fe f8a7 	bl	8002440 <HAL_GetTick>
 80042f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004308:	d108      	bne.n	800431c <HAL_UART_Transmit+0x6c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d104      	bne.n	800431c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e003      	b.n	8004324 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004324:	e02a      	b.n	800437c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	2180      	movs	r1, #128	; 0x80
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fb14 	bl	800495e <UART_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e036      	b.n	80043ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004354:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	3302      	adds	r3, #2
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e007      	b.n	800436e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	3301      	adds	r3, #1
 800436c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1cf      	bne.n	8004326 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	2140      	movs	r1, #64	; 0x40
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fae4 	bl	800495e <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e006      	b.n	80043ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	4613      	mov	r3, r2
 80043c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d112      	bne.n	80043f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_UART_Receive_IT+0x26>
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e00b      	b.n	80043f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	461a      	mov	r2, r3
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fb24 	bl	8004a3a <UART_Start_Receive_IT>
 80043f2:	4603      	mov	r3, r0
 80043f4:	e000      	b.n	80043f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b0ba      	sub	sp, #232	; 0xe8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004426:	2300      	movs	r3, #0
 8004428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800442c:	2300      	movs	r3, #0
 800442e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800443e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10f      	bne.n	8004466 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <HAL_UART_IRQHandler+0x66>
 8004452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fc01 	bl	8004c66 <UART_Receive_IT>
      return;
 8004464:	e25b      	b.n	800491e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80de 	beq.w	800462c <HAL_UART_IRQHandler+0x22c>
 8004470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d106      	bne.n	800448a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800447c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004480:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80d1 	beq.w	800462c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <HAL_UART_IRQHandler+0xae>
 8004496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f043 0201 	orr.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_UART_IRQHandler+0xd2>
 80044ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	f043 0202 	orr.w	r2, r3, #2
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <HAL_UART_IRQHandler+0xf6>
 80044de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	f043 0204 	orr.w	r2, r3, #4
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d011      	beq.n	8004526 <HAL_UART_IRQHandler+0x126>
 8004502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d105      	bne.n	800451a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800450e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	f043 0208 	orr.w	r2, r3, #8
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 81f2 	beq.w	8004914 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_UART_IRQHandler+0x14e>
 800453c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fb8c 	bl	8004c66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d103      	bne.n	800457a <HAL_UART_IRQHandler+0x17a>
 8004572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d04f      	beq.n	800461a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa96 	bl	8004aac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d041      	beq.n	8004612 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3314      	adds	r3, #20
 8004594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3314      	adds	r3, #20
 80045b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1d9      	bne.n	800458e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d013      	beq.n	800460a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	4a7e      	ldr	r2, [pc, #504]	; (80047e0 <HAL_UART_IRQHandler+0x3e0>)
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe f878 	bl	80026e4 <HAL_DMA_Abort_IT>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d016      	beq.n	8004628 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004604:	4610      	mov	r0, r2
 8004606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004608:	e00e      	b.n	8004628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f993 	bl	8004936 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	e00a      	b.n	8004628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f98f 	bl	8004936 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004618:	e006      	b.n	8004628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f98b 	bl	8004936 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004626:	e175      	b.n	8004914 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004628:	bf00      	nop
    return;
 800462a:	e173      	b.n	8004914 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	2b01      	cmp	r3, #1
 8004632:	f040 814f 	bne.w	80048d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8148 	beq.w	80048d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8141 	beq.w	80048d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80b6 	beq.w	80047e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004684:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8145 	beq.w	8004918 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004696:	429a      	cmp	r2, r3
 8004698:	f080 813e 	bcs.w	8004918 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	f000 8088 	beq.w	80047c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046dc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1d9      	bne.n	80046b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3314      	adds	r3, #20
 8004702:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800470c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004720:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004724:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004728:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e1      	bne.n	80046fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3314      	adds	r3, #20
 800473e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800474a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3314      	adds	r3, #20
 8004758:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800475c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800475e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004762:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800476a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e3      	bne.n	8004738 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800478e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004790:	f023 0310 	bic.w	r3, r3, #16
 8004794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80047a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80047a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e3      	bne.n	800477e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd ff57 	bl	800266e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f8b6 	bl	8004948 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047dc:	e09c      	b.n	8004918 <HAL_UART_IRQHandler+0x518>
 80047de:	bf00      	nop
 80047e0:	08004b71 	.word	0x08004b71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 808e 	beq.w	800491c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8089 	beq.w	800491c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	330c      	adds	r3, #12
 8004810:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800482e:	647a      	str	r2, [r7, #68]	; 0x44
 8004830:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e3      	bne.n	800480a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3314      	adds	r3, #20
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	623b      	str	r3, [r7, #32]
   return(result);
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3314      	adds	r3, #20
 8004862:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004866:	633a      	str	r2, [r7, #48]	; 0x30
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800486c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e3      	bne.n	8004842 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	60fb      	str	r3, [r7, #12]
   return(result);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0310 	bic.w	r3, r3, #16
 800489e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048ac:	61fa      	str	r2, [r7, #28]
 80048ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	69b9      	ldr	r1, [r7, #24]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	617b      	str	r3, [r7, #20]
   return(result);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e3      	bne.n	8004888 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f83b 	bl	8004948 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048d2:	e023      	b.n	800491c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d009      	beq.n	80048f4 <HAL_UART_IRQHandler+0x4f4>
 80048e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f953 	bl	8004b98 <UART_Transmit_IT>
    return;
 80048f2:	e014      	b.n	800491e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00e      	beq.n	800491e <HAL_UART_IRQHandler+0x51e>
 8004900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f992 	bl	8004c36 <UART_EndTransmit_IT>
    return;
 8004912:	e004      	b.n	800491e <HAL_UART_IRQHandler+0x51e>
    return;
 8004914:	bf00      	nop
 8004916:	e002      	b.n	800491e <HAL_UART_IRQHandler+0x51e>
      return;
 8004918:	bf00      	nop
 800491a:	e000      	b.n	800491e <HAL_UART_IRQHandler+0x51e>
      return;
 800491c:	bf00      	nop
  }
}
 800491e:	37e8      	adds	r7, #232	; 0xe8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b090      	sub	sp, #64	; 0x40
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	4613      	mov	r3, r2
 800496c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496e:	e050      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d04c      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <UART_WaitOnFlagUntilTimeout+0x30>
 800497e:	f7fd fd5f 	bl	8002440 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800498a:	429a      	cmp	r2, r3
 800498c:	d241      	bcs.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	330c      	adds	r3, #12
 80049ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049ae:	637a      	str	r2, [r7, #52]	; 0x34
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e5      	bne.n	800498e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	613b      	str	r3, [r7, #16]
   return(result);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3314      	adds	r3, #20
 80049e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e2:	623a      	str	r2, [r7, #32]
 80049e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	69f9      	ldr	r1, [r7, #28]
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e5      	bne.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e00f      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d09f      	beq.n	8004970 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3740      	adds	r7, #64	; 0x40
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	4613      	mov	r3, r2
 8004a46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	88fa      	ldrh	r2, [r7, #6]
 8004a52:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2222      	movs	r2, #34	; 0x22
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0220 	orr.w	r2, r2, #32
 8004a9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b095      	sub	sp, #84	; 0x54
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ad4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3314      	adds	r3, #20
 8004aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3314      	adds	r3, #20
 8004b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e5      	bne.n	8004ae8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d119      	bne.n	8004b58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f023 0310 	bic.w	r3, r3, #16
 8004b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b44:	61ba      	str	r2, [r7, #24]
 8004b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6979      	ldr	r1, [r7, #20]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	613b      	str	r3, [r7, #16]
   return(result);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e5      	bne.n	8004b24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b66:	bf00      	nop
 8004b68:	3754      	adds	r7, #84	; 0x54
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff fed3 	bl	8004936 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b21      	cmp	r3, #33	; 0x21
 8004baa:	d13e      	bne.n	8004c2a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb4:	d114      	bne.n	8004be0 <UART_Transmit_IT+0x48>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d110      	bne.n	8004be0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	1c9a      	adds	r2, r3, #2
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	621a      	str	r2, [r3, #32]
 8004bde:	e008      	b.n	8004bf2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	1c59      	adds	r1, r3, #1
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6211      	str	r1, [r2, #32]
 8004bea:	781a      	ldrb	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
  }
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr

08004c36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fe64 	bl	8004924 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b08c      	sub	sp, #48	; 0x30
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b22      	cmp	r3, #34	; 0x22
 8004c78:	f040 80ae 	bne.w	8004dd8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c84:	d117      	bne.n	8004cb6 <UART_Receive_IT+0x50>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d113      	bne.n	8004cb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb4:	e026      	b.n	8004d04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc8:	d007      	beq.n	8004cda <UART_Receive_IT+0x74>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <UART_Receive_IT+0x82>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	e008      	b.n	8004cfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4619      	mov	r1, r3
 8004d12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d15d      	bne.n	8004dd4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0220 	bic.w	r2, r2, #32
 8004d26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d135      	bne.n	8004dca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	613b      	str	r3, [r7, #16]
   return(result);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 0310 	bic.w	r3, r3, #16
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d84:	623a      	str	r2, [r7, #32]
 8004d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d10a      	bne.n	8004dbc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fdc0 	bl	8004948 <HAL_UARTEx_RxEventCallback>
 8004dc8:	e002      	b.n	8004dd0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc f860 	bl	8000e90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e002      	b.n	8004dda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e000      	b.n	8004dda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3730      	adds	r7, #48	; 0x30
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e1e:	f023 030c 	bic.w	r3, r3, #12
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <UART_SetConfig+0x114>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d103      	bne.n	8004e54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7fe fa64 	bl	8003318 <HAL_RCC_GetPCLK2Freq>
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	e002      	b.n	8004e5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e54:	f7fe fa4c 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 8004e58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009a      	lsls	r2, r3, #2
 8004e64:	441a      	add	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	4a22      	ldr	r2, [pc, #136]	; (8004efc <UART_SetConfig+0x118>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	0119      	lsls	r1, r3, #4
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	009a      	lsls	r2, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e90:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <UART_SetConfig+0x118>)
 8004e92:	fba3 0302 	umull	r0, r3, r3, r2
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	2064      	movs	r0, #100	; 0x64
 8004e9a:	fb00 f303 	mul.w	r3, r0, r3
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	3332      	adds	r3, #50	; 0x32
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <UART_SetConfig+0x118>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eb0:	4419      	add	r1, r3
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009a      	lsls	r2, r3, #2
 8004ebc:	441a      	add	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <UART_SetConfig+0x118>)
 8004eca:	fba3 0302 	umull	r0, r3, r3, r2
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	2064      	movs	r0, #100	; 0x64
 8004ed2:	fb00 f303 	mul.w	r3, r0, r3
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	3332      	adds	r3, #50	; 0x32
 8004edc:	4a07      	ldr	r2, [pc, #28]	; (8004efc <UART_SetConfig+0x118>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	f003 020f 	and.w	r2, r3, #15
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	440a      	add	r2, r1
 8004eee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	51eb851f 	.word	0x51eb851f

08004f00 <siprintf>:
 8004f00:	b40e      	push	{r1, r2, r3}
 8004f02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f06:	b500      	push	{lr}
 8004f08:	b09c      	sub	sp, #112	; 0x70
 8004f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f0c:	9002      	str	r0, [sp, #8]
 8004f0e:	9006      	str	r0, [sp, #24]
 8004f10:	9107      	str	r1, [sp, #28]
 8004f12:	9104      	str	r1, [sp, #16]
 8004f14:	4808      	ldr	r0, [pc, #32]	; (8004f38 <siprintf+0x38>)
 8004f16:	4909      	ldr	r1, [pc, #36]	; (8004f3c <siprintf+0x3c>)
 8004f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f1c:	9105      	str	r1, [sp, #20]
 8004f1e:	6800      	ldr	r0, [r0, #0]
 8004f20:	a902      	add	r1, sp, #8
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	f000 f98e 	bl	8005244 <_svfiprintf_r>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	9b02      	ldr	r3, [sp, #8]
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	b01c      	add	sp, #112	; 0x70
 8004f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f34:	b003      	add	sp, #12
 8004f36:	4770      	bx	lr
 8004f38:	200000b8 	.word	0x200000b8
 8004f3c:	ffff0208 	.word	0xffff0208

08004f40 <memset>:
 8004f40:	4603      	mov	r3, r0
 8004f42:	4402      	add	r2, r0
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d100      	bne.n	8004f4a <memset+0xa>
 8004f48:	4770      	bx	lr
 8004f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4e:	e7f9      	b.n	8004f44 <memset+0x4>

08004f50 <__errno>:
 8004f50:	4b01      	ldr	r3, [pc, #4]	; (8004f58 <__errno+0x8>)
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	200000b8 	.word	0x200000b8

08004f5c <__libc_init_array>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	2600      	movs	r6, #0
 8004f60:	4d0c      	ldr	r5, [pc, #48]	; (8004f94 <__libc_init_array+0x38>)
 8004f62:	4c0d      	ldr	r4, [pc, #52]	; (8004f98 <__libc_init_array+0x3c>)
 8004f64:	1b64      	subs	r4, r4, r5
 8004f66:	10a4      	asrs	r4, r4, #2
 8004f68:	42a6      	cmp	r6, r4
 8004f6a:	d109      	bne.n	8004f80 <__libc_init_array+0x24>
 8004f6c:	f000 fc7a 	bl	8005864 <_init>
 8004f70:	2600      	movs	r6, #0
 8004f72:	4d0a      	ldr	r5, [pc, #40]	; (8004f9c <__libc_init_array+0x40>)
 8004f74:	4c0a      	ldr	r4, [pc, #40]	; (8004fa0 <__libc_init_array+0x44>)
 8004f76:	1b64      	subs	r4, r4, r5
 8004f78:	10a4      	asrs	r4, r4, #2
 8004f7a:	42a6      	cmp	r6, r4
 8004f7c:	d105      	bne.n	8004f8a <__libc_init_array+0x2e>
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f84:	4798      	blx	r3
 8004f86:	3601      	adds	r6, #1
 8004f88:	e7ee      	b.n	8004f68 <__libc_init_array+0xc>
 8004f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8e:	4798      	blx	r3
 8004f90:	3601      	adds	r6, #1
 8004f92:	e7f2      	b.n	8004f7a <__libc_init_array+0x1e>
 8004f94:	08005904 	.word	0x08005904
 8004f98:	08005904 	.word	0x08005904
 8004f9c:	08005904 	.word	0x08005904
 8004fa0:	08005908 	.word	0x08005908

08004fa4 <__retarget_lock_acquire_recursive>:
 8004fa4:	4770      	bx	lr

08004fa6 <__retarget_lock_release_recursive>:
 8004fa6:	4770      	bx	lr

08004fa8 <_free_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4605      	mov	r5, r0
 8004fac:	2900      	cmp	r1, #0
 8004fae:	d040      	beq.n	8005032 <_free_r+0x8a>
 8004fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fb4:	1f0c      	subs	r4, r1, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bfb8      	it	lt
 8004fba:	18e4      	addlt	r4, r4, r3
 8004fbc:	f000 f8dc 	bl	8005178 <__malloc_lock>
 8004fc0:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <_free_r+0x8c>)
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	b933      	cbnz	r3, 8004fd4 <_free_r+0x2c>
 8004fc6:	6063      	str	r3, [r4, #4]
 8004fc8:	6014      	str	r4, [r2, #0]
 8004fca:	4628      	mov	r0, r5
 8004fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fd0:	f000 b8d8 	b.w	8005184 <__malloc_unlock>
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	d908      	bls.n	8004fea <_free_r+0x42>
 8004fd8:	6820      	ldr	r0, [r4, #0]
 8004fda:	1821      	adds	r1, r4, r0
 8004fdc:	428b      	cmp	r3, r1
 8004fde:	bf01      	itttt	eq
 8004fe0:	6819      	ldreq	r1, [r3, #0]
 8004fe2:	685b      	ldreq	r3, [r3, #4]
 8004fe4:	1809      	addeq	r1, r1, r0
 8004fe6:	6021      	streq	r1, [r4, #0]
 8004fe8:	e7ed      	b.n	8004fc6 <_free_r+0x1e>
 8004fea:	461a      	mov	r2, r3
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	b10b      	cbz	r3, 8004ff4 <_free_r+0x4c>
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	d9fa      	bls.n	8004fea <_free_r+0x42>
 8004ff4:	6811      	ldr	r1, [r2, #0]
 8004ff6:	1850      	adds	r0, r2, r1
 8004ff8:	42a0      	cmp	r0, r4
 8004ffa:	d10b      	bne.n	8005014 <_free_r+0x6c>
 8004ffc:	6820      	ldr	r0, [r4, #0]
 8004ffe:	4401      	add	r1, r0
 8005000:	1850      	adds	r0, r2, r1
 8005002:	4283      	cmp	r3, r0
 8005004:	6011      	str	r1, [r2, #0]
 8005006:	d1e0      	bne.n	8004fca <_free_r+0x22>
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	4408      	add	r0, r1
 800500e:	6010      	str	r0, [r2, #0]
 8005010:	6053      	str	r3, [r2, #4]
 8005012:	e7da      	b.n	8004fca <_free_r+0x22>
 8005014:	d902      	bls.n	800501c <_free_r+0x74>
 8005016:	230c      	movs	r3, #12
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	e7d6      	b.n	8004fca <_free_r+0x22>
 800501c:	6820      	ldr	r0, [r4, #0]
 800501e:	1821      	adds	r1, r4, r0
 8005020:	428b      	cmp	r3, r1
 8005022:	bf01      	itttt	eq
 8005024:	6819      	ldreq	r1, [r3, #0]
 8005026:	685b      	ldreq	r3, [r3, #4]
 8005028:	1809      	addeq	r1, r1, r0
 800502a:	6021      	streq	r1, [r4, #0]
 800502c:	6063      	str	r3, [r4, #4]
 800502e:	6054      	str	r4, [r2, #4]
 8005030:	e7cb      	b.n	8004fca <_free_r+0x22>
 8005032:	bd38      	pop	{r3, r4, r5, pc}
 8005034:	200004e4 	.word	0x200004e4

08005038 <sbrk_aligned>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4e0e      	ldr	r6, [pc, #56]	; (8005074 <sbrk_aligned+0x3c>)
 800503c:	460c      	mov	r4, r1
 800503e:	6831      	ldr	r1, [r6, #0]
 8005040:	4605      	mov	r5, r0
 8005042:	b911      	cbnz	r1, 800504a <sbrk_aligned+0x12>
 8005044:	f000 fbaa 	bl	800579c <_sbrk_r>
 8005048:	6030      	str	r0, [r6, #0]
 800504a:	4621      	mov	r1, r4
 800504c:	4628      	mov	r0, r5
 800504e:	f000 fba5 	bl	800579c <_sbrk_r>
 8005052:	1c43      	adds	r3, r0, #1
 8005054:	d00a      	beq.n	800506c <sbrk_aligned+0x34>
 8005056:	1cc4      	adds	r4, r0, #3
 8005058:	f024 0403 	bic.w	r4, r4, #3
 800505c:	42a0      	cmp	r0, r4
 800505e:	d007      	beq.n	8005070 <sbrk_aligned+0x38>
 8005060:	1a21      	subs	r1, r4, r0
 8005062:	4628      	mov	r0, r5
 8005064:	f000 fb9a 	bl	800579c <_sbrk_r>
 8005068:	3001      	adds	r0, #1
 800506a:	d101      	bne.n	8005070 <sbrk_aligned+0x38>
 800506c:	f04f 34ff 	mov.w	r4, #4294967295
 8005070:	4620      	mov	r0, r4
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	200004e8 	.word	0x200004e8

08005078 <_malloc_r>:
 8005078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800507c:	1ccd      	adds	r5, r1, #3
 800507e:	f025 0503 	bic.w	r5, r5, #3
 8005082:	3508      	adds	r5, #8
 8005084:	2d0c      	cmp	r5, #12
 8005086:	bf38      	it	cc
 8005088:	250c      	movcc	r5, #12
 800508a:	2d00      	cmp	r5, #0
 800508c:	4607      	mov	r7, r0
 800508e:	db01      	blt.n	8005094 <_malloc_r+0x1c>
 8005090:	42a9      	cmp	r1, r5
 8005092:	d905      	bls.n	80050a0 <_malloc_r+0x28>
 8005094:	230c      	movs	r3, #12
 8005096:	2600      	movs	r6, #0
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	4630      	mov	r0, r6
 800509c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005174 <_malloc_r+0xfc>
 80050a4:	f000 f868 	bl	8005178 <__malloc_lock>
 80050a8:	f8d8 3000 	ldr.w	r3, [r8]
 80050ac:	461c      	mov	r4, r3
 80050ae:	bb5c      	cbnz	r4, 8005108 <_malloc_r+0x90>
 80050b0:	4629      	mov	r1, r5
 80050b2:	4638      	mov	r0, r7
 80050b4:	f7ff ffc0 	bl	8005038 <sbrk_aligned>
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	4604      	mov	r4, r0
 80050bc:	d155      	bne.n	800516a <_malloc_r+0xf2>
 80050be:	f8d8 4000 	ldr.w	r4, [r8]
 80050c2:	4626      	mov	r6, r4
 80050c4:	2e00      	cmp	r6, #0
 80050c6:	d145      	bne.n	8005154 <_malloc_r+0xdc>
 80050c8:	2c00      	cmp	r4, #0
 80050ca:	d048      	beq.n	800515e <_malloc_r+0xe6>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	4631      	mov	r1, r6
 80050d0:	4638      	mov	r0, r7
 80050d2:	eb04 0903 	add.w	r9, r4, r3
 80050d6:	f000 fb61 	bl	800579c <_sbrk_r>
 80050da:	4581      	cmp	r9, r0
 80050dc:	d13f      	bne.n	800515e <_malloc_r+0xe6>
 80050de:	6821      	ldr	r1, [r4, #0]
 80050e0:	4638      	mov	r0, r7
 80050e2:	1a6d      	subs	r5, r5, r1
 80050e4:	4629      	mov	r1, r5
 80050e6:	f7ff ffa7 	bl	8005038 <sbrk_aligned>
 80050ea:	3001      	adds	r0, #1
 80050ec:	d037      	beq.n	800515e <_malloc_r+0xe6>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	442b      	add	r3, r5
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	f8d8 3000 	ldr.w	r3, [r8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d038      	beq.n	800516e <_malloc_r+0xf6>
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	42a2      	cmp	r2, r4
 8005100:	d12b      	bne.n	800515a <_malloc_r+0xe2>
 8005102:	2200      	movs	r2, #0
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	e00f      	b.n	8005128 <_malloc_r+0xb0>
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	1b52      	subs	r2, r2, r5
 800510c:	d41f      	bmi.n	800514e <_malloc_r+0xd6>
 800510e:	2a0b      	cmp	r2, #11
 8005110:	d917      	bls.n	8005142 <_malloc_r+0xca>
 8005112:	1961      	adds	r1, r4, r5
 8005114:	42a3      	cmp	r3, r4
 8005116:	6025      	str	r5, [r4, #0]
 8005118:	bf18      	it	ne
 800511a:	6059      	strne	r1, [r3, #4]
 800511c:	6863      	ldr	r3, [r4, #4]
 800511e:	bf08      	it	eq
 8005120:	f8c8 1000 	streq.w	r1, [r8]
 8005124:	5162      	str	r2, [r4, r5]
 8005126:	604b      	str	r3, [r1, #4]
 8005128:	4638      	mov	r0, r7
 800512a:	f104 060b 	add.w	r6, r4, #11
 800512e:	f000 f829 	bl	8005184 <__malloc_unlock>
 8005132:	f026 0607 	bic.w	r6, r6, #7
 8005136:	1d23      	adds	r3, r4, #4
 8005138:	1af2      	subs	r2, r6, r3
 800513a:	d0ae      	beq.n	800509a <_malloc_r+0x22>
 800513c:	1b9b      	subs	r3, r3, r6
 800513e:	50a3      	str	r3, [r4, r2]
 8005140:	e7ab      	b.n	800509a <_malloc_r+0x22>
 8005142:	42a3      	cmp	r3, r4
 8005144:	6862      	ldr	r2, [r4, #4]
 8005146:	d1dd      	bne.n	8005104 <_malloc_r+0x8c>
 8005148:	f8c8 2000 	str.w	r2, [r8]
 800514c:	e7ec      	b.n	8005128 <_malloc_r+0xb0>
 800514e:	4623      	mov	r3, r4
 8005150:	6864      	ldr	r4, [r4, #4]
 8005152:	e7ac      	b.n	80050ae <_malloc_r+0x36>
 8005154:	4634      	mov	r4, r6
 8005156:	6876      	ldr	r6, [r6, #4]
 8005158:	e7b4      	b.n	80050c4 <_malloc_r+0x4c>
 800515a:	4613      	mov	r3, r2
 800515c:	e7cc      	b.n	80050f8 <_malloc_r+0x80>
 800515e:	230c      	movs	r3, #12
 8005160:	4638      	mov	r0, r7
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	f000 f80e 	bl	8005184 <__malloc_unlock>
 8005168:	e797      	b.n	800509a <_malloc_r+0x22>
 800516a:	6025      	str	r5, [r4, #0]
 800516c:	e7dc      	b.n	8005128 <_malloc_r+0xb0>
 800516e:	605b      	str	r3, [r3, #4]
 8005170:	deff      	udf	#255	; 0xff
 8005172:	bf00      	nop
 8005174:	200004e4 	.word	0x200004e4

08005178 <__malloc_lock>:
 8005178:	4801      	ldr	r0, [pc, #4]	; (8005180 <__malloc_lock+0x8>)
 800517a:	f7ff bf13 	b.w	8004fa4 <__retarget_lock_acquire_recursive>
 800517e:	bf00      	nop
 8005180:	200004e0 	.word	0x200004e0

08005184 <__malloc_unlock>:
 8005184:	4801      	ldr	r0, [pc, #4]	; (800518c <__malloc_unlock+0x8>)
 8005186:	f7ff bf0e 	b.w	8004fa6 <__retarget_lock_release_recursive>
 800518a:	bf00      	nop
 800518c:	200004e0 	.word	0x200004e0

08005190 <__ssputs_r>:
 8005190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005194:	461f      	mov	r7, r3
 8005196:	688e      	ldr	r6, [r1, #8]
 8005198:	4682      	mov	sl, r0
 800519a:	42be      	cmp	r6, r7
 800519c:	460c      	mov	r4, r1
 800519e:	4690      	mov	r8, r2
 80051a0:	680b      	ldr	r3, [r1, #0]
 80051a2:	d82c      	bhi.n	80051fe <__ssputs_r+0x6e>
 80051a4:	898a      	ldrh	r2, [r1, #12]
 80051a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051aa:	d026      	beq.n	80051fa <__ssputs_r+0x6a>
 80051ac:	6965      	ldr	r5, [r4, #20]
 80051ae:	6909      	ldr	r1, [r1, #16]
 80051b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051b4:	eba3 0901 	sub.w	r9, r3, r1
 80051b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051bc:	1c7b      	adds	r3, r7, #1
 80051be:	444b      	add	r3, r9
 80051c0:	106d      	asrs	r5, r5, #1
 80051c2:	429d      	cmp	r5, r3
 80051c4:	bf38      	it	cc
 80051c6:	461d      	movcc	r5, r3
 80051c8:	0553      	lsls	r3, r2, #21
 80051ca:	d527      	bpl.n	800521c <__ssputs_r+0x8c>
 80051cc:	4629      	mov	r1, r5
 80051ce:	f7ff ff53 	bl	8005078 <_malloc_r>
 80051d2:	4606      	mov	r6, r0
 80051d4:	b360      	cbz	r0, 8005230 <__ssputs_r+0xa0>
 80051d6:	464a      	mov	r2, r9
 80051d8:	6921      	ldr	r1, [r4, #16]
 80051da:	f000 fafd 	bl	80057d8 <memcpy>
 80051de:	89a3      	ldrh	r3, [r4, #12]
 80051e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	6126      	str	r6, [r4, #16]
 80051ec:	444e      	add	r6, r9
 80051ee:	6026      	str	r6, [r4, #0]
 80051f0:	463e      	mov	r6, r7
 80051f2:	6165      	str	r5, [r4, #20]
 80051f4:	eba5 0509 	sub.w	r5, r5, r9
 80051f8:	60a5      	str	r5, [r4, #8]
 80051fa:	42be      	cmp	r6, r7
 80051fc:	d900      	bls.n	8005200 <__ssputs_r+0x70>
 80051fe:	463e      	mov	r6, r7
 8005200:	4632      	mov	r2, r6
 8005202:	4641      	mov	r1, r8
 8005204:	6820      	ldr	r0, [r4, #0]
 8005206:	f000 faaf 	bl	8005768 <memmove>
 800520a:	2000      	movs	r0, #0
 800520c:	68a3      	ldr	r3, [r4, #8]
 800520e:	1b9b      	subs	r3, r3, r6
 8005210:	60a3      	str	r3, [r4, #8]
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	4433      	add	r3, r6
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521c:	462a      	mov	r2, r5
 800521e:	f000 fae9 	bl	80057f4 <_realloc_r>
 8005222:	4606      	mov	r6, r0
 8005224:	2800      	cmp	r0, #0
 8005226:	d1e0      	bne.n	80051ea <__ssputs_r+0x5a>
 8005228:	4650      	mov	r0, sl
 800522a:	6921      	ldr	r1, [r4, #16]
 800522c:	f7ff febc 	bl	8004fa8 <_free_r>
 8005230:	230c      	movs	r3, #12
 8005232:	f8ca 3000 	str.w	r3, [sl]
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005240:	81a3      	strh	r3, [r4, #12]
 8005242:	e7e9      	b.n	8005218 <__ssputs_r+0x88>

08005244 <_svfiprintf_r>:
 8005244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005248:	4698      	mov	r8, r3
 800524a:	898b      	ldrh	r3, [r1, #12]
 800524c:	4607      	mov	r7, r0
 800524e:	061b      	lsls	r3, r3, #24
 8005250:	460d      	mov	r5, r1
 8005252:	4614      	mov	r4, r2
 8005254:	b09d      	sub	sp, #116	; 0x74
 8005256:	d50e      	bpl.n	8005276 <_svfiprintf_r+0x32>
 8005258:	690b      	ldr	r3, [r1, #16]
 800525a:	b963      	cbnz	r3, 8005276 <_svfiprintf_r+0x32>
 800525c:	2140      	movs	r1, #64	; 0x40
 800525e:	f7ff ff0b 	bl	8005078 <_malloc_r>
 8005262:	6028      	str	r0, [r5, #0]
 8005264:	6128      	str	r0, [r5, #16]
 8005266:	b920      	cbnz	r0, 8005272 <_svfiprintf_r+0x2e>
 8005268:	230c      	movs	r3, #12
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	f04f 30ff 	mov.w	r0, #4294967295
 8005270:	e0d0      	b.n	8005414 <_svfiprintf_r+0x1d0>
 8005272:	2340      	movs	r3, #64	; 0x40
 8005274:	616b      	str	r3, [r5, #20]
 8005276:	2300      	movs	r3, #0
 8005278:	9309      	str	r3, [sp, #36]	; 0x24
 800527a:	2320      	movs	r3, #32
 800527c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005280:	2330      	movs	r3, #48	; 0x30
 8005282:	f04f 0901 	mov.w	r9, #1
 8005286:	f8cd 800c 	str.w	r8, [sp, #12]
 800528a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800542c <_svfiprintf_r+0x1e8>
 800528e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005292:	4623      	mov	r3, r4
 8005294:	469a      	mov	sl, r3
 8005296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800529a:	b10a      	cbz	r2, 80052a0 <_svfiprintf_r+0x5c>
 800529c:	2a25      	cmp	r2, #37	; 0x25
 800529e:	d1f9      	bne.n	8005294 <_svfiprintf_r+0x50>
 80052a0:	ebba 0b04 	subs.w	fp, sl, r4
 80052a4:	d00b      	beq.n	80052be <_svfiprintf_r+0x7a>
 80052a6:	465b      	mov	r3, fp
 80052a8:	4622      	mov	r2, r4
 80052aa:	4629      	mov	r1, r5
 80052ac:	4638      	mov	r0, r7
 80052ae:	f7ff ff6f 	bl	8005190 <__ssputs_r>
 80052b2:	3001      	adds	r0, #1
 80052b4:	f000 80a9 	beq.w	800540a <_svfiprintf_r+0x1c6>
 80052b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ba:	445a      	add	r2, fp
 80052bc:	9209      	str	r2, [sp, #36]	; 0x24
 80052be:	f89a 3000 	ldrb.w	r3, [sl]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80a1 	beq.w	800540a <_svfiprintf_r+0x1c6>
 80052c8:	2300      	movs	r3, #0
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295
 80052ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d2:	f10a 0a01 	add.w	sl, sl, #1
 80052d6:	9304      	str	r3, [sp, #16]
 80052d8:	9307      	str	r3, [sp, #28]
 80052da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052de:	931a      	str	r3, [sp, #104]	; 0x68
 80052e0:	4654      	mov	r4, sl
 80052e2:	2205      	movs	r2, #5
 80052e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e8:	4850      	ldr	r0, [pc, #320]	; (800542c <_svfiprintf_r+0x1e8>)
 80052ea:	f000 fa67 	bl	80057bc <memchr>
 80052ee:	9a04      	ldr	r2, [sp, #16]
 80052f0:	b9d8      	cbnz	r0, 800532a <_svfiprintf_r+0xe6>
 80052f2:	06d0      	lsls	r0, r2, #27
 80052f4:	bf44      	itt	mi
 80052f6:	2320      	movmi	r3, #32
 80052f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052fc:	0711      	lsls	r1, r2, #28
 80052fe:	bf44      	itt	mi
 8005300:	232b      	movmi	r3, #43	; 0x2b
 8005302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005306:	f89a 3000 	ldrb.w	r3, [sl]
 800530a:	2b2a      	cmp	r3, #42	; 0x2a
 800530c:	d015      	beq.n	800533a <_svfiprintf_r+0xf6>
 800530e:	4654      	mov	r4, sl
 8005310:	2000      	movs	r0, #0
 8005312:	f04f 0c0a 	mov.w	ip, #10
 8005316:	9a07      	ldr	r2, [sp, #28]
 8005318:	4621      	mov	r1, r4
 800531a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800531e:	3b30      	subs	r3, #48	; 0x30
 8005320:	2b09      	cmp	r3, #9
 8005322:	d94d      	bls.n	80053c0 <_svfiprintf_r+0x17c>
 8005324:	b1b0      	cbz	r0, 8005354 <_svfiprintf_r+0x110>
 8005326:	9207      	str	r2, [sp, #28]
 8005328:	e014      	b.n	8005354 <_svfiprintf_r+0x110>
 800532a:	eba0 0308 	sub.w	r3, r0, r8
 800532e:	fa09 f303 	lsl.w	r3, r9, r3
 8005332:	4313      	orrs	r3, r2
 8005334:	46a2      	mov	sl, r4
 8005336:	9304      	str	r3, [sp, #16]
 8005338:	e7d2      	b.n	80052e0 <_svfiprintf_r+0x9c>
 800533a:	9b03      	ldr	r3, [sp, #12]
 800533c:	1d19      	adds	r1, r3, #4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	9103      	str	r1, [sp, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	bfbb      	ittet	lt
 8005346:	425b      	neglt	r3, r3
 8005348:	f042 0202 	orrlt.w	r2, r2, #2
 800534c:	9307      	strge	r3, [sp, #28]
 800534e:	9307      	strlt	r3, [sp, #28]
 8005350:	bfb8      	it	lt
 8005352:	9204      	strlt	r2, [sp, #16]
 8005354:	7823      	ldrb	r3, [r4, #0]
 8005356:	2b2e      	cmp	r3, #46	; 0x2e
 8005358:	d10c      	bne.n	8005374 <_svfiprintf_r+0x130>
 800535a:	7863      	ldrb	r3, [r4, #1]
 800535c:	2b2a      	cmp	r3, #42	; 0x2a
 800535e:	d134      	bne.n	80053ca <_svfiprintf_r+0x186>
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	3402      	adds	r4, #2
 8005364:	1d1a      	adds	r2, r3, #4
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	9203      	str	r2, [sp, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	bfb8      	it	lt
 800536e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005372:	9305      	str	r3, [sp, #20]
 8005374:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005430 <_svfiprintf_r+0x1ec>
 8005378:	2203      	movs	r2, #3
 800537a:	4650      	mov	r0, sl
 800537c:	7821      	ldrb	r1, [r4, #0]
 800537e:	f000 fa1d 	bl	80057bc <memchr>
 8005382:	b138      	cbz	r0, 8005394 <_svfiprintf_r+0x150>
 8005384:	2240      	movs	r2, #64	; 0x40
 8005386:	9b04      	ldr	r3, [sp, #16]
 8005388:	eba0 000a 	sub.w	r0, r0, sl
 800538c:	4082      	lsls	r2, r0
 800538e:	4313      	orrs	r3, r2
 8005390:	3401      	adds	r4, #1
 8005392:	9304      	str	r3, [sp, #16]
 8005394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005398:	2206      	movs	r2, #6
 800539a:	4826      	ldr	r0, [pc, #152]	; (8005434 <_svfiprintf_r+0x1f0>)
 800539c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053a0:	f000 fa0c 	bl	80057bc <memchr>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d038      	beq.n	800541a <_svfiprintf_r+0x1d6>
 80053a8:	4b23      	ldr	r3, [pc, #140]	; (8005438 <_svfiprintf_r+0x1f4>)
 80053aa:	bb1b      	cbnz	r3, 80053f4 <_svfiprintf_r+0x1b0>
 80053ac:	9b03      	ldr	r3, [sp, #12]
 80053ae:	3307      	adds	r3, #7
 80053b0:	f023 0307 	bic.w	r3, r3, #7
 80053b4:	3308      	adds	r3, #8
 80053b6:	9303      	str	r3, [sp, #12]
 80053b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ba:	4433      	add	r3, r6
 80053bc:	9309      	str	r3, [sp, #36]	; 0x24
 80053be:	e768      	b.n	8005292 <_svfiprintf_r+0x4e>
 80053c0:	460c      	mov	r4, r1
 80053c2:	2001      	movs	r0, #1
 80053c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80053c8:	e7a6      	b.n	8005318 <_svfiprintf_r+0xd4>
 80053ca:	2300      	movs	r3, #0
 80053cc:	f04f 0c0a 	mov.w	ip, #10
 80053d0:	4619      	mov	r1, r3
 80053d2:	3401      	adds	r4, #1
 80053d4:	9305      	str	r3, [sp, #20]
 80053d6:	4620      	mov	r0, r4
 80053d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053dc:	3a30      	subs	r2, #48	; 0x30
 80053de:	2a09      	cmp	r2, #9
 80053e0:	d903      	bls.n	80053ea <_svfiprintf_r+0x1a6>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0c6      	beq.n	8005374 <_svfiprintf_r+0x130>
 80053e6:	9105      	str	r1, [sp, #20]
 80053e8:	e7c4      	b.n	8005374 <_svfiprintf_r+0x130>
 80053ea:	4604      	mov	r4, r0
 80053ec:	2301      	movs	r3, #1
 80053ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80053f2:	e7f0      	b.n	80053d6 <_svfiprintf_r+0x192>
 80053f4:	ab03      	add	r3, sp, #12
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	462a      	mov	r2, r5
 80053fa:	4638      	mov	r0, r7
 80053fc:	4b0f      	ldr	r3, [pc, #60]	; (800543c <_svfiprintf_r+0x1f8>)
 80053fe:	a904      	add	r1, sp, #16
 8005400:	f3af 8000 	nop.w
 8005404:	1c42      	adds	r2, r0, #1
 8005406:	4606      	mov	r6, r0
 8005408:	d1d6      	bne.n	80053b8 <_svfiprintf_r+0x174>
 800540a:	89ab      	ldrh	r3, [r5, #12]
 800540c:	065b      	lsls	r3, r3, #25
 800540e:	f53f af2d 	bmi.w	800526c <_svfiprintf_r+0x28>
 8005412:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005414:	b01d      	add	sp, #116	; 0x74
 8005416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541a:	ab03      	add	r3, sp, #12
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	462a      	mov	r2, r5
 8005420:	4638      	mov	r0, r7
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <_svfiprintf_r+0x1f8>)
 8005424:	a904      	add	r1, sp, #16
 8005426:	f000 f87d 	bl	8005524 <_printf_i>
 800542a:	e7eb      	b.n	8005404 <_svfiprintf_r+0x1c0>
 800542c:	080058ce 	.word	0x080058ce
 8005430:	080058d4 	.word	0x080058d4
 8005434:	080058d8 	.word	0x080058d8
 8005438:	00000000 	.word	0x00000000
 800543c:	08005191 	.word	0x08005191

08005440 <_printf_common>:
 8005440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	4616      	mov	r6, r2
 8005446:	4699      	mov	r9, r3
 8005448:	688a      	ldr	r2, [r1, #8]
 800544a:	690b      	ldr	r3, [r1, #16]
 800544c:	4607      	mov	r7, r0
 800544e:	4293      	cmp	r3, r2
 8005450:	bfb8      	it	lt
 8005452:	4613      	movlt	r3, r2
 8005454:	6033      	str	r3, [r6, #0]
 8005456:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800545a:	460c      	mov	r4, r1
 800545c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005460:	b10a      	cbz	r2, 8005466 <_printf_common+0x26>
 8005462:	3301      	adds	r3, #1
 8005464:	6033      	str	r3, [r6, #0]
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	0699      	lsls	r1, r3, #26
 800546a:	bf42      	ittt	mi
 800546c:	6833      	ldrmi	r3, [r6, #0]
 800546e:	3302      	addmi	r3, #2
 8005470:	6033      	strmi	r3, [r6, #0]
 8005472:	6825      	ldr	r5, [r4, #0]
 8005474:	f015 0506 	ands.w	r5, r5, #6
 8005478:	d106      	bne.n	8005488 <_printf_common+0x48>
 800547a:	f104 0a19 	add.w	sl, r4, #25
 800547e:	68e3      	ldr	r3, [r4, #12]
 8005480:	6832      	ldr	r2, [r6, #0]
 8005482:	1a9b      	subs	r3, r3, r2
 8005484:	42ab      	cmp	r3, r5
 8005486:	dc2b      	bgt.n	80054e0 <_printf_common+0xa0>
 8005488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800548c:	1e13      	subs	r3, r2, #0
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	bf18      	it	ne
 8005492:	2301      	movne	r3, #1
 8005494:	0692      	lsls	r2, r2, #26
 8005496:	d430      	bmi.n	80054fa <_printf_common+0xba>
 8005498:	4649      	mov	r1, r9
 800549a:	4638      	mov	r0, r7
 800549c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054a0:	47c0      	blx	r8
 80054a2:	3001      	adds	r0, #1
 80054a4:	d023      	beq.n	80054ee <_printf_common+0xae>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	6922      	ldr	r2, [r4, #16]
 80054aa:	f003 0306 	and.w	r3, r3, #6
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	bf14      	ite	ne
 80054b2:	2500      	movne	r5, #0
 80054b4:	6833      	ldreq	r3, [r6, #0]
 80054b6:	f04f 0600 	mov.w	r6, #0
 80054ba:	bf08      	it	eq
 80054bc:	68e5      	ldreq	r5, [r4, #12]
 80054be:	f104 041a 	add.w	r4, r4, #26
 80054c2:	bf08      	it	eq
 80054c4:	1aed      	subeq	r5, r5, r3
 80054c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80054ca:	bf08      	it	eq
 80054cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d0:	4293      	cmp	r3, r2
 80054d2:	bfc4      	itt	gt
 80054d4:	1a9b      	subgt	r3, r3, r2
 80054d6:	18ed      	addgt	r5, r5, r3
 80054d8:	42b5      	cmp	r5, r6
 80054da:	d11a      	bne.n	8005512 <_printf_common+0xd2>
 80054dc:	2000      	movs	r0, #0
 80054de:	e008      	b.n	80054f2 <_printf_common+0xb2>
 80054e0:	2301      	movs	r3, #1
 80054e2:	4652      	mov	r2, sl
 80054e4:	4649      	mov	r1, r9
 80054e6:	4638      	mov	r0, r7
 80054e8:	47c0      	blx	r8
 80054ea:	3001      	adds	r0, #1
 80054ec:	d103      	bne.n	80054f6 <_printf_common+0xb6>
 80054ee:	f04f 30ff 	mov.w	r0, #4294967295
 80054f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f6:	3501      	adds	r5, #1
 80054f8:	e7c1      	b.n	800547e <_printf_common+0x3e>
 80054fa:	2030      	movs	r0, #48	; 0x30
 80054fc:	18e1      	adds	r1, r4, r3
 80054fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005508:	4422      	add	r2, r4
 800550a:	3302      	adds	r3, #2
 800550c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005510:	e7c2      	b.n	8005498 <_printf_common+0x58>
 8005512:	2301      	movs	r3, #1
 8005514:	4622      	mov	r2, r4
 8005516:	4649      	mov	r1, r9
 8005518:	4638      	mov	r0, r7
 800551a:	47c0      	blx	r8
 800551c:	3001      	adds	r0, #1
 800551e:	d0e6      	beq.n	80054ee <_printf_common+0xae>
 8005520:	3601      	adds	r6, #1
 8005522:	e7d9      	b.n	80054d8 <_printf_common+0x98>

08005524 <_printf_i>:
 8005524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005528:	7e0f      	ldrb	r7, [r1, #24]
 800552a:	4691      	mov	r9, r2
 800552c:	2f78      	cmp	r7, #120	; 0x78
 800552e:	4680      	mov	r8, r0
 8005530:	460c      	mov	r4, r1
 8005532:	469a      	mov	sl, r3
 8005534:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800553a:	d807      	bhi.n	800554c <_printf_i+0x28>
 800553c:	2f62      	cmp	r7, #98	; 0x62
 800553e:	d80a      	bhi.n	8005556 <_printf_i+0x32>
 8005540:	2f00      	cmp	r7, #0
 8005542:	f000 80d5 	beq.w	80056f0 <_printf_i+0x1cc>
 8005546:	2f58      	cmp	r7, #88	; 0x58
 8005548:	f000 80c1 	beq.w	80056ce <_printf_i+0x1aa>
 800554c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005554:	e03a      	b.n	80055cc <_printf_i+0xa8>
 8005556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800555a:	2b15      	cmp	r3, #21
 800555c:	d8f6      	bhi.n	800554c <_printf_i+0x28>
 800555e:	a101      	add	r1, pc, #4	; (adr r1, 8005564 <_printf_i+0x40>)
 8005560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005564:	080055bd 	.word	0x080055bd
 8005568:	080055d1 	.word	0x080055d1
 800556c:	0800554d 	.word	0x0800554d
 8005570:	0800554d 	.word	0x0800554d
 8005574:	0800554d 	.word	0x0800554d
 8005578:	0800554d 	.word	0x0800554d
 800557c:	080055d1 	.word	0x080055d1
 8005580:	0800554d 	.word	0x0800554d
 8005584:	0800554d 	.word	0x0800554d
 8005588:	0800554d 	.word	0x0800554d
 800558c:	0800554d 	.word	0x0800554d
 8005590:	080056d7 	.word	0x080056d7
 8005594:	080055fd 	.word	0x080055fd
 8005598:	08005691 	.word	0x08005691
 800559c:	0800554d 	.word	0x0800554d
 80055a0:	0800554d 	.word	0x0800554d
 80055a4:	080056f9 	.word	0x080056f9
 80055a8:	0800554d 	.word	0x0800554d
 80055ac:	080055fd 	.word	0x080055fd
 80055b0:	0800554d 	.word	0x0800554d
 80055b4:	0800554d 	.word	0x0800554d
 80055b8:	08005699 	.word	0x08005699
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	1d1a      	adds	r2, r3, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	602a      	str	r2, [r5, #0]
 80055c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0a0      	b.n	8005712 <_printf_i+0x1ee>
 80055d0:	6820      	ldr	r0, [r4, #0]
 80055d2:	682b      	ldr	r3, [r5, #0]
 80055d4:	0607      	lsls	r7, r0, #24
 80055d6:	f103 0104 	add.w	r1, r3, #4
 80055da:	6029      	str	r1, [r5, #0]
 80055dc:	d501      	bpl.n	80055e2 <_printf_i+0xbe>
 80055de:	681e      	ldr	r6, [r3, #0]
 80055e0:	e003      	b.n	80055ea <_printf_i+0xc6>
 80055e2:	0646      	lsls	r6, r0, #25
 80055e4:	d5fb      	bpl.n	80055de <_printf_i+0xba>
 80055e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055ea:	2e00      	cmp	r6, #0
 80055ec:	da03      	bge.n	80055f6 <_printf_i+0xd2>
 80055ee:	232d      	movs	r3, #45	; 0x2d
 80055f0:	4276      	negs	r6, r6
 80055f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f6:	230a      	movs	r3, #10
 80055f8:	4859      	ldr	r0, [pc, #356]	; (8005760 <_printf_i+0x23c>)
 80055fa:	e012      	b.n	8005622 <_printf_i+0xfe>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	1d19      	adds	r1, r3, #4
 8005602:	6029      	str	r1, [r5, #0]
 8005604:	0605      	lsls	r5, r0, #24
 8005606:	d501      	bpl.n	800560c <_printf_i+0xe8>
 8005608:	681e      	ldr	r6, [r3, #0]
 800560a:	e002      	b.n	8005612 <_printf_i+0xee>
 800560c:	0641      	lsls	r1, r0, #25
 800560e:	d5fb      	bpl.n	8005608 <_printf_i+0xe4>
 8005610:	881e      	ldrh	r6, [r3, #0]
 8005612:	2f6f      	cmp	r7, #111	; 0x6f
 8005614:	bf0c      	ite	eq
 8005616:	2308      	moveq	r3, #8
 8005618:	230a      	movne	r3, #10
 800561a:	4851      	ldr	r0, [pc, #324]	; (8005760 <_printf_i+0x23c>)
 800561c:	2100      	movs	r1, #0
 800561e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005622:	6865      	ldr	r5, [r4, #4]
 8005624:	2d00      	cmp	r5, #0
 8005626:	bfa8      	it	ge
 8005628:	6821      	ldrge	r1, [r4, #0]
 800562a:	60a5      	str	r5, [r4, #8]
 800562c:	bfa4      	itt	ge
 800562e:	f021 0104 	bicge.w	r1, r1, #4
 8005632:	6021      	strge	r1, [r4, #0]
 8005634:	b90e      	cbnz	r6, 800563a <_printf_i+0x116>
 8005636:	2d00      	cmp	r5, #0
 8005638:	d04b      	beq.n	80056d2 <_printf_i+0x1ae>
 800563a:	4615      	mov	r5, r2
 800563c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005640:	fb03 6711 	mls	r7, r3, r1, r6
 8005644:	5dc7      	ldrb	r7, [r0, r7]
 8005646:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800564a:	4637      	mov	r7, r6
 800564c:	42bb      	cmp	r3, r7
 800564e:	460e      	mov	r6, r1
 8005650:	d9f4      	bls.n	800563c <_printf_i+0x118>
 8005652:	2b08      	cmp	r3, #8
 8005654:	d10b      	bne.n	800566e <_printf_i+0x14a>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	07de      	lsls	r6, r3, #31
 800565a:	d508      	bpl.n	800566e <_printf_i+0x14a>
 800565c:	6923      	ldr	r3, [r4, #16]
 800565e:	6861      	ldr	r1, [r4, #4]
 8005660:	4299      	cmp	r1, r3
 8005662:	bfde      	ittt	le
 8005664:	2330      	movle	r3, #48	; 0x30
 8005666:	f805 3c01 	strble.w	r3, [r5, #-1]
 800566a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800566e:	1b52      	subs	r2, r2, r5
 8005670:	6122      	str	r2, [r4, #16]
 8005672:	464b      	mov	r3, r9
 8005674:	4621      	mov	r1, r4
 8005676:	4640      	mov	r0, r8
 8005678:	f8cd a000 	str.w	sl, [sp]
 800567c:	aa03      	add	r2, sp, #12
 800567e:	f7ff fedf 	bl	8005440 <_printf_common>
 8005682:	3001      	adds	r0, #1
 8005684:	d14a      	bne.n	800571c <_printf_i+0x1f8>
 8005686:	f04f 30ff 	mov.w	r0, #4294967295
 800568a:	b004      	add	sp, #16
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	f043 0320 	orr.w	r3, r3, #32
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	2778      	movs	r7, #120	; 0x78
 800569a:	4832      	ldr	r0, [pc, #200]	; (8005764 <_printf_i+0x240>)
 800569c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	6829      	ldr	r1, [r5, #0]
 80056a4:	061f      	lsls	r7, r3, #24
 80056a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80056aa:	d402      	bmi.n	80056b2 <_printf_i+0x18e>
 80056ac:	065f      	lsls	r7, r3, #25
 80056ae:	bf48      	it	mi
 80056b0:	b2b6      	uxthmi	r6, r6
 80056b2:	07df      	lsls	r7, r3, #31
 80056b4:	bf48      	it	mi
 80056b6:	f043 0320 	orrmi.w	r3, r3, #32
 80056ba:	6029      	str	r1, [r5, #0]
 80056bc:	bf48      	it	mi
 80056be:	6023      	strmi	r3, [r4, #0]
 80056c0:	b91e      	cbnz	r6, 80056ca <_printf_i+0x1a6>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	f023 0320 	bic.w	r3, r3, #32
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	2310      	movs	r3, #16
 80056cc:	e7a6      	b.n	800561c <_printf_i+0xf8>
 80056ce:	4824      	ldr	r0, [pc, #144]	; (8005760 <_printf_i+0x23c>)
 80056d0:	e7e4      	b.n	800569c <_printf_i+0x178>
 80056d2:	4615      	mov	r5, r2
 80056d4:	e7bd      	b.n	8005652 <_printf_i+0x12e>
 80056d6:	682b      	ldr	r3, [r5, #0]
 80056d8:	6826      	ldr	r6, [r4, #0]
 80056da:	1d18      	adds	r0, r3, #4
 80056dc:	6961      	ldr	r1, [r4, #20]
 80056de:	6028      	str	r0, [r5, #0]
 80056e0:	0635      	lsls	r5, r6, #24
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	d501      	bpl.n	80056ea <_printf_i+0x1c6>
 80056e6:	6019      	str	r1, [r3, #0]
 80056e8:	e002      	b.n	80056f0 <_printf_i+0x1cc>
 80056ea:	0670      	lsls	r0, r6, #25
 80056ec:	d5fb      	bpl.n	80056e6 <_printf_i+0x1c2>
 80056ee:	8019      	strh	r1, [r3, #0]
 80056f0:	2300      	movs	r3, #0
 80056f2:	4615      	mov	r5, r2
 80056f4:	6123      	str	r3, [r4, #16]
 80056f6:	e7bc      	b.n	8005672 <_printf_i+0x14e>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	2100      	movs	r1, #0
 80056fc:	1d1a      	adds	r2, r3, #4
 80056fe:	602a      	str	r2, [r5, #0]
 8005700:	681d      	ldr	r5, [r3, #0]
 8005702:	6862      	ldr	r2, [r4, #4]
 8005704:	4628      	mov	r0, r5
 8005706:	f000 f859 	bl	80057bc <memchr>
 800570a:	b108      	cbz	r0, 8005710 <_printf_i+0x1ec>
 800570c:	1b40      	subs	r0, r0, r5
 800570e:	6060      	str	r0, [r4, #4]
 8005710:	6863      	ldr	r3, [r4, #4]
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	2300      	movs	r3, #0
 8005716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800571a:	e7aa      	b.n	8005672 <_printf_i+0x14e>
 800571c:	462a      	mov	r2, r5
 800571e:	4649      	mov	r1, r9
 8005720:	4640      	mov	r0, r8
 8005722:	6923      	ldr	r3, [r4, #16]
 8005724:	47d0      	blx	sl
 8005726:	3001      	adds	r0, #1
 8005728:	d0ad      	beq.n	8005686 <_printf_i+0x162>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	079b      	lsls	r3, r3, #30
 800572e:	d413      	bmi.n	8005758 <_printf_i+0x234>
 8005730:	68e0      	ldr	r0, [r4, #12]
 8005732:	9b03      	ldr	r3, [sp, #12]
 8005734:	4298      	cmp	r0, r3
 8005736:	bfb8      	it	lt
 8005738:	4618      	movlt	r0, r3
 800573a:	e7a6      	b.n	800568a <_printf_i+0x166>
 800573c:	2301      	movs	r3, #1
 800573e:	4632      	mov	r2, r6
 8005740:	4649      	mov	r1, r9
 8005742:	4640      	mov	r0, r8
 8005744:	47d0      	blx	sl
 8005746:	3001      	adds	r0, #1
 8005748:	d09d      	beq.n	8005686 <_printf_i+0x162>
 800574a:	3501      	adds	r5, #1
 800574c:	68e3      	ldr	r3, [r4, #12]
 800574e:	9903      	ldr	r1, [sp, #12]
 8005750:	1a5b      	subs	r3, r3, r1
 8005752:	42ab      	cmp	r3, r5
 8005754:	dcf2      	bgt.n	800573c <_printf_i+0x218>
 8005756:	e7eb      	b.n	8005730 <_printf_i+0x20c>
 8005758:	2500      	movs	r5, #0
 800575a:	f104 0619 	add.w	r6, r4, #25
 800575e:	e7f5      	b.n	800574c <_printf_i+0x228>
 8005760:	080058df 	.word	0x080058df
 8005764:	080058f0 	.word	0x080058f0

08005768 <memmove>:
 8005768:	4288      	cmp	r0, r1
 800576a:	b510      	push	{r4, lr}
 800576c:	eb01 0402 	add.w	r4, r1, r2
 8005770:	d902      	bls.n	8005778 <memmove+0x10>
 8005772:	4284      	cmp	r4, r0
 8005774:	4623      	mov	r3, r4
 8005776:	d807      	bhi.n	8005788 <memmove+0x20>
 8005778:	1e43      	subs	r3, r0, #1
 800577a:	42a1      	cmp	r1, r4
 800577c:	d008      	beq.n	8005790 <memmove+0x28>
 800577e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005782:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005786:	e7f8      	b.n	800577a <memmove+0x12>
 8005788:	4601      	mov	r1, r0
 800578a:	4402      	add	r2, r0
 800578c:	428a      	cmp	r2, r1
 800578e:	d100      	bne.n	8005792 <memmove+0x2a>
 8005790:	bd10      	pop	{r4, pc}
 8005792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800579a:	e7f7      	b.n	800578c <memmove+0x24>

0800579c <_sbrk_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	2300      	movs	r3, #0
 80057a0:	4d05      	ldr	r5, [pc, #20]	; (80057b8 <_sbrk_r+0x1c>)
 80057a2:	4604      	mov	r4, r0
 80057a4:	4608      	mov	r0, r1
 80057a6:	602b      	str	r3, [r5, #0]
 80057a8:	f7fc fb2a 	bl	8001e00 <_sbrk>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_sbrk_r+0x1a>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_sbrk_r+0x1a>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	200004dc 	.word	0x200004dc

080057bc <memchr>:
 80057bc:	4603      	mov	r3, r0
 80057be:	b510      	push	{r4, lr}
 80057c0:	b2c9      	uxtb	r1, r1
 80057c2:	4402      	add	r2, r0
 80057c4:	4293      	cmp	r3, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	d101      	bne.n	80057ce <memchr+0x12>
 80057ca:	2000      	movs	r0, #0
 80057cc:	e003      	b.n	80057d6 <memchr+0x1a>
 80057ce:	7804      	ldrb	r4, [r0, #0]
 80057d0:	3301      	adds	r3, #1
 80057d2:	428c      	cmp	r4, r1
 80057d4:	d1f6      	bne.n	80057c4 <memchr+0x8>
 80057d6:	bd10      	pop	{r4, pc}

080057d8 <memcpy>:
 80057d8:	440a      	add	r2, r1
 80057da:	4291      	cmp	r1, r2
 80057dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80057e0:	d100      	bne.n	80057e4 <memcpy+0xc>
 80057e2:	4770      	bx	lr
 80057e4:	b510      	push	{r4, lr}
 80057e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ea:	4291      	cmp	r1, r2
 80057ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057f0:	d1f9      	bne.n	80057e6 <memcpy+0xe>
 80057f2:	bd10      	pop	{r4, pc}

080057f4 <_realloc_r>:
 80057f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f8:	4680      	mov	r8, r0
 80057fa:	4614      	mov	r4, r2
 80057fc:	460e      	mov	r6, r1
 80057fe:	b921      	cbnz	r1, 800580a <_realloc_r+0x16>
 8005800:	4611      	mov	r1, r2
 8005802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005806:	f7ff bc37 	b.w	8005078 <_malloc_r>
 800580a:	b92a      	cbnz	r2, 8005818 <_realloc_r+0x24>
 800580c:	f7ff fbcc 	bl	8004fa8 <_free_r>
 8005810:	4625      	mov	r5, r4
 8005812:	4628      	mov	r0, r5
 8005814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005818:	f000 f81b 	bl	8005852 <_malloc_usable_size_r>
 800581c:	4284      	cmp	r4, r0
 800581e:	4607      	mov	r7, r0
 8005820:	d802      	bhi.n	8005828 <_realloc_r+0x34>
 8005822:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005826:	d812      	bhi.n	800584e <_realloc_r+0x5a>
 8005828:	4621      	mov	r1, r4
 800582a:	4640      	mov	r0, r8
 800582c:	f7ff fc24 	bl	8005078 <_malloc_r>
 8005830:	4605      	mov	r5, r0
 8005832:	2800      	cmp	r0, #0
 8005834:	d0ed      	beq.n	8005812 <_realloc_r+0x1e>
 8005836:	42bc      	cmp	r4, r7
 8005838:	4622      	mov	r2, r4
 800583a:	4631      	mov	r1, r6
 800583c:	bf28      	it	cs
 800583e:	463a      	movcs	r2, r7
 8005840:	f7ff ffca 	bl	80057d8 <memcpy>
 8005844:	4631      	mov	r1, r6
 8005846:	4640      	mov	r0, r8
 8005848:	f7ff fbae 	bl	8004fa8 <_free_r>
 800584c:	e7e1      	b.n	8005812 <_realloc_r+0x1e>
 800584e:	4635      	mov	r5, r6
 8005850:	e7df      	b.n	8005812 <_realloc_r+0x1e>

08005852 <_malloc_usable_size_r>:
 8005852:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005856:	1f18      	subs	r0, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	bfbc      	itt	lt
 800585c:	580b      	ldrlt	r3, [r1, r0]
 800585e:	18c0      	addlt	r0, r0, r3
 8005860:	4770      	bx	lr
	...

08005864 <_init>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	bf00      	nop
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr

08005870 <_fini>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	bf00      	nop
 8005874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005876:	bc08      	pop	{r3}
 8005878:	469e      	mov	lr, r3
 800587a:	4770      	bx	lr
