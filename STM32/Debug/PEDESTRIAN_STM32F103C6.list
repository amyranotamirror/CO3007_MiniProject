
PEDESTRIAN_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000540c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005598  08005598  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08005598  08005598  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005598  08005598  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800559c  0800559c  0001559c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080055a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  200000c8  08005668  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08005668  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d439  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002573  00000000  00000000  0002d56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  0002fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b14  00000000  00000000  00030938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019276  00000000  00000000  0003144c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011605  00000000  00000000  0004a6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a552  00000000  00000000  0005bcc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042dc  00000000  00000000  000e621c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ea4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005500 	.word	0x08005500

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	08005500 	.word	0x08005500

0800014c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	; (8000240 <buttonReading+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	; (8000244 <buttonReading+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	; (8000248 <buttonReading+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	; (8000240 <buttonReading+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <buttonReading+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	; (8000250 <buttonReading+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f001 ff4b 	bl	8002020 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <buttonReading+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2c      	ldr	r2, [pc, #176]	; (8000248 <buttonReading+0xfc>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	; (8000240 <buttonReading+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d143      	bne.n	800022a <buttonReading+0xde>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a28      	ldr	r2, [pc, #160]	; (8000248 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <buttonReading+0xf8>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d13b      	bne.n	800022a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a27      	ldr	r2, [pc, #156]	; (8000254 <buttonReading+0x108>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4923      	ldr	r1, [pc, #140]	; (8000248 <buttonReading+0xfc>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	; (8000248 <buttonReading+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	; (8000254 <buttonReading+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a20      	ldr	r2, [pc, #128]	; (8000254 <buttonReading+0x108>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d128      	bne.n	800022a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <buttonReading+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / SCH_TIMERTICK;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <buttonReading+0x110>)
 80001e4:	2164      	movs	r1, #100	; 0x64
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001ea:	e01e      	b.n	800022a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <buttonReading+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d119      	bne.n	800022a <buttonReading+0xde>
					buttonCounters[i] --;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <buttonReading+0x110>)
 80001fa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80001fe:	b292      	uxth	r2, r2
 8000200:	3a01      	subs	r2, #1
 8000202:	b292      	uxth	r2, r2
 8000204:	b211      	sxth	r1, r2
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <buttonReading+0x110>)
 8000208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <buttonReading+0x110>)
 8000210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dc08      	bgt.n	800022a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <buttonReading+0x10c>)
 800021c:	2101      	movs	r1, #1
 800021e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / SCH_TIMERTICK;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a0e      	ldr	r2, [pc, #56]	; (800025c <buttonReading+0x110>)
 8000224:	2132      	movs	r1, #50	; 0x32
 8000226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d990      	bls.n	8000158 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	200000ec 	.word	0x200000ec
 8000244:	200000f0 	.word	0x200000f0
 8000248:	200000e8 	.word	0x200000e8
 800024c:	20000000 	.word	0x20000000
 8000250:	20000010 	.word	0x20000010
 8000254:	200000e4 	.word	0x200000e4
 8000258:	200000f4 	.word	0x200000f4
 800025c:	200000f8 	.word	0x200000f8

08000260 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d901      	bls.n	8000274 <buttonPressed+0x14>
 8000270:	2300      	movs	r3, #0
 8000272:	e00b      	b.n	800028c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <buttonPressed+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d105      	bne.n	800028a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a05      	ldr	r2, [pc, #20]	; (8000298 <buttonPressed+0x38>)
 8000282:	2100      	movs	r1, #0
 8000284:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <buttonPressed+0x2c>
	}
	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	200000f4 	.word	0x200000f4

0800029c <fsmPedestrian>:

static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmPedestrian(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 80002a0:	2001      	movs	r0, #1
 80002a2:	f7ff ffdd 	bl	8000260 <buttonPressed>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d016      	beq.n	80002da <fsmPedestrian+0x3e>
		switch (trafficState[0]) {
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <fsmPedestrian+0x44>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d005      	beq.n	80002c0 <fsmPedestrian+0x24>
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	dd0f      	ble.n	80002d8 <fsmPedestrian+0x3c>
 80002b8:	3b02      	subs	r3, #2
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d80c      	bhi.n	80002d8 <fsmPedestrian+0x3c>
 80002be:	e005      	b.n	80002cc <fsmPedestrian+0x30>
		case TRAFFIC_RED:
			SCH_AddTask(pedestrian0Green, 0, 0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	4807      	ldr	r0, [pc, #28]	; (80002e4 <fsmPedestrian+0x48>)
 80002c6:	f000 fd13 	bl	8000cf0 <SCH_AddTask>
			break;
 80002ca:	e006      	b.n	80002da <fsmPedestrian+0x3e>
		case TRAFFIC_YELLOW:
		case TRAFFIC_GREEN:
			SCH_AddTask(pedestrian0Red, 0, 0);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2100      	movs	r1, #0
 80002d0:	4805      	ldr	r0, [pc, #20]	; (80002e8 <fsmPedestrian+0x4c>)
 80002d2:	f000 fd0d 	bl	8000cf0 <SCH_AddTask>
			break;
 80002d6:	e000      	b.n	80002da <fsmPedestrian+0x3e>
		default:
			break;
 80002d8:	bf00      	nop
		}
	}
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000334 	.word	0x20000334
 80002e4:	08000bad 	.word	0x08000bad
 80002e8:	08000b9d 	.word	0x08000b9d

080002ec <fsmAuto>:

void fsmAuto(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	fsmAutoIDs[0] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80002f0:	4b3f      	ldr	r3, [pc, #252]	; (80003f0 <fsmAuto+0x104>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	4b3f      	ldr	r3, [pc, #252]	; (80003f4 <fsmAuto+0x108>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	441a      	add	r2, r3
 80002fa:	4b3f      	ldr	r3, [pc, #252]	; (80003f8 <fsmAuto+0x10c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4413      	add	r3, r2
 8000300:	461a      	mov	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	483d      	ldr	r0, [pc, #244]	; (80003fc <fsmAuto+0x110>)
 8000306:	f000 fcf3 	bl	8000cf0 <SCH_AddTask>
 800030a:	4603      	mov	r3, r0
 800030c:	461a      	mov	r2, r3
 800030e:	4b3c      	ldr	r3, [pc, #240]	; (8000400 <fsmAuto+0x114>)
 8000310:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000312:	4b37      	ldr	r3, [pc, #220]	; (80003f0 <fsmAuto+0x104>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4619      	mov	r1, r3
 8000318:	4b35      	ldr	r3, [pc, #212]	; (80003f0 <fsmAuto+0x104>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4b35      	ldr	r3, [pc, #212]	; (80003f4 <fsmAuto+0x108>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	441a      	add	r2, r3
 8000322:	4b35      	ldr	r3, [pc, #212]	; (80003f8 <fsmAuto+0x10c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4413      	add	r3, r2
 8000328:	461a      	mov	r2, r3
 800032a:	4836      	ldr	r0, [pc, #216]	; (8000404 <fsmAuto+0x118>)
 800032c:	f000 fce0 	bl	8000cf0 <SCH_AddTask>
 8000330:	4603      	mov	r3, r0
 8000332:	461a      	mov	r2, r3
 8000334:	4b32      	ldr	r3, [pc, #200]	; (8000400 <fsmAuto+0x114>)
 8000336:	705a      	strb	r2, [r3, #1]
	fsmAutoIDs[2] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000338:	4b2d      	ldr	r3, [pc, #180]	; (80003f0 <fsmAuto+0x104>)
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <fsmAuto+0x108>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4413      	add	r3, r2
 8000342:	4619      	mov	r1, r3
 8000344:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <fsmAuto+0x104>)
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	4b2a      	ldr	r3, [pc, #168]	; (80003f4 <fsmAuto+0x108>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	441a      	add	r2, r3
 800034e:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <fsmAuto+0x10c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4413      	add	r3, r2
 8000354:	461a      	mov	r2, r3
 8000356:	482c      	ldr	r0, [pc, #176]	; (8000408 <fsmAuto+0x11c>)
 8000358:	f000 fcca 	bl	8000cf0 <SCH_AddTask>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	4b27      	ldr	r3, [pc, #156]	; (8000400 <fsmAuto+0x114>)
 8000362:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000364:	4b22      	ldr	r3, [pc, #136]	; (80003f0 <fsmAuto+0x104>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <fsmAuto+0x108>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	441a      	add	r2, r3
 800036e:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <fsmAuto+0x10c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4413      	add	r3, r2
 8000374:	461a      	mov	r2, r3
 8000376:	2100      	movs	r1, #0
 8000378:	4824      	ldr	r0, [pc, #144]	; (800040c <fsmAuto+0x120>)
 800037a:	f000 fcb9 	bl	8000cf0 <SCH_AddTask>
 800037e:	4603      	mov	r3, r0
 8000380:	461a      	mov	r2, r3
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <fsmAuto+0x114>)
 8000384:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <fsmAuto+0x10c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4619      	mov	r1, r3
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <fsmAuto+0x104>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <fsmAuto+0x108>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	441a      	add	r2, r3
 8000396:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <fsmAuto+0x10c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4413      	add	r3, r2
 800039c:	461a      	mov	r2, r3
 800039e:	481c      	ldr	r0, [pc, #112]	; (8000410 <fsmAuto+0x124>)
 80003a0:	f000 fca6 	bl	8000cf0 <SCH_AddTask>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <fsmAuto+0x114>)
 80003aa:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <fsmAuto+0x10c>)
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <fsmAuto+0x108>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4413      	add	r3, r2
 80003b6:	4619      	mov	r1, r3
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <fsmAuto+0x104>)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <fsmAuto+0x108>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	441a      	add	r2, r3
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <fsmAuto+0x10c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4413      	add	r3, r2
 80003c8:	461a      	mov	r2, r3
 80003ca:	4812      	ldr	r0, [pc, #72]	; (8000414 <fsmAuto+0x128>)
 80003cc:	f000 fc90 	bl	8000cf0 <SCH_AddTask>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <fsmAuto+0x114>)
 80003d6:	715a      	strb	r2, [r3, #5]
	fsmAutoIDs[6] = SCH_AddTask(fsmPedestrian, 0, 10);
 80003d8:	220a      	movs	r2, #10
 80003da:	2100      	movs	r1, #0
 80003dc:	480e      	ldr	r0, [pc, #56]	; (8000418 <fsmAuto+0x12c>)
 80003de:	f000 fc87 	bl	8000cf0 <SCH_AddTask>
 80003e2:	4603      	mov	r3, r0
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <fsmAuto+0x114>)
 80003e8:	719a      	strb	r2, [r3, #6]
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000034 	.word	0x20000034
 80003f4:	20000038 	.word	0x20000038
 80003f8:	2000003c 	.word	0x2000003c
 80003fc:	08001829 	.word	0x08001829
 8000400:	20000104 	.word	0x20000104
 8000404:	08001849 	.word	0x08001849
 8000408:	08001839 	.word	0x08001839
 800040c:	08001889 	.word	0x08001889
 8000410:	08001879 	.word	0x08001879
 8000414:	08001869 	.word	0x08001869
 8000418:	0800029d 	.word	0x0800029d

0800041c <fsmManual>:

void fsmManual(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 8000420:	2001      	movs	r0, #1
 8000422:	f7ff ff1d 	bl	8000260 <buttonPressed>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d022      	beq.n	8000472 <fsmManual+0x56>
		switch (trafficState[0]) {
 800042c:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <fsmManual+0xac>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b03      	cmp	r3, #3
 8000432:	d012      	beq.n	800045a <fsmManual+0x3e>
 8000434:	2b03      	cmp	r3, #3
 8000436:	dc16      	bgt.n	8000466 <fsmManual+0x4a>
 8000438:	2b01      	cmp	r3, #1
 800043a:	d002      	beq.n	8000442 <fsmManual+0x26>
 800043c:	2b02      	cmp	r3, #2
 800043e:	d006      	beq.n	800044e <fsmManual+0x32>
 8000440:	e011      	b.n	8000466 <fsmManual+0x4a>
		case TRAFFIC_RED:
			SCH_AddTask(traffic0Yellow, 0, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2100      	movs	r1, #0
 8000446:	4821      	ldr	r0, [pc, #132]	; (80004cc <fsmManual+0xb0>)
 8000448:	f000 fc52 	bl	8000cf0 <SCH_AddTask>
			break;
 800044c:	e011      	b.n	8000472 <fsmManual+0x56>
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Green, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2100      	movs	r1, #0
 8000452:	481f      	ldr	r0, [pc, #124]	; (80004d0 <fsmManual+0xb4>)
 8000454:	f000 fc4c 	bl	8000cf0 <SCH_AddTask>
			break;
 8000458:	e00b      	b.n	8000472 <fsmManual+0x56>
		case TRAFFIC_GREEN:
			SCH_AddTask(traffic0Red, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	481d      	ldr	r0, [pc, #116]	; (80004d4 <fsmManual+0xb8>)
 8000460:	f000 fc46 	bl	8000cf0 <SCH_AddTask>
			break;
 8000464:	e005      	b.n	8000472 <fsmManual+0x56>
		default:
			SCH_AddTask(traffic0Red, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	481a      	ldr	r0, [pc, #104]	; (80004d4 <fsmManual+0xb8>)
 800046c:	f000 fc40 	bl	8000cf0 <SCH_AddTask>
			break;
 8000470:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 8000472:	2002      	movs	r0, #2
 8000474:	f7ff fef4 	bl	8000260 <buttonPressed>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d022      	beq.n	80004c4 <fsmManual+0xa8>
		switch (trafficState[1]) {
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <fsmManual+0xac>)
 8000480:	785b      	ldrb	r3, [r3, #1]
 8000482:	2b03      	cmp	r3, #3
 8000484:	d012      	beq.n	80004ac <fsmManual+0x90>
 8000486:	2b03      	cmp	r3, #3
 8000488:	dc16      	bgt.n	80004b8 <fsmManual+0x9c>
 800048a:	2b01      	cmp	r3, #1
 800048c:	d002      	beq.n	8000494 <fsmManual+0x78>
 800048e:	2b02      	cmp	r3, #2
 8000490:	d006      	beq.n	80004a0 <fsmManual+0x84>
 8000492:	e011      	b.n	80004b8 <fsmManual+0x9c>
		case TRAFFIC_RED:
			SCH_AddTask(traffic1Yellow, 0, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2100      	movs	r1, #0
 8000498:	480f      	ldr	r0, [pc, #60]	; (80004d8 <fsmManual+0xbc>)
 800049a:	f000 fc29 	bl	8000cf0 <SCH_AddTask>
			break;
 800049e:	e011      	b.n	80004c4 <fsmManual+0xa8>
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Green, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	480d      	ldr	r0, [pc, #52]	; (80004dc <fsmManual+0xc0>)
 80004a6:	f000 fc23 	bl	8000cf0 <SCH_AddTask>
			break;
 80004aa:	e00b      	b.n	80004c4 <fsmManual+0xa8>
		case TRAFFIC_GREEN:
			SCH_AddTask(traffic1Red, 0, 0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2100      	movs	r1, #0
 80004b0:	480b      	ldr	r0, [pc, #44]	; (80004e0 <fsmManual+0xc4>)
 80004b2:	f000 fc1d 	bl	8000cf0 <SCH_AddTask>
			break;
 80004b6:	e005      	b.n	80004c4 <fsmManual+0xa8>
		default:
			SCH_AddTask(traffic1Green, 0, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2100      	movs	r1, #0
 80004bc:	4807      	ldr	r0, [pc, #28]	; (80004dc <fsmManual+0xc0>)
 80004be:	f000 fc17 	bl	8000cf0 <SCH_AddTask>
			break;
 80004c2:	bf00      	nop
		}
	}
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000334 	.word	0x20000334
 80004cc:	08001839 	.word	0x08001839
 80004d0:	08001849 	.word	0x08001849
 80004d4:	08001829 	.word	0x08001829
 80004d8:	08001879 	.word	0x08001879
 80004dc:	08001889 	.word	0x08001889
 80004e0:	08001869 	.word	0x08001869

080004e4 <fsmTunning>:

void fsmTunning(void) {}
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <fsmInit>:

void fsmInit(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	SCH_AddTask(traffic0Off, 0, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <fsmInit+0x3c>)
 80004fa:	f000 fbf9 	bl	8000cf0 <SCH_AddTask>
	SCH_AddTask(traffic1Off, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	480b      	ldr	r0, [pc, #44]	; (8000530 <fsmInit+0x40>)
 8000504:	f000 fbf4 	bl	8000cf0 <SCH_AddTask>
	SCH_AddTask(pedestrian0Off, 0, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2100      	movs	r1, #0
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <fsmInit+0x44>)
 800050e:	f000 fbef 	bl	8000cf0 <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	4808      	ldr	r0, [pc, #32]	; (8000538 <fsmInit+0x48>)
 8000518:	f000 fbea 	bl	8000cf0 <SCH_AddTask>
	SCH_AddTask(fsmAuto, 0, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <fsmInit+0x4c>)
 8000522:	f000 fbe5 	bl	8000cf0 <SCH_AddTask>
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	08001819 	.word	0x08001819
 8000530:	08001859 	.word	0x08001859
 8000534:	08000b8d 	.word	0x08000b8d
 8000538:	08000bbd 	.word	0x08000bbd
 800053c:	080002ed 	.word	0x080002ed

08000540 <fsmProcessing>:

void fsmProcessing(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
	if (buttonPressed(0)) {
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff fe8a 	bl	8000260 <buttonPressed>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d05b      	beq.n	800060a <fsmProcessing+0xca>
		switch (fsmState) {
 8000552:	4b30      	ldr	r3, [pc, #192]	; (8000614 <fsmProcessing+0xd4>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d03e      	beq.n	80005d8 <fsmProcessing+0x98>
 800055a:	2b02      	cmp	r3, #2
 800055c:	dc54      	bgt.n	8000608 <fsmProcessing+0xc8>
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <fsmProcessing+0x28>
 8000562:	2b01      	cmp	r3, #1
 8000564:	d01c      	beq.n	80005a0 <fsmProcessing+0x60>
			}
			SCH_AddTask(fsmAuto, 0, 0);
			fsmState = FSM_AUTO;
			break;
		default:
			break;
 8000566:	e04f      	b.n	8000608 <fsmProcessing+0xc8>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000568:	2300      	movs	r3, #0
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	e008      	b.n	8000580 <fsmProcessing+0x40>
				SCH_DeleteTask(fsmAutoIDs[i]);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4a29      	ldr	r2, [pc, #164]	; (8000618 <fsmProcessing+0xd8>)
 8000572:	5cd3      	ldrb	r3, [r2, r3]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fcc1 	bl	8000efc <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	3301      	adds	r3, #1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2b06      	cmp	r3, #6
 8000584:	d9f3      	bls.n	800056e <fsmProcessing+0x2e>
			fsmManualIDs[0] = SCH_AddTask(fsmManual, 0, 10);
 8000586:	220a      	movs	r2, #10
 8000588:	2100      	movs	r1, #0
 800058a:	4824      	ldr	r0, [pc, #144]	; (800061c <fsmProcessing+0xdc>)
 800058c:	f000 fbb0 	bl	8000cf0 <SCH_AddTask>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <fsmProcessing+0xe0>)
 8000596:	701a      	strb	r2, [r3, #0]
			fsmState = FSM_MANUAL;
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <fsmProcessing+0xd4>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
			break;
 800059e:	e034      	b.n	800060a <fsmProcessing+0xca>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 80005a0:	2300      	movs	r3, #0
 80005a2:	71bb      	strb	r3, [r7, #6]
 80005a4:	e008      	b.n	80005b8 <fsmProcessing+0x78>
				SCH_DeleteTask(fsmManualIDs[i]);
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <fsmProcessing+0xe0>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fca5 	bl	8000efc <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	3301      	adds	r3, #1
 80005b6:	71bb      	strb	r3, [r7, #6]
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f3      	beq.n	80005a6 <fsmProcessing+0x66>
			fsmTunningIDs[0] = SCH_AddTask(fsmTunning, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	4818      	ldr	r0, [pc, #96]	; (8000624 <fsmProcessing+0xe4>)
 80005c4:	f000 fb94 	bl	8000cf0 <SCH_AddTask>
 80005c8:	4603      	mov	r3, r0
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <fsmProcessing+0xe8>)
 80005ce:	701a      	strb	r2, [r3, #0]
			fsmState = FSM_TUNNING;
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <fsmProcessing+0xd4>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	701a      	strb	r2, [r3, #0]
			break;
 80005d6:	e018      	b.n	800060a <fsmProcessing+0xca>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 80005d8:	2300      	movs	r3, #0
 80005da:	717b      	strb	r3, [r7, #5]
 80005dc:	e008      	b.n	80005f0 <fsmProcessing+0xb0>
				SCH_DeleteTask(fsmTunningIDs[i]);
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	4a11      	ldr	r2, [pc, #68]	; (8000628 <fsmProcessing+0xe8>)
 80005e2:	5cd3      	ldrb	r3, [r2, r3]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fc89 	bl	8000efc <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 80005ea:	797b      	ldrb	r3, [r7, #5]
 80005ec:	3301      	adds	r3, #1
 80005ee:	717b      	strb	r3, [r7, #5]
 80005f0:	797b      	ldrb	r3, [r7, #5]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f3      	beq.n	80005de <fsmProcessing+0x9e>
			SCH_AddTask(fsmAuto, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	480c      	ldr	r0, [pc, #48]	; (800062c <fsmProcessing+0xec>)
 80005fc:	f000 fb78 	bl	8000cf0 <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <fsmProcessing+0xd4>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
			break;
 8000606:	e000      	b.n	800060a <fsmProcessing+0xca>
			break;
 8000608:	bf00      	nop
		}
	}
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000100 	.word	0x20000100
 8000618:	20000104 	.word	0x20000104
 800061c:	0800041d 	.word	0x0800041d
 8000620:	2000010c 	.word	0x2000010c
 8000624:	080004e5 	.word	0x080004e5
 8000628:	20000110 	.word	0x20000110
 800062c:	080002ed 	.word	0x080002ed

08000630 <ledBlink>:
 *      Author: Nhat Khai
 */

#include "led.h"

void ledBlink(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000634:	2120      	movs	r1, #32
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <ledBlink+0x10>)
 8000638:	f001 fd21 	bl	800207e <HAL_GPIO_TogglePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40010800 	.word	0x40010800

08000644 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a08      	ldr	r2, [pc, #32]	; (8000674 <HAL_UART_RxCpltCallback+0x30>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d10a      	bne.n	800066c <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	4907      	ldr	r1, [pc, #28]	; (8000678 <HAL_UART_RxCpltCallback+0x34>)
 800065a:	4808      	ldr	r0, [pc, #32]	; (800067c <HAL_UART_RxCpltCallback+0x38>)
 800065c:	f003 f895 	bl	800378a <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000660:	2332      	movs	r3, #50	; 0x32
 8000662:	2201      	movs	r2, #1
 8000664:	4904      	ldr	r1, [pc, #16]	; (8000678 <HAL_UART_RxCpltCallback+0x34>)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <HAL_UART_RxCpltCallback+0x38>)
 8000668:	f003 f80c 	bl	8003684 <HAL_UART_Transmit>
	}
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40004400 	.word	0x40004400
 8000678:	200001ec 	.word	0x200001ec
 800067c:	200001a4 	.word	0x200001a4

08000680 <reportPrint>:
void reportPrint(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
	char str[20];
	uint8_t count = SCH_Report();
 8000686:	f000 fe01 	bl	800128c <SCH_Report>
 800068a:	4603      	mov	r3, r0
 800068c:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tasks: %u\r\n", count), 100);
 800068e:	7dfa      	ldrb	r2, [r7, #23]
 8000690:	463b      	mov	r3, r7
 8000692:	4907      	ldr	r1, [pc, #28]	; (80006b0 <reportPrint+0x30>)
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fef1 	bl	800447c <siprintf>
 800069a:	4603      	mov	r3, r0
 800069c:	b29a      	uxth	r2, r3
 800069e:	4639      	mov	r1, r7
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <reportPrint+0x34>)
 80006a4:	f002 ffee 	bl	8003684 <HAL_UART_Transmit>
}
 80006a8:	bf00      	nop
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	08005518 	.word	0x08005518
 80006b4:	200001a4 	.word	0x200001a4

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f001 f912 	bl	80018e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f842 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f974 	bl	80009b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006c8:	f000 f87a 	bl	80007c0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006cc:	f000 f946 	bl	800095c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80006d0:	f000 f8c2 	bl	8000858 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006d4:	4814      	ldr	r0, [pc, #80]	; (8000728 <main+0x70>)
 80006d6:	f002 f94b 	bl	8002970 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	4913      	ldr	r1, [pc, #76]	; (800072c <main+0x74>)
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <main+0x78>)
 80006e0:	f003 f853 	bl	800378a <HAL_UART_Receive_IT>
  SCH_Init();
 80006e4:	f000 fa72 	bl	8000bcc <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(ledBlink, 0, 1000);
 80006e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ec:	2100      	movs	r1, #0
 80006ee:	4811      	ldr	r0, [pc, #68]	; (8000734 <main+0x7c>)
 80006f0:	f000 fafe 	bl	8000cf0 <SCH_AddTask>
  SCH_AddTask(buttonReading, 0, 10);
 80006f4:	220a      	movs	r2, #10
 80006f6:	2100      	movs	r1, #0
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <main+0x80>)
 80006fa:	f000 faf9 	bl	8000cf0 <SCH_AddTask>
  SCH_AddTask(reportPrint, 500, 1000);
 80006fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000702:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <main+0x84>)
 8000708:	f000 faf2 	bl	8000cf0 <SCH_AddTask>
  SCH_AddTask(fsmInit, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <main+0x88>)
 8000712:	f000 faed 	bl	8000cf0 <SCH_AddTask>
  SCH_AddTask(fsmProcessing, 1000, 10);
 8000716:	220a      	movs	r2, #10
 8000718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <main+0x8c>)
 800071e:	f000 fae7 	bl	8000cf0 <SCH_AddTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch();
 8000722:	f000 fac3 	bl	8000cac <SCH_Dispatch>
 8000726:	e7fc      	b.n	8000722 <main+0x6a>
 8000728:	20000114 	.word	0x20000114
 800072c:	200001ec 	.word	0x200001ec
 8000730:	200001a4 	.word	0x200001a4
 8000734:	08000631 	.word	0x08000631
 8000738:	0800014d 	.word	0x0800014d
 800073c:	08000681 	.word	0x08000681
 8000740:	080004f1 	.word	0x080004f1
 8000744:	08000541 	.word	0x08000541

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b090      	sub	sp, #64	; 0x40
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0318 	add.w	r3, r7, #24
 8000752:	2228      	movs	r2, #40	; 0x28
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fef3 	bl	8004542 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076e:	2301      	movs	r3, #1
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2310      	movs	r3, #16
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000776:	2300      	movs	r3, #0
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0318 	add.w	r3, r7, #24
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fc96 	bl	80020b0 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800078a:	f000 f990 	bl	8000aae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 ff04 	bl	80025b4 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007b2:	f000 f97c 	bl	8000aae <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3740      	adds	r7, #64	; 0x40
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_TIM2_Init+0x94>)
 80007de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_TIM2_Init+0x94>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_TIM2_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_TIM2_Init+0x94>)
 80007f2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80007f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_TIM2_Init+0x94>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_TIM2_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <MX_TIM2_Init+0x94>)
 8000806:	f002 f863 	bl	80028d0 <HAL_TIM_Base_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000810:	f000 f94d 	bl	8000aae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_TIM2_Init+0x94>)
 8000822:	f002 fb13 	bl	8002e4c <HAL_TIM_ConfigClockSource>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800082c:	f000 f93f 	bl	8000aae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_TIM2_Init+0x94>)
 800083e:	f002 fe67 	bl	8003510 <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000848:	f000 f931 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000114 	.word	0x20000114

08000858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000888:	4b32      	ldr	r3, [pc, #200]	; (8000954 <MX_TIM3_Init+0xfc>)
 800088a:	4a33      	ldr	r2, [pc, #204]	; (8000958 <MX_TIM3_Init+0x100>)
 800088c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800088e:	4b31      	ldr	r3, [pc, #196]	; (8000954 <MX_TIM3_Init+0xfc>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <MX_TIM3_Init+0xfc>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 800089a:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <MX_TIM3_Init+0xfc>)
 800089c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80008a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <MX_TIM3_Init+0xfc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <MX_TIM3_Init+0xfc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ae:	4829      	ldr	r0, [pc, #164]	; (8000954 <MX_TIM3_Init+0xfc>)
 80008b0:	f002 f80e 	bl	80028d0 <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008ba:	f000 f8f8 	bl	8000aae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4822      	ldr	r0, [pc, #136]	; (8000954 <MX_TIM3_Init+0xfc>)
 80008cc:	f002 fabe 	bl	8002e4c <HAL_TIM_ConfigClockSource>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008d6:	f000 f8ea 	bl	8000aae <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008da:	481e      	ldr	r0, [pc, #120]	; (8000954 <MX_TIM3_Init+0xfc>)
 80008dc:	f002 f894 	bl	8002a08 <HAL_TIM_PWM_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008e6:	f000 f8e2 	bl	8000aae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	4619      	mov	r1, r3
 80008f8:	4816      	ldr	r0, [pc, #88]	; (8000954 <MX_TIM3_Init+0xfc>)
 80008fa:	f002 fe09 	bl	8003510 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000904:	f000 f8d3 	bl	8000aae <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000908:	2360      	movs	r3, #96	; 0x60
 800090a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <MX_TIM3_Init+0xfc>)
 8000920:	f002 f9d2 	bl	8002cc8 <HAL_TIM_PWM_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800092a:	f000 f8c0 	bl	8000aae <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2204      	movs	r2, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4807      	ldr	r0, [pc, #28]	; (8000954 <MX_TIM3_Init+0xfc>)
 8000936:	f002 f9c7 	bl	8002cc8 <HAL_TIM_PWM_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000940:	f000 f8b5 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <MX_TIM3_Init+0xfc>)
 8000946:	f000 fd27 	bl	8001398 <HAL_TIM_MspPostInit>

}
 800094a:	bf00      	nop
 800094c:	3738      	adds	r7, #56	; 0x38
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000015c 	.word	0x2000015c
 8000958:	40000400 	.word	0x40000400

0800095c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART2_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000968:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000994:	f002 fe26 	bl	80035e4 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f886 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200001a4 	.word	0x200001a4
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <MX_GPIO_Init+0xd4>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a2e      	ldr	r2, [pc, #184]	; (8000a84 <MX_GPIO_Init+0xd4>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b2c      	ldr	r3, [pc, #176]	; (8000a84 <MX_GPIO_Init+0xd4>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <MX_GPIO_Init+0xd4>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a28      	ldr	r2, [pc, #160]	; (8000a84 <MX_GPIO_Init+0xd4>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_GPIO_Init+0xd4>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2120      	movs	r1, #32
 80009f8:	4823      	ldr	r0, [pc, #140]	; (8000a88 <MX_GPIO_Init+0xd8>)
 80009fa:	f001 fb28 	bl	800204e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|GPIO_PIN_2|GPIO_PIN_10
 80009fe:	2200      	movs	r2, #0
 8000a00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a04:	4821      	ldr	r0, [pc, #132]	; (8000a8c <MX_GPIO_Init+0xdc>)
 8000a06:	f001 fb22 	bl	800204e <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin|TRAFFIC1_GREEN_Pin
                          |GPIO_PIN_15|GPIO_PIN_3|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin
                          |TRAFFIC0_GREEN_Pin|GPIO_PIN_7|PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2302      	movs	r3, #2
 8000a18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4819      	ldr	r0, [pc, #100]	; (8000a88 <MX_GPIO_Init+0xd8>)
 8000a22:	f001 f981 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDESTRIAN0_RED_Pin PEDESTRIAN0_GREEN_Pin TRAFFIC1_RED_Pin TRAFFIC1_YELLOW_Pin
                           TRAFFIC1_GREEN_Pin TRAFFIC0_RED_Pin TRAFFIC0_YELLOW_Pin TRAFFIC0_GREEN_Pin
                           PEDESTRIAN1_RED_Pin PEDESTRIAN1_GREEN_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin
 8000a26:	f247 3373 	movw	r3, #29555	; 0x7373
 8000a2a:	60bb      	str	r3, [r7, #8]
                          |TRAFFIC1_GREEN_Pin|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin|TRAFFIC0_GREEN_Pin
                          |PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2302      	movs	r3, #2
 8000a36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4813      	ldr	r0, [pc, #76]	; (8000a8c <MX_GPIO_Init+0xdc>)
 8000a40:	f001 f972 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB15
                           PB3 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 8000a44:	f648 438c 	movw	r3, #35980	; 0x8c8c
 8000a48:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2302      	movs	r3, #2
 8000a54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <MX_GPIO_Init+0xdc>)
 8000a5e:	f001 f963 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000a62:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	4619      	mov	r1, r3
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0xd8>)
 8000a78:	f001 f956 	bl	8001d28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	40010c00 	.word	0x40010c00

08000a90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa0:	d101      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8000aa2:	f000 f8dd 	bl	8000c60 <SCH_Update>
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab2:	b672      	cpsid	i
}
 8000ab4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <Error_Handler+0x8>

08000ab8 <pedestrianToggle>:
static GPIO_TypeDef* pedestrianGreenPorts[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_GPIO_Port};

static uint16_t pedestrianRedPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_RED_Pin, PEDESTRIAN1_RED_Pin};
static uint16_t pedestrianGreenPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_Pin, PEDESTRIAN1_GREEN_Pin};

void pedestrianToggle(uint8_t index, enum PEDESTRIAN_STATE state) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8000ac8:	79bb      	ldrb	r3, [r7, #6]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d038      	beq.n	8000b40 <pedestrianToggle+0x88>
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	dc4f      	bgt.n	8000b72 <pedestrianToggle+0xba>
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d002      	beq.n	8000adc <pedestrianToggle+0x24>
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d019      	beq.n	8000b0e <pedestrianToggle+0x56>
	case PEDESTRIAN_GREEN:
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
		break;
	default:
		break;
 8000ada:	e04a      	b.n	8000b72 <pedestrianToggle+0xba>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <pedestrianToggle+0xc4>)
 8000ae0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <pedestrianToggle+0xc8>)
 8000ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	f001 faad 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <pedestrianToggle+0xcc>)
 8000af8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4a22      	ldr	r2, [pc, #136]	; (8000b88 <pedestrianToggle+0xd0>)
 8000b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	f001 faa1 	bl	800204e <HAL_GPIO_WritePin>
		break;
 8000b0c:	e032      	b.n	8000b74 <pedestrianToggle+0xbc>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_RESET);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <pedestrianToggle+0xc4>)
 8000b12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <pedestrianToggle+0xc8>)
 8000b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4619      	mov	r1, r3
 8000b22:	f001 fa94 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <pedestrianToggle+0xcc>)
 8000b2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <pedestrianToggle+0xd0>)
 8000b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b36:	2201      	movs	r2, #1
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f001 fa88 	bl	800204e <HAL_GPIO_WritePin>
		break;
 8000b3e:	e019      	b.n	8000b74 <pedestrianToggle+0xbc>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <pedestrianToggle+0xc4>)
 8000b44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <pedestrianToggle+0xc8>)
 8000b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b50:	2201      	movs	r2, #1
 8000b52:	4619      	mov	r1, r3
 8000b54:	f001 fa7b 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <pedestrianToggle+0xcc>)
 8000b5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <pedestrianToggle+0xd0>)
 8000b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f001 fa6f 	bl	800204e <HAL_GPIO_WritePin>
		break;
 8000b70:	e000      	b.n	8000b74 <pedestrianToggle+0xbc>
		break;
 8000b72:	bf00      	nop
	}
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000018 	.word	0x20000018
 8000b80:	20000028 	.word	0x20000028
 8000b84:	20000020 	.word	0x20000020
 8000b88:	2000002c 	.word	0x2000002c

08000b8c <pedestrian0Off>:

void pedestrian0Off(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	pedestrianToggle(0, PEDESTRIAN_OFF);
 8000b90:	2100      	movs	r1, #0
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ff90 	bl	8000ab8 <pedestrianToggle>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <pedestrian0Red>:
void pedestrian0Red(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	pedestrianToggle(0, PEDESTRIAN_RED);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff ff88 	bl	8000ab8 <pedestrianToggle>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <pedestrian0Green>:
void pedestrian0Green(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	pedestrianToggle(0, PEDESTRIAN_GREEN);
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff ff80 	bl	8000ab8 <pedestrianToggle>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <pedestrian1Off>:

void pedestrian1Off(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	pedestrianToggle(1, PEDESTRIAN_OFF);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff ff78 	bl	8000ab8 <pedestrianToggle>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	71fb      	strb	r3, [r7, #7]
 8000bd6:	e037      	b.n	8000c48 <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	4920      	ldr	r1, [pc, #128]	; (8000c5c <SCH_Init+0x90>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i - 1;
 8000bea:	79fa      	ldrb	r2, [r7, #7]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f1c3 030f 	rsb	r3, r3, #15
 8000bf2:	b2d8      	uxtb	r0, r3
 8000bf4:	4919      	ldr	r1, [pc, #100]	; (8000c5c <SCH_Init+0x90>)
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	3304      	adds	r3, #4
 8000c02:	4602      	mov	r2, r0
 8000c04:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8000c06:	79fa      	ldrb	r2, [r7, #7]
 8000c08:	4914      	ldr	r1, [pc, #80]	; (8000c5c <SCH_Init+0x90>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	3308      	adds	r3, #8
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	490f      	ldr	r1, [pc, #60]	; (8000c5c <SCH_Init+0x90>)
 8000c1e:	4613      	mov	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	440b      	add	r3, r1
 8000c28:	330c      	adds	r3, #12
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	490a      	ldr	r1, [pc, #40]	; (8000c5c <SCH_Init+0x90>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3310      	adds	r3, #16
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	3301      	adds	r3, #1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2b0f      	cmp	r3, #15
 8000c4c:	d9c4      	bls.n	8000bd8 <SCH_Init+0xc>
    }
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200001f0 	.word	0x200001f0

08000c60 <SCH_Update>:

void SCH_Update(void) {
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <SCH_Update+0x48>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d018      	beq.n	8000c9e <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <SCH_Update+0x48>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00c      	beq.n	8000c8e <SCH_Update+0x2e>
		if (tasks[0].delay > SCH_TIMERTICK) {
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <SCH_Update+0x48>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b0a      	cmp	r3, #10
 8000c7a:	d905      	bls.n	8000c88 <SCH_Update+0x28>
			tasks[0].delay -= SCH_TIMERTICK;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <SCH_Update+0x48>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	3b0a      	subs	r3, #10
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <SCH_Update+0x48>)
 8000c84:	6093      	str	r3, [r2, #8]
 8000c86:	e002      	b.n	8000c8e <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <SCH_Update+0x48>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SCH_Update+0x48>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d104      	bne.n	8000ca0 <SCH_Update+0x40>
		tasks[0].flag = 1;
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SCH_Update+0x48>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	741a      	strb	r2, [r3, #16]
 8000c9c:	e000      	b.n	8000ca0 <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 8000c9e:	bf00      	nop
	}
}
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200001f0 	.word	0x200001f0

08000cac <SCH_Dispatch>:

void SCH_Dispatch(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <SCH_Dispatch+0x3c>)
 8000cb2:	7c1b      	ldrb	r3, [r3, #16]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d015      	beq.n	8000ce4 <SCH_Dispatch+0x38>
    printf("Dispatch Task %d\n", tasks[0].id);
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <SCH_Dispatch+0x3c>)
 8000cba:	791b      	ldrb	r3, [r3, #4]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480b      	ldr	r0, [pc, #44]	; (8000cec <SCH_Dispatch+0x40>)
 8000cc0:	f003 fbca 	bl	8004458 <iprintf>
    (*tasks[0].functionPointer)();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <SCH_Dispatch+0x3c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4798      	blx	r3
    if (tasks[0].period > 0) {
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <SCH_Dispatch+0x3c>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <SCH_Dispatch+0x2c>
        SCH_RefreshTask();
 8000cd2:	f000 f9a5 	bl	8001020 <SCH_RefreshTask>
 8000cd6:	e006      	b.n	8000ce6 <SCH_Dispatch+0x3a>
    }
    else {
        SCH_DeleteTask(tasks[0].id);
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <SCH_Dispatch+0x3c>)
 8000cda:	791b      	ldrb	r3, [r3, #4]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f90d 	bl	8000efc <SCH_DeleteTask>
 8000ce2:	e000      	b.n	8000ce6 <SCH_Dispatch+0x3a>
    if (tasks[0].flag == 0) return;
 8000ce4:	bf00      	nop
    }
}
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200001f0 	.word	0x200001f0
 8000cec:	08005524 	.word	0x08005524

08000cf0 <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 8000cf0:	b4b0      	push	{r4, r5, r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return SCH_TASKNUMBER;
 8000cfc:	4b7e      	ldr	r3, [pc, #504]	; (8000ef8 <SCH_AddTask+0x208>)
 8000cfe:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SCH_AddTask+0x1a>
 8000d06:	2310      	movs	r3, #16
 8000d08:	e0f1      	b.n	8000eee <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 8000d0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ef8 <SCH_AddTask+0x208>)
 8000d0c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8000d10:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000d16:	2300      	movs	r3, #0
 8000d18:	76fb      	strb	r3, [r7, #27]
 8000d1a:	e0e3      	b.n	8000ee4 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 8000d1c:	7efa      	ldrb	r2, [r7, #27]
 8000d1e:	4976      	ldr	r1, [pc, #472]	; (8000ef8 <SCH_AddTask+0x208>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	440b      	add	r3, r1
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	4413      	add	r3, r2
 8000d32:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d80a      	bhi.n	8000d52 <SCH_AddTask+0x62>
 8000d3c:	7efa      	ldrb	r2, [r7, #27]
 8000d3e:	496e      	ldr	r1, [pc, #440]	; (8000ef8 <SCH_AddTask+0x208>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	440b      	add	r3, r1
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f040 80c6 	bne.w	8000ede <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8000d52:	230f      	movs	r3, #15
 8000d54:	76bb      	strb	r3, [r7, #26]
 8000d56:	e017      	b.n	8000d88 <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 8000d58:	7ebb      	ldrb	r3, [r7, #26]
 8000d5a:	1e5a      	subs	r2, r3, #1
 8000d5c:	7eb9      	ldrb	r1, [r7, #26]
 8000d5e:	4866      	ldr	r0, [pc, #408]	; (8000ef8 <SCH_AddTask+0x208>)
 8000d60:	460b      	mov	r3, r1
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4418      	add	r0, r3
 8000d6a:	4963      	ldr	r1, [pc, #396]	; (8000ef8 <SCH_AddTask+0x208>)
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	4604      	mov	r4, r0
 8000d78:	461d      	mov	r5, r3
 8000d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7e:	682b      	ldr	r3, [r5, #0]
 8000d80:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8000d82:	7ebb      	ldrb	r3, [r7, #26]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	76bb      	strb	r3, [r7, #26]
 8000d88:	7eba      	ldrb	r2, [r7, #26]
 8000d8a:	7efb      	ldrb	r3, [r7, #27]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8e3      	bhi.n	8000d58 <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 8000d90:	7efa      	ldrb	r2, [r7, #27]
 8000d92:	4959      	ldr	r1, [pc, #356]	; (8000ef8 <SCH_AddTask+0x208>)
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 8000da2:	7efa      	ldrb	r2, [r7, #27]
 8000da4:	4954      	ldr	r1, [pc, #336]	; (8000ef8 <SCH_AddTask+0x208>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	3304      	adds	r3, #4
 8000db2:	7e7a      	ldrb	r2, [r7, #25]
 8000db4:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 8000db6:	7efa      	ldrb	r2, [r7, #27]
 8000db8:	494f      	ldr	r1, [pc, #316]	; (8000ef8 <SCH_AddTask+0x208>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	330c      	adds	r3, #12
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 8000dca:	7efa      	ldrb	r2, [r7, #27]
 8000dcc:	494a      	ldr	r1, [pc, #296]	; (8000ef8 <SCH_AddTask+0x208>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3310      	adds	r3, #16
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d950      	bls.n	8000e88 <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 8000dee:	7efb      	ldrb	r3, [r7, #27]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	4941      	ldr	r1, [pc, #260]	; (8000ef8 <SCH_AddTask+0x208>)
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	3308      	adds	r3, #8
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	7efa      	ldrb	r2, [r7, #27]
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	483b      	ldr	r0, [pc, #236]	; (8000ef8 <SCH_AddTask+0x208>)
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4403      	add	r3, r0
 8000e14:	3308      	adds	r3, #8
 8000e16:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000e18:	7efa      	ldrb	r2, [r7, #27]
 8000e1a:	4937      	ldr	r1, [pc, #220]	; (8000ef8 <SCH_AddTask+0x208>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	3308      	adds	r3, #8
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d109      	bne.n	8000e42 <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 8000e2e:	7efa      	ldrb	r2, [r7, #27]
 8000e30:	4931      	ldr	r1, [pc, #196]	; (8000ef8 <SCH_AddTask+0x208>)
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	3310      	adds	r3, #16
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8000e42:	7efb      	ldrb	r3, [r7, #27]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	6979      	ldr	r1, [r7, #20]
 8000e48:	482b      	ldr	r0, [pc, #172]	; (8000ef8 <SCH_AddTask+0x208>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4403      	add	r3, r0
 8000e54:	3308      	adds	r3, #8
 8000e56:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 8000e58:	7efb      	ldrb	r3, [r7, #27]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	4926      	ldr	r1, [pc, #152]	; (8000ef8 <SCH_AddTask+0x208>)
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	3308      	adds	r3, #8
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d12c      	bne.n	8000eca <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 8000e70:	7efb      	ldrb	r3, [r7, #27]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	4920      	ldr	r1, [pc, #128]	; (8000ef8 <SCH_AddTask+0x208>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	440b      	add	r3, r1
 8000e80:	3310      	adds	r3, #16
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e020      	b.n	8000eca <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 8000e88:	7efa      	ldrb	r2, [r7, #27]
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <SCH_AddTask+0x208>)
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4403      	add	r3, r0
 8000e9c:	3308      	adds	r3, #8
 8000e9e:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000ea0:	7efa      	ldrb	r2, [r7, #27]
 8000ea2:	4915      	ldr	r1, [pc, #84]	; (8000ef8 <SCH_AddTask+0x208>)
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	3308      	adds	r3, #8
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 8000eb6:	7efa      	ldrb	r2, [r7, #27]
 8000eb8:	490f      	ldr	r1, [pc, #60]	; (8000ef8 <SCH_AddTask+0x208>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3310      	adds	r3, #16
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 8000eca:	7efa      	ldrb	r2, [r7, #27]
 8000ecc:	490a      	ldr	r1, [pc, #40]	; (8000ef8 <SCH_AddTask+0x208>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3304      	adds	r3, #4
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	e007      	b.n	8000eee <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000ede:	7efb      	ldrb	r3, [r7, #27]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	76fb      	strb	r3, [r7, #27]
 8000ee4:	7efb      	ldrb	r3, [r7, #27]
 8000ee6:	2b0f      	cmp	r3, #15
 8000ee8:	f67f af18 	bls.w	8000d1c <SCH_AddTask+0x2c>
        }
    }
    return SCH_TASKNUMBER;
 8000eec:	2310      	movs	r3, #16
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bcb0      	pop	{r4, r5, r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	200001f0 	.word	0x200001f0

08000efc <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 8000efc:	b4b0      	push	{r4, r5, r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e07c      	b.n	8001006 <SCH_DeleteTask+0x10a>
        if (tasks[i].id == id) {
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	4943      	ldr	r1, [pc, #268]	; (800101c <SCH_DeleteTask+0x120>)
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d16d      	bne.n	8001000 <SCH_DeleteTask+0x104>
            uint8_t currentID = tasks[i].id;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	493d      	ldr	r1, [pc, #244]	; (800101c <SCH_DeleteTask+0x120>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	3304      	adds	r3, #4
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	4937      	ldr	r1, [pc, #220]	; (800101c <SCH_DeleteTask+0x120>)
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d01d      	beq.n	8000f8a <SCH_DeleteTask+0x8e>
                tasks[i + 1].delay += tasks[i].delay;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	4932      	ldr	r1, [pc, #200]	; (800101c <SCH_DeleteTask+0x120>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3308      	adds	r3, #8
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	482d      	ldr	r0, [pc, #180]	; (800101c <SCH_DeleteTask+0x120>)
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4403      	add	r3, r0
 8000f70:	3308      	adds	r3, #8
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	3201      	adds	r2, #1
 8000f78:	4419      	add	r1, r3
 8000f7a:	4828      	ldr	r0, [pc, #160]	; (800101c <SCH_DeleteTask+0x120>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4403      	add	r3, r0
 8000f86:	3308      	adds	r3, #8
 8000f88:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	73bb      	strb	r3, [r7, #14]
 8000f8e:	e017      	b.n	8000fc0 <SCH_DeleteTask+0xc4>
                tasks[j] = tasks[j + 1];
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	7bb9      	ldrb	r1, [r7, #14]
 8000f96:	4821      	ldr	r0, [pc, #132]	; (800101c <SCH_DeleteTask+0x120>)
 8000f98:	460b      	mov	r3, r1
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4418      	add	r0, r3
 8000fa2:	491e      	ldr	r1, [pc, #120]	; (800101c <SCH_DeleteTask+0x120>)
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	4604      	mov	r4, r0
 8000fb0:	461d      	mov	r5, r3
 8000fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb6:	682b      	ldr	r3, [r5, #0]
 8000fb8:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	73bb      	strb	r3, [r7, #14]
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b0e      	cmp	r3, #14
 8000fc4:	d9e4      	bls.n	8000f90 <SCH_DeleteTask+0x94>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <SCH_DeleteTask+0x120>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <SCH_DeleteTask+0x120>)
 8000fd0:	7b7b      	ldrb	r3, [r7, #13]
 8000fd2:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <SCH_DeleteTask+0x120>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            tasks[SCH_TASKNUMBER - 1].period = 0;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <SCH_DeleteTask+0x120>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <SCH_DeleteTask+0x120>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <SCH_DeleteTask+0x120>)
 8000ff0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf0c      	ite	eq
 8000ff8:	2301      	moveq	r3, #1
 8000ffa:	2300      	movne	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	e007      	b.n	8001010 <SCH_DeleteTask+0x114>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	3301      	adds	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	f67f af7f 	bls.w	8000f0c <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bcb0      	pop	{r4, r5, r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200001f0 	.word	0x200001f0

08001020 <SCH_RefreshTask>:

unsigned char SCH_RefreshTask(void) {
 8001020:	b4b0      	push	{r4, r5, r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0 || tasks[0].delay != 0) return 0;
 8001026:	4b98      	ldr	r3, [pc, #608]	; (8001288 <SCH_RefreshTask+0x268>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <SCH_RefreshTask+0x16>
 800102e:	4b96      	ldr	r3, [pc, #600]	; (8001288 <SCH_RefreshTask+0x268>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SCH_RefreshTask+0x1a>
 8001036:	2300      	movs	r3, #0
 8001038:	e120      	b.n	800127c <SCH_RefreshTask+0x25c>
    SCH_Task currentTask = tasks[0];
 800103a:	4b93      	ldr	r3, [pc, #588]	; (8001288 <SCH_RefreshTask+0x268>)
 800103c:	463c      	mov	r4, r7
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	6023      	str	r3, [r4, #0]
    uint32_t currentDelay = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800104c:	2300      	movs	r3, #0
 800104e:	76fb      	strb	r3, [r7, #27]
 8001050:	e10f      	b.n	8001272 <SCH_RefreshTask+0x252>
        if (i + 1 == SCH_TASKNUMBER || tasks[i + 1].functionPointer == NULL) {
 8001052:	7efb      	ldrb	r3, [r7, #27]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d00a      	beq.n	800106e <SCH_RefreshTask+0x4e>
 8001058:	7efb      	ldrb	r3, [r7, #27]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	498a      	ldr	r1, [pc, #552]	; (8001288 <SCH_RefreshTask+0x268>)
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d14a      	bne.n	8001104 <SCH_RefreshTask+0xe4>
            tasks[i].functionPointer = currentTask.functionPointer;
 800106e:	7efa      	ldrb	r2, [r7, #27]
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	4885      	ldr	r0, [pc, #532]	; (8001288 <SCH_RefreshTask+0x268>)
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4403      	add	r3, r0
 800107e:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8001080:	7efa      	ldrb	r2, [r7, #27]
 8001082:	7938      	ldrb	r0, [r7, #4]
 8001084:	4980      	ldr	r1, [pc, #512]	; (8001288 <SCH_RefreshTask+0x268>)
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	3304      	adds	r3, #4
 8001092:	4602      	mov	r2, r0
 8001094:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 8001096:	7efa      	ldrb	r2, [r7, #27]
 8001098:	68f9      	ldr	r1, [r7, #12]
 800109a:	487b      	ldr	r0, [pc, #492]	; (8001288 <SCH_RefreshTask+0x268>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4403      	add	r3, r0
 80010a6:	330c      	adds	r3, #12
 80010a8:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 80010aa:	7efa      	ldrb	r2, [r7, #27]
 80010ac:	4976      	ldr	r1, [pc, #472]	; (8001288 <SCH_RefreshTask+0x268>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	3310      	adds	r3, #16
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	7efa      	ldrb	r2, [r7, #27]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	1ac9      	subs	r1, r1, r3
 80010c6:	4870      	ldr	r0, [pc, #448]	; (8001288 <SCH_RefreshTask+0x268>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4403      	add	r3, r0
 80010d2:	3308      	adds	r3, #8
 80010d4:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 80010d6:	7efa      	ldrb	r2, [r7, #27]
 80010d8:	496b      	ldr	r1, [pc, #428]	; (8001288 <SCH_RefreshTask+0x268>)
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d109      	bne.n	8001100 <SCH_RefreshTask+0xe0>
                tasks[i].flag = 1;
 80010ec:	7efa      	ldrb	r2, [r7, #27]
 80010ee:	4966      	ldr	r1, [pc, #408]	; (8001288 <SCH_RefreshTask+0x268>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3310      	adds	r3, #16
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001100:	2301      	movs	r3, #1
 8001102:	e0bb      	b.n	800127c <SCH_RefreshTask+0x25c>
        }
        currentDelay += tasks[i + 1].delay;
 8001104:	7efb      	ldrb	r3, [r7, #27]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	495f      	ldr	r1, [pc, #380]	; (8001288 <SCH_RefreshTask+0x268>)
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3308      	adds	r3, #8
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	4413      	add	r3, r2
 800111c:	61fb      	str	r3, [r7, #28]
        if (currentDelay > currentTask.period) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	429a      	cmp	r2, r3
 8001124:	f240 808d 	bls.w	8001242 <SCH_RefreshTask+0x222>
            tasks[i].functionPointer = currentTask.functionPointer;
 8001128:	7efa      	ldrb	r2, [r7, #27]
 800112a:	6839      	ldr	r1, [r7, #0]
 800112c:	4856      	ldr	r0, [pc, #344]	; (8001288 <SCH_RefreshTask+0x268>)
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4403      	add	r3, r0
 8001138:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 800113a:	7efa      	ldrb	r2, [r7, #27]
 800113c:	7938      	ldrb	r0, [r7, #4]
 800113e:	4952      	ldr	r1, [pc, #328]	; (8001288 <SCH_RefreshTask+0x268>)
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3304      	adds	r3, #4
 800114c:	4602      	mov	r2, r0
 800114e:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 8001150:	7efa      	ldrb	r2, [r7, #27]
 8001152:	68f9      	ldr	r1, [r7, #12]
 8001154:	484c      	ldr	r0, [pc, #304]	; (8001288 <SCH_RefreshTask+0x268>)
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4403      	add	r3, r0
 8001160:	330c      	adds	r3, #12
 8001162:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8001164:	7efa      	ldrb	r2, [r7, #27]
 8001166:	4948      	ldr	r1, [pc, #288]	; (8001288 <SCH_RefreshTask+0x268>)
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	3310      	adds	r3, #16
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 8001180:	7efb      	ldrb	r3, [r7, #27]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	4940      	ldr	r1, [pc, #256]	; (8001288 <SCH_RefreshTask+0x268>)
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3308      	adds	r3, #8
 8001192:	6819      	ldr	r1, [r3, #0]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	7efa      	ldrb	r2, [r7, #27]
 8001198:	1ac9      	subs	r1, r1, r3
 800119a:	483b      	ldr	r0, [pc, #236]	; (8001288 <SCH_RefreshTask+0x268>)
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4403      	add	r3, r0
 80011a6:	3308      	adds	r3, #8
 80011a8:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 80011aa:	7efa      	ldrb	r2, [r7, #27]
 80011ac:	4936      	ldr	r1, [pc, #216]	; (8001288 <SCH_RefreshTask+0x268>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	3308      	adds	r3, #8
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <SCH_RefreshTask+0x1b4>
                tasks[i].flag = 1;
 80011c0:	7efa      	ldrb	r2, [r7, #27]
 80011c2:	4931      	ldr	r1, [pc, #196]	; (8001288 <SCH_RefreshTask+0x268>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3310      	adds	r3, #16
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 80011d4:	7efb      	ldrb	r3, [r7, #27]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	492b      	ldr	r1, [pc, #172]	; (8001288 <SCH_RefreshTask+0x268>)
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	3308      	adds	r3, #8
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	7efa      	ldrb	r2, [r7, #27]
 80011ea:	4827      	ldr	r0, [pc, #156]	; (8001288 <SCH_RefreshTask+0x268>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4403      	add	r3, r0
 80011f6:	3308      	adds	r3, #8
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	7efa      	ldrb	r2, [r7, #27]
 80011fc:	3201      	adds	r2, #1
 80011fe:	1ac9      	subs	r1, r1, r3
 8001200:	4821      	ldr	r0, [pc, #132]	; (8001288 <SCH_RefreshTask+0x268>)
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4403      	add	r3, r0
 800120c:	3308      	adds	r3, #8
 800120e:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 8001210:	7efb      	ldrb	r3, [r7, #27]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	491c      	ldr	r1, [pc, #112]	; (8001288 <SCH_RefreshTask+0x268>)
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3308      	adds	r3, #8
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10a      	bne.n	800123e <SCH_RefreshTask+0x21e>
                tasks[i + 1].flag = 1;
 8001228:	7efb      	ldrb	r3, [r7, #27]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	4916      	ldr	r1, [pc, #88]	; (8001288 <SCH_RefreshTask+0x268>)
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	3310      	adds	r3, #16
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 800123e:	2301      	movs	r3, #1
 8001240:	e01c      	b.n	800127c <SCH_RefreshTask+0x25c>
        }
        else {
            tasks[i] = tasks[i + 1];
 8001242:	7efb      	ldrb	r3, [r7, #27]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	7ef9      	ldrb	r1, [r7, #27]
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <SCH_RefreshTask+0x268>)
 800124a:	460b      	mov	r3, r1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4418      	add	r0, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <SCH_RefreshTask+0x268>)
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	4604      	mov	r4, r0
 8001262:	461d      	mov	r5, r3
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800126c:	7efb      	ldrb	r3, [r7, #27]
 800126e:	3301      	adds	r3, #1
 8001270:	76fb      	strb	r3, [r7, #27]
 8001272:	7efb      	ldrb	r3, [r7, #27]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	f67f aeec 	bls.w	8001052 <SCH_RefreshTask+0x32>
        }
    }
    return 0;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3724      	adds	r7, #36	; 0x24
 8001280:	46bd      	mov	sp, r7
 8001282:	bcb0      	pop	{r4, r5, r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200001f0 	.word	0x200001f0

0800128c <SCH_Report>:

uint8_t SCH_Report(void) {
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001296:	2300      	movs	r3, #0
 8001298:	71bb      	strb	r3, [r7, #6]
 800129a:	e00f      	b.n	80012bc <SCH_Report+0x30>
		if (tasks[i].functionPointer != 0) {
 800129c:	79ba      	ldrb	r2, [r7, #6]
 800129e:	490c      	ldr	r1, [pc, #48]	; (80012d0 <SCH_Report+0x44>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <SCH_Report+0x2a>
			count ++;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	3301      	adds	r3, #1
 80012b4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	3301      	adds	r3, #1
 80012ba:	71bb      	strb	r3, [r7, #6]
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	d9ec      	bls.n	800129c <SCH_Report+0x10>
		}
	}
	return count;
 80012c2:	79fb      	ldrb	r3, [r7, #7]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200001f0 	.word	0x200001f0

080012d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_MspInit+0x40>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <HAL_MspInit+0x40>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6193      	str	r3, [r2, #24]
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_MspInit+0x40>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_MspInit+0x40>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_MspInit+0x40>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_MspInit+0x40>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001328:	d114      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	201c      	movs	r0, #28
 8001348:	f000 fc05 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800134c:	201c      	movs	r0, #28
 800134e:	f000 fc1e 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001352:	e018      	b.n	8001386 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_TIM_Base_MspInit+0x7c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d113      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	201d      	movs	r0, #29
 800137c:	f000 fbeb 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001380:	201d      	movs	r0, #29
 8001382:	f000 fc04 	bl	8001b8e <HAL_NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	40000400 	.word	0x40000400

08001398 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <HAL_TIM_MspPostInit+0x58>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d117      	bne.n	80013e8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_TIM_MspPostInit+0x5c>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_TIM_MspPostInit+0x5c>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_TIM_MspPostInit+0x5c>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d0:	23c0      	movs	r3, #192	; 0xc0
 80013d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2302      	movs	r3, #2
 80013da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_TIM_MspPostInit+0x60>)
 80013e4:	f000 fca0 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40000400 	.word	0x40000400
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <HAL_UART_MspInit+0x98>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d137      	bne.n	800148c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <HAL_UART_MspInit+0x9c>)
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_UART_MspInit+0x9c>)
 8001422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001426:	61d3      	str	r3, [r2, #28]
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_UART_MspInit+0x9c>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_UART_MspInit+0x9c>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_UART_MspInit+0x9c>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_UART_MspInit+0x9c>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800144c:	2304      	movs	r3, #4
 800144e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <HAL_UART_MspInit+0xa0>)
 8001460:	f000 fc62 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001464:	2308      	movs	r3, #8
 8001466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	4619      	mov	r1, r3
 8001476:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_UART_MspInit+0xa0>)
 8001478:	f000 fc56 	bl	8001d28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	2026      	movs	r0, #38	; 0x26
 8001482:	f000 fb68 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001486:	2026      	movs	r0, #38	; 0x26
 8001488:	f000 fb81 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40004400 	.word	0x40004400
 8001498:	40021000 	.word	0x40021000
 800149c:	40010800 	.word	0x40010800

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e6:	f000 fa43 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <TIM2_IRQHandler+0x10>)
 80014f6:	f001 fadf 	bl	8002ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000114 	.word	0x20000114

08001504 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM3_IRQHandler+0x10>)
 800150a:	f001 fad5 	bl	8002ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000015c 	.word	0x2000015c

08001518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <USART2_IRQHandler+0x10>)
 800151e:	f002 f959 	bl	80037d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200001a4 	.word	0x200001a4

0800152c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e00a      	b.n	8001554 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800153e:	f3af 8000 	nop.w
 8001542:	4601      	mov	r1, r0
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	b2ca      	uxtb	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf0      	blt.n	800153e <_read+0x12>
  }

  return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e009      	b.n	800158c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60ba      	str	r2, [r7, #8]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf1      	blt.n	8001578 <_write+0x12>
  }
  return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_close>:

int _close(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c4:	605a      	str	r2, [r3, #4]
  return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
	...

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f002 ffd6 	bl	80045e0 <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20002800 	.word	0x20002800
 8001660:	00000400 	.word	0x00000400
 8001664:	20000330 	.word	0x20000330
 8001668:	20000488 	.word	0x20000488

0800166c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <trafficToggle>:

static uint16_t trafficRedPins[TRAFFIC_NUMBER] = {TRAFFIC0_RED_Pin, TRAFFIC1_RED_Pin};
static uint16_t trafficYellowPins[TRAFFIC_NUMBER] = {TRAFFIC0_YELLOW_Pin, TRAFFIC1_YELLOW_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMBER] = {TRAFFIC0_GREEN_Pin, TRAFFIC1_GREEN_Pin};

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	460a      	mov	r2, r1
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	4613      	mov	r3, r2
 8001686:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	2b03      	cmp	r3, #3
 800168c:	f200 80b0 	bhi.w	80017f0 <trafficToggle+0x178>
 8001690:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <trafficToggle+0x20>)
 8001692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001696:	bf00      	nop
 8001698:	080016a9 	.word	0x080016a9
 800169c:	080016fb 	.word	0x080016fb
 80016a0:	0800174d 	.word	0x0800174d
 80016a4:	0800179f 	.word	0x0800179f
	case TRAFFIC_OFF:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4a54      	ldr	r2, [pc, #336]	; (80017fc <trafficToggle+0x184>)
 80016ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	4a53      	ldr	r2, [pc, #332]	; (8001800 <trafficToggle+0x188>)
 80016b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4619      	mov	r1, r3
 80016bc:	f000 fcc7 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	4a50      	ldr	r2, [pc, #320]	; (8001804 <trafficToggle+0x18c>)
 80016c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <trafficToggle+0x190>)
 80016cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4619      	mov	r1, r3
 80016d4:	f000 fcbb 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	4a4c      	ldr	r2, [pc, #304]	; (800180c <trafficToggle+0x194>)
 80016dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4a4b      	ldr	r2, [pc, #300]	; (8001810 <trafficToggle+0x198>)
 80016e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e8:	2201      	movs	r2, #1
 80016ea:	4619      	mov	r1, r3
 80016ec:	f000 fcaf 	bl	800204e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_OFF;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4a48      	ldr	r2, [pc, #288]	; (8001814 <trafficToggle+0x19c>)
 80016f4:	2100      	movs	r1, #0
 80016f6:	54d1      	strb	r1, [r2, r3]
		break;
 80016f8:	e07b      	b.n	80017f2 <trafficToggle+0x17a>
	case TRAFFIC_RED:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_RESET);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4a3f      	ldr	r2, [pc, #252]	; (80017fc <trafficToggle+0x184>)
 80016fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	4a3e      	ldr	r2, [pc, #248]	; (8001800 <trafficToggle+0x188>)
 8001706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800170a:	2200      	movs	r2, #0
 800170c:	4619      	mov	r1, r3
 800170e:	f000 fc9e 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4a3b      	ldr	r2, [pc, #236]	; (8001804 <trafficToggle+0x18c>)
 8001716:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <trafficToggle+0x190>)
 800171e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001722:	2201      	movs	r2, #1
 8001724:	4619      	mov	r1, r3
 8001726:	f000 fc92 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4a37      	ldr	r2, [pc, #220]	; (800180c <trafficToggle+0x194>)
 800172e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	4a36      	ldr	r2, [pc, #216]	; (8001810 <trafficToggle+0x198>)
 8001736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800173a:	2201      	movs	r2, #1
 800173c:	4619      	mov	r1, r3
 800173e:	f000 fc86 	bl	800204e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_RED;
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	4a33      	ldr	r2, [pc, #204]	; (8001814 <trafficToggle+0x19c>)
 8001746:	2101      	movs	r1, #1
 8001748:	54d1      	strb	r1, [r2, r3]
		break;
 800174a:	e052      	b.n	80017f2 <trafficToggle+0x17a>
	case TRAFFIC_YELLOW:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4a2b      	ldr	r2, [pc, #172]	; (80017fc <trafficToggle+0x184>)
 8001750:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4a2a      	ldr	r2, [pc, #168]	; (8001800 <trafficToggle+0x188>)
 8001758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175c:	2201      	movs	r2, #1
 800175e:	4619      	mov	r1, r3
 8001760:	f000 fc75 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_RESET);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	4a27      	ldr	r2, [pc, #156]	; (8001804 <trafficToggle+0x18c>)
 8001768:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4a26      	ldr	r2, [pc, #152]	; (8001808 <trafficToggle+0x190>)
 8001770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001774:	2200      	movs	r2, #0
 8001776:	4619      	mov	r1, r3
 8001778:	f000 fc69 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a23      	ldr	r2, [pc, #140]	; (800180c <trafficToggle+0x194>)
 8001780:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4a22      	ldr	r2, [pc, #136]	; (8001810 <trafficToggle+0x198>)
 8001788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800178c:	2201      	movs	r2, #1
 800178e:	4619      	mov	r1, r3
 8001790:	f000 fc5d 	bl	800204e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_YELLOW;
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <trafficToggle+0x19c>)
 8001798:	2102      	movs	r1, #2
 800179a:	54d1      	strb	r1, [r2, r3]
		break;
 800179c:	e029      	b.n	80017f2 <trafficToggle+0x17a>
	case TRAFFIC_GREEN:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4a16      	ldr	r2, [pc, #88]	; (80017fc <trafficToggle+0x184>)
 80017a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4a15      	ldr	r2, [pc, #84]	; (8001800 <trafficToggle+0x188>)
 80017aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ae:	2201      	movs	r2, #1
 80017b0:	4619      	mov	r1, r3
 80017b2:	f000 fc4c 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <trafficToggle+0x18c>)
 80017ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4a11      	ldr	r2, [pc, #68]	; (8001808 <trafficToggle+0x190>)
 80017c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4619      	mov	r1, r3
 80017ca:	f000 fc40 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_RESET);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <trafficToggle+0x194>)
 80017d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <trafficToggle+0x198>)
 80017da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	f000 fc34 	bl	800204e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_GREEN;
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <trafficToggle+0x19c>)
 80017ea:	2103      	movs	r1, #3
 80017ec:	54d1      	strb	r1, [r2, r3]
		break;
 80017ee:	e000      	b.n	80017f2 <trafficToggle+0x17a>
	default:
		break;
 80017f0:	bf00      	nop
	}
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000040 	.word	0x20000040
 8001800:	20000058 	.word	0x20000058
 8001804:	20000048 	.word	0x20000048
 8001808:	2000005c 	.word	0x2000005c
 800180c:	20000050 	.word	0x20000050
 8001810:	20000060 	.word	0x20000060
 8001814:	20000334 	.word	0x20000334

08001818 <traffic0Off>:

void traffic0Off(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_OFF);
 800181c:	2100      	movs	r1, #0
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff ff2a 	bl	8001678 <trafficToggle>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <traffic0Red>:
void traffic0Red(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 800182c:	2101      	movs	r1, #1
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff ff22 	bl	8001678 <trafficToggle>
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <traffic0Yellow>:
void traffic0Yellow(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 800183c:	2102      	movs	r1, #2
 800183e:	2000      	movs	r0, #0
 8001840:	f7ff ff1a 	bl	8001678 <trafficToggle>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <traffic0Green>:
void traffic0Green(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 800184c:	2103      	movs	r1, #3
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff ff12 	bl	8001678 <trafficToggle>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <traffic1Off>:

void traffic1Off(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_OFF);
 800185c:	2100      	movs	r1, #0
 800185e:	2001      	movs	r0, #1
 8001860:	f7ff ff0a 	bl	8001678 <trafficToggle>
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <traffic1Red>:
void traffic1Red(void) {
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 800186c:	2101      	movs	r1, #1
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff ff02 	bl	8001678 <trafficToggle>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <traffic1Yellow>:
void traffic1Yellow(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 800187c:	2102      	movs	r1, #2
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fefa 	bl	8001678 <trafficToggle>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <traffic1Green>:
void traffic1Green(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 800188c:	2103      	movs	r1, #3
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff fef2 	bl	8001678 <trafficToggle>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001898:	f7ff fee8 	bl	800166c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800189c:	480b      	ldr	r0, [pc, #44]	; (80018cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800189e:	490c      	ldr	r1, [pc, #48]	; (80018d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018a0:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018b4:	4c09      	ldr	r4, [pc, #36]	; (80018dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018c2:	f002 fe93 	bl	80045ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018c6:	f7fe fef7 	bl	80006b8 <main>
  bx lr
 80018ca:	4770      	bx	lr
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80018d4:	080055a0 	.word	0x080055a0
  ldr r2, =_sbss
 80018d8:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80018dc:	20000488 	.word	0x20000488

080018e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC1_2_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_Init+0x28>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <HAL_Init+0x28>)
 80018ee:	f043 0310 	orr.w	r3, r3, #16
 80018f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f4:	2003      	movs	r0, #3
 80018f6:	f000 f923 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fa:	200f      	movs	r0, #15
 80018fc:	f000 f808 	bl	8001910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001900:	f7ff fce8 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40022000 	.word	0x40022000

08001910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_InitTick+0x54>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x58>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	fbb3 f3f1 	udiv	r3, r3, r1
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f93b 	bl	8001baa <HAL_SYSTICK_Config>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e00e      	b.n	800195c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d80a      	bhi.n	800195a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f000 f903 	bl	8001b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001950:	4a06      	ldr	r2, [pc, #24]	; (800196c <HAL_InitTick+0x5c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000030 	.word	0x20000030
 8001968:	20000068 	.word	0x20000068
 800196c:	20000064 	.word	0x20000064

08001970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_IncTick+0x1c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_IncTick+0x20>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a03      	ldr	r2, [pc, #12]	; (8001990 <HAL_IncTick+0x20>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000068 	.word	0x20000068
 8001990:	20000338 	.word	0x20000338

08001994 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <HAL_GetTick+0x10>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	20000338 	.word	0x20000338

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db0b      	blt.n	8001a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	4906      	ldr	r1, [pc, #24]	; (8001a40 <__NVIC_EnableIRQ+0x34>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff90 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff2d 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff42 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff90 	bl	8001a98 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5f 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff35 	bl	8001a0c <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa2 	bl	8001afc <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d008      	beq.n	8001bec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2204      	movs	r2, #4
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e020      	b.n	8001c2e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 020e 	bic.w	r2, r2, #14
 8001bfa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	2101      	movs	r1, #1
 8001c16:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d005      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2204      	movs	r2, #4
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	e051      	b.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020e 	bic.w	r2, r2, #14
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <HAL_DMA_Abort_IT+0xd4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d029      	beq.n	8001cda <HAL_DMA_Abort_IT+0xa2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <HAL_DMA_Abort_IT+0xd8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d022      	beq.n	8001cd6 <HAL_DMA_Abort_IT+0x9e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_DMA_Abort_IT+0xdc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01a      	beq.n	8001cd0 <HAL_DMA_Abort_IT+0x98>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_DMA_Abort_IT+0xe0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d012      	beq.n	8001cca <HAL_DMA_Abort_IT+0x92>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_DMA_Abort_IT+0xe4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00a      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x8c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_DMA_Abort_IT+0xe8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d102      	bne.n	8001cbe <HAL_DMA_Abort_IT+0x86>
 8001cb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cbc:	e00e      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc2:	e00b      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc8:	e008      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cce:	e005      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd4:	e002      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	e000      	b.n	8001cdc <HAL_DMA_Abort_IT+0xa4>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_DMA_Abort_IT+0xec>)
 8001cde:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
    } 
  }
  return status;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40020008 	.word	0x40020008
 8001d10:	4002001c 	.word	0x4002001c
 8001d14:	40020030 	.word	0x40020030
 8001d18:	40020044 	.word	0x40020044
 8001d1c:	40020058 	.word	0x40020058
 8001d20:	4002006c 	.word	0x4002006c
 8001d24:	40020000 	.word	0x40020000

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b08b      	sub	sp, #44	; 0x2c
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	e161      	b.n	8002000 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8150 	bne.w	8001ffa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4a97      	ldr	r2, [pc, #604]	; (8001fbc <HAL_GPIO_Init+0x294>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d05e      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d64:	4a95      	ldr	r2, [pc, #596]	; (8001fbc <HAL_GPIO_Init+0x294>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d875      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d6a:	4a95      	ldr	r2, [pc, #596]	; (8001fc0 <HAL_GPIO_Init+0x298>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d058      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d70:	4a93      	ldr	r2, [pc, #588]	; (8001fc0 <HAL_GPIO_Init+0x298>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d86f      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d76:	4a93      	ldr	r2, [pc, #588]	; (8001fc4 <HAL_GPIO_Init+0x29c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d052      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d7c:	4a91      	ldr	r2, [pc, #580]	; (8001fc4 <HAL_GPIO_Init+0x29c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d869      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d82:	4a91      	ldr	r2, [pc, #580]	; (8001fc8 <HAL_GPIO_Init+0x2a0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d04c      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d88:	4a8f      	ldr	r2, [pc, #572]	; (8001fc8 <HAL_GPIO_Init+0x2a0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d863      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d8e:	4a8f      	ldr	r2, [pc, #572]	; (8001fcc <HAL_GPIO_Init+0x2a4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d046      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
 8001d94:	4a8d      	ldr	r2, [pc, #564]	; (8001fcc <HAL_GPIO_Init+0x2a4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d85d      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d82a      	bhi.n	8001df4 <HAL_GPIO_Init+0xcc>
 8001d9e:	2b12      	cmp	r3, #18
 8001da0:	d859      	bhi.n	8001e56 <HAL_GPIO_Init+0x12e>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <HAL_GPIO_Init+0x80>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001e23 	.word	0x08001e23
 8001dac:	08001dfd 	.word	0x08001dfd
 8001db0:	08001e0f 	.word	0x08001e0f
 8001db4:	08001e51 	.word	0x08001e51
 8001db8:	08001e57 	.word	0x08001e57
 8001dbc:	08001e57 	.word	0x08001e57
 8001dc0:	08001e57 	.word	0x08001e57
 8001dc4:	08001e57 	.word	0x08001e57
 8001dc8:	08001e57 	.word	0x08001e57
 8001dcc:	08001e57 	.word	0x08001e57
 8001dd0:	08001e57 	.word	0x08001e57
 8001dd4:	08001e57 	.word	0x08001e57
 8001dd8:	08001e57 	.word	0x08001e57
 8001ddc:	08001e57 	.word	0x08001e57
 8001de0:	08001e57 	.word	0x08001e57
 8001de4:	08001e57 	.word	0x08001e57
 8001de8:	08001e57 	.word	0x08001e57
 8001dec:	08001e05 	.word	0x08001e05
 8001df0:	08001e19 	.word	0x08001e19
 8001df4:	4a76      	ldr	r2, [pc, #472]	; (8001fd0 <HAL_GPIO_Init+0x2a8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dfa:	e02c      	b.n	8001e56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e029      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e024      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	3308      	adds	r3, #8
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e01f      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	330c      	adds	r3, #12
 8001e1e:	623b      	str	r3, [r7, #32]
          break;
 8001e20:	e01a      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e013      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	611a      	str	r2, [r3, #16]
          break;
 8001e42:	e009      	b.n	8001e58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e44:	2308      	movs	r3, #8
 8001e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	615a      	str	r2, [r3, #20]
          break;
 8001e4e:	e003      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
          break;
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_Init+0x130>
          break;
 8001e56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	d801      	bhi.n	8001e62 <HAL_GPIO_Init+0x13a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_Init+0x13e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2bff      	cmp	r3, #255	; 0xff
 8001e6c:	d802      	bhi.n	8001e74 <HAL_GPIO_Init+0x14c>
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	e002      	b.n	8001e7a <HAL_GPIO_Init+0x152>
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	3b08      	subs	r3, #8
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	210f      	movs	r1, #15
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	431a      	orrs	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80a9 	beq.w	8001ffa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_GPIO_Init+0x2ac>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a49      	ldr	r2, [pc, #292]	; (8001fd4 <HAL_GPIO_Init+0x2ac>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_GPIO_Init+0x2ac>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec0:	4a45      	ldr	r2, [pc, #276]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ecc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <HAL_GPIO_Init+0x2b4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00d      	beq.n	8001f08 <HAL_GPIO_Init+0x1e0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3c      	ldr	r2, [pc, #240]	; (8001fe0 <HAL_GPIO_Init+0x2b8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d007      	beq.n	8001f04 <HAL_GPIO_Init+0x1dc>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3b      	ldr	r2, [pc, #236]	; (8001fe4 <HAL_GPIO_Init+0x2bc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d101      	bne.n	8001f00 <HAL_GPIO_Init+0x1d8>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_Init+0x1e2>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x1e2>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_Init+0x1e2>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f1a:	492f      	ldr	r1, [pc, #188]	; (8001fd8 <HAL_GPIO_Init+0x2b0>)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f34:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	492b      	ldr	r1, [pc, #172]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	4921      	ldr	r1, [pc, #132]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	491d      	ldr	r1, [pc, #116]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	4917      	ldr	r1, [pc, #92]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4913      	ldr	r1, [pc, #76]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01f      	beq.n	8001fec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <HAL_GPIO_Init+0x2c0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
 8001fb8:	e01f      	b.n	8001ffa <HAL_GPIO_Init+0x2d2>
 8001fba:	bf00      	nop
 8001fbc:	10320000 	.word	0x10320000
 8001fc0:	10310000 	.word	0x10310000
 8001fc4:	10220000 	.word	0x10220000
 8001fc8:	10210000 	.word	0x10210000
 8001fcc:	10120000 	.word	0x10120000
 8001fd0:	10110000 	.word	0x10110000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	40010c00 	.word	0x40010c00
 8001fe4:	40011000 	.word	0x40011000
 8001fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_GPIO_Init+0x2f4>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <HAL_GPIO_Init+0x2f4>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	f47f ae96 	bne.w	8001d3c <HAL_GPIO_Init+0x14>
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	372c      	adds	r7, #44	; 0x2c
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	807b      	strh	r3, [r7, #2]
 800205a:	4613      	mov	r3, r2
 800205c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205e:	787b      	ldrb	r3, [r7, #1]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002064:	887a      	ldrh	r2, [r7, #2]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800206a:	e003      	b.n	8002074 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	611a      	str	r2, [r3, #16]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	041a      	lsls	r2, r3, #16
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43d9      	mvns	r1, r3
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	400b      	ands	r3, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e272      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8087 	beq.w	80021de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	4b92      	ldr	r3, [pc, #584]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020dc:	4b8f      	ldr	r3, [pc, #572]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d112      	bne.n	800210e <HAL_RCC_OscConfig+0x5e>
 80020e8:	4b8c      	ldr	r3, [pc, #560]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d10b      	bne.n	800210e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f6:	4b89      	ldr	r3, [pc, #548]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d06c      	beq.n	80021dc <HAL_RCC_OscConfig+0x12c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d168      	bne.n	80021dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e24c      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x76>
 8002118:	4b80      	ldr	r3, [pc, #512]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a7f      	ldr	r2, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e02e      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x98>
 800212e:	4b7b      	ldr	r3, [pc, #492]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7a      	ldr	r2, [pc, #488]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b78      	ldr	r3, [pc, #480]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a77      	ldr	r2, [pc, #476]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e01d      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0xbc>
 8002152:	4b72      	ldr	r3, [pc, #456]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a71      	ldr	r2, [pc, #452]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 800216c:	4b6b      	ldr	r3, [pc, #428]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a67      	ldr	r2, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff fc02 	bl	8001994 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fbfe 	bl	8001994 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e200      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0xe4>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff fbee 	bl	8001994 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fbea 	bl	8001994 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1ec      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x10c>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d063      	beq.n	80022b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ea:	4b4c      	ldr	r3, [pc, #304]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021f6:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d11c      	bne.n	800223c <HAL_RCC_OscConfig+0x18c>
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d116      	bne.n	800223c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220e:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1c0      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4939      	ldr	r1, [pc, #228]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	e03a      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7ff fba3 	bl	8001994 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002252:	f7ff fb9f 	bl	8001994 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1a1      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4927      	ldr	r1, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fb82 	bl	8001994 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7ff fb7e 	bl	8001994 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e180      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03a      	beq.n	8002334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d019      	beq.n	80022fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7ff fb62 	bl	8001994 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7ff fb5e 	bl	8001994 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e160      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f000 face 	bl	8002894 <RCC_Delay>
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_RCC_OscConfig+0x274>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7ff fb48 	bl	8001994 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002306:	e00f      	b.n	8002328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7ff fb44 	bl	8001994 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d908      	bls.n	8002328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e146      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	42420000 	.word	0x42420000
 8002324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b92      	ldr	r3, [pc, #584]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e9      	bne.n	8002308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a6 	beq.w	800248e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b8b      	ldr	r3, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b88      	ldr	r3, [pc, #544]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a87      	ldr	r2, [pc, #540]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	61d3      	str	r3, [r2, #28]
 800235e:	4b85      	ldr	r3, [pc, #532]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b82      	ldr	r3, [pc, #520]	; (8002578 <HAL_RCC_OscConfig+0x4c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	4b7f      	ldr	r3, [pc, #508]	; (8002578 <HAL_RCC_OscConfig+0x4c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7e      	ldr	r2, [pc, #504]	; (8002578 <HAL_RCC_OscConfig+0x4c8>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7ff fb05 	bl	8001994 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7ff fb01 	bl	8001994 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	; 0x64
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e103      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	4b75      	ldr	r3, [pc, #468]	; (8002578 <HAL_RCC_OscConfig+0x4c8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x312>
 80023b4:	4b6f      	ldr	r3, [pc, #444]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a6e      	ldr	r2, [pc, #440]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e02d      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x334>
 80023ca:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a69      	ldr	r2, [pc, #420]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	4b67      	ldr	r3, [pc, #412]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a66      	ldr	r2, [pc, #408]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	f023 0304 	bic.w	r3, r3, #4
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	e01c      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_OscConfig+0x356>
 80023ec:	4b61      	ldr	r3, [pc, #388]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a60      	ldr	r2, [pc, #384]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	4b5e      	ldr	r3, [pc, #376]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a5d      	ldr	r2, [pc, #372]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e00b      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 8002406:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a5a      	ldr	r2, [pc, #360]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b58      	ldr	r3, [pc, #352]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a57      	ldr	r2, [pc, #348]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d015      	beq.n	8002452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7ff fab5 	bl	8001994 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7ff fab1 	bl	8001994 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0b1      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	4b4b      	ldr	r3, [pc, #300]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ee      	beq.n	800242e <HAL_RCC_OscConfig+0x37e>
 8002450:	e014      	b.n	800247c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7ff fa9f 	bl	8001994 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7ff fa9b 	bl	8001994 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e09b      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	4b40      	ldr	r3, [pc, #256]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d105      	bne.n	800248e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002482:	4b3c      	ldr	r3, [pc, #240]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a3b      	ldr	r2, [pc, #236]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8087 	beq.w	80025a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d061      	beq.n	8002568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d146      	bne.n	800253a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b33      	ldr	r3, [pc, #204]	; (800257c <HAL_RCC_OscConfig+0x4cc>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7ff fa6f 	bl	8001994 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff fa6b 	bl	8001994 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e06d      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d108      	bne.n	80024f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4921      	ldr	r1, [pc, #132]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a19      	ldr	r1, [r3, #32]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	430b      	orrs	r3, r1
 8002506:	491b      	ldr	r1, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x4cc>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7ff fa3f 	bl	8001994 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7ff fa3b 	bl	8001994 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e03d      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x46a>
 8002538:	e035      	b.n	80025a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_RCC_OscConfig+0x4cc>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff fa28 	bl	8001994 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7ff fa24 	bl	8001994 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e026      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x498>
 8002566:	e01e      	b.n	80025a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e019      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
 8002574:	40021000 	.word	0x40021000
 8002578:	40007000 	.word	0x40007000
 800257c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_OscConfig+0x500>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	429a      	cmp	r2, r3
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000

080025b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0d0      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d910      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b67      	ldr	r3, [pc, #412]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	4965      	ldr	r1, [pc, #404]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b8      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800261a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b50      	ldr	r3, [pc, #320]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	494d      	ldr	r1, [pc, #308]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d040      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d115      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e07f      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e073      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06b      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4936      	ldr	r1, [pc, #216]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7ff f976 	bl	8001994 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7ff f972 	bl	8001994 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e053      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d210      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4922      	ldr	r1, [pc, #136]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e032      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4916      	ldr	r1, [pc, #88]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	490e      	ldr	r1, [pc, #56]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002742:	f000 f821 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002746:	4602      	mov	r2, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	490a      	ldr	r1, [pc, #40]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	5ccb      	ldrb	r3, [r1, r3]
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1cc>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1d0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f8d4 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
 800277c:	08005538 	.word	0x08005538
 8002780:	20000030 	.word	0x20000030
 8002784:	20000064 	.word	0x20000064

08002788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_RCC_GetSysClockFreq+0x94>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x30>
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x36>
 80027b6:	e027      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ba:	613b      	str	r3, [r7, #16]
      break;
 80027bc:	e027      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	4a17      	ldr	r2, [pc, #92]	; (8002824 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d010      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_RCC_GetSysClockFreq+0x94>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0c5b      	lsrs	r3, r3, #17
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	4a11      	ldr	r2, [pc, #68]	; (8002828 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ea:	fb03 f202 	mul.w	r2, r3, r2
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e004      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0c      	ldr	r2, [pc, #48]	; (800282c <HAL_RCC_GetSysClockFreq+0xa4>)
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	613b      	str	r3, [r7, #16]
      break;
 8002806:	e002      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetSysClockFreq+0x98>)
 800280a:	613b      	str	r3, [r7, #16]
      break;
 800280c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280e:	693b      	ldr	r3, [r7, #16]
}
 8002810:	4618      	mov	r0, r3
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	007a1200 	.word	0x007a1200
 8002824:	08005550 	.word	0x08005550
 8002828:	08005560 	.word	0x08005560
 800282c:	003d0900 	.word	0x003d0900

08002830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002834:	4b02      	ldr	r3, [pc, #8]	; (8002840 <HAL_RCC_GetHCLKFreq+0x10>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	20000030 	.word	0x20000030

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002848:	f7ff fff2 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	08005548 	.word	0x08005548

0800286c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002870:	f7ff ffde 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	0adb      	lsrs	r3, r3, #11
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	08005548 	.word	0x08005548

08002894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <RCC_Delay+0x34>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <RCC_Delay+0x38>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0a5b      	lsrs	r3, r3, #9
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b0:	bf00      	nop
  }
  while (Delay --);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1e5a      	subs	r2, r3, #1
 80028b6:	60fa      	str	r2, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f9      	bne.n	80028b0 <RCC_Delay+0x1c>
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	20000030 	.word	0x20000030
 80028cc:	10624dd3 	.word	0x10624dd3

080028d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e041      	b.n	8002966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fd0e 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f000 fb88 	bl	8003024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d001      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e035      	b.n	80029f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <HAL_TIM_Base_Start_IT+0x90>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_TIM_Base_Start_IT+0x4e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b2:	d004      	beq.n	80029be <HAL_TIM_Base_Start_IT+0x4e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <HAL_TIM_Base_Start_IT+0x94>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d111      	bne.n	80029e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b06      	cmp	r3, #6
 80029ce:	d010      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	e007      	b.n	80029f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40000400 	.word	0x40000400

08002a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f839 	bl	8002aa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 faec 	bl	8003024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0202 	mvn.w	r2, #2
 8002ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa76 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fa69 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fa78 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0204 	mvn.w	r2, #4
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa4c 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa3f 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fa4e 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0208 	mvn.w	r2, #8
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2204      	movs	r2, #4
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa22 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa15 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fa24 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0210 	mvn.w	r2, #16
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2208      	movs	r2, #8
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f9f8 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f9eb 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f9fa 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0201 	mvn.w	r2, #1
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd ff2a 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b80      	cmp	r3, #128	; 0x80
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fcb5 	bl	80035d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f9be 	bl	8003010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0220 	mvn.w	r2, #32
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fc80 	bl	80035c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e0ae      	b.n	8002e44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	f200 809f 	bhi.w	8002e34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cf6:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d31 	.word	0x08002d31
 8002d00:	08002e35 	.word	0x08002e35
 8002d04:	08002e35 	.word	0x08002e35
 8002d08:	08002e35 	.word	0x08002e35
 8002d0c:	08002d71 	.word	0x08002d71
 8002d10:	08002e35 	.word	0x08002e35
 8002d14:	08002e35 	.word	0x08002e35
 8002d18:	08002e35 	.word	0x08002e35
 8002d1c:	08002db3 	.word	0x08002db3
 8002d20:	08002e35 	.word	0x08002e35
 8002d24:	08002e35 	.word	0x08002e35
 8002d28:	08002e35 	.word	0x08002e35
 8002d2c:	08002df3 	.word	0x08002df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f9cc 	bl	80030d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0208 	orr.w	r2, r2, #8
 8002d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6999      	ldr	r1, [r3, #24]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	619a      	str	r2, [r3, #24]
      break;
 8002d6e:	e064      	b.n	8002e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fa12 	bl	80031a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6999      	ldr	r1, [r3, #24]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	021a      	lsls	r2, r3, #8
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	619a      	str	r2, [r3, #24]
      break;
 8002db0:	e043      	b.n	8002e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 fa5b 	bl	8003274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0208 	orr.w	r2, r2, #8
 8002dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0204 	bic.w	r2, r2, #4
 8002ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69d9      	ldr	r1, [r3, #28]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	61da      	str	r2, [r3, #28]
      break;
 8002df0:	e023      	b.n	8002e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 faa5 	bl	8003348 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69d9      	ldr	r1, [r3, #28]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	021a      	lsls	r2, r3, #8
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	61da      	str	r2, [r3, #28]
      break;
 8002e32:	e002      	b.n	8002e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	75fb      	strb	r3, [r7, #23]
      break;
 8002e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0b4      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x186>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea0:	d03e      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0xd4>
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea6:	f200 8087 	bhi.w	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	f000 8086 	beq.w	8002fbe <HAL_TIM_ConfigClockSource+0x172>
 8002eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb6:	d87f      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb8:	2b70      	cmp	r3, #112	; 0x70
 8002eba:	d01a      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d87b      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec0:	2b60      	cmp	r3, #96	; 0x60
 8002ec2:	d050      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x11a>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d877      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec8:	2b50      	cmp	r3, #80	; 0x50
 8002eca:	d03c      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0xfa>
 8002ecc:	2b50      	cmp	r3, #80	; 0x50
 8002ece:	d873      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d058      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x13a>
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d86f      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b30      	cmp	r3, #48	; 0x30
 8002eda:	d064      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002edc:	2b30      	cmp	r3, #48	; 0x30
 8002ede:	d86b      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d060      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d867      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d05c      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d05a      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	e062      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f02:	f000 fae6 	bl	80034d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	609a      	str	r2, [r3, #8]
      break;
 8002f1e:	e04f      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f30:	f000 facf 	bl	80034d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f42:	609a      	str	r2, [r3, #8]
      break;
 8002f44:	e03c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 fa46 	bl	80033e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2150      	movs	r1, #80	; 0x50
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fa9d 	bl	800349e <TIM_ITRx_SetConfig>
      break;
 8002f64:	e02c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 fa64 	bl	8003440 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2160      	movs	r1, #96	; 0x60
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fa8d 	bl	800349e <TIM_ITRx_SetConfig>
      break;
 8002f84:	e01c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 fa26 	bl	80033e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2140      	movs	r1, #64	; 0x40
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fa7d 	bl	800349e <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e00c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f000 fa74 	bl	800349e <TIM_ITRx_SetConfig>
      break;
 8002fb6:	e003      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbc:	e000      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
	...

08003024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a25      	ldr	r2, [pc, #148]	; (80030cc <TIM_Base_SetConfig+0xa8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0x28>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0x28>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <TIM_Base_SetConfig+0xac>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <TIM_Base_SetConfig+0xa8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <TIM_Base_SetConfig+0x52>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d003      	beq.n	8003076 <TIM_Base_SetConfig+0x52>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <TIM_Base_SetConfig+0xac>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d108      	bne.n	8003088 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <TIM_Base_SetConfig+0xa8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d103      	bne.n	80030bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	615a      	str	r2, [r3, #20]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400

080030d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	f023 0201 	bic.w	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f023 0302 	bic.w	r3, r3, #2
 800311c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <TIM_OC1_SetConfig+0xc8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d10c      	bne.n	800314a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0308 	bic.w	r3, r3, #8
 8003136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <TIM_OC1_SetConfig+0xc8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d111      	bne.n	8003176 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	bf00      	nop
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40012c00 	.word	0x40012c00

080031a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 0210 	bic.w	r2, r3, #16
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0320 	bic.w	r3, r3, #32
 80031ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <TIM_OC2_SetConfig+0xd0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d10d      	bne.n	800321c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800321a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a14      	ldr	r2, [pc, #80]	; (8003270 <TIM_OC2_SetConfig+0xd0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d113      	bne.n	800324c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800322a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	621a      	str	r2, [r3, #32]
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr
 8003270:	40012c00 	.word	0x40012c00

08003274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <TIM_OC3_SetConfig+0xd0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10d      	bne.n	80032ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <TIM_OC3_SetConfig+0xd0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d113      	bne.n	800331e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	621a      	str	r2, [r3, #32]
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40012c00 	.word	0x40012c00

08003348 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	031b      	lsls	r3, r3, #12
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a0f      	ldr	r2, [pc, #60]	; (80033e0 <TIM_OC4_SetConfig+0x98>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d109      	bne.n	80033bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	621a      	str	r2, [r3, #32]
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	40012c00 	.word	0x40012c00

080033e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f023 0201 	bic.w	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800340e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 030a 	bic.w	r3, r3, #10
 8003420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	f023 0210 	bic.w	r2, r3, #16
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800346a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	031b      	lsls	r3, r3, #12
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800347c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	621a      	str	r2, [r3, #32]
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800349e:	b480      	push	{r7}
 80034a0:	b085      	sub	sp, #20
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f043 0307 	orr.w	r3, r3, #7
 80034c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b087      	sub	sp, #28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	021a      	lsls	r2, r3, #8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	609a      	str	r2, [r3, #8]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003524:	2302      	movs	r3, #2
 8003526:	e041      	b.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003574:	d004      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a10      	ldr	r2, [pc, #64]	; (80035bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10c      	bne.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003586:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	4313      	orrs	r3, r2
 8003590:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40000400 	.word	0x40000400

080035c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr

080035d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e042      	b.n	800367c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fef6 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fdc5 	bl	80041b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800363c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800364c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800365c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d16d      	bne.n	8003780 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Transmit+0x2c>
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e066      	b.n	8003782 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2221      	movs	r2, #33	; 0x21
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c2:	f7fe f967 	bl	8001994 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036dc:	d108      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e003      	b.n	80036f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036f8:	e02a      	b.n	8003750 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fb14 	bl	8003d32 <UART_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e036      	b.n	8003782 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10b      	bne.n	8003732 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	3302      	adds	r3, #2
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	e007      	b.n	8003742 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	3301      	adds	r3, #1
 8003740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1cf      	bne.n	80036fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fae4 	bl	8003d32 <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e006      	b.n	8003782 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	4613      	mov	r3, r2
 8003796:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d112      	bne.n	80037ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_UART_Receive_IT+0x26>
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e00b      	b.n	80037cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	461a      	mov	r2, r3
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fb24 	bl	8003e0e <UART_Start_Receive_IT>
 80037c6:	4603      	mov	r3, r0
 80037c8:	e000      	b.n	80037cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b0ba      	sub	sp, #232	; 0xe8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003800:	2300      	movs	r3, #0
 8003802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10f      	bne.n	800383a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_UART_IRQHandler+0x66>
 8003826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fc01 	bl	800403a <UART_Receive_IT>
      return;
 8003838:	e25b      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800383a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80de 	beq.w	8003a00 <HAL_UART_IRQHandler+0x22c>
 8003844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003854:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80d1 	beq.w	8003a00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_UART_IRQHandler+0xae>
 800386a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_UART_IRQHandler+0xd2>
 800388e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0202 	orr.w	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_UART_IRQHandler+0xf6>
 80038b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d011      	beq.n	80038fa <HAL_UART_IRQHandler+0x126>
 80038d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f043 0208 	orr.w	r2, r3, #8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 81f2 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_UART_IRQHandler+0x14e>
 8003910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fb8c 	bl	800403a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d103      	bne.n	800394e <HAL_UART_IRQHandler+0x17a>
 8003946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d04f      	beq.n	80039ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa96 	bl	8003e80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d041      	beq.n	80039e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3314      	adds	r3, #20
 8003968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800397c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3314      	adds	r3, #20
 800398a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800398e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800399a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1d9      	bne.n	8003962 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d013      	beq.n	80039de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	4a7e      	ldr	r2, [pc, #504]	; (8003bb4 <HAL_UART_IRQHandler+0x3e0>)
 80039bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe f938 	bl	8001c38 <HAL_DMA_Abort_IT>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039d8:	4610      	mov	r0, r2
 80039da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	e00e      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f993 	bl	8003d0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	e00a      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f98f 	bl	8003d0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	e006      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f98b 	bl	8003d0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80039fa:	e175      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	bf00      	nop
    return;
 80039fe:	e173      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 814f 	bne.w	8003ca8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8148 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8141 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80b6 	beq.w	8003bb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8145 	beq.w	8003cec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	f080 813e 	bcs.w	8003cec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	f000 8088 	beq.w	8003b94 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ab0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ab4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003abc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1d9      	bne.n	8003a84 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3314      	adds	r3, #20
 8003af0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003af4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003af8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003afc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e1      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3314      	adds	r3, #20
 8003b12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3314      	adds	r3, #20
 8003b2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e3      	bne.n	8003b0c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b64:	f023 0310 	bic.w	r3, r3, #16
 8003b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b76:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e3      	bne.n	8003b52 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe f817 	bl	8001bc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f8b6 	bl	8003d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bb0:	e09c      	b.n	8003cec <HAL_UART_IRQHandler+0x518>
 8003bb2:	bf00      	nop
 8003bb4:	08003f45 	.word	0x08003f45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 808e 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8089 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c02:	647a      	str	r2, [r7, #68]	; 0x44
 8003c04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e3      	bne.n	8003bde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	623b      	str	r3, [r7, #32]
   return(result);
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e3      	bne.n	8003c16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0310 	bic.w	r3, r3, #16
 8003c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c80:	61fa      	str	r2, [r7, #28]
 8003c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	69b9      	ldr	r1, [r7, #24]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e3      	bne.n	8003c5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f83b 	bl	8003d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ca6:	e023      	b.n	8003cf0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x4f4>
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f953 	bl	8003f6c <UART_Transmit_IT>
    return;
 8003cc6:	e014      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f992 	bl	800400a <UART_EndTransmit_IT>
    return;
 8003ce6:	e004      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ce8:	bf00      	nop
 8003cea:	e002      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cf0:	bf00      	nop
  }
}
 8003cf2:	37e8      	adds	r7, #232	; 0xe8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b090      	sub	sp, #64	; 0x40
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d42:	e050      	b.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d04c      	beq.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d52:	f7fd fe1f 	bl	8001994 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d241      	bcs.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	330c      	adds	r3, #12
 8003d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d82:	637a      	str	r2, [r7, #52]	; 0x34
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e5      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	613b      	str	r3, [r7, #16]
   return(result);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db6:	623a      	str	r2, [r7, #32]
 8003db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	69f9      	ldr	r1, [r7, #28]
 8003dbc:	6a3a      	ldr	r2, [r7, #32]
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e5      	bne.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e00f      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d09f      	beq.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3740      	adds	r7, #64	; 0x40
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	88fa      	ldrh	r2, [r7, #6]
 8003e26:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2222      	movs	r2, #34	; 0x22
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0220 	orr.w	r2, r2, #32
 8003e72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b095      	sub	sp, #84	; 0x54
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ea8:	643a      	str	r2, [r7, #64]	; 0x40
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3314      	adds	r3, #20
 8003eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003edc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e5      	bne.n	8003ebc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d119      	bne.n	8003f2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	330c      	adds	r3, #12
 8003efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f023 0310 	bic.w	r3, r3, #16
 8003f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f18:	61ba      	str	r2, [r7, #24]
 8003f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6979      	ldr	r1, [r7, #20]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	613b      	str	r3, [r7, #16]
   return(result);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e5      	bne.n	8003ef8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f3a:	bf00      	nop
 8003f3c:	3754      	adds	r7, #84	; 0x54
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff fed3 	bl	8003d0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b21      	cmp	r3, #33	; 0x21
 8003f7e:	d13e      	bne.n	8003ffe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f88:	d114      	bne.n	8003fb4 <UART_Transmit_IT+0x48>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d110      	bne.n	8003fb4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fa6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	1c9a      	adds	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]
 8003fb2:	e008      	b.n	8003fc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	1c59      	adds	r1, r3, #1
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6211      	str	r1, [r2, #32]
 8003fbe:	781a      	ldrb	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
  }
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004020:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fe64 	bl	8003cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b08c      	sub	sp, #48	; 0x30
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b22      	cmp	r3, #34	; 0x22
 800404c:	f040 80ae 	bne.w	80041ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004058:	d117      	bne.n	800408a <UART_Receive_IT+0x50>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d113      	bne.n	800408a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	b29b      	uxth	r3, r3
 8004074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004078:	b29a      	uxth	r2, r3
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
 8004088:	e026      	b.n	80040d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409c:	d007      	beq.n	80040ae <UART_Receive_IT+0x74>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <UART_Receive_IT+0x82>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	e008      	b.n	80040ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4619      	mov	r1, r3
 80040e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d15d      	bne.n	80041a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0220 	bic.w	r2, r2, #32
 80040fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800410a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	2b01      	cmp	r3, #1
 8004130:	d135      	bne.n	800419e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	613b      	str	r3, [r7, #16]
   return(result);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f023 0310 	bic.w	r3, r3, #16
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	623a      	str	r2, [r7, #32]
 800415a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	69f9      	ldr	r1, [r7, #28]
 800415e:	6a3a      	ldr	r2, [r7, #32]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	61bb      	str	r3, [r7, #24]
   return(result);
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e5      	bne.n	8004138 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b10      	cmp	r3, #16
 8004178:	d10a      	bne.n	8004190 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004194:	4619      	mov	r1, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fdc0 	bl	8003d1c <HAL_UARTEx_RxEventCallback>
 800419c:	e002      	b.n	80041a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fc fa50 	bl	8000644 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	e002      	b.n	80041ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3730      	adds	r7, #48	; 0x30
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041f2:	f023 030c 	bic.w	r3, r3, #12
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	430b      	orrs	r3, r1
 80041fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <UART_SetConfig+0x114>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d103      	bne.n	8004228 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004220:	f7fe fb24 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	e002      	b.n	800422e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7fe fb0c 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 800422c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009a      	lsls	r2, r3, #2
 8004238:	441a      	add	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	4a22      	ldr	r2, [pc, #136]	; (80042d0 <UART_SetConfig+0x118>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	0119      	lsls	r1, r3, #4
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009a      	lsls	r2, r3, #2
 8004258:	441a      	add	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	fbb2 f2f3 	udiv	r2, r2, r3
 8004264:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <UART_SetConfig+0x118>)
 8004266:	fba3 0302 	umull	r0, r3, r3, r2
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	2064      	movs	r0, #100	; 0x64
 800426e:	fb00 f303 	mul.w	r3, r0, r3
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	3332      	adds	r3, #50	; 0x32
 8004278:	4a15      	ldr	r2, [pc, #84]	; (80042d0 <UART_SetConfig+0x118>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004284:	4419      	add	r1, r3
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009a      	lsls	r2, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	fbb2 f2f3 	udiv	r2, r2, r3
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <UART_SetConfig+0x118>)
 800429e:	fba3 0302 	umull	r0, r3, r3, r2
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2064      	movs	r0, #100	; 0x64
 80042a6:	fb00 f303 	mul.w	r3, r0, r3
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	3332      	adds	r3, #50	; 0x32
 80042b0:	4a07      	ldr	r2, [pc, #28]	; (80042d0 <UART_SetConfig+0x118>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	f003 020f 	and.w	r2, r3, #15
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	440a      	add	r2, r1
 80042c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40013800 	.word	0x40013800
 80042d0:	51eb851f 	.word	0x51eb851f

080042d4 <std>:
 80042d4:	2300      	movs	r3, #0
 80042d6:	b510      	push	{r4, lr}
 80042d8:	4604      	mov	r4, r0
 80042da:	e9c0 3300 	strd	r3, r3, [r0]
 80042de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042e2:	6083      	str	r3, [r0, #8]
 80042e4:	8181      	strh	r1, [r0, #12]
 80042e6:	6643      	str	r3, [r0, #100]	; 0x64
 80042e8:	81c2      	strh	r2, [r0, #14]
 80042ea:	6183      	str	r3, [r0, #24]
 80042ec:	4619      	mov	r1, r3
 80042ee:	2208      	movs	r2, #8
 80042f0:	305c      	adds	r0, #92	; 0x5c
 80042f2:	f000 f926 	bl	8004542 <memset>
 80042f6:	4b0d      	ldr	r3, [pc, #52]	; (800432c <std+0x58>)
 80042f8:	6224      	str	r4, [r4, #32]
 80042fa:	6263      	str	r3, [r4, #36]	; 0x24
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <std+0x5c>)
 80042fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <std+0x60>)
 8004302:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <std+0x64>)
 8004306:	6323      	str	r3, [r4, #48]	; 0x30
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <std+0x68>)
 800430a:	429c      	cmp	r4, r3
 800430c:	d006      	beq.n	800431c <std+0x48>
 800430e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004312:	4294      	cmp	r4, r2
 8004314:	d002      	beq.n	800431c <std+0x48>
 8004316:	33d0      	adds	r3, #208	; 0xd0
 8004318:	429c      	cmp	r4, r3
 800431a:	d105      	bne.n	8004328 <std+0x54>
 800431c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004324:	f000 b986 	b.w	8004634 <__retarget_lock_init_recursive>
 8004328:	bd10      	pop	{r4, pc}
 800432a:	bf00      	nop
 800432c:	080044bd 	.word	0x080044bd
 8004330:	080044df 	.word	0x080044df
 8004334:	08004517 	.word	0x08004517
 8004338:	0800453b 	.word	0x0800453b
 800433c:	2000033c 	.word	0x2000033c

08004340 <stdio_exit_handler>:
 8004340:	4a02      	ldr	r2, [pc, #8]	; (800434c <stdio_exit_handler+0xc>)
 8004342:	4903      	ldr	r1, [pc, #12]	; (8004350 <stdio_exit_handler+0x10>)
 8004344:	4803      	ldr	r0, [pc, #12]	; (8004354 <stdio_exit_handler+0x14>)
 8004346:	f000 b869 	b.w	800441c <_fwalk_sglue>
 800434a:	bf00      	nop
 800434c:	2000006c 	.word	0x2000006c
 8004350:	08005185 	.word	0x08005185
 8004354:	20000078 	.word	0x20000078

08004358 <cleanup_stdio>:
 8004358:	6841      	ldr	r1, [r0, #4]
 800435a:	4b0c      	ldr	r3, [pc, #48]	; (800438c <cleanup_stdio+0x34>)
 800435c:	b510      	push	{r4, lr}
 800435e:	4299      	cmp	r1, r3
 8004360:	4604      	mov	r4, r0
 8004362:	d001      	beq.n	8004368 <cleanup_stdio+0x10>
 8004364:	f000 ff0e 	bl	8005184 <_fflush_r>
 8004368:	68a1      	ldr	r1, [r4, #8]
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <cleanup_stdio+0x38>)
 800436c:	4299      	cmp	r1, r3
 800436e:	d002      	beq.n	8004376 <cleanup_stdio+0x1e>
 8004370:	4620      	mov	r0, r4
 8004372:	f000 ff07 	bl	8005184 <_fflush_r>
 8004376:	68e1      	ldr	r1, [r4, #12]
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <cleanup_stdio+0x3c>)
 800437a:	4299      	cmp	r1, r3
 800437c:	d004      	beq.n	8004388 <cleanup_stdio+0x30>
 800437e:	4620      	mov	r0, r4
 8004380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004384:	f000 befe 	b.w	8005184 <_fflush_r>
 8004388:	bd10      	pop	{r4, pc}
 800438a:	bf00      	nop
 800438c:	2000033c 	.word	0x2000033c
 8004390:	200003a4 	.word	0x200003a4
 8004394:	2000040c 	.word	0x2000040c

08004398 <global_stdio_init.part.0>:
 8004398:	b510      	push	{r4, lr}
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <global_stdio_init.part.0+0x30>)
 800439c:	4c0b      	ldr	r4, [pc, #44]	; (80043cc <global_stdio_init.part.0+0x34>)
 800439e:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <global_stdio_init.part.0+0x38>)
 80043a0:	4620      	mov	r0, r4
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	2104      	movs	r1, #4
 80043a6:	2200      	movs	r2, #0
 80043a8:	f7ff ff94 	bl	80042d4 <std>
 80043ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80043b0:	2201      	movs	r2, #1
 80043b2:	2109      	movs	r1, #9
 80043b4:	f7ff ff8e 	bl	80042d4 <std>
 80043b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80043bc:	2202      	movs	r2, #2
 80043be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c2:	2112      	movs	r1, #18
 80043c4:	f7ff bf86 	b.w	80042d4 <std>
 80043c8:	20000474 	.word	0x20000474
 80043cc:	2000033c 	.word	0x2000033c
 80043d0:	08004341 	.word	0x08004341

080043d4 <__sfp_lock_acquire>:
 80043d4:	4801      	ldr	r0, [pc, #4]	; (80043dc <__sfp_lock_acquire+0x8>)
 80043d6:	f000 b92e 	b.w	8004636 <__retarget_lock_acquire_recursive>
 80043da:	bf00      	nop
 80043dc:	2000047d 	.word	0x2000047d

080043e0 <__sfp_lock_release>:
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <__sfp_lock_release+0x8>)
 80043e2:	f000 b929 	b.w	8004638 <__retarget_lock_release_recursive>
 80043e6:	bf00      	nop
 80043e8:	2000047d 	.word	0x2000047d

080043ec <__sinit>:
 80043ec:	b510      	push	{r4, lr}
 80043ee:	4604      	mov	r4, r0
 80043f0:	f7ff fff0 	bl	80043d4 <__sfp_lock_acquire>
 80043f4:	6a23      	ldr	r3, [r4, #32]
 80043f6:	b11b      	cbz	r3, 8004400 <__sinit+0x14>
 80043f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043fc:	f7ff bff0 	b.w	80043e0 <__sfp_lock_release>
 8004400:	4b04      	ldr	r3, [pc, #16]	; (8004414 <__sinit+0x28>)
 8004402:	6223      	str	r3, [r4, #32]
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <__sinit+0x2c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f5      	bne.n	80043f8 <__sinit+0xc>
 800440c:	f7ff ffc4 	bl	8004398 <global_stdio_init.part.0>
 8004410:	e7f2      	b.n	80043f8 <__sinit+0xc>
 8004412:	bf00      	nop
 8004414:	08004359 	.word	0x08004359
 8004418:	20000474 	.word	0x20000474

0800441c <_fwalk_sglue>:
 800441c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004420:	4607      	mov	r7, r0
 8004422:	4688      	mov	r8, r1
 8004424:	4614      	mov	r4, r2
 8004426:	2600      	movs	r6, #0
 8004428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800442c:	f1b9 0901 	subs.w	r9, r9, #1
 8004430:	d505      	bpl.n	800443e <_fwalk_sglue+0x22>
 8004432:	6824      	ldr	r4, [r4, #0]
 8004434:	2c00      	cmp	r4, #0
 8004436:	d1f7      	bne.n	8004428 <_fwalk_sglue+0xc>
 8004438:	4630      	mov	r0, r6
 800443a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800443e:	89ab      	ldrh	r3, [r5, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d907      	bls.n	8004454 <_fwalk_sglue+0x38>
 8004444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004448:	3301      	adds	r3, #1
 800444a:	d003      	beq.n	8004454 <_fwalk_sglue+0x38>
 800444c:	4629      	mov	r1, r5
 800444e:	4638      	mov	r0, r7
 8004450:	47c0      	blx	r8
 8004452:	4306      	orrs	r6, r0
 8004454:	3568      	adds	r5, #104	; 0x68
 8004456:	e7e9      	b.n	800442c <_fwalk_sglue+0x10>

08004458 <iprintf>:
 8004458:	b40f      	push	{r0, r1, r2, r3}
 800445a:	b507      	push	{r0, r1, r2, lr}
 800445c:	4906      	ldr	r1, [pc, #24]	; (8004478 <iprintf+0x20>)
 800445e:	ab04      	add	r3, sp, #16
 8004460:	6808      	ldr	r0, [r1, #0]
 8004462:	f853 2b04 	ldr.w	r2, [r3], #4
 8004466:	6881      	ldr	r1, [r0, #8]
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	f000 fb5b 	bl	8004b24 <_vfiprintf_r>
 800446e:	b003      	add	sp, #12
 8004470:	f85d eb04 	ldr.w	lr, [sp], #4
 8004474:	b004      	add	sp, #16
 8004476:	4770      	bx	lr
 8004478:	200000c4 	.word	0x200000c4

0800447c <siprintf>:
 800447c:	b40e      	push	{r1, r2, r3}
 800447e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004482:	b500      	push	{lr}
 8004484:	b09c      	sub	sp, #112	; 0x70
 8004486:	ab1d      	add	r3, sp, #116	; 0x74
 8004488:	9002      	str	r0, [sp, #8]
 800448a:	9006      	str	r0, [sp, #24]
 800448c:	9107      	str	r1, [sp, #28]
 800448e:	9104      	str	r1, [sp, #16]
 8004490:	4808      	ldr	r0, [pc, #32]	; (80044b4 <siprintf+0x38>)
 8004492:	4909      	ldr	r1, [pc, #36]	; (80044b8 <siprintf+0x3c>)
 8004494:	f853 2b04 	ldr.w	r2, [r3], #4
 8004498:	9105      	str	r1, [sp, #20]
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	a902      	add	r1, sp, #8
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	f000 fa1a 	bl	80048d8 <_svfiprintf_r>
 80044a4:	2200      	movs	r2, #0
 80044a6:	9b02      	ldr	r3, [sp, #8]
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	b01c      	add	sp, #112	; 0x70
 80044ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80044b0:	b003      	add	sp, #12
 80044b2:	4770      	bx	lr
 80044b4:	200000c4 	.word	0x200000c4
 80044b8:	ffff0208 	.word	0xffff0208

080044bc <__sread>:
 80044bc:	b510      	push	{r4, lr}
 80044be:	460c      	mov	r4, r1
 80044c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c4:	f000 f868 	bl	8004598 <_read_r>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	bfab      	itete	ge
 80044cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044ce:	89a3      	ldrhlt	r3, [r4, #12]
 80044d0:	181b      	addge	r3, r3, r0
 80044d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044d6:	bfac      	ite	ge
 80044d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80044da:	81a3      	strhlt	r3, [r4, #12]
 80044dc:	bd10      	pop	{r4, pc}

080044de <__swrite>:
 80044de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e2:	461f      	mov	r7, r3
 80044e4:	898b      	ldrh	r3, [r1, #12]
 80044e6:	4605      	mov	r5, r0
 80044e8:	05db      	lsls	r3, r3, #23
 80044ea:	460c      	mov	r4, r1
 80044ec:	4616      	mov	r6, r2
 80044ee:	d505      	bpl.n	80044fc <__swrite+0x1e>
 80044f0:	2302      	movs	r3, #2
 80044f2:	2200      	movs	r2, #0
 80044f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f8:	f000 f83c 	bl	8004574 <_lseek_r>
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	4632      	mov	r2, r6
 8004500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	4628      	mov	r0, r5
 8004508:	463b      	mov	r3, r7
 800450a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800450e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004512:	f000 b853 	b.w	80045bc <_write_r>

08004516 <__sseek>:
 8004516:	b510      	push	{r4, lr}
 8004518:	460c      	mov	r4, r1
 800451a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451e:	f000 f829 	bl	8004574 <_lseek_r>
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	bf15      	itete	ne
 8004528:	6560      	strne	r0, [r4, #84]	; 0x54
 800452a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800452e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004532:	81a3      	strheq	r3, [r4, #12]
 8004534:	bf18      	it	ne
 8004536:	81a3      	strhne	r3, [r4, #12]
 8004538:	bd10      	pop	{r4, pc}

0800453a <__sclose>:
 800453a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453e:	f000 b809 	b.w	8004554 <_close_r>

08004542 <memset>:
 8004542:	4603      	mov	r3, r0
 8004544:	4402      	add	r2, r0
 8004546:	4293      	cmp	r3, r2
 8004548:	d100      	bne.n	800454c <memset+0xa>
 800454a:	4770      	bx	lr
 800454c:	f803 1b01 	strb.w	r1, [r3], #1
 8004550:	e7f9      	b.n	8004546 <memset+0x4>
	...

08004554 <_close_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	2300      	movs	r3, #0
 8004558:	4d05      	ldr	r5, [pc, #20]	; (8004570 <_close_r+0x1c>)
 800455a:	4604      	mov	r4, r0
 800455c:	4608      	mov	r0, r1
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	f7fd f81d 	bl	800159e <_close>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_close_r+0x1a>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	b103      	cbz	r3, 800456e <_close_r+0x1a>
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	20000478 	.word	0x20000478

08004574 <_lseek_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4604      	mov	r4, r0
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	2200      	movs	r2, #0
 800457e:	4d05      	ldr	r5, [pc, #20]	; (8004594 <_lseek_r+0x20>)
 8004580:	602a      	str	r2, [r5, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	f7fd f82f 	bl	80015e6 <_lseek>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d102      	bne.n	8004592 <_lseek_r+0x1e>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	b103      	cbz	r3, 8004592 <_lseek_r+0x1e>
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	20000478 	.word	0x20000478

08004598 <_read_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	4604      	mov	r4, r0
 800459c:	4608      	mov	r0, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	2200      	movs	r2, #0
 80045a2:	4d05      	ldr	r5, [pc, #20]	; (80045b8 <_read_r+0x20>)
 80045a4:	602a      	str	r2, [r5, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	f7fc ffc0 	bl	800152c <_read>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_read_r+0x1e>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_read_r+0x1e>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	20000478 	.word	0x20000478

080045bc <_write_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4604      	mov	r4, r0
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	2200      	movs	r2, #0
 80045c6:	4d05      	ldr	r5, [pc, #20]	; (80045dc <_write_r+0x20>)
 80045c8:	602a      	str	r2, [r5, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	f7fc ffcb 	bl	8001566 <_write>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d102      	bne.n	80045da <_write_r+0x1e>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	b103      	cbz	r3, 80045da <_write_r+0x1e>
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	20000478 	.word	0x20000478

080045e0 <__errno>:
 80045e0:	4b01      	ldr	r3, [pc, #4]	; (80045e8 <__errno+0x8>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	200000c4 	.word	0x200000c4

080045ec <__libc_init_array>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	2600      	movs	r6, #0
 80045f0:	4d0c      	ldr	r5, [pc, #48]	; (8004624 <__libc_init_array+0x38>)
 80045f2:	4c0d      	ldr	r4, [pc, #52]	; (8004628 <__libc_init_array+0x3c>)
 80045f4:	1b64      	subs	r4, r4, r5
 80045f6:	10a4      	asrs	r4, r4, #2
 80045f8:	42a6      	cmp	r6, r4
 80045fa:	d109      	bne.n	8004610 <__libc_init_array+0x24>
 80045fc:	f000 ff80 	bl	8005500 <_init>
 8004600:	2600      	movs	r6, #0
 8004602:	4d0a      	ldr	r5, [pc, #40]	; (800462c <__libc_init_array+0x40>)
 8004604:	4c0a      	ldr	r4, [pc, #40]	; (8004630 <__libc_init_array+0x44>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	42a6      	cmp	r6, r4
 800460c:	d105      	bne.n	800461a <__libc_init_array+0x2e>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	f855 3b04 	ldr.w	r3, [r5], #4
 8004614:	4798      	blx	r3
 8004616:	3601      	adds	r6, #1
 8004618:	e7ee      	b.n	80045f8 <__libc_init_array+0xc>
 800461a:	f855 3b04 	ldr.w	r3, [r5], #4
 800461e:	4798      	blx	r3
 8004620:	3601      	adds	r6, #1
 8004622:	e7f2      	b.n	800460a <__libc_init_array+0x1e>
 8004624:	08005598 	.word	0x08005598
 8004628:	08005598 	.word	0x08005598
 800462c:	08005598 	.word	0x08005598
 8004630:	0800559c 	.word	0x0800559c

08004634 <__retarget_lock_init_recursive>:
 8004634:	4770      	bx	lr

08004636 <__retarget_lock_acquire_recursive>:
 8004636:	4770      	bx	lr

08004638 <__retarget_lock_release_recursive>:
 8004638:	4770      	bx	lr
	...

0800463c <_free_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4605      	mov	r5, r0
 8004640:	2900      	cmp	r1, #0
 8004642:	d040      	beq.n	80046c6 <_free_r+0x8a>
 8004644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004648:	1f0c      	subs	r4, r1, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	bfb8      	it	lt
 800464e:	18e4      	addlt	r4, r4, r3
 8004650:	f000 f8dc 	bl	800480c <__malloc_lock>
 8004654:	4a1c      	ldr	r2, [pc, #112]	; (80046c8 <_free_r+0x8c>)
 8004656:	6813      	ldr	r3, [r2, #0]
 8004658:	b933      	cbnz	r3, 8004668 <_free_r+0x2c>
 800465a:	6063      	str	r3, [r4, #4]
 800465c:	6014      	str	r4, [r2, #0]
 800465e:	4628      	mov	r0, r5
 8004660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004664:	f000 b8d8 	b.w	8004818 <__malloc_unlock>
 8004668:	42a3      	cmp	r3, r4
 800466a:	d908      	bls.n	800467e <_free_r+0x42>
 800466c:	6820      	ldr	r0, [r4, #0]
 800466e:	1821      	adds	r1, r4, r0
 8004670:	428b      	cmp	r3, r1
 8004672:	bf01      	itttt	eq
 8004674:	6819      	ldreq	r1, [r3, #0]
 8004676:	685b      	ldreq	r3, [r3, #4]
 8004678:	1809      	addeq	r1, r1, r0
 800467a:	6021      	streq	r1, [r4, #0]
 800467c:	e7ed      	b.n	800465a <_free_r+0x1e>
 800467e:	461a      	mov	r2, r3
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	b10b      	cbz	r3, 8004688 <_free_r+0x4c>
 8004684:	42a3      	cmp	r3, r4
 8004686:	d9fa      	bls.n	800467e <_free_r+0x42>
 8004688:	6811      	ldr	r1, [r2, #0]
 800468a:	1850      	adds	r0, r2, r1
 800468c:	42a0      	cmp	r0, r4
 800468e:	d10b      	bne.n	80046a8 <_free_r+0x6c>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	4401      	add	r1, r0
 8004694:	1850      	adds	r0, r2, r1
 8004696:	4283      	cmp	r3, r0
 8004698:	6011      	str	r1, [r2, #0]
 800469a:	d1e0      	bne.n	800465e <_free_r+0x22>
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4408      	add	r0, r1
 80046a2:	6010      	str	r0, [r2, #0]
 80046a4:	6053      	str	r3, [r2, #4]
 80046a6:	e7da      	b.n	800465e <_free_r+0x22>
 80046a8:	d902      	bls.n	80046b0 <_free_r+0x74>
 80046aa:	230c      	movs	r3, #12
 80046ac:	602b      	str	r3, [r5, #0]
 80046ae:	e7d6      	b.n	800465e <_free_r+0x22>
 80046b0:	6820      	ldr	r0, [r4, #0]
 80046b2:	1821      	adds	r1, r4, r0
 80046b4:	428b      	cmp	r3, r1
 80046b6:	bf01      	itttt	eq
 80046b8:	6819      	ldreq	r1, [r3, #0]
 80046ba:	685b      	ldreq	r3, [r3, #4]
 80046bc:	1809      	addeq	r1, r1, r0
 80046be:	6021      	streq	r1, [r4, #0]
 80046c0:	6063      	str	r3, [r4, #4]
 80046c2:	6054      	str	r4, [r2, #4]
 80046c4:	e7cb      	b.n	800465e <_free_r+0x22>
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	20000480 	.word	0x20000480

080046cc <sbrk_aligned>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4e0e      	ldr	r6, [pc, #56]	; (8004708 <sbrk_aligned+0x3c>)
 80046d0:	460c      	mov	r4, r1
 80046d2:	6831      	ldr	r1, [r6, #0]
 80046d4:	4605      	mov	r5, r0
 80046d6:	b911      	cbnz	r1, 80046de <sbrk_aligned+0x12>
 80046d8:	f000 fe2c 	bl	8005334 <_sbrk_r>
 80046dc:	6030      	str	r0, [r6, #0]
 80046de:	4621      	mov	r1, r4
 80046e0:	4628      	mov	r0, r5
 80046e2:	f000 fe27 	bl	8005334 <_sbrk_r>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	d00a      	beq.n	8004700 <sbrk_aligned+0x34>
 80046ea:	1cc4      	adds	r4, r0, #3
 80046ec:	f024 0403 	bic.w	r4, r4, #3
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d007      	beq.n	8004704 <sbrk_aligned+0x38>
 80046f4:	1a21      	subs	r1, r4, r0
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 fe1c 	bl	8005334 <_sbrk_r>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d101      	bne.n	8004704 <sbrk_aligned+0x38>
 8004700:	f04f 34ff 	mov.w	r4, #4294967295
 8004704:	4620      	mov	r0, r4
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	20000484 	.word	0x20000484

0800470c <_malloc_r>:
 800470c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004710:	1ccd      	adds	r5, r1, #3
 8004712:	f025 0503 	bic.w	r5, r5, #3
 8004716:	3508      	adds	r5, #8
 8004718:	2d0c      	cmp	r5, #12
 800471a:	bf38      	it	cc
 800471c:	250c      	movcc	r5, #12
 800471e:	2d00      	cmp	r5, #0
 8004720:	4607      	mov	r7, r0
 8004722:	db01      	blt.n	8004728 <_malloc_r+0x1c>
 8004724:	42a9      	cmp	r1, r5
 8004726:	d905      	bls.n	8004734 <_malloc_r+0x28>
 8004728:	230c      	movs	r3, #12
 800472a:	2600      	movs	r6, #0
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4630      	mov	r0, r6
 8004730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004734:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004808 <_malloc_r+0xfc>
 8004738:	f000 f868 	bl	800480c <__malloc_lock>
 800473c:	f8d8 3000 	ldr.w	r3, [r8]
 8004740:	461c      	mov	r4, r3
 8004742:	bb5c      	cbnz	r4, 800479c <_malloc_r+0x90>
 8004744:	4629      	mov	r1, r5
 8004746:	4638      	mov	r0, r7
 8004748:	f7ff ffc0 	bl	80046cc <sbrk_aligned>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	4604      	mov	r4, r0
 8004750:	d155      	bne.n	80047fe <_malloc_r+0xf2>
 8004752:	f8d8 4000 	ldr.w	r4, [r8]
 8004756:	4626      	mov	r6, r4
 8004758:	2e00      	cmp	r6, #0
 800475a:	d145      	bne.n	80047e8 <_malloc_r+0xdc>
 800475c:	2c00      	cmp	r4, #0
 800475e:	d048      	beq.n	80047f2 <_malloc_r+0xe6>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	4631      	mov	r1, r6
 8004764:	4638      	mov	r0, r7
 8004766:	eb04 0903 	add.w	r9, r4, r3
 800476a:	f000 fde3 	bl	8005334 <_sbrk_r>
 800476e:	4581      	cmp	r9, r0
 8004770:	d13f      	bne.n	80047f2 <_malloc_r+0xe6>
 8004772:	6821      	ldr	r1, [r4, #0]
 8004774:	4638      	mov	r0, r7
 8004776:	1a6d      	subs	r5, r5, r1
 8004778:	4629      	mov	r1, r5
 800477a:	f7ff ffa7 	bl	80046cc <sbrk_aligned>
 800477e:	3001      	adds	r0, #1
 8004780:	d037      	beq.n	80047f2 <_malloc_r+0xe6>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	442b      	add	r3, r5
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	f8d8 3000 	ldr.w	r3, [r8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d038      	beq.n	8004802 <_malloc_r+0xf6>
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	42a2      	cmp	r2, r4
 8004794:	d12b      	bne.n	80047ee <_malloc_r+0xe2>
 8004796:	2200      	movs	r2, #0
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	e00f      	b.n	80047bc <_malloc_r+0xb0>
 800479c:	6822      	ldr	r2, [r4, #0]
 800479e:	1b52      	subs	r2, r2, r5
 80047a0:	d41f      	bmi.n	80047e2 <_malloc_r+0xd6>
 80047a2:	2a0b      	cmp	r2, #11
 80047a4:	d917      	bls.n	80047d6 <_malloc_r+0xca>
 80047a6:	1961      	adds	r1, r4, r5
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	6025      	str	r5, [r4, #0]
 80047ac:	bf18      	it	ne
 80047ae:	6059      	strne	r1, [r3, #4]
 80047b0:	6863      	ldr	r3, [r4, #4]
 80047b2:	bf08      	it	eq
 80047b4:	f8c8 1000 	streq.w	r1, [r8]
 80047b8:	5162      	str	r2, [r4, r5]
 80047ba:	604b      	str	r3, [r1, #4]
 80047bc:	4638      	mov	r0, r7
 80047be:	f104 060b 	add.w	r6, r4, #11
 80047c2:	f000 f829 	bl	8004818 <__malloc_unlock>
 80047c6:	f026 0607 	bic.w	r6, r6, #7
 80047ca:	1d23      	adds	r3, r4, #4
 80047cc:	1af2      	subs	r2, r6, r3
 80047ce:	d0ae      	beq.n	800472e <_malloc_r+0x22>
 80047d0:	1b9b      	subs	r3, r3, r6
 80047d2:	50a3      	str	r3, [r4, r2]
 80047d4:	e7ab      	b.n	800472e <_malloc_r+0x22>
 80047d6:	42a3      	cmp	r3, r4
 80047d8:	6862      	ldr	r2, [r4, #4]
 80047da:	d1dd      	bne.n	8004798 <_malloc_r+0x8c>
 80047dc:	f8c8 2000 	str.w	r2, [r8]
 80047e0:	e7ec      	b.n	80047bc <_malloc_r+0xb0>
 80047e2:	4623      	mov	r3, r4
 80047e4:	6864      	ldr	r4, [r4, #4]
 80047e6:	e7ac      	b.n	8004742 <_malloc_r+0x36>
 80047e8:	4634      	mov	r4, r6
 80047ea:	6876      	ldr	r6, [r6, #4]
 80047ec:	e7b4      	b.n	8004758 <_malloc_r+0x4c>
 80047ee:	4613      	mov	r3, r2
 80047f0:	e7cc      	b.n	800478c <_malloc_r+0x80>
 80047f2:	230c      	movs	r3, #12
 80047f4:	4638      	mov	r0, r7
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	f000 f80e 	bl	8004818 <__malloc_unlock>
 80047fc:	e797      	b.n	800472e <_malloc_r+0x22>
 80047fe:	6025      	str	r5, [r4, #0]
 8004800:	e7dc      	b.n	80047bc <_malloc_r+0xb0>
 8004802:	605b      	str	r3, [r3, #4]
 8004804:	deff      	udf	#255	; 0xff
 8004806:	bf00      	nop
 8004808:	20000480 	.word	0x20000480

0800480c <__malloc_lock>:
 800480c:	4801      	ldr	r0, [pc, #4]	; (8004814 <__malloc_lock+0x8>)
 800480e:	f7ff bf12 	b.w	8004636 <__retarget_lock_acquire_recursive>
 8004812:	bf00      	nop
 8004814:	2000047c 	.word	0x2000047c

08004818 <__malloc_unlock>:
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <__malloc_unlock+0x8>)
 800481a:	f7ff bf0d 	b.w	8004638 <__retarget_lock_release_recursive>
 800481e:	bf00      	nop
 8004820:	2000047c 	.word	0x2000047c

08004824 <__ssputs_r>:
 8004824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004828:	461f      	mov	r7, r3
 800482a:	688e      	ldr	r6, [r1, #8]
 800482c:	4682      	mov	sl, r0
 800482e:	42be      	cmp	r6, r7
 8004830:	460c      	mov	r4, r1
 8004832:	4690      	mov	r8, r2
 8004834:	680b      	ldr	r3, [r1, #0]
 8004836:	d82c      	bhi.n	8004892 <__ssputs_r+0x6e>
 8004838:	898a      	ldrh	r2, [r1, #12]
 800483a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800483e:	d026      	beq.n	800488e <__ssputs_r+0x6a>
 8004840:	6965      	ldr	r5, [r4, #20]
 8004842:	6909      	ldr	r1, [r1, #16]
 8004844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004848:	eba3 0901 	sub.w	r9, r3, r1
 800484c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004850:	1c7b      	adds	r3, r7, #1
 8004852:	444b      	add	r3, r9
 8004854:	106d      	asrs	r5, r5, #1
 8004856:	429d      	cmp	r5, r3
 8004858:	bf38      	it	cc
 800485a:	461d      	movcc	r5, r3
 800485c:	0553      	lsls	r3, r2, #21
 800485e:	d527      	bpl.n	80048b0 <__ssputs_r+0x8c>
 8004860:	4629      	mov	r1, r5
 8004862:	f7ff ff53 	bl	800470c <_malloc_r>
 8004866:	4606      	mov	r6, r0
 8004868:	b360      	cbz	r0, 80048c4 <__ssputs_r+0xa0>
 800486a:	464a      	mov	r2, r9
 800486c:	6921      	ldr	r1, [r4, #16]
 800486e:	f000 fd7f 	bl	8005370 <memcpy>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	81a3      	strh	r3, [r4, #12]
 800487e:	6126      	str	r6, [r4, #16]
 8004880:	444e      	add	r6, r9
 8004882:	6026      	str	r6, [r4, #0]
 8004884:	463e      	mov	r6, r7
 8004886:	6165      	str	r5, [r4, #20]
 8004888:	eba5 0509 	sub.w	r5, r5, r9
 800488c:	60a5      	str	r5, [r4, #8]
 800488e:	42be      	cmp	r6, r7
 8004890:	d900      	bls.n	8004894 <__ssputs_r+0x70>
 8004892:	463e      	mov	r6, r7
 8004894:	4632      	mov	r2, r6
 8004896:	4641      	mov	r1, r8
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	f000 fd31 	bl	8005300 <memmove>
 800489e:	2000      	movs	r0, #0
 80048a0:	68a3      	ldr	r3, [r4, #8]
 80048a2:	1b9b      	subs	r3, r3, r6
 80048a4:	60a3      	str	r3, [r4, #8]
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	4433      	add	r3, r6
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b0:	462a      	mov	r2, r5
 80048b2:	f000 fd6b 	bl	800538c <_realloc_r>
 80048b6:	4606      	mov	r6, r0
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d1e0      	bne.n	800487e <__ssputs_r+0x5a>
 80048bc:	4650      	mov	r0, sl
 80048be:	6921      	ldr	r1, [r4, #16]
 80048c0:	f7ff febc 	bl	800463c <_free_r>
 80048c4:	230c      	movs	r3, #12
 80048c6:	f8ca 3000 	str.w	r3, [sl]
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048d4:	81a3      	strh	r3, [r4, #12]
 80048d6:	e7e9      	b.n	80048ac <__ssputs_r+0x88>

080048d8 <_svfiprintf_r>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	4698      	mov	r8, r3
 80048de:	898b      	ldrh	r3, [r1, #12]
 80048e0:	4607      	mov	r7, r0
 80048e2:	061b      	lsls	r3, r3, #24
 80048e4:	460d      	mov	r5, r1
 80048e6:	4614      	mov	r4, r2
 80048e8:	b09d      	sub	sp, #116	; 0x74
 80048ea:	d50e      	bpl.n	800490a <_svfiprintf_r+0x32>
 80048ec:	690b      	ldr	r3, [r1, #16]
 80048ee:	b963      	cbnz	r3, 800490a <_svfiprintf_r+0x32>
 80048f0:	2140      	movs	r1, #64	; 0x40
 80048f2:	f7ff ff0b 	bl	800470c <_malloc_r>
 80048f6:	6028      	str	r0, [r5, #0]
 80048f8:	6128      	str	r0, [r5, #16]
 80048fa:	b920      	cbnz	r0, 8004906 <_svfiprintf_r+0x2e>
 80048fc:	230c      	movs	r3, #12
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	e0d0      	b.n	8004aa8 <_svfiprintf_r+0x1d0>
 8004906:	2340      	movs	r3, #64	; 0x40
 8004908:	616b      	str	r3, [r5, #20]
 800490a:	2300      	movs	r3, #0
 800490c:	9309      	str	r3, [sp, #36]	; 0x24
 800490e:	2320      	movs	r3, #32
 8004910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004914:	2330      	movs	r3, #48	; 0x30
 8004916:	f04f 0901 	mov.w	r9, #1
 800491a:	f8cd 800c 	str.w	r8, [sp, #12]
 800491e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004ac0 <_svfiprintf_r+0x1e8>
 8004922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004926:	4623      	mov	r3, r4
 8004928:	469a      	mov	sl, r3
 800492a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800492e:	b10a      	cbz	r2, 8004934 <_svfiprintf_r+0x5c>
 8004930:	2a25      	cmp	r2, #37	; 0x25
 8004932:	d1f9      	bne.n	8004928 <_svfiprintf_r+0x50>
 8004934:	ebba 0b04 	subs.w	fp, sl, r4
 8004938:	d00b      	beq.n	8004952 <_svfiprintf_r+0x7a>
 800493a:	465b      	mov	r3, fp
 800493c:	4622      	mov	r2, r4
 800493e:	4629      	mov	r1, r5
 8004940:	4638      	mov	r0, r7
 8004942:	f7ff ff6f 	bl	8004824 <__ssputs_r>
 8004946:	3001      	adds	r0, #1
 8004948:	f000 80a9 	beq.w	8004a9e <_svfiprintf_r+0x1c6>
 800494c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800494e:	445a      	add	r2, fp
 8004950:	9209      	str	r2, [sp, #36]	; 0x24
 8004952:	f89a 3000 	ldrb.w	r3, [sl]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80a1 	beq.w	8004a9e <_svfiprintf_r+0x1c6>
 800495c:	2300      	movs	r3, #0
 800495e:	f04f 32ff 	mov.w	r2, #4294967295
 8004962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004966:	f10a 0a01 	add.w	sl, sl, #1
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	9307      	str	r3, [sp, #28]
 800496e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004972:	931a      	str	r3, [sp, #104]	; 0x68
 8004974:	4654      	mov	r4, sl
 8004976:	2205      	movs	r2, #5
 8004978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800497c:	4850      	ldr	r0, [pc, #320]	; (8004ac0 <_svfiprintf_r+0x1e8>)
 800497e:	f000 fce9 	bl	8005354 <memchr>
 8004982:	9a04      	ldr	r2, [sp, #16]
 8004984:	b9d8      	cbnz	r0, 80049be <_svfiprintf_r+0xe6>
 8004986:	06d0      	lsls	r0, r2, #27
 8004988:	bf44      	itt	mi
 800498a:	2320      	movmi	r3, #32
 800498c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004990:	0711      	lsls	r1, r2, #28
 8004992:	bf44      	itt	mi
 8004994:	232b      	movmi	r3, #43	; 0x2b
 8004996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800499a:	f89a 3000 	ldrb.w	r3, [sl]
 800499e:	2b2a      	cmp	r3, #42	; 0x2a
 80049a0:	d015      	beq.n	80049ce <_svfiprintf_r+0xf6>
 80049a2:	4654      	mov	r4, sl
 80049a4:	2000      	movs	r0, #0
 80049a6:	f04f 0c0a 	mov.w	ip, #10
 80049aa:	9a07      	ldr	r2, [sp, #28]
 80049ac:	4621      	mov	r1, r4
 80049ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049b2:	3b30      	subs	r3, #48	; 0x30
 80049b4:	2b09      	cmp	r3, #9
 80049b6:	d94d      	bls.n	8004a54 <_svfiprintf_r+0x17c>
 80049b8:	b1b0      	cbz	r0, 80049e8 <_svfiprintf_r+0x110>
 80049ba:	9207      	str	r2, [sp, #28]
 80049bc:	e014      	b.n	80049e8 <_svfiprintf_r+0x110>
 80049be:	eba0 0308 	sub.w	r3, r0, r8
 80049c2:	fa09 f303 	lsl.w	r3, r9, r3
 80049c6:	4313      	orrs	r3, r2
 80049c8:	46a2      	mov	sl, r4
 80049ca:	9304      	str	r3, [sp, #16]
 80049cc:	e7d2      	b.n	8004974 <_svfiprintf_r+0x9c>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	1d19      	adds	r1, r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	9103      	str	r1, [sp, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfbb      	ittet	lt
 80049da:	425b      	neglt	r3, r3
 80049dc:	f042 0202 	orrlt.w	r2, r2, #2
 80049e0:	9307      	strge	r3, [sp, #28]
 80049e2:	9307      	strlt	r3, [sp, #28]
 80049e4:	bfb8      	it	lt
 80049e6:	9204      	strlt	r2, [sp, #16]
 80049e8:	7823      	ldrb	r3, [r4, #0]
 80049ea:	2b2e      	cmp	r3, #46	; 0x2e
 80049ec:	d10c      	bne.n	8004a08 <_svfiprintf_r+0x130>
 80049ee:	7863      	ldrb	r3, [r4, #1]
 80049f0:	2b2a      	cmp	r3, #42	; 0x2a
 80049f2:	d134      	bne.n	8004a5e <_svfiprintf_r+0x186>
 80049f4:	9b03      	ldr	r3, [sp, #12]
 80049f6:	3402      	adds	r4, #2
 80049f8:	1d1a      	adds	r2, r3, #4
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	9203      	str	r2, [sp, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfb8      	it	lt
 8004a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a06:	9305      	str	r3, [sp, #20]
 8004a08:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004ac4 <_svfiprintf_r+0x1ec>
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	4650      	mov	r0, sl
 8004a10:	7821      	ldrb	r1, [r4, #0]
 8004a12:	f000 fc9f 	bl	8005354 <memchr>
 8004a16:	b138      	cbz	r0, 8004a28 <_svfiprintf_r+0x150>
 8004a18:	2240      	movs	r2, #64	; 0x40
 8004a1a:	9b04      	ldr	r3, [sp, #16]
 8004a1c:	eba0 000a 	sub.w	r0, r0, sl
 8004a20:	4082      	lsls	r2, r0
 8004a22:	4313      	orrs	r3, r2
 8004a24:	3401      	adds	r4, #1
 8004a26:	9304      	str	r3, [sp, #16]
 8004a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a2c:	2206      	movs	r2, #6
 8004a2e:	4826      	ldr	r0, [pc, #152]	; (8004ac8 <_svfiprintf_r+0x1f0>)
 8004a30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a34:	f000 fc8e 	bl	8005354 <memchr>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d038      	beq.n	8004aae <_svfiprintf_r+0x1d6>
 8004a3c:	4b23      	ldr	r3, [pc, #140]	; (8004acc <_svfiprintf_r+0x1f4>)
 8004a3e:	bb1b      	cbnz	r3, 8004a88 <_svfiprintf_r+0x1b0>
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	3307      	adds	r3, #7
 8004a44:	f023 0307 	bic.w	r3, r3, #7
 8004a48:	3308      	adds	r3, #8
 8004a4a:	9303      	str	r3, [sp, #12]
 8004a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a4e:	4433      	add	r3, r6
 8004a50:	9309      	str	r3, [sp, #36]	; 0x24
 8004a52:	e768      	b.n	8004926 <_svfiprintf_r+0x4e>
 8004a54:	460c      	mov	r4, r1
 8004a56:	2001      	movs	r0, #1
 8004a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a5c:	e7a6      	b.n	80049ac <_svfiprintf_r+0xd4>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f04f 0c0a 	mov.w	ip, #10
 8004a64:	4619      	mov	r1, r3
 8004a66:	3401      	adds	r4, #1
 8004a68:	9305      	str	r3, [sp, #20]
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a70:	3a30      	subs	r2, #48	; 0x30
 8004a72:	2a09      	cmp	r2, #9
 8004a74:	d903      	bls.n	8004a7e <_svfiprintf_r+0x1a6>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0c6      	beq.n	8004a08 <_svfiprintf_r+0x130>
 8004a7a:	9105      	str	r1, [sp, #20]
 8004a7c:	e7c4      	b.n	8004a08 <_svfiprintf_r+0x130>
 8004a7e:	4604      	mov	r4, r0
 8004a80:	2301      	movs	r3, #1
 8004a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a86:	e7f0      	b.n	8004a6a <_svfiprintf_r+0x192>
 8004a88:	ab03      	add	r3, sp, #12
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	462a      	mov	r2, r5
 8004a8e:	4638      	mov	r0, r7
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <_svfiprintf_r+0x1f8>)
 8004a92:	a904      	add	r1, sp, #16
 8004a94:	f3af 8000 	nop.w
 8004a98:	1c42      	adds	r2, r0, #1
 8004a9a:	4606      	mov	r6, r0
 8004a9c:	d1d6      	bne.n	8004a4c <_svfiprintf_r+0x174>
 8004a9e:	89ab      	ldrh	r3, [r5, #12]
 8004aa0:	065b      	lsls	r3, r3, #25
 8004aa2:	f53f af2d 	bmi.w	8004900 <_svfiprintf_r+0x28>
 8004aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aa8:	b01d      	add	sp, #116	; 0x74
 8004aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aae:	ab03      	add	r3, sp, #12
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <_svfiprintf_r+0x1f8>)
 8004ab8:	a904      	add	r1, sp, #16
 8004aba:	f000 f9bf 	bl	8004e3c <_printf_i>
 8004abe:	e7eb      	b.n	8004a98 <_svfiprintf_r+0x1c0>
 8004ac0:	08005562 	.word	0x08005562
 8004ac4:	08005568 	.word	0x08005568
 8004ac8:	0800556c 	.word	0x0800556c
 8004acc:	00000000 	.word	0x00000000
 8004ad0:	08004825 	.word	0x08004825

08004ad4 <__sfputc_r>:
 8004ad4:	6893      	ldr	r3, [r2, #8]
 8004ad6:	b410      	push	{r4}
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	6093      	str	r3, [r2, #8]
 8004ade:	da07      	bge.n	8004af0 <__sfputc_r+0x1c>
 8004ae0:	6994      	ldr	r4, [r2, #24]
 8004ae2:	42a3      	cmp	r3, r4
 8004ae4:	db01      	blt.n	8004aea <__sfputc_r+0x16>
 8004ae6:	290a      	cmp	r1, #10
 8004ae8:	d102      	bne.n	8004af0 <__sfputc_r+0x1c>
 8004aea:	bc10      	pop	{r4}
 8004aec:	f000 bb72 	b.w	80051d4 <__swbuf_r>
 8004af0:	6813      	ldr	r3, [r2, #0]
 8004af2:	1c58      	adds	r0, r3, #1
 8004af4:	6010      	str	r0, [r2, #0]
 8004af6:	7019      	strb	r1, [r3, #0]
 8004af8:	4608      	mov	r0, r1
 8004afa:	bc10      	pop	{r4}
 8004afc:	4770      	bx	lr

08004afe <__sfputs_r>:
 8004afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b00:	4606      	mov	r6, r0
 8004b02:	460f      	mov	r7, r1
 8004b04:	4614      	mov	r4, r2
 8004b06:	18d5      	adds	r5, r2, r3
 8004b08:	42ac      	cmp	r4, r5
 8004b0a:	d101      	bne.n	8004b10 <__sfputs_r+0x12>
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e007      	b.n	8004b20 <__sfputs_r+0x22>
 8004b10:	463a      	mov	r2, r7
 8004b12:	4630      	mov	r0, r6
 8004b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b18:	f7ff ffdc 	bl	8004ad4 <__sfputc_r>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	d1f3      	bne.n	8004b08 <__sfputs_r+0xa>
 8004b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b24 <_vfiprintf_r>:
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	460d      	mov	r5, r1
 8004b2a:	4614      	mov	r4, r2
 8004b2c:	4698      	mov	r8, r3
 8004b2e:	4606      	mov	r6, r0
 8004b30:	b09d      	sub	sp, #116	; 0x74
 8004b32:	b118      	cbz	r0, 8004b3c <_vfiprintf_r+0x18>
 8004b34:	6a03      	ldr	r3, [r0, #32]
 8004b36:	b90b      	cbnz	r3, 8004b3c <_vfiprintf_r+0x18>
 8004b38:	f7ff fc58 	bl	80043ec <__sinit>
 8004b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b3e:	07d9      	lsls	r1, r3, #31
 8004b40:	d405      	bmi.n	8004b4e <_vfiprintf_r+0x2a>
 8004b42:	89ab      	ldrh	r3, [r5, #12]
 8004b44:	059a      	lsls	r2, r3, #22
 8004b46:	d402      	bmi.n	8004b4e <_vfiprintf_r+0x2a>
 8004b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b4a:	f7ff fd74 	bl	8004636 <__retarget_lock_acquire_recursive>
 8004b4e:	89ab      	ldrh	r3, [r5, #12]
 8004b50:	071b      	lsls	r3, r3, #28
 8004b52:	d501      	bpl.n	8004b58 <_vfiprintf_r+0x34>
 8004b54:	692b      	ldr	r3, [r5, #16]
 8004b56:	b99b      	cbnz	r3, 8004b80 <_vfiprintf_r+0x5c>
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f000 fb78 	bl	8005250 <__swsetup_r>
 8004b60:	b170      	cbz	r0, 8004b80 <_vfiprintf_r+0x5c>
 8004b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b64:	07dc      	lsls	r4, r3, #31
 8004b66:	d504      	bpl.n	8004b72 <_vfiprintf_r+0x4e>
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	b01d      	add	sp, #116	; 0x74
 8004b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b72:	89ab      	ldrh	r3, [r5, #12]
 8004b74:	0598      	lsls	r0, r3, #22
 8004b76:	d4f7      	bmi.n	8004b68 <_vfiprintf_r+0x44>
 8004b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b7a:	f7ff fd5d 	bl	8004638 <__retarget_lock_release_recursive>
 8004b7e:	e7f3      	b.n	8004b68 <_vfiprintf_r+0x44>
 8004b80:	2300      	movs	r3, #0
 8004b82:	9309      	str	r3, [sp, #36]	; 0x24
 8004b84:	2320      	movs	r3, #32
 8004b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b8a:	2330      	movs	r3, #48	; 0x30
 8004b8c:	f04f 0901 	mov.w	r9, #1
 8004b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b94:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004d44 <_vfiprintf_r+0x220>
 8004b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	469a      	mov	sl, r3
 8004ba0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ba4:	b10a      	cbz	r2, 8004baa <_vfiprintf_r+0x86>
 8004ba6:	2a25      	cmp	r2, #37	; 0x25
 8004ba8:	d1f9      	bne.n	8004b9e <_vfiprintf_r+0x7a>
 8004baa:	ebba 0b04 	subs.w	fp, sl, r4
 8004bae:	d00b      	beq.n	8004bc8 <_vfiprintf_r+0xa4>
 8004bb0:	465b      	mov	r3, fp
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f7ff ffa1 	bl	8004afe <__sfputs_r>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	f000 80a9 	beq.w	8004d14 <_vfiprintf_r+0x1f0>
 8004bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bc4:	445a      	add	r2, fp
 8004bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8004bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80a1 	beq.w	8004d14 <_vfiprintf_r+0x1f0>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bdc:	f10a 0a01 	add.w	sl, sl, #1
 8004be0:	9304      	str	r3, [sp, #16]
 8004be2:	9307      	str	r3, [sp, #28]
 8004be4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004be8:	931a      	str	r3, [sp, #104]	; 0x68
 8004bea:	4654      	mov	r4, sl
 8004bec:	2205      	movs	r2, #5
 8004bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf2:	4854      	ldr	r0, [pc, #336]	; (8004d44 <_vfiprintf_r+0x220>)
 8004bf4:	f000 fbae 	bl	8005354 <memchr>
 8004bf8:	9a04      	ldr	r2, [sp, #16]
 8004bfa:	b9d8      	cbnz	r0, 8004c34 <_vfiprintf_r+0x110>
 8004bfc:	06d1      	lsls	r1, r2, #27
 8004bfe:	bf44      	itt	mi
 8004c00:	2320      	movmi	r3, #32
 8004c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c06:	0713      	lsls	r3, r2, #28
 8004c08:	bf44      	itt	mi
 8004c0a:	232b      	movmi	r3, #43	; 0x2b
 8004c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c10:	f89a 3000 	ldrb.w	r3, [sl]
 8004c14:	2b2a      	cmp	r3, #42	; 0x2a
 8004c16:	d015      	beq.n	8004c44 <_vfiprintf_r+0x120>
 8004c18:	4654      	mov	r4, sl
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f04f 0c0a 	mov.w	ip, #10
 8004c20:	9a07      	ldr	r2, [sp, #28]
 8004c22:	4621      	mov	r1, r4
 8004c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c28:	3b30      	subs	r3, #48	; 0x30
 8004c2a:	2b09      	cmp	r3, #9
 8004c2c:	d94d      	bls.n	8004cca <_vfiprintf_r+0x1a6>
 8004c2e:	b1b0      	cbz	r0, 8004c5e <_vfiprintf_r+0x13a>
 8004c30:	9207      	str	r2, [sp, #28]
 8004c32:	e014      	b.n	8004c5e <_vfiprintf_r+0x13a>
 8004c34:	eba0 0308 	sub.w	r3, r0, r8
 8004c38:	fa09 f303 	lsl.w	r3, r9, r3
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	46a2      	mov	sl, r4
 8004c40:	9304      	str	r3, [sp, #16]
 8004c42:	e7d2      	b.n	8004bea <_vfiprintf_r+0xc6>
 8004c44:	9b03      	ldr	r3, [sp, #12]
 8004c46:	1d19      	adds	r1, r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	9103      	str	r1, [sp, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bfbb      	ittet	lt
 8004c50:	425b      	neglt	r3, r3
 8004c52:	f042 0202 	orrlt.w	r2, r2, #2
 8004c56:	9307      	strge	r3, [sp, #28]
 8004c58:	9307      	strlt	r3, [sp, #28]
 8004c5a:	bfb8      	it	lt
 8004c5c:	9204      	strlt	r2, [sp, #16]
 8004c5e:	7823      	ldrb	r3, [r4, #0]
 8004c60:	2b2e      	cmp	r3, #46	; 0x2e
 8004c62:	d10c      	bne.n	8004c7e <_vfiprintf_r+0x15a>
 8004c64:	7863      	ldrb	r3, [r4, #1]
 8004c66:	2b2a      	cmp	r3, #42	; 0x2a
 8004c68:	d134      	bne.n	8004cd4 <_vfiprintf_r+0x1b0>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	3402      	adds	r4, #2
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	9203      	str	r2, [sp, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bfb8      	it	lt
 8004c78:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c7c:	9305      	str	r3, [sp, #20]
 8004c7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d48 <_vfiprintf_r+0x224>
 8004c82:	2203      	movs	r2, #3
 8004c84:	4650      	mov	r0, sl
 8004c86:	7821      	ldrb	r1, [r4, #0]
 8004c88:	f000 fb64 	bl	8005354 <memchr>
 8004c8c:	b138      	cbz	r0, 8004c9e <_vfiprintf_r+0x17a>
 8004c8e:	2240      	movs	r2, #64	; 0x40
 8004c90:	9b04      	ldr	r3, [sp, #16]
 8004c92:	eba0 000a 	sub.w	r0, r0, sl
 8004c96:	4082      	lsls	r2, r0
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	3401      	adds	r4, #1
 8004c9c:	9304      	str	r3, [sp, #16]
 8004c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca2:	2206      	movs	r2, #6
 8004ca4:	4829      	ldr	r0, [pc, #164]	; (8004d4c <_vfiprintf_r+0x228>)
 8004ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004caa:	f000 fb53 	bl	8005354 <memchr>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d03f      	beq.n	8004d32 <_vfiprintf_r+0x20e>
 8004cb2:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <_vfiprintf_r+0x22c>)
 8004cb4:	bb1b      	cbnz	r3, 8004cfe <_vfiprintf_r+0x1da>
 8004cb6:	9b03      	ldr	r3, [sp, #12]
 8004cb8:	3307      	adds	r3, #7
 8004cba:	f023 0307 	bic.w	r3, r3, #7
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	9303      	str	r3, [sp, #12]
 8004cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc4:	443b      	add	r3, r7
 8004cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc8:	e768      	b.n	8004b9c <_vfiprintf_r+0x78>
 8004cca:	460c      	mov	r4, r1
 8004ccc:	2001      	movs	r0, #1
 8004cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd2:	e7a6      	b.n	8004c22 <_vfiprintf_r+0xfe>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f04f 0c0a 	mov.w	ip, #10
 8004cda:	4619      	mov	r1, r3
 8004cdc:	3401      	adds	r4, #1
 8004cde:	9305      	str	r3, [sp, #20]
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ce6:	3a30      	subs	r2, #48	; 0x30
 8004ce8:	2a09      	cmp	r2, #9
 8004cea:	d903      	bls.n	8004cf4 <_vfiprintf_r+0x1d0>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0c6      	beq.n	8004c7e <_vfiprintf_r+0x15a>
 8004cf0:	9105      	str	r1, [sp, #20]
 8004cf2:	e7c4      	b.n	8004c7e <_vfiprintf_r+0x15a>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cfc:	e7f0      	b.n	8004ce0 <_vfiprintf_r+0x1bc>
 8004cfe:	ab03      	add	r3, sp, #12
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	462a      	mov	r2, r5
 8004d04:	4630      	mov	r0, r6
 8004d06:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <_vfiprintf_r+0x230>)
 8004d08:	a904      	add	r1, sp, #16
 8004d0a:	f3af 8000 	nop.w
 8004d0e:	4607      	mov	r7, r0
 8004d10:	1c78      	adds	r0, r7, #1
 8004d12:	d1d6      	bne.n	8004cc2 <_vfiprintf_r+0x19e>
 8004d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d16:	07d9      	lsls	r1, r3, #31
 8004d18:	d405      	bmi.n	8004d26 <_vfiprintf_r+0x202>
 8004d1a:	89ab      	ldrh	r3, [r5, #12]
 8004d1c:	059a      	lsls	r2, r3, #22
 8004d1e:	d402      	bmi.n	8004d26 <_vfiprintf_r+0x202>
 8004d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d22:	f7ff fc89 	bl	8004638 <__retarget_lock_release_recursive>
 8004d26:	89ab      	ldrh	r3, [r5, #12]
 8004d28:	065b      	lsls	r3, r3, #25
 8004d2a:	f53f af1d 	bmi.w	8004b68 <_vfiprintf_r+0x44>
 8004d2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d30:	e71c      	b.n	8004b6c <_vfiprintf_r+0x48>
 8004d32:	ab03      	add	r3, sp, #12
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	462a      	mov	r2, r5
 8004d38:	4630      	mov	r0, r6
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <_vfiprintf_r+0x230>)
 8004d3c:	a904      	add	r1, sp, #16
 8004d3e:	f000 f87d 	bl	8004e3c <_printf_i>
 8004d42:	e7e4      	b.n	8004d0e <_vfiprintf_r+0x1ea>
 8004d44:	08005562 	.word	0x08005562
 8004d48:	08005568 	.word	0x08005568
 8004d4c:	0800556c 	.word	0x0800556c
 8004d50:	00000000 	.word	0x00000000
 8004d54:	08004aff 	.word	0x08004aff

08004d58 <_printf_common>:
 8004d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	4699      	mov	r9, r3
 8004d60:	688a      	ldr	r2, [r1, #8]
 8004d62:	690b      	ldr	r3, [r1, #16]
 8004d64:	4607      	mov	r7, r0
 8004d66:	4293      	cmp	r3, r2
 8004d68:	bfb8      	it	lt
 8004d6a:	4613      	movlt	r3, r2
 8004d6c:	6033      	str	r3, [r6, #0]
 8004d6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d72:	460c      	mov	r4, r1
 8004d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d78:	b10a      	cbz	r2, 8004d7e <_printf_common+0x26>
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	6033      	str	r3, [r6, #0]
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	0699      	lsls	r1, r3, #26
 8004d82:	bf42      	ittt	mi
 8004d84:	6833      	ldrmi	r3, [r6, #0]
 8004d86:	3302      	addmi	r3, #2
 8004d88:	6033      	strmi	r3, [r6, #0]
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	f015 0506 	ands.w	r5, r5, #6
 8004d90:	d106      	bne.n	8004da0 <_printf_common+0x48>
 8004d92:	f104 0a19 	add.w	sl, r4, #25
 8004d96:	68e3      	ldr	r3, [r4, #12]
 8004d98:	6832      	ldr	r2, [r6, #0]
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	42ab      	cmp	r3, r5
 8004d9e:	dc2b      	bgt.n	8004df8 <_printf_common+0xa0>
 8004da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004da4:	1e13      	subs	r3, r2, #0
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	bf18      	it	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	0692      	lsls	r2, r2, #26
 8004dae:	d430      	bmi.n	8004e12 <_printf_common+0xba>
 8004db0:	4649      	mov	r1, r9
 8004db2:	4638      	mov	r0, r7
 8004db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004db8:	47c0      	blx	r8
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d023      	beq.n	8004e06 <_printf_common+0xae>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	6922      	ldr	r2, [r4, #16]
 8004dc2:	f003 0306 	and.w	r3, r3, #6
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	bf14      	ite	ne
 8004dca:	2500      	movne	r5, #0
 8004dcc:	6833      	ldreq	r3, [r6, #0]
 8004dce:	f04f 0600 	mov.w	r6, #0
 8004dd2:	bf08      	it	eq
 8004dd4:	68e5      	ldreq	r5, [r4, #12]
 8004dd6:	f104 041a 	add.w	r4, r4, #26
 8004dda:	bf08      	it	eq
 8004ddc:	1aed      	subeq	r5, r5, r3
 8004dde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004de2:	bf08      	it	eq
 8004de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de8:	4293      	cmp	r3, r2
 8004dea:	bfc4      	itt	gt
 8004dec:	1a9b      	subgt	r3, r3, r2
 8004dee:	18ed      	addgt	r5, r5, r3
 8004df0:	42b5      	cmp	r5, r6
 8004df2:	d11a      	bne.n	8004e2a <_printf_common+0xd2>
 8004df4:	2000      	movs	r0, #0
 8004df6:	e008      	b.n	8004e0a <_printf_common+0xb2>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	4652      	mov	r2, sl
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	4638      	mov	r0, r7
 8004e00:	47c0      	blx	r8
 8004e02:	3001      	adds	r0, #1
 8004e04:	d103      	bne.n	8004e0e <_printf_common+0xb6>
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0e:	3501      	adds	r5, #1
 8004e10:	e7c1      	b.n	8004d96 <_printf_common+0x3e>
 8004e12:	2030      	movs	r0, #48	; 0x30
 8004e14:	18e1      	adds	r1, r4, r3
 8004e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e20:	4422      	add	r2, r4
 8004e22:	3302      	adds	r3, #2
 8004e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e28:	e7c2      	b.n	8004db0 <_printf_common+0x58>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4649      	mov	r1, r9
 8004e30:	4638      	mov	r0, r7
 8004e32:	47c0      	blx	r8
 8004e34:	3001      	adds	r0, #1
 8004e36:	d0e6      	beq.n	8004e06 <_printf_common+0xae>
 8004e38:	3601      	adds	r6, #1
 8004e3a:	e7d9      	b.n	8004df0 <_printf_common+0x98>

08004e3c <_printf_i>:
 8004e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	7e0f      	ldrb	r7, [r1, #24]
 8004e42:	4691      	mov	r9, r2
 8004e44:	2f78      	cmp	r7, #120	; 0x78
 8004e46:	4680      	mov	r8, r0
 8004e48:	460c      	mov	r4, r1
 8004e4a:	469a      	mov	sl, r3
 8004e4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e52:	d807      	bhi.n	8004e64 <_printf_i+0x28>
 8004e54:	2f62      	cmp	r7, #98	; 0x62
 8004e56:	d80a      	bhi.n	8004e6e <_printf_i+0x32>
 8004e58:	2f00      	cmp	r7, #0
 8004e5a:	f000 80d5 	beq.w	8005008 <_printf_i+0x1cc>
 8004e5e:	2f58      	cmp	r7, #88	; 0x58
 8004e60:	f000 80c1 	beq.w	8004fe6 <_printf_i+0x1aa>
 8004e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e6c:	e03a      	b.n	8004ee4 <_printf_i+0xa8>
 8004e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e72:	2b15      	cmp	r3, #21
 8004e74:	d8f6      	bhi.n	8004e64 <_printf_i+0x28>
 8004e76:	a101      	add	r1, pc, #4	; (adr r1, 8004e7c <_printf_i+0x40>)
 8004e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e7c:	08004ed5 	.word	0x08004ed5
 8004e80:	08004ee9 	.word	0x08004ee9
 8004e84:	08004e65 	.word	0x08004e65
 8004e88:	08004e65 	.word	0x08004e65
 8004e8c:	08004e65 	.word	0x08004e65
 8004e90:	08004e65 	.word	0x08004e65
 8004e94:	08004ee9 	.word	0x08004ee9
 8004e98:	08004e65 	.word	0x08004e65
 8004e9c:	08004e65 	.word	0x08004e65
 8004ea0:	08004e65 	.word	0x08004e65
 8004ea4:	08004e65 	.word	0x08004e65
 8004ea8:	08004fef 	.word	0x08004fef
 8004eac:	08004f15 	.word	0x08004f15
 8004eb0:	08004fa9 	.word	0x08004fa9
 8004eb4:	08004e65 	.word	0x08004e65
 8004eb8:	08004e65 	.word	0x08004e65
 8004ebc:	08005011 	.word	0x08005011
 8004ec0:	08004e65 	.word	0x08004e65
 8004ec4:	08004f15 	.word	0x08004f15
 8004ec8:	08004e65 	.word	0x08004e65
 8004ecc:	08004e65 	.word	0x08004e65
 8004ed0:	08004fb1 	.word	0x08004fb1
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	1d1a      	adds	r2, r3, #4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	602a      	str	r2, [r5, #0]
 8004edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0a0      	b.n	800502a <_printf_i+0x1ee>
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	682b      	ldr	r3, [r5, #0]
 8004eec:	0607      	lsls	r7, r0, #24
 8004eee:	f103 0104 	add.w	r1, r3, #4
 8004ef2:	6029      	str	r1, [r5, #0]
 8004ef4:	d501      	bpl.n	8004efa <_printf_i+0xbe>
 8004ef6:	681e      	ldr	r6, [r3, #0]
 8004ef8:	e003      	b.n	8004f02 <_printf_i+0xc6>
 8004efa:	0646      	lsls	r6, r0, #25
 8004efc:	d5fb      	bpl.n	8004ef6 <_printf_i+0xba>
 8004efe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	da03      	bge.n	8004f0e <_printf_i+0xd2>
 8004f06:	232d      	movs	r3, #45	; 0x2d
 8004f08:	4276      	negs	r6, r6
 8004f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f0e:	230a      	movs	r3, #10
 8004f10:	4859      	ldr	r0, [pc, #356]	; (8005078 <_printf_i+0x23c>)
 8004f12:	e012      	b.n	8004f3a <_printf_i+0xfe>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	6820      	ldr	r0, [r4, #0]
 8004f18:	1d19      	adds	r1, r3, #4
 8004f1a:	6029      	str	r1, [r5, #0]
 8004f1c:	0605      	lsls	r5, r0, #24
 8004f1e:	d501      	bpl.n	8004f24 <_printf_i+0xe8>
 8004f20:	681e      	ldr	r6, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <_printf_i+0xee>
 8004f24:	0641      	lsls	r1, r0, #25
 8004f26:	d5fb      	bpl.n	8004f20 <_printf_i+0xe4>
 8004f28:	881e      	ldrh	r6, [r3, #0]
 8004f2a:	2f6f      	cmp	r7, #111	; 0x6f
 8004f2c:	bf0c      	ite	eq
 8004f2e:	2308      	moveq	r3, #8
 8004f30:	230a      	movne	r3, #10
 8004f32:	4851      	ldr	r0, [pc, #324]	; (8005078 <_printf_i+0x23c>)
 8004f34:	2100      	movs	r1, #0
 8004f36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f3a:	6865      	ldr	r5, [r4, #4]
 8004f3c:	2d00      	cmp	r5, #0
 8004f3e:	bfa8      	it	ge
 8004f40:	6821      	ldrge	r1, [r4, #0]
 8004f42:	60a5      	str	r5, [r4, #8]
 8004f44:	bfa4      	itt	ge
 8004f46:	f021 0104 	bicge.w	r1, r1, #4
 8004f4a:	6021      	strge	r1, [r4, #0]
 8004f4c:	b90e      	cbnz	r6, 8004f52 <_printf_i+0x116>
 8004f4e:	2d00      	cmp	r5, #0
 8004f50:	d04b      	beq.n	8004fea <_printf_i+0x1ae>
 8004f52:	4615      	mov	r5, r2
 8004f54:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f58:	fb03 6711 	mls	r7, r3, r1, r6
 8004f5c:	5dc7      	ldrb	r7, [r0, r7]
 8004f5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f62:	4637      	mov	r7, r6
 8004f64:	42bb      	cmp	r3, r7
 8004f66:	460e      	mov	r6, r1
 8004f68:	d9f4      	bls.n	8004f54 <_printf_i+0x118>
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d10b      	bne.n	8004f86 <_printf_i+0x14a>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	07de      	lsls	r6, r3, #31
 8004f72:	d508      	bpl.n	8004f86 <_printf_i+0x14a>
 8004f74:	6923      	ldr	r3, [r4, #16]
 8004f76:	6861      	ldr	r1, [r4, #4]
 8004f78:	4299      	cmp	r1, r3
 8004f7a:	bfde      	ittt	le
 8004f7c:	2330      	movle	r3, #48	; 0x30
 8004f7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f86:	1b52      	subs	r2, r2, r5
 8004f88:	6122      	str	r2, [r4, #16]
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f8cd a000 	str.w	sl, [sp]
 8004f94:	aa03      	add	r2, sp, #12
 8004f96:	f7ff fedf 	bl	8004d58 <_printf_common>
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d14a      	bne.n	8005034 <_printf_i+0x1f8>
 8004f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa2:	b004      	add	sp, #16
 8004fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	f043 0320 	orr.w	r3, r3, #32
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	2778      	movs	r7, #120	; 0x78
 8004fb2:	4832      	ldr	r0, [pc, #200]	; (800507c <_printf_i+0x240>)
 8004fb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	6829      	ldr	r1, [r5, #0]
 8004fbc:	061f      	lsls	r7, r3, #24
 8004fbe:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fc2:	d402      	bmi.n	8004fca <_printf_i+0x18e>
 8004fc4:	065f      	lsls	r7, r3, #25
 8004fc6:	bf48      	it	mi
 8004fc8:	b2b6      	uxthmi	r6, r6
 8004fca:	07df      	lsls	r7, r3, #31
 8004fcc:	bf48      	it	mi
 8004fce:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd2:	6029      	str	r1, [r5, #0]
 8004fd4:	bf48      	it	mi
 8004fd6:	6023      	strmi	r3, [r4, #0]
 8004fd8:	b91e      	cbnz	r6, 8004fe2 <_printf_i+0x1a6>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	f023 0320 	bic.w	r3, r3, #32
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	e7a6      	b.n	8004f34 <_printf_i+0xf8>
 8004fe6:	4824      	ldr	r0, [pc, #144]	; (8005078 <_printf_i+0x23c>)
 8004fe8:	e7e4      	b.n	8004fb4 <_printf_i+0x178>
 8004fea:	4615      	mov	r5, r2
 8004fec:	e7bd      	b.n	8004f6a <_printf_i+0x12e>
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	6826      	ldr	r6, [r4, #0]
 8004ff2:	1d18      	adds	r0, r3, #4
 8004ff4:	6961      	ldr	r1, [r4, #20]
 8004ff6:	6028      	str	r0, [r5, #0]
 8004ff8:	0635      	lsls	r5, r6, #24
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	d501      	bpl.n	8005002 <_printf_i+0x1c6>
 8004ffe:	6019      	str	r1, [r3, #0]
 8005000:	e002      	b.n	8005008 <_printf_i+0x1cc>
 8005002:	0670      	lsls	r0, r6, #25
 8005004:	d5fb      	bpl.n	8004ffe <_printf_i+0x1c2>
 8005006:	8019      	strh	r1, [r3, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	4615      	mov	r5, r2
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	e7bc      	b.n	8004f8a <_printf_i+0x14e>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	2100      	movs	r1, #0
 8005014:	1d1a      	adds	r2, r3, #4
 8005016:	602a      	str	r2, [r5, #0]
 8005018:	681d      	ldr	r5, [r3, #0]
 800501a:	6862      	ldr	r2, [r4, #4]
 800501c:	4628      	mov	r0, r5
 800501e:	f000 f999 	bl	8005354 <memchr>
 8005022:	b108      	cbz	r0, 8005028 <_printf_i+0x1ec>
 8005024:	1b40      	subs	r0, r0, r5
 8005026:	6060      	str	r0, [r4, #4]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	2300      	movs	r3, #0
 800502e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005032:	e7aa      	b.n	8004f8a <_printf_i+0x14e>
 8005034:	462a      	mov	r2, r5
 8005036:	4649      	mov	r1, r9
 8005038:	4640      	mov	r0, r8
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	47d0      	blx	sl
 800503e:	3001      	adds	r0, #1
 8005040:	d0ad      	beq.n	8004f9e <_printf_i+0x162>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	079b      	lsls	r3, r3, #30
 8005046:	d413      	bmi.n	8005070 <_printf_i+0x234>
 8005048:	68e0      	ldr	r0, [r4, #12]
 800504a:	9b03      	ldr	r3, [sp, #12]
 800504c:	4298      	cmp	r0, r3
 800504e:	bfb8      	it	lt
 8005050:	4618      	movlt	r0, r3
 8005052:	e7a6      	b.n	8004fa2 <_printf_i+0x166>
 8005054:	2301      	movs	r3, #1
 8005056:	4632      	mov	r2, r6
 8005058:	4649      	mov	r1, r9
 800505a:	4640      	mov	r0, r8
 800505c:	47d0      	blx	sl
 800505e:	3001      	adds	r0, #1
 8005060:	d09d      	beq.n	8004f9e <_printf_i+0x162>
 8005062:	3501      	adds	r5, #1
 8005064:	68e3      	ldr	r3, [r4, #12]
 8005066:	9903      	ldr	r1, [sp, #12]
 8005068:	1a5b      	subs	r3, r3, r1
 800506a:	42ab      	cmp	r3, r5
 800506c:	dcf2      	bgt.n	8005054 <_printf_i+0x218>
 800506e:	e7eb      	b.n	8005048 <_printf_i+0x20c>
 8005070:	2500      	movs	r5, #0
 8005072:	f104 0619 	add.w	r6, r4, #25
 8005076:	e7f5      	b.n	8005064 <_printf_i+0x228>
 8005078:	08005573 	.word	0x08005573
 800507c:	08005584 	.word	0x08005584

08005080 <__sflush_r>:
 8005080:	898a      	ldrh	r2, [r1, #12]
 8005082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005084:	4605      	mov	r5, r0
 8005086:	0710      	lsls	r0, r2, #28
 8005088:	460c      	mov	r4, r1
 800508a:	d457      	bmi.n	800513c <__sflush_r+0xbc>
 800508c:	684b      	ldr	r3, [r1, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	dc04      	bgt.n	800509c <__sflush_r+0x1c>
 8005092:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	dc01      	bgt.n	800509c <__sflush_r+0x1c>
 8005098:	2000      	movs	r0, #0
 800509a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800509c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800509e:	2e00      	cmp	r6, #0
 80050a0:	d0fa      	beq.n	8005098 <__sflush_r+0x18>
 80050a2:	2300      	movs	r3, #0
 80050a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050a8:	682f      	ldr	r7, [r5, #0]
 80050aa:	6a21      	ldr	r1, [r4, #32]
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	d032      	beq.n	8005116 <__sflush_r+0x96>
 80050b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	075a      	lsls	r2, r3, #29
 80050b6:	d505      	bpl.n	80050c4 <__sflush_r+0x44>
 80050b8:	6863      	ldr	r3, [r4, #4]
 80050ba:	1ac0      	subs	r0, r0, r3
 80050bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050be:	b10b      	cbz	r3, 80050c4 <__sflush_r+0x44>
 80050c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050c2:	1ac0      	subs	r0, r0, r3
 80050c4:	2300      	movs	r3, #0
 80050c6:	4602      	mov	r2, r0
 80050c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ca:	4628      	mov	r0, r5
 80050cc:	6a21      	ldr	r1, [r4, #32]
 80050ce:	47b0      	blx	r6
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	d106      	bne.n	80050e4 <__sflush_r+0x64>
 80050d6:	6829      	ldr	r1, [r5, #0]
 80050d8:	291d      	cmp	r1, #29
 80050da:	d82b      	bhi.n	8005134 <__sflush_r+0xb4>
 80050dc:	4a28      	ldr	r2, [pc, #160]	; (8005180 <__sflush_r+0x100>)
 80050de:	410a      	asrs	r2, r1
 80050e0:	07d6      	lsls	r6, r2, #31
 80050e2:	d427      	bmi.n	8005134 <__sflush_r+0xb4>
 80050e4:	2200      	movs	r2, #0
 80050e6:	6062      	str	r2, [r4, #4]
 80050e8:	6922      	ldr	r2, [r4, #16]
 80050ea:	04d9      	lsls	r1, r3, #19
 80050ec:	6022      	str	r2, [r4, #0]
 80050ee:	d504      	bpl.n	80050fa <__sflush_r+0x7a>
 80050f0:	1c42      	adds	r2, r0, #1
 80050f2:	d101      	bne.n	80050f8 <__sflush_r+0x78>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b903      	cbnz	r3, 80050fa <__sflush_r+0x7a>
 80050f8:	6560      	str	r0, [r4, #84]	; 0x54
 80050fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050fc:	602f      	str	r7, [r5, #0]
 80050fe:	2900      	cmp	r1, #0
 8005100:	d0ca      	beq.n	8005098 <__sflush_r+0x18>
 8005102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005106:	4299      	cmp	r1, r3
 8005108:	d002      	beq.n	8005110 <__sflush_r+0x90>
 800510a:	4628      	mov	r0, r5
 800510c:	f7ff fa96 	bl	800463c <_free_r>
 8005110:	2000      	movs	r0, #0
 8005112:	6360      	str	r0, [r4, #52]	; 0x34
 8005114:	e7c1      	b.n	800509a <__sflush_r+0x1a>
 8005116:	2301      	movs	r3, #1
 8005118:	4628      	mov	r0, r5
 800511a:	47b0      	blx	r6
 800511c:	1c41      	adds	r1, r0, #1
 800511e:	d1c8      	bne.n	80050b2 <__sflush_r+0x32>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0c5      	beq.n	80050b2 <__sflush_r+0x32>
 8005126:	2b1d      	cmp	r3, #29
 8005128:	d001      	beq.n	800512e <__sflush_r+0xae>
 800512a:	2b16      	cmp	r3, #22
 800512c:	d101      	bne.n	8005132 <__sflush_r+0xb2>
 800512e:	602f      	str	r7, [r5, #0]
 8005130:	e7b2      	b.n	8005098 <__sflush_r+0x18>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	e7ae      	b.n	800509a <__sflush_r+0x1a>
 800513c:	690f      	ldr	r7, [r1, #16]
 800513e:	2f00      	cmp	r7, #0
 8005140:	d0aa      	beq.n	8005098 <__sflush_r+0x18>
 8005142:	0793      	lsls	r3, r2, #30
 8005144:	bf18      	it	ne
 8005146:	2300      	movne	r3, #0
 8005148:	680e      	ldr	r6, [r1, #0]
 800514a:	bf08      	it	eq
 800514c:	694b      	ldreq	r3, [r1, #20]
 800514e:	1bf6      	subs	r6, r6, r7
 8005150:	600f      	str	r7, [r1, #0]
 8005152:	608b      	str	r3, [r1, #8]
 8005154:	2e00      	cmp	r6, #0
 8005156:	dd9f      	ble.n	8005098 <__sflush_r+0x18>
 8005158:	4633      	mov	r3, r6
 800515a:	463a      	mov	r2, r7
 800515c:	4628      	mov	r0, r5
 800515e:	6a21      	ldr	r1, [r4, #32]
 8005160:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005164:	47e0      	blx	ip
 8005166:	2800      	cmp	r0, #0
 8005168:	dc06      	bgt.n	8005178 <__sflush_r+0xf8>
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	e790      	b.n	800509a <__sflush_r+0x1a>
 8005178:	4407      	add	r7, r0
 800517a:	1a36      	subs	r6, r6, r0
 800517c:	e7ea      	b.n	8005154 <__sflush_r+0xd4>
 800517e:	bf00      	nop
 8005180:	dfbffffe 	.word	0xdfbffffe

08005184 <_fflush_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	690b      	ldr	r3, [r1, #16]
 8005188:	4605      	mov	r5, r0
 800518a:	460c      	mov	r4, r1
 800518c:	b913      	cbnz	r3, 8005194 <_fflush_r+0x10>
 800518e:	2500      	movs	r5, #0
 8005190:	4628      	mov	r0, r5
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	b118      	cbz	r0, 800519e <_fflush_r+0x1a>
 8005196:	6a03      	ldr	r3, [r0, #32]
 8005198:	b90b      	cbnz	r3, 800519e <_fflush_r+0x1a>
 800519a:	f7ff f927 	bl	80043ec <__sinit>
 800519e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f3      	beq.n	800518e <_fflush_r+0xa>
 80051a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051a8:	07d0      	lsls	r0, r2, #31
 80051aa:	d404      	bmi.n	80051b6 <_fflush_r+0x32>
 80051ac:	0599      	lsls	r1, r3, #22
 80051ae:	d402      	bmi.n	80051b6 <_fflush_r+0x32>
 80051b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b2:	f7ff fa40 	bl	8004636 <__retarget_lock_acquire_recursive>
 80051b6:	4628      	mov	r0, r5
 80051b8:	4621      	mov	r1, r4
 80051ba:	f7ff ff61 	bl	8005080 <__sflush_r>
 80051be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051c0:	4605      	mov	r5, r0
 80051c2:	07da      	lsls	r2, r3, #31
 80051c4:	d4e4      	bmi.n	8005190 <_fflush_r+0xc>
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	059b      	lsls	r3, r3, #22
 80051ca:	d4e1      	bmi.n	8005190 <_fflush_r+0xc>
 80051cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ce:	f7ff fa33 	bl	8004638 <__retarget_lock_release_recursive>
 80051d2:	e7dd      	b.n	8005190 <_fflush_r+0xc>

080051d4 <__swbuf_r>:
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d6:	460e      	mov	r6, r1
 80051d8:	4614      	mov	r4, r2
 80051da:	4605      	mov	r5, r0
 80051dc:	b118      	cbz	r0, 80051e6 <__swbuf_r+0x12>
 80051de:	6a03      	ldr	r3, [r0, #32]
 80051e0:	b90b      	cbnz	r3, 80051e6 <__swbuf_r+0x12>
 80051e2:	f7ff f903 	bl	80043ec <__sinit>
 80051e6:	69a3      	ldr	r3, [r4, #24]
 80051e8:	60a3      	str	r3, [r4, #8]
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	071a      	lsls	r2, r3, #28
 80051ee:	d525      	bpl.n	800523c <__swbuf_r+0x68>
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	b31b      	cbz	r3, 800523c <__swbuf_r+0x68>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	6922      	ldr	r2, [r4, #16]
 80051f8:	b2f6      	uxtb	r6, r6
 80051fa:	1a98      	subs	r0, r3, r2
 80051fc:	6963      	ldr	r3, [r4, #20]
 80051fe:	4637      	mov	r7, r6
 8005200:	4283      	cmp	r3, r0
 8005202:	dc04      	bgt.n	800520e <__swbuf_r+0x3a>
 8005204:	4621      	mov	r1, r4
 8005206:	4628      	mov	r0, r5
 8005208:	f7ff ffbc 	bl	8005184 <_fflush_r>
 800520c:	b9e0      	cbnz	r0, 8005248 <__swbuf_r+0x74>
 800520e:	68a3      	ldr	r3, [r4, #8]
 8005210:	3b01      	subs	r3, #1
 8005212:	60a3      	str	r3, [r4, #8]
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	6022      	str	r2, [r4, #0]
 800521a:	701e      	strb	r6, [r3, #0]
 800521c:	6962      	ldr	r2, [r4, #20]
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	429a      	cmp	r2, r3
 8005222:	d004      	beq.n	800522e <__swbuf_r+0x5a>
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	07db      	lsls	r3, r3, #31
 8005228:	d506      	bpl.n	8005238 <__swbuf_r+0x64>
 800522a:	2e0a      	cmp	r6, #10
 800522c:	d104      	bne.n	8005238 <__swbuf_r+0x64>
 800522e:	4621      	mov	r1, r4
 8005230:	4628      	mov	r0, r5
 8005232:	f7ff ffa7 	bl	8005184 <_fflush_r>
 8005236:	b938      	cbnz	r0, 8005248 <__swbuf_r+0x74>
 8005238:	4638      	mov	r0, r7
 800523a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800523c:	4621      	mov	r1, r4
 800523e:	4628      	mov	r0, r5
 8005240:	f000 f806 	bl	8005250 <__swsetup_r>
 8005244:	2800      	cmp	r0, #0
 8005246:	d0d5      	beq.n	80051f4 <__swbuf_r+0x20>
 8005248:	f04f 37ff 	mov.w	r7, #4294967295
 800524c:	e7f4      	b.n	8005238 <__swbuf_r+0x64>
	...

08005250 <__swsetup_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4b2a      	ldr	r3, [pc, #168]	; (80052fc <__swsetup_r+0xac>)
 8005254:	4605      	mov	r5, r0
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	460c      	mov	r4, r1
 800525a:	b118      	cbz	r0, 8005264 <__swsetup_r+0x14>
 800525c:	6a03      	ldr	r3, [r0, #32]
 800525e:	b90b      	cbnz	r3, 8005264 <__swsetup_r+0x14>
 8005260:	f7ff f8c4 	bl	80043ec <__sinit>
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800526a:	0718      	lsls	r0, r3, #28
 800526c:	d422      	bmi.n	80052b4 <__swsetup_r+0x64>
 800526e:	06d9      	lsls	r1, r3, #27
 8005270:	d407      	bmi.n	8005282 <__swsetup_r+0x32>
 8005272:	2309      	movs	r3, #9
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800527a:	f04f 30ff 	mov.w	r0, #4294967295
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	e034      	b.n	80052ec <__swsetup_r+0x9c>
 8005282:	0758      	lsls	r0, r3, #29
 8005284:	d512      	bpl.n	80052ac <__swsetup_r+0x5c>
 8005286:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005288:	b141      	cbz	r1, 800529c <__swsetup_r+0x4c>
 800528a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800528e:	4299      	cmp	r1, r3
 8005290:	d002      	beq.n	8005298 <__swsetup_r+0x48>
 8005292:	4628      	mov	r0, r5
 8005294:	f7ff f9d2 	bl	800463c <_free_r>
 8005298:	2300      	movs	r3, #0
 800529a:	6363      	str	r3, [r4, #52]	; 0x34
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052a2:	81a3      	strh	r3, [r4, #12]
 80052a4:	2300      	movs	r3, #0
 80052a6:	6063      	str	r3, [r4, #4]
 80052a8:	6923      	ldr	r3, [r4, #16]
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	f043 0308 	orr.w	r3, r3, #8
 80052b2:	81a3      	strh	r3, [r4, #12]
 80052b4:	6923      	ldr	r3, [r4, #16]
 80052b6:	b94b      	cbnz	r3, 80052cc <__swsetup_r+0x7c>
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c2:	d003      	beq.n	80052cc <__swsetup_r+0x7c>
 80052c4:	4621      	mov	r1, r4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f8b4 	bl	8005434 <__smakebuf_r>
 80052cc:	89a0      	ldrh	r0, [r4, #12]
 80052ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052d2:	f010 0301 	ands.w	r3, r0, #1
 80052d6:	d00a      	beq.n	80052ee <__swsetup_r+0x9e>
 80052d8:	2300      	movs	r3, #0
 80052da:	60a3      	str	r3, [r4, #8]
 80052dc:	6963      	ldr	r3, [r4, #20]
 80052de:	425b      	negs	r3, r3
 80052e0:	61a3      	str	r3, [r4, #24]
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	b943      	cbnz	r3, 80052f8 <__swsetup_r+0xa8>
 80052e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052ea:	d1c4      	bne.n	8005276 <__swsetup_r+0x26>
 80052ec:	bd38      	pop	{r3, r4, r5, pc}
 80052ee:	0781      	lsls	r1, r0, #30
 80052f0:	bf58      	it	pl
 80052f2:	6963      	ldrpl	r3, [r4, #20]
 80052f4:	60a3      	str	r3, [r4, #8]
 80052f6:	e7f4      	b.n	80052e2 <__swsetup_r+0x92>
 80052f8:	2000      	movs	r0, #0
 80052fa:	e7f7      	b.n	80052ec <__swsetup_r+0x9c>
 80052fc:	200000c4 	.word	0x200000c4

08005300 <memmove>:
 8005300:	4288      	cmp	r0, r1
 8005302:	b510      	push	{r4, lr}
 8005304:	eb01 0402 	add.w	r4, r1, r2
 8005308:	d902      	bls.n	8005310 <memmove+0x10>
 800530a:	4284      	cmp	r4, r0
 800530c:	4623      	mov	r3, r4
 800530e:	d807      	bhi.n	8005320 <memmove+0x20>
 8005310:	1e43      	subs	r3, r0, #1
 8005312:	42a1      	cmp	r1, r4
 8005314:	d008      	beq.n	8005328 <memmove+0x28>
 8005316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800531a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800531e:	e7f8      	b.n	8005312 <memmove+0x12>
 8005320:	4601      	mov	r1, r0
 8005322:	4402      	add	r2, r0
 8005324:	428a      	cmp	r2, r1
 8005326:	d100      	bne.n	800532a <memmove+0x2a>
 8005328:	bd10      	pop	{r4, pc}
 800532a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800532e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005332:	e7f7      	b.n	8005324 <memmove+0x24>

08005334 <_sbrk_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	2300      	movs	r3, #0
 8005338:	4d05      	ldr	r5, [pc, #20]	; (8005350 <_sbrk_r+0x1c>)
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	602b      	str	r3, [r5, #0]
 8005340:	f7fc f95e 	bl	8001600 <_sbrk>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_sbrk_r+0x1a>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_sbrk_r+0x1a>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	20000478 	.word	0x20000478

08005354 <memchr>:
 8005354:	4603      	mov	r3, r0
 8005356:	b510      	push	{r4, lr}
 8005358:	b2c9      	uxtb	r1, r1
 800535a:	4402      	add	r2, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	4618      	mov	r0, r3
 8005360:	d101      	bne.n	8005366 <memchr+0x12>
 8005362:	2000      	movs	r0, #0
 8005364:	e003      	b.n	800536e <memchr+0x1a>
 8005366:	7804      	ldrb	r4, [r0, #0]
 8005368:	3301      	adds	r3, #1
 800536a:	428c      	cmp	r4, r1
 800536c:	d1f6      	bne.n	800535c <memchr+0x8>
 800536e:	bd10      	pop	{r4, pc}

08005370 <memcpy>:
 8005370:	440a      	add	r2, r1
 8005372:	4291      	cmp	r1, r2
 8005374:	f100 33ff 	add.w	r3, r0, #4294967295
 8005378:	d100      	bne.n	800537c <memcpy+0xc>
 800537a:	4770      	bx	lr
 800537c:	b510      	push	{r4, lr}
 800537e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005382:	4291      	cmp	r1, r2
 8005384:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005388:	d1f9      	bne.n	800537e <memcpy+0xe>
 800538a:	bd10      	pop	{r4, pc}

0800538c <_realloc_r>:
 800538c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005390:	4680      	mov	r8, r0
 8005392:	4614      	mov	r4, r2
 8005394:	460e      	mov	r6, r1
 8005396:	b921      	cbnz	r1, 80053a2 <_realloc_r+0x16>
 8005398:	4611      	mov	r1, r2
 800539a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539e:	f7ff b9b5 	b.w	800470c <_malloc_r>
 80053a2:	b92a      	cbnz	r2, 80053b0 <_realloc_r+0x24>
 80053a4:	f7ff f94a 	bl	800463c <_free_r>
 80053a8:	4625      	mov	r5, r4
 80053aa:	4628      	mov	r0, r5
 80053ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b0:	f000 f89e 	bl	80054f0 <_malloc_usable_size_r>
 80053b4:	4284      	cmp	r4, r0
 80053b6:	4607      	mov	r7, r0
 80053b8:	d802      	bhi.n	80053c0 <_realloc_r+0x34>
 80053ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053be:	d812      	bhi.n	80053e6 <_realloc_r+0x5a>
 80053c0:	4621      	mov	r1, r4
 80053c2:	4640      	mov	r0, r8
 80053c4:	f7ff f9a2 	bl	800470c <_malloc_r>
 80053c8:	4605      	mov	r5, r0
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d0ed      	beq.n	80053aa <_realloc_r+0x1e>
 80053ce:	42bc      	cmp	r4, r7
 80053d0:	4622      	mov	r2, r4
 80053d2:	4631      	mov	r1, r6
 80053d4:	bf28      	it	cs
 80053d6:	463a      	movcs	r2, r7
 80053d8:	f7ff ffca 	bl	8005370 <memcpy>
 80053dc:	4631      	mov	r1, r6
 80053de:	4640      	mov	r0, r8
 80053e0:	f7ff f92c 	bl	800463c <_free_r>
 80053e4:	e7e1      	b.n	80053aa <_realloc_r+0x1e>
 80053e6:	4635      	mov	r5, r6
 80053e8:	e7df      	b.n	80053aa <_realloc_r+0x1e>

080053ea <__swhatbuf_r>:
 80053ea:	b570      	push	{r4, r5, r6, lr}
 80053ec:	460c      	mov	r4, r1
 80053ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f2:	4615      	mov	r5, r2
 80053f4:	2900      	cmp	r1, #0
 80053f6:	461e      	mov	r6, r3
 80053f8:	b096      	sub	sp, #88	; 0x58
 80053fa:	da0c      	bge.n	8005416 <__swhatbuf_r+0x2c>
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	2100      	movs	r1, #0
 8005400:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005404:	bf0c      	ite	eq
 8005406:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800540a:	2340      	movne	r3, #64	; 0x40
 800540c:	2000      	movs	r0, #0
 800540e:	6031      	str	r1, [r6, #0]
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	b016      	add	sp, #88	; 0x58
 8005414:	bd70      	pop	{r4, r5, r6, pc}
 8005416:	466a      	mov	r2, sp
 8005418:	f000 f848 	bl	80054ac <_fstat_r>
 800541c:	2800      	cmp	r0, #0
 800541e:	dbed      	blt.n	80053fc <__swhatbuf_r+0x12>
 8005420:	9901      	ldr	r1, [sp, #4]
 8005422:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005426:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800542a:	4259      	negs	r1, r3
 800542c:	4159      	adcs	r1, r3
 800542e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005432:	e7eb      	b.n	800540c <__swhatbuf_r+0x22>

08005434 <__smakebuf_r>:
 8005434:	898b      	ldrh	r3, [r1, #12]
 8005436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005438:	079d      	lsls	r5, r3, #30
 800543a:	4606      	mov	r6, r0
 800543c:	460c      	mov	r4, r1
 800543e:	d507      	bpl.n	8005450 <__smakebuf_r+0x1c>
 8005440:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	6123      	str	r3, [r4, #16]
 8005448:	2301      	movs	r3, #1
 800544a:	6163      	str	r3, [r4, #20]
 800544c:	b002      	add	sp, #8
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	466a      	mov	r2, sp
 8005452:	ab01      	add	r3, sp, #4
 8005454:	f7ff ffc9 	bl	80053ea <__swhatbuf_r>
 8005458:	9900      	ldr	r1, [sp, #0]
 800545a:	4605      	mov	r5, r0
 800545c:	4630      	mov	r0, r6
 800545e:	f7ff f955 	bl	800470c <_malloc_r>
 8005462:	b948      	cbnz	r0, 8005478 <__smakebuf_r+0x44>
 8005464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005468:	059a      	lsls	r2, r3, #22
 800546a:	d4ef      	bmi.n	800544c <__smakebuf_r+0x18>
 800546c:	f023 0303 	bic.w	r3, r3, #3
 8005470:	f043 0302 	orr.w	r3, r3, #2
 8005474:	81a3      	strh	r3, [r4, #12]
 8005476:	e7e3      	b.n	8005440 <__smakebuf_r+0xc>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	6020      	str	r0, [r4, #0]
 800547c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005480:	81a3      	strh	r3, [r4, #12]
 8005482:	9b00      	ldr	r3, [sp, #0]
 8005484:	6120      	str	r0, [r4, #16]
 8005486:	6163      	str	r3, [r4, #20]
 8005488:	9b01      	ldr	r3, [sp, #4]
 800548a:	b15b      	cbz	r3, 80054a4 <__smakebuf_r+0x70>
 800548c:	4630      	mov	r0, r6
 800548e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005492:	f000 f81d 	bl	80054d0 <_isatty_r>
 8005496:	b128      	cbz	r0, 80054a4 <__smakebuf_r+0x70>
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	81a3      	strh	r3, [r4, #12]
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	431d      	orrs	r5, r3
 80054a8:	81a5      	strh	r5, [r4, #12]
 80054aa:	e7cf      	b.n	800544c <__smakebuf_r+0x18>

080054ac <_fstat_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	2300      	movs	r3, #0
 80054b0:	4d06      	ldr	r5, [pc, #24]	; (80054cc <_fstat_r+0x20>)
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	4611      	mov	r1, r2
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	f7fc f87b 	bl	80015b4 <_fstat>
 80054be:	1c43      	adds	r3, r0, #1
 80054c0:	d102      	bne.n	80054c8 <_fstat_r+0x1c>
 80054c2:	682b      	ldr	r3, [r5, #0]
 80054c4:	b103      	cbz	r3, 80054c8 <_fstat_r+0x1c>
 80054c6:	6023      	str	r3, [r4, #0]
 80054c8:	bd38      	pop	{r3, r4, r5, pc}
 80054ca:	bf00      	nop
 80054cc:	20000478 	.word	0x20000478

080054d0 <_isatty_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	2300      	movs	r3, #0
 80054d4:	4d05      	ldr	r5, [pc, #20]	; (80054ec <_isatty_r+0x1c>)
 80054d6:	4604      	mov	r4, r0
 80054d8:	4608      	mov	r0, r1
 80054da:	602b      	str	r3, [r5, #0]
 80054dc:	f7fc f879 	bl	80015d2 <_isatty>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d102      	bne.n	80054ea <_isatty_r+0x1a>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b103      	cbz	r3, 80054ea <_isatty_r+0x1a>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	20000478 	.word	0x20000478

080054f0 <_malloc_usable_size_r>:
 80054f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f4:	1f18      	subs	r0, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bfbc      	itt	lt
 80054fa:	580b      	ldrlt	r3, [r1, r0]
 80054fc:	18c0      	addlt	r0, r0, r3
 80054fe:	4770      	bx	lr

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
