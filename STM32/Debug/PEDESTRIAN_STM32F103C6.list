
PEDESTRIAN_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005638  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057cc  080057cc  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  080057cc  080057cc  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057cc  080057cc  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080057d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200000bc  08005890  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08005890  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e3c0  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002877  00000000  00000000  0002e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00030d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b32  00000000  00000000  00031be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019198  00000000  00000000  0003271a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f95  00000000  00000000  0004b8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088b94  00000000  00000000  0005e847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ea8  00000000  00000000  000e73dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000eb284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800572c 	.word	0x0800572c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	0800572c 	.word	0x0800572c

0800014c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	; (8000240 <buttonReading+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	; (8000244 <buttonReading+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	; (8000248 <buttonReading+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	; (8000240 <buttonReading+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <buttonReading+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	; (8000250 <buttonReading+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f002 fc05 	bl	8002994 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <buttonReading+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2c      	ldr	r2, [pc, #176]	; (8000248 <buttonReading+0xfc>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	; (8000240 <buttonReading+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d143      	bne.n	800022a <buttonReading+0xde>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a28      	ldr	r2, [pc, #160]	; (8000248 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <buttonReading+0xf8>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d13b      	bne.n	800022a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a27      	ldr	r2, [pc, #156]	; (8000254 <buttonReading+0x108>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4923      	ldr	r1, [pc, #140]	; (8000248 <buttonReading+0xfc>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	; (8000248 <buttonReading+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	; (8000254 <buttonReading+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a20      	ldr	r2, [pc, #128]	; (8000254 <buttonReading+0x108>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d128      	bne.n	800022a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <buttonReading+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / TIMER_TICK;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <buttonReading+0x110>)
 80001e4:	21c8      	movs	r1, #200	; 0xc8
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001ea:	e01e      	b.n	800022a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <buttonReading+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d119      	bne.n	800022a <buttonReading+0xde>
					buttonCounters[i] --;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <buttonReading+0x110>)
 80001fa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80001fe:	b292      	uxth	r2, r2
 8000200:	3a01      	subs	r2, #1
 8000202:	b292      	uxth	r2, r2
 8000204:	b211      	sxth	r1, r2
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <buttonReading+0x110>)
 8000208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <buttonReading+0x110>)
 8000210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dc08      	bgt.n	800022a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <buttonReading+0x10c>)
 800021c:	2101      	movs	r1, #1
 800021e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / TIMER_TICK;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a0e      	ldr	r2, [pc, #56]	; (800025c <buttonReading+0x110>)
 8000224:	2114      	movs	r1, #20
 8000226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d990      	bls.n	8000158 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	200000e0 	.word	0x200000e0
 8000244:	200000e4 	.word	0x200000e4
 8000248:	200000dc 	.word	0x200000dc
 800024c:	20000000 	.word	0x20000000
 8000250:	20000010 	.word	0x20000010
 8000254:	200000d8 	.word	0x200000d8
 8000258:	200000e8 	.word	0x200000e8
 800025c:	200000ec 	.word	0x200000ec

08000260 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d901      	bls.n	8000274 <buttonPressed+0x14>
 8000270:	2300      	movs	r3, #0
 8000272:	e00b      	b.n	800028c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <buttonPressed+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d105      	bne.n	800028a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a05      	ldr	r2, [pc, #20]	; (8000298 <buttonPressed+0x38>)
 8000282:	2100      	movs	r1, #0
 8000284:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <buttonPressed+0x2c>
	}
	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	200000e8 	.word	0x200000e8

0800029c <buzzer0Set>:

#include "buzzer.h"

extern TIM_HandleTypeDef htim3;

void buzzer0Set(uint8_t volume){
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	// Ensure volume stays in the range: 0% - 100%
	if (volume < BUZZER_VOLUME_MIN) {
		volume = BUZZER_VOLUME_MIN;
	}
	if (volume > BUZZER_VOLUME_MAX) {
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b64      	cmp	r3, #100	; 0x64
 80002aa:	d901      	bls.n	80002b0 <buzzer0Set+0x14>
        volume = BUZZER_VOLUME_MAX;
 80002ac:	2364      	movs	r3, #100	; 0x64
 80002ae:	71fb      	strb	r3, [r7, #7]
	}

    // Calculate and set PWM to Buzzer
    uint32_t pulseWidth = BUZZER_MAX * BUZZER_RATIO * volume / 100;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <buzzer0Set+0x48>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	2232      	movs	r2, #50	; 0x32
 80002b6:	fb02 f303 	mul.w	r3, r2, r3
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <buzzer0Set+0x4c>)
 80002bc:	fba2 2303 	umull	r2, r3, r2, r3
 80002c0:	095b      	lsrs	r3, r3, #5
 80002c2:	79fa      	ldrb	r2, [r7, #7]
 80002c4:	fb02 f303 	mul.w	r3, r2, r3
 80002c8:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <buzzer0Set+0x4c>)
 80002ca:	fba2 2303 	umull	r2, r3, r2, r3
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseWidth);
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <buzzer0Set+0x48>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	2000015c 	.word	0x2000015c
 80002e8:	51eb851f 	.word	0x51eb851f

080002ec <buzzer1Set>:

void buzzer1Set(uint8_t volume){
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
    // Ensure volume stays in the range: 0% - 100%
	if (volume < BUZZER_VOLUME_MIN) {
		volume = BUZZER_VOLUME_MIN;
	}
	if (volume > BUZZER_VOLUME_MAX) {
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b64      	cmp	r3, #100	; 0x64
 80002fa:	d901      	bls.n	8000300 <buzzer1Set+0x14>
        volume = BUZZER_VOLUME_MAX;
 80002fc:	2364      	movs	r3, #100	; 0x64
 80002fe:	71fb      	strb	r3, [r7, #7]
	}

    // Calculate and set PWM to Buzzer
    uint32_t pulseWidth = BUZZER_MAX * BUZZER_RATIO * volume / 100;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <buzzer1Set+0x48>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	2232      	movs	r2, #50	; 0x32
 8000306:	fb02 f303 	mul.w	r3, r2, r3
 800030a:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <buzzer1Set+0x4c>)
 800030c:	fba2 2303 	umull	r2, r3, r2, r3
 8000310:	095b      	lsrs	r3, r3, #5
 8000312:	79fa      	ldrb	r2, [r7, #7]
 8000314:	fb02 f303 	mul.w	r3, r2, r3
 8000318:	4a07      	ldr	r2, [pc, #28]	; (8000338 <buzzer1Set+0x4c>)
 800031a:	fba2 2303 	umull	r2, r3, r2, r3
 800031e:	095b      	lsrs	r3, r3, #5
 8000320:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseWidth);
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <buzzer1Set+0x48>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	639a      	str	r2, [r3, #56]	; 0x38
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	2000015c 	.word	0x2000015c
 8000338:	51eb851f 	.word	0x51eb851f

0800033c <buzzer0On>:

void buzzer0On(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	if (pedestrianCounters[0] > BUZZER_TIMEOUT) {
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <buzzer0On+0x44>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000348:	d903      	bls.n	8000352 <buzzer0On+0x16>
		buzzer0Set(BUZZER_VOLUME_AUTO);
 800034a:	200a      	movs	r0, #10
 800034c:	f7ff ffa6 	bl	800029c <buzzer0Set>
	}
	else {
		buzzer0Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[0]) / BUZZER_TIMEOUT);
	}
}
 8000350:	e013      	b.n	800037a <buzzer0On+0x3e>
		buzzer0Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[0]) / BUZZER_TIMEOUT);
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <buzzer0On+0x44>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f06f 0259 	mvn.w	r2, #89	; 0x59
 800035a:	fb02 f303 	mul.w	r3, r2, r3
 800035e:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 8000362:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <buzzer0On+0x48>)
 8000368:	fba2 2303 	umull	r2, r3, r2, r3
 800036c:	09db      	lsrs	r3, r3, #7
 800036e:	b2db      	uxtb	r3, r3
 8000370:	330a      	adds	r3, #10
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff91 	bl	800029c <buzzer0Set>
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200001f4 	.word	0x200001f4
 8000384:	10624dd3 	.word	0x10624dd3

08000388 <buzzer0Off>:

void buzzer0Off(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	buzzer0Set(0);
 800038c:	2000      	movs	r0, #0
 800038e:	f7ff ff85 	bl	800029c <buzzer0Set>
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <buzzer1On>:

void buzzer1On(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	if (pedestrianCounters[1] > BUZZER_TIMEOUT) {
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <buzzer1On+0x44>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003a4:	d903      	bls.n	80003ae <buzzer1On+0x16>
		buzzer1Set(BUZZER_VOLUME_AUTO);
 80003a6:	200a      	movs	r0, #10
 80003a8:	f7ff ffa0 	bl	80002ec <buzzer1Set>
	}
	else {
		buzzer1Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[1]) / BUZZER_TIMEOUT);
	}
}
 80003ac:	e013      	b.n	80003d6 <buzzer1On+0x3e>
		buzzer1Set(BUZZER_VOLUME_AUTO + (BUZZER_VOLUME_MAX - BUZZER_VOLUME_AUTO) * (BUZZER_TIMEOUT - pedestrianCounters[1]) / BUZZER_TIMEOUT);
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <buzzer1On+0x44>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	f06f 0259 	mvn.w	r2, #89	; 0x59
 80003b6:	fb02 f303 	mul.w	r3, r2, r3
 80003ba:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 80003be:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80003c2:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <buzzer1On+0x48>)
 80003c4:	fba2 2303 	umull	r2, r3, r2, r3
 80003c8:	09db      	lsrs	r3, r3, #7
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	330a      	adds	r3, #10
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff8b 	bl	80002ec <buzzer1Set>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200001f4 	.word	0x200001f4
 80003e0:	10624dd3 	.word	0x10624dd3

080003e4 <buzzer1Off>:

void buzzer1Off(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	buzzer1Set(0);
 80003e8:	2000      	movs	r0, #0
 80003ea:	f7ff ff7f 	bl	80002ec <buzzer1Set>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <counterRun>:
 *      Author: Nhat Khai
 */

#include "counter.h"

void counterRun(void) {
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	if (trafficCounters[0] > TIMER_TICK) {
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <counterRun+0x74>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b0a      	cmp	r3, #10
 80003fe:	d905      	bls.n	800040c <counterRun+0x18>
		trafficCounters[0] -= TIMER_TICK;
 8000400:	4b19      	ldr	r3, [pc, #100]	; (8000468 <counterRun+0x74>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	3b0a      	subs	r3, #10
 8000406:	4a18      	ldr	r2, [pc, #96]	; (8000468 <counterRun+0x74>)
 8000408:	6013      	str	r3, [r2, #0]
 800040a:	e002      	b.n	8000412 <counterRun+0x1e>
	}
	else {
		trafficCounters[0] = 0;
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <counterRun+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	}
	if (trafficCounters[1] > TIMER_TICK) {
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <counterRun+0x74>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	2b0a      	cmp	r3, #10
 8000418:	d905      	bls.n	8000426 <counterRun+0x32>
		trafficCounters[1] -= TIMER_TICK;
 800041a:	4b13      	ldr	r3, [pc, #76]	; (8000468 <counterRun+0x74>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	3b0a      	subs	r3, #10
 8000420:	4a11      	ldr	r2, [pc, #68]	; (8000468 <counterRun+0x74>)
 8000422:	6053      	str	r3, [r2, #4]
 8000424:	e002      	b.n	800042c <counterRun+0x38>
	}
	else {
		trafficCounters[1] = 0;
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <counterRun+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	605a      	str	r2, [r3, #4]
	}
	if (pedestrianCounters[0] > TIMER_TICK) {
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <counterRun+0x78>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b0a      	cmp	r3, #10
 8000432:	d905      	bls.n	8000440 <counterRun+0x4c>
		pedestrianCounters[0] -= TIMER_TICK;
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <counterRun+0x78>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	3b0a      	subs	r3, #10
 800043a:	4a0c      	ldr	r2, [pc, #48]	; (800046c <counterRun+0x78>)
 800043c:	6013      	str	r3, [r2, #0]
 800043e:	e002      	b.n	8000446 <counterRun+0x52>
	}
	else {
		pedestrianCounters[0] = 0;
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <counterRun+0x78>)
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
	}
	if (pedestrianCounters[1] > TIMER_TICK) {
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <counterRun+0x78>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	2b0a      	cmp	r3, #10
 800044c:	d905      	bls.n	800045a <counterRun+0x66>
		pedestrianCounters[1] -= TIMER_TICK;
 800044e:	4b07      	ldr	r3, [pc, #28]	; (800046c <counterRun+0x78>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	3b0a      	subs	r3, #10
 8000454:	4a05      	ldr	r2, [pc, #20]	; (800046c <counterRun+0x78>)
 8000456:	6053      	str	r3, [r2, #4]
	}
	else {
		pedestrianCounters[1] = 0;
	}
}
 8000458:	e002      	b.n	8000460 <counterRun+0x6c>
		pedestrianCounters[1] = 0;
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <counterRun+0x78>)
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	20000394 	.word	0x20000394
 800046c:	200001f4 	.word	0x200001f4

08000470 <counterReset>:

void counterReset(void) {
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
	trafficCounters[0] = 0;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <counterReset+0x24>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
	trafficCounters[1] = 0;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <counterReset+0x24>)
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
	pedestrianCounters[0] = 0;
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <counterReset+0x28>)
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
	pedestrianCounters[1] = 0;
 8000486:	4b04      	ldr	r3, [pc, #16]	; (8000498 <counterReset+0x28>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	20000394 	.word	0x20000394
 8000498:	200001f4 	.word	0x200001f4

0800049c <fsmAutoStop>:
static uint8_t fsmIDs[FSM_TASK] = {};
static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmAutoStop(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	SCH_AddTask(counterReset, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	4802      	ldr	r0, [pc, #8]	; (80004b0 <fsmAutoStop+0x14>)
 80004a6:	f001 f80d 	bl	80014c4 <SCH_AddTask>
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	08000471 	.word	0x08000471

080004b4 <fsmAutoProcessing>:

void fsmAutoProcessing(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 80004b8:	2001      	movs	r0, #1
 80004ba:	f7ff fed1 	bl	8000260 <buttonPressed>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d008      	beq.n	80004d6 <fsmAutoProcessing+0x22>
		fsmAutoIDs[9] = SCH_AddTask(pedestrian0On, 0, TIMER_TICK);
 80004c4:	220a      	movs	r2, #10
 80004c6:	2100      	movs	r1, #0
 80004c8:	4820      	ldr	r0, [pc, #128]	; (800054c <fsmAutoProcessing+0x98>)
 80004ca:	f000 fffb 	bl	80014c4 <SCH_AddTask>
 80004ce:	4603      	mov	r3, r0
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <fsmAutoProcessing+0x9c>)
 80004d4:	725a      	strb	r2, [r3, #9]
	}
	if (pedestrianStates[0] == PEDESTRIAN_GREEN && pedestrianCounters[0] <= 10) {
 80004d6:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <fsmAutoProcessing+0xa0>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d110      	bne.n	8000500 <fsmAutoProcessing+0x4c>
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <fsmAutoProcessing+0xa4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b0a      	cmp	r3, #10
 80004e4:	d80c      	bhi.n	8000500 <fsmAutoProcessing+0x4c>
		SCH_DeleteTask(fsmAutoIDs[9]);
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <fsmAutoProcessing+0x9c>)
 80004e8:	7a5b      	ldrb	r3, [r3, #9]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 f8f0 	bl	80016d0 <SCH_DeleteTask>
		fsmAutoIDs[9] = 0;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <fsmAutoProcessing+0x9c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	725a      	strb	r2, [r3, #9]
		SCH_AddTask(pedestrian0Off, 10, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	210a      	movs	r1, #10
 80004fa:	4818      	ldr	r0, [pc, #96]	; (800055c <fsmAutoProcessing+0xa8>)
 80004fc:	f000 ffe2 	bl	80014c4 <SCH_AddTask>
	}
	if (buttonPressed(2)) {
 8000500:	2002      	movs	r0, #2
 8000502:	f7ff fead 	bl	8000260 <buttonPressed>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d008      	beq.n	800051e <fsmAutoProcessing+0x6a>
		fsmAutoIDs[10] = SCH_AddTask(pedestrian1On, 0, TIMER_TICK);
 800050c:	220a      	movs	r2, #10
 800050e:	2100      	movs	r1, #0
 8000510:	4813      	ldr	r0, [pc, #76]	; (8000560 <fsmAutoProcessing+0xac>)
 8000512:	f000 ffd7 	bl	80014c4 <SCH_AddTask>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <fsmAutoProcessing+0x9c>)
 800051c:	729a      	strb	r2, [r3, #10]
	}
	if (pedestrianStates[1] == PEDESTRIAN_GREEN && pedestrianCounters[1] <= 10) {
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <fsmAutoProcessing+0xa0>)
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d110      	bne.n	8000548 <fsmAutoProcessing+0x94>
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <fsmAutoProcessing+0xa4>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	2b0a      	cmp	r3, #10
 800052c:	d80c      	bhi.n	8000548 <fsmAutoProcessing+0x94>
		SCH_DeleteTask(fsmAutoIDs[10]);
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <fsmAutoProcessing+0x9c>)
 8000530:	7a9b      	ldrb	r3, [r3, #10]
 8000532:	4618      	mov	r0, r3
 8000534:	f001 f8cc 	bl	80016d0 <SCH_DeleteTask>
		fsmAutoIDs[10] = 0;
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <fsmAutoProcessing+0x9c>)
 800053a:	2200      	movs	r2, #0
 800053c:	729a      	strb	r2, [r3, #10]
		SCH_AddTask(pedestrian1Off, 10, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	210a      	movs	r1, #10
 8000542:	4808      	ldr	r0, [pc, #32]	; (8000564 <fsmAutoProcessing+0xb0>)
 8000544:	f000 ffbe 	bl	80014c4 <SCH_AddTask>
	}
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	08001309 	.word	0x08001309
 8000550:	200000fc 	.word	0x200000fc
 8000554:	200001f0 	.word	0x200001f0
 8000558:	200001f4 	.word	0x200001f4
 800055c:	08001389 	.word	0x08001389
 8000560:	08001349 	.word	0x08001349
 8000564:	0800139d 	.word	0x0800139d

08000568 <fsmAuto>:

void fsmAuto(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	SCH_AddTask(pedestrian0Off, 0, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2100      	movs	r1, #0
 8000570:	484a      	ldr	r0, [pc, #296]	; (800069c <fsmAuto+0x134>)
 8000572:	f000 ffa7 	bl	80014c4 <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	4849      	ldr	r0, [pc, #292]	; (80006a0 <fsmAuto+0x138>)
 800057c:	f000 ffa2 	bl	80014c4 <SCH_AddTask>
	fsmAutoIDs[0] = SCH_AddTask(fsmAutoProcessing, 10, TIMER_TICK);
 8000580:	220a      	movs	r2, #10
 8000582:	210a      	movs	r1, #10
 8000584:	4847      	ldr	r0, [pc, #284]	; (80006a4 <fsmAuto+0x13c>)
 8000586:	f000 ff9d 	bl	80014c4 <SCH_AddTask>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4b46      	ldr	r3, [pc, #280]	; (80006a8 <fsmAuto+0x140>)
 8000590:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(counterRun, 0, TIMER_TICK);
 8000592:	220a      	movs	r2, #10
 8000594:	2100      	movs	r1, #0
 8000596:	4845      	ldr	r0, [pc, #276]	; (80006ac <fsmAuto+0x144>)
 8000598:	f000 ff94 	bl	80014c4 <SCH_AddTask>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b41      	ldr	r3, [pc, #260]	; (80006a8 <fsmAuto+0x140>)
 80005a2:	705a      	strb	r2, [r3, #1]
	fsmAutoIDs[2] = SCH_AddTask(uartCounter, 50, 1000);
 80005a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a8:	2132      	movs	r1, #50	; 0x32
 80005aa:	4841      	ldr	r0, [pc, #260]	; (80006b0 <fsmAuto+0x148>)
 80005ac:	f000 ff8a 	bl	80014c4 <SCH_AddTask>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b3c      	ldr	r3, [pc, #240]	; (80006a8 <fsmAuto+0x140>)
 80005b6:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80005b8:	4b3e      	ldr	r3, [pc, #248]	; (80006b4 <fsmAuto+0x14c>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b3e      	ldr	r3, [pc, #248]	; (80006b8 <fsmAuto+0x150>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	441a      	add	r2, r3
 80005c2:	4b3e      	ldr	r3, [pc, #248]	; (80006bc <fsmAuto+0x154>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	483c      	ldr	r0, [pc, #240]	; (80006c0 <fsmAuto+0x158>)
 80005ce:	f000 ff79 	bl	80014c4 <SCH_AddTask>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <fsmAuto+0x140>)
 80005d8:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80005da:	4b36      	ldr	r3, [pc, #216]	; (80006b4 <fsmAuto+0x14c>)
 80005dc:	6819      	ldr	r1, [r3, #0]
 80005de:	4b35      	ldr	r3, [pc, #212]	; (80006b4 <fsmAuto+0x14c>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b35      	ldr	r3, [pc, #212]	; (80006b8 <fsmAuto+0x150>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	441a      	add	r2, r3
 80005e8:	4b34      	ldr	r3, [pc, #208]	; (80006bc <fsmAuto+0x154>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	461a      	mov	r2, r3
 80005f0:	4834      	ldr	r0, [pc, #208]	; (80006c4 <fsmAuto+0x15c>)
 80005f2:	f000 ff67 	bl	80014c4 <SCH_AddTask>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <fsmAuto+0x140>)
 80005fc:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <fsmAuto+0x14c>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <fsmAuto+0x154>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	18d1      	adds	r1, r2, r3
 8000608:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <fsmAuto+0x14c>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <fsmAuto+0x150>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	441a      	add	r2, r3
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <fsmAuto+0x154>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	461a      	mov	r2, r3
 800061a:	482b      	ldr	r0, [pc, #172]	; (80006c8 <fsmAuto+0x160>)
 800061c:	f000 ff52 	bl	80014c4 <SCH_AddTask>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <fsmAuto+0x140>)
 8000626:	715a      	strb	r2, [r3, #5]
	fsmAutoIDs[6] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <fsmAuto+0x14c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <fsmAuto+0x150>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	441a      	add	r2, r3
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <fsmAuto+0x154>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	461a      	mov	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	4823      	ldr	r0, [pc, #140]	; (80006cc <fsmAuto+0x164>)
 800063e:	f000 ff41 	bl	80014c4 <SCH_AddTask>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <fsmAuto+0x140>)
 8000648:	719a      	strb	r2, [r3, #6]
	fsmAutoIDs[7] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <fsmAuto+0x154>)
 800064c:	6819      	ldr	r1, [r3, #0]
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <fsmAuto+0x14c>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <fsmAuto+0x150>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	441a      	add	r2, r3
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <fsmAuto+0x154>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4413      	add	r3, r2
 800065e:	461a      	mov	r2, r3
 8000660:	481b      	ldr	r0, [pc, #108]	; (80006d0 <fsmAuto+0x168>)
 8000662:	f000 ff2f 	bl	80014c4 <SCH_AddTask>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <fsmAuto+0x140>)
 800066c:	71da      	strb	r2, [r3, #7]
	fsmAutoIDs[8] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <fsmAuto+0x154>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <fsmAuto+0x150>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	18d1      	adds	r1, r2, r3
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <fsmAuto+0x14c>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <fsmAuto+0x150>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	441a      	add	r2, r3
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <fsmAuto+0x154>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	461a      	mov	r2, r3
 800068a:	4812      	ldr	r0, [pc, #72]	; (80006d4 <fsmAuto+0x16c>)
 800068c:	f000 ff1a 	bl	80014c4 <SCH_AddTask>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <fsmAuto+0x140>)
 8000696:	721a      	strb	r2, [r3, #8]
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08001389 	.word	0x08001389
 80006a0:	0800139d 	.word	0x0800139d
 80006a4:	080004b5 	.word	0x080004b5
 80006a8:	200000fc 	.word	0x200000fc
 80006ac:	080003f5 	.word	0x080003f5
 80006b0:	080021c9 	.word	0x080021c9
 80006b4:	20000034 	.word	0x20000034
 80006b8:	2000003c 	.word	0x2000003c
 80006bc:	20000038 	.word	0x20000038
 80006c0:	0800208d 	.word	0x0800208d
 80006c4:	0800209d 	.word	0x0800209d
 80006c8:	080020ad 	.word	0x080020ad
 80006cc:	080020dd 	.word	0x080020dd
 80006d0:	080020ed 	.word	0x080020ed
 80006d4:	080020cd 	.word	0x080020cd

080006d8 <fsmManualStop>:

void fsmManualStop(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	SCH_AddTask(traffic0Off, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <fsmManualStop+0x30>)
 80006e2:	f000 feef 	bl	80014c4 <SCH_AddTask>
	SCH_AddTask(traffic1Off, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <fsmManualStop+0x34>)
 80006ec:	f000 feea 	bl	80014c4 <SCH_AddTask>
	SCH_AddTask(pedestrian0Off, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <fsmManualStop+0x38>)
 80006f6:	f000 fee5 	bl	80014c4 <SCH_AddTask>
	SCH_AddTask(pedestrian1Off, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <fsmManualStop+0x3c>)
 8000700:	f000 fee0 	bl	80014c4 <SCH_AddTask>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	0800207d 	.word	0x0800207d
 800070c:	080020bd 	.word	0x080020bd
 8000710:	08001389 	.word	0x08001389
 8000714:	0800139d 	.word	0x0800139d

08000718 <fsmManualProcessing>:

void fsmManualProcessing(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff fd9f 	bl	8000260 <buttonPressed>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d01d      	beq.n	8000764 <fsmManualProcessing+0x4c>
		switch (trafficStates[0]) {
 8000728:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <fsmManualProcessing+0x98>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d012      	beq.n	8000756 <fsmManualProcessing+0x3e>
 8000730:	2b03      	cmp	r3, #3
 8000732:	dc16      	bgt.n	8000762 <fsmManualProcessing+0x4a>
 8000734:	2b01      	cmp	r3, #1
 8000736:	d002      	beq.n	800073e <fsmManualProcessing+0x26>
 8000738:	2b02      	cmp	r3, #2
 800073a:	d006      	beq.n	800074a <fsmManualProcessing+0x32>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Red, 0, 0);
			break;
		default:
			break;
 800073c:	e011      	b.n	8000762 <fsmManualProcessing+0x4a>
			SCH_AddTask(traffic0Green, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	481c      	ldr	r0, [pc, #112]	; (80007b4 <fsmManualProcessing+0x9c>)
 8000744:	f000 febe 	bl	80014c4 <SCH_AddTask>
			break;
 8000748:	e00c      	b.n	8000764 <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Yellow, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	481a      	ldr	r0, [pc, #104]	; (80007b8 <fsmManualProcessing+0xa0>)
 8000750:	f000 feb8 	bl	80014c4 <SCH_AddTask>
			break;
 8000754:	e006      	b.n	8000764 <fsmManualProcessing+0x4c>
			SCH_AddTask(traffic0Red, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	4818      	ldr	r0, [pc, #96]	; (80007bc <fsmManualProcessing+0xa4>)
 800075c:	f000 feb2 	bl	80014c4 <SCH_AddTask>
			break;
 8000760:	e000      	b.n	8000764 <fsmManualProcessing+0x4c>
			break;
 8000762:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 8000764:	2002      	movs	r0, #2
 8000766:	f7ff fd7b 	bl	8000260 <buttonPressed>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01d      	beq.n	80007ac <fsmManualProcessing+0x94>
		switch (trafficStates[1]) {
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <fsmManualProcessing+0x98>)
 8000772:	785b      	ldrb	r3, [r3, #1]
 8000774:	2b03      	cmp	r3, #3
 8000776:	d012      	beq.n	800079e <fsmManualProcessing+0x86>
 8000778:	2b03      	cmp	r3, #3
 800077a:	dc16      	bgt.n	80007aa <fsmManualProcessing+0x92>
 800077c:	2b01      	cmp	r3, #1
 800077e:	d002      	beq.n	8000786 <fsmManualProcessing+0x6e>
 8000780:	2b02      	cmp	r3, #2
 8000782:	d006      	beq.n	8000792 <fsmManualProcessing+0x7a>
			break;
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Red, 0, 0);
			break;
		default:
			break;
 8000784:	e011      	b.n	80007aa <fsmManualProcessing+0x92>
			SCH_AddTask(traffic1Green, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <fsmManualProcessing+0xa8>)
 800078c:	f000 fe9a 	bl	80014c4 <SCH_AddTask>
			break;
 8000790:	e00c      	b.n	80007ac <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Yellow, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <fsmManualProcessing+0xac>)
 8000798:	f000 fe94 	bl	80014c4 <SCH_AddTask>
			break;
 800079c:	e006      	b.n	80007ac <fsmManualProcessing+0x94>
			SCH_AddTask(traffic1Red, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	4809      	ldr	r0, [pc, #36]	; (80007c8 <fsmManualProcessing+0xb0>)
 80007a4:	f000 fe8e 	bl	80014c4 <SCH_AddTask>
			break;
 80007a8:	e000      	b.n	80007ac <fsmManualProcessing+0x94>
			break;
 80007aa:	bf00      	nop
		}
	}
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000390 	.word	0x20000390
 80007b4:	0800209d 	.word	0x0800209d
 80007b8:	080020ad 	.word	0x080020ad
 80007bc:	0800208d 	.word	0x0800208d
 80007c0:	080020dd 	.word	0x080020dd
 80007c4:	080020ed 	.word	0x080020ed
 80007c8:	080020cd 	.word	0x080020cd

080007cc <fsmManual>:

void fsmManual(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	fsmManualIDs[0] = SCH_AddTask(fsmManualProcessing, 10, TIMER_TICK);
 80007d0:	220a      	movs	r2, #10
 80007d2:	210a      	movs	r1, #10
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <fsmManual+0x54>)
 80007d6:	f000 fe75 	bl	80014c4 <SCH_AddTask>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <fsmManual+0x58>)
 80007e0:	701a      	strb	r2, [r3, #0]
	fsmManualIDs[1] = SCH_AddTask(pedestrian0On, 10, TIMER_TICK);
 80007e2:	220a      	movs	r2, #10
 80007e4:	210a      	movs	r1, #10
 80007e6:	4810      	ldr	r0, [pc, #64]	; (8000828 <fsmManual+0x5c>)
 80007e8:	f000 fe6c 	bl	80014c4 <SCH_AddTask>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <fsmManual+0x58>)
 80007f2:	705a      	strb	r2, [r3, #1]
	fsmManualIDs[2] = SCH_AddTask(pedestrian1On, 10, TIMER_TICK);
 80007f4:	220a      	movs	r2, #10
 80007f6:	210a      	movs	r1, #10
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <fsmManual+0x60>)
 80007fa:	f000 fe63 	bl	80014c4 <SCH_AddTask>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <fsmManual+0x58>)
 8000804:	709a      	strb	r2, [r3, #2]
	// Initialize for Manual Mode
	SCH_AddTask(traffic0Red, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	4809      	ldr	r0, [pc, #36]	; (8000830 <fsmManual+0x64>)
 800080c:	f000 fe5a 	bl	80014c4 <SCH_AddTask>
	SCH_AddTask(traffic1Green, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <fsmManual+0x68>)
 8000816:	f000 fe55 	bl	80014c4 <SCH_AddTask>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	08000719 	.word	0x08000719
 8000824:	20000108 	.word	0x20000108
 8000828:	08001309 	.word	0x08001309
 800082c:	08001349 	.word	0x08001349
 8000830:	0800208d 	.word	0x0800208d
 8000834:	080020dd 	.word	0x080020dd

08000838 <fsmTunningStop>:

void fsmTunningStop(void) {
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
	return;
 800083c:	bf00      	nop
}
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <fsmTunningProcessing>:

void fsmTunningProcessing(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff fd09 	bl	8000260 <buttonPressed>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	f000 80cb 	beq.w	80009ec <fsmTunningProcessing+0x1a8>
		SCH_DeleteTask(fsmTunningIDs[1]);
 8000856:	4bad      	ldr	r3, [pc, #692]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 8000858:	785b      	ldrb	r3, [r3, #1]
 800085a:	4618      	mov	r0, r3
 800085c:	f000 ff38 	bl	80016d0 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[2]);
 8000860:	4baa      	ldr	r3, [pc, #680]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	4618      	mov	r0, r3
 8000866:	f000 ff33 	bl	80016d0 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[3]);
 800086a:	4ba8      	ldr	r3, [pc, #672]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 800086c:	78db      	ldrb	r3, [r3, #3]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 ff2e 	bl	80016d0 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[4]);
 8000874:	4ba5      	ldr	r3, [pc, #660]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	f000 ff29 	bl	80016d0 <SCH_DeleteTask>
		SCH_DeleteTask(fsmTunningIDs[5]);
 800087e:	4ba3      	ldr	r3, [pc, #652]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 8000880:	795b      	ldrb	r3, [r3, #5]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 ff24 	bl	80016d0 <SCH_DeleteTask>
		switch (fsmTunningState) {
 8000888:	4ba1      	ldr	r3, [pc, #644]	; (8000b10 <fsmTunningProcessing+0x2cc>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d075      	beq.n	800097c <fsmTunningProcessing+0x138>
 8000890:	2b03      	cmp	r3, #3
 8000892:	f300 80aa 	bgt.w	80009ea <fsmTunningProcessing+0x1a6>
 8000896:	2b01      	cmp	r3, #1
 8000898:	d002      	beq.n	80008a0 <fsmTunningProcessing+0x5c>
 800089a:	2b02      	cmp	r3, #2
 800089c:	d037      	beq.n	800090e <fsmTunningProcessing+0xca>
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
			fsmTunningState = TRAFFIC_RED;
			break;
		default:
			break;
 800089e:	e0a4      	b.n	80009ea <fsmTunningProcessing+0x1a6>
			fsmTunningIDs[1] = SCH_AddTask(uartGreenDuration, 50, 100);
 80008a0:	2264      	movs	r2, #100	; 0x64
 80008a2:	2132      	movs	r1, #50	; 0x32
 80008a4:	489b      	ldr	r0, [pc, #620]	; (8000b14 <fsmTunningProcessing+0x2d0>)
 80008a6:	f000 fe0d 	bl	80014c4 <SCH_AddTask>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b97      	ldr	r3, [pc, #604]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 80008b0:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Green, 0, 1000);
 80008b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b6:	2100      	movs	r1, #0
 80008b8:	4897      	ldr	r0, [pc, #604]	; (8000b18 <fsmTunningProcessing+0x2d4>)
 80008ba:	f000 fe03 	bl	80014c4 <SCH_AddTask>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b92      	ldr	r3, [pc, #584]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 80008c4:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Green, 0, 1000);
 80008c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ca:	2100      	movs	r1, #0
 80008cc:	4893      	ldr	r0, [pc, #588]	; (8000b1c <fsmTunningProcessing+0x2d8>)
 80008ce:	f000 fdf9 	bl	80014c4 <SCH_AddTask>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b8d      	ldr	r3, [pc, #564]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 80008d8:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 80008da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008e2:	488f      	ldr	r0, [pc, #572]	; (8000b20 <fsmTunningProcessing+0x2dc>)
 80008e4:	f000 fdee 	bl	80014c4 <SCH_AddTask>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b87      	ldr	r3, [pc, #540]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 80008ee:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 80008f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008f8:	488a      	ldr	r0, [pc, #552]	; (8000b24 <fsmTunningProcessing+0x2e0>)
 80008fa:	f000 fde3 	bl	80014c4 <SCH_AddTask>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	4b82      	ldr	r3, [pc, #520]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 8000904:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_GREEN;
 8000906:	4b82      	ldr	r3, [pc, #520]	; (8000b10 <fsmTunningProcessing+0x2cc>)
 8000908:	2202      	movs	r2, #2
 800090a:	701a      	strb	r2, [r3, #0]
			break;
 800090c:	e06e      	b.n	80009ec <fsmTunningProcessing+0x1a8>
			fsmTunningIDs[1] = SCH_AddTask(uartYellowDuration, 50, 100);
 800090e:	2264      	movs	r2, #100	; 0x64
 8000910:	2132      	movs	r1, #50	; 0x32
 8000912:	4885      	ldr	r0, [pc, #532]	; (8000b28 <fsmTunningProcessing+0x2e4>)
 8000914:	f000 fdd6 	bl	80014c4 <SCH_AddTask>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	4b7b      	ldr	r3, [pc, #492]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 800091e:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Yellow, 0, 1000);
 8000920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000924:	2100      	movs	r1, #0
 8000926:	4881      	ldr	r0, [pc, #516]	; (8000b2c <fsmTunningProcessing+0x2e8>)
 8000928:	f000 fdcc 	bl	80014c4 <SCH_AddTask>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	4b76      	ldr	r3, [pc, #472]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 8000932:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Yellow, 0, 1000);
 8000934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000938:	2100      	movs	r1, #0
 800093a:	487d      	ldr	r0, [pc, #500]	; (8000b30 <fsmTunningProcessing+0x2ec>)
 800093c:	f000 fdc2 	bl	80014c4 <SCH_AddTask>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	4b71      	ldr	r3, [pc, #452]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 8000946:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 8000948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800094c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000950:	4873      	ldr	r0, [pc, #460]	; (8000b20 <fsmTunningProcessing+0x2dc>)
 8000952:	f000 fdb7 	bl	80014c4 <SCH_AddTask>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	4b6c      	ldr	r3, [pc, #432]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 800095c:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 800095e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000962:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000966:	486f      	ldr	r0, [pc, #444]	; (8000b24 <fsmTunningProcessing+0x2e0>)
 8000968:	f000 fdac 	bl	80014c4 <SCH_AddTask>
 800096c:	4603      	mov	r3, r0
 800096e:	461a      	mov	r2, r3
 8000970:	4b66      	ldr	r3, [pc, #408]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 8000972:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_YELLOW;
 8000974:	4b66      	ldr	r3, [pc, #408]	; (8000b10 <fsmTunningProcessing+0x2cc>)
 8000976:	2203      	movs	r2, #3
 8000978:	701a      	strb	r2, [r3, #0]
			break;
 800097a:	e037      	b.n	80009ec <fsmTunningProcessing+0x1a8>
			fsmTunningIDs[1] = SCH_AddTask(uartRedDuration, 50, 100);
 800097c:	2264      	movs	r2, #100	; 0x64
 800097e:	2132      	movs	r1, #50	; 0x32
 8000980:	486c      	ldr	r0, [pc, #432]	; (8000b34 <fsmTunningProcessing+0x2f0>)
 8000982:	f000 fd9f 	bl	80014c4 <SCH_AddTask>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b60      	ldr	r3, [pc, #384]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 800098c:	705a      	strb	r2, [r3, #1]
			fsmTunningIDs[2] = SCH_AddTask(traffic0Red, 0, 1000);
 800098e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000992:	2100      	movs	r1, #0
 8000994:	4868      	ldr	r0, [pc, #416]	; (8000b38 <fsmTunningProcessing+0x2f4>)
 8000996:	f000 fd95 	bl	80014c4 <SCH_AddTask>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	4b5b      	ldr	r3, [pc, #364]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 80009a0:	709a      	strb	r2, [r3, #2]
			fsmTunningIDs[3] = SCH_AddTask(traffic1Red, 0, 1000);
 80009a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a6:	2100      	movs	r1, #0
 80009a8:	4864      	ldr	r0, [pc, #400]	; (8000b3c <fsmTunningProcessing+0x2f8>)
 80009aa:	f000 fd8b 	bl	80014c4 <SCH_AddTask>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 80009b4:	70da      	strb	r2, [r3, #3]
			fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 80009b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009be:	4858      	ldr	r0, [pc, #352]	; (8000b20 <fsmTunningProcessing+0x2dc>)
 80009c0:	f000 fd80 	bl	80014c4 <SCH_AddTask>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b50      	ldr	r3, [pc, #320]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 80009ca:	711a      	strb	r2, [r3, #4]
			fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 80009cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009d4:	4853      	ldr	r0, [pc, #332]	; (8000b24 <fsmTunningProcessing+0x2e0>)
 80009d6:	f000 fd75 	bl	80014c4 <SCH_AddTask>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	4b4b      	ldr	r3, [pc, #300]	; (8000b0c <fsmTunningProcessing+0x2c8>)
 80009e0:	715a      	strb	r2, [r3, #5]
			fsmTunningState = TRAFFIC_RED;
 80009e2:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <fsmTunningProcessing+0x2cc>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
			break;
 80009e8:	e000      	b.n	80009ec <fsmTunningProcessing+0x1a8>
			break;
 80009ea:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 80009ec:	2002      	movs	r0, #2
 80009ee:	f7ff fc37 	bl	8000260 <buttonPressed>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d041      	beq.n	8000a7c <fsmTunningProcessing+0x238>
		switch (fsmTunningState) {
 80009f8:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <fsmTunningProcessing+0x2cc>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	d02a      	beq.n	8000a56 <fsmTunningProcessing+0x212>
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	dc3a      	bgt.n	8000a7a <fsmTunningProcessing+0x236>
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d002      	beq.n	8000a0e <fsmTunningProcessing+0x1ca>
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d012      	beq.n	8000a32 <fsmTunningProcessing+0x1ee>
			else {
				trafficYellowDuration = TRAFFIC_DURARION_MAX;
			}
			break;
		default:
			break;
 8000a0c:	e035      	b.n	8000a7a <fsmTunningProcessing+0x236>
			if (trafficRedDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000a0e:	4b4c      	ldr	r3, [pc, #304]	; (8000b40 <fsmTunningProcessing+0x2fc>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d806      	bhi.n	8000a28 <fsmTunningProcessing+0x1e4>
				trafficRedDuration += TRAFFIC_DURARION_AUTO;
 8000a1a:	4b49      	ldr	r3, [pc, #292]	; (8000b40 <fsmTunningProcessing+0x2fc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a22:	4a47      	ldr	r2, [pc, #284]	; (8000b40 <fsmTunningProcessing+0x2fc>)
 8000a24:	6013      	str	r3, [r2, #0]
			break;
 8000a26:	e029      	b.n	8000a7c <fsmTunningProcessing+0x238>
				trafficRedDuration = TRAFFIC_DURARION_MAX;
 8000a28:	4b45      	ldr	r3, [pc, #276]	; (8000b40 <fsmTunningProcessing+0x2fc>)
 8000a2a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a2e:	601a      	str	r2, [r3, #0]
			break;
 8000a30:	e024      	b.n	8000a7c <fsmTunningProcessing+0x238>
			if (trafficGreenDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000a32:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <fsmTunningProcessing+0x300>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d806      	bhi.n	8000a4c <fsmTunningProcessing+0x208>
				trafficGreenDuration += TRAFFIC_DURARION_AUTO;
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <fsmTunningProcessing+0x300>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a46:	4a3f      	ldr	r2, [pc, #252]	; (8000b44 <fsmTunningProcessing+0x300>)
 8000a48:	6013      	str	r3, [r2, #0]
			break;
 8000a4a:	e017      	b.n	8000a7c <fsmTunningProcessing+0x238>
				trafficGreenDuration = TRAFFIC_DURARION_MAX;
 8000a4c:	4b3d      	ldr	r3, [pc, #244]	; (8000b44 <fsmTunningProcessing+0x300>)
 8000a4e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a52:	601a      	str	r2, [r3, #0]
			break;
 8000a54:	e012      	b.n	8000a7c <fsmTunningProcessing+0x238>
			if (trafficYellowDuration < TRAFFIC_DURARION_MAX - TRAFFIC_DURARION_AUTO) {
 8000a56:	4b3c      	ldr	r3, [pc, #240]	; (8000b48 <fsmTunningProcessing+0x304>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f644 2237 	movw	r2, #18999	; 0x4a37
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d806      	bhi.n	8000a70 <fsmTunningProcessing+0x22c>
				trafficYellowDuration += TRAFFIC_DURARION_AUTO;
 8000a62:	4b39      	ldr	r3, [pc, #228]	; (8000b48 <fsmTunningProcessing+0x304>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a6a:	4a37      	ldr	r2, [pc, #220]	; (8000b48 <fsmTunningProcessing+0x304>)
 8000a6c:	6013      	str	r3, [r2, #0]
			break;
 8000a6e:	e005      	b.n	8000a7c <fsmTunningProcessing+0x238>
				trafficYellowDuration = TRAFFIC_DURARION_MAX;
 8000a70:	4b35      	ldr	r3, [pc, #212]	; (8000b48 <fsmTunningProcessing+0x304>)
 8000a72:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a76:	601a      	str	r2, [r3, #0]
			break;
 8000a78:	e000      	b.n	8000a7c <fsmTunningProcessing+0x238>
			break;
 8000a7a:	bf00      	nop
		}
	}
	if (buttonPressed(3)) {
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f7ff fbef 	bl	8000260 <buttonPressed>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d03e      	beq.n	8000b06 <fsmTunningProcessing+0x2c2>
		switch (fsmTunningState) {
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <fsmTunningProcessing+0x2cc>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d028      	beq.n	8000ae2 <fsmTunningProcessing+0x29e>
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	dc37      	bgt.n	8000b04 <fsmTunningProcessing+0x2c0>
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d002      	beq.n	8000a9e <fsmTunningProcessing+0x25a>
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d011      	beq.n	8000ac0 <fsmTunningProcessing+0x27c>
			else {
				trafficYellowDuration = TRAFFIC_DURARION_MIN;
			}
			break;
		default:
			break;
 8000a9c:	e032      	b.n	8000b04 <fsmTunningProcessing+0x2c0>
			if (trafficRedDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000a9e:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <fsmTunningProcessing+0x2fc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000aa6:	d906      	bls.n	8000ab6 <fsmTunningProcessing+0x272>
				trafficRedDuration -= TRAFFIC_DURARION_AUTO;
 8000aa8:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <fsmTunningProcessing+0x2fc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000ab0:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <fsmTunningProcessing+0x2fc>)
 8000ab2:	6013      	str	r3, [r2, #0]
			break;
 8000ab4:	e027      	b.n	8000b06 <fsmTunningProcessing+0x2c2>
				trafficRedDuration = TRAFFIC_DURARION_MIN;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <fsmTunningProcessing+0x2fc>)
 8000ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000abc:	601a      	str	r2, [r3, #0]
			break;
 8000abe:	e022      	b.n	8000b06 <fsmTunningProcessing+0x2c2>
			if (trafficGreenDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <fsmTunningProcessing+0x300>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ac8:	d906      	bls.n	8000ad8 <fsmTunningProcessing+0x294>
				trafficGreenDuration -= TRAFFIC_DURARION_AUTO;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <fsmTunningProcessing+0x300>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <fsmTunningProcessing+0x300>)
 8000ad4:	6013      	str	r3, [r2, #0]
			break;
 8000ad6:	e016      	b.n	8000b06 <fsmTunningProcessing+0x2c2>
				trafficGreenDuration = TRAFFIC_DURARION_MIN;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <fsmTunningProcessing+0x300>)
 8000ada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ade:	601a      	str	r2, [r3, #0]
			break;
 8000ae0:	e011      	b.n	8000b06 <fsmTunningProcessing+0x2c2>
			if (trafficYellowDuration > TRAFFIC_DURARION_MIN + TRAFFIC_DURARION_AUTO) {
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <fsmTunningProcessing+0x304>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000aea:	d906      	bls.n	8000afa <fsmTunningProcessing+0x2b6>
				trafficYellowDuration -= TRAFFIC_DURARION_AUTO;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <fsmTunningProcessing+0x304>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <fsmTunningProcessing+0x304>)
 8000af6:	6013      	str	r3, [r2, #0]
			break;
 8000af8:	e005      	b.n	8000b06 <fsmTunningProcessing+0x2c2>
				trafficYellowDuration = TRAFFIC_DURARION_MIN;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <fsmTunningProcessing+0x304>)
 8000afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b00:	601a      	str	r2, [r3, #0]
			break;
 8000b02:	e000      	b.n	8000b06 <fsmTunningProcessing+0x2c2>
			break;
 8000b04:	bf00      	nop
		}
	}
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000010c 	.word	0x2000010c
 8000b10:	200000f5 	.word	0x200000f5
 8000b14:	08002141 	.word	0x08002141
 8000b18:	0800209d 	.word	0x0800209d
 8000b1c:	080020dd 	.word	0x080020dd
 8000b20:	0800207d 	.word	0x0800207d
 8000b24:	080020bd 	.word	0x080020bd
 8000b28:	08002185 	.word	0x08002185
 8000b2c:	080020ad 	.word	0x080020ad
 8000b30:	080020ed 	.word	0x080020ed
 8000b34:	080020fd 	.word	0x080020fd
 8000b38:	0800208d 	.word	0x0800208d
 8000b3c:	080020cd 	.word	0x080020cd
 8000b40:	20000034 	.word	0x20000034
 8000b44:	20000038 	.word	0x20000038
 8000b48:	2000003c 	.word	0x2000003c

08000b4c <fsmTunning>:

void fsmTunning(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	fsmTunningIDs[0] = SCH_AddTask(fsmTunningProcessing, 10, TIMER_TICK);
 8000b50:	220a      	movs	r2, #10
 8000b52:	210a      	movs	r1, #10
 8000b54:	481f      	ldr	r0, [pc, #124]	; (8000bd4 <fsmTunning+0x88>)
 8000b56:	f000 fcb5 	bl	80014c4 <SCH_AddTask>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <fsmTunning+0x8c>)
 8000b60:	701a      	strb	r2, [r3, #0]
	// Initialize for Tunning Mode
	fsmTunningState = TRAFFIC_RED;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <fsmTunning+0x90>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
	fsmTunningIDs[1] = SCH_AddTask(uartRedDuration, 50, 100);
 8000b68:	2264      	movs	r2, #100	; 0x64
 8000b6a:	2132      	movs	r1, #50	; 0x32
 8000b6c:	481c      	ldr	r0, [pc, #112]	; (8000be0 <fsmTunning+0x94>)
 8000b6e:	f000 fca9 	bl	80014c4 <SCH_AddTask>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <fsmTunning+0x8c>)
 8000b78:	705a      	strb	r2, [r3, #1]
	fsmTunningIDs[2] = SCH_AddTask(traffic0Red, 0, 1000);
 8000b7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4818      	ldr	r0, [pc, #96]	; (8000be4 <fsmTunning+0x98>)
 8000b82:	f000 fc9f 	bl	80014c4 <SCH_AddTask>
 8000b86:	4603      	mov	r3, r0
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <fsmTunning+0x8c>)
 8000b8c:	709a      	strb	r2, [r3, #2]
	fsmTunningIDs[3] = SCH_AddTask(traffic1Red, 0, 1000);
 8000b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b92:	2100      	movs	r1, #0
 8000b94:	4814      	ldr	r0, [pc, #80]	; (8000be8 <fsmTunning+0x9c>)
 8000b96:	f000 fc95 	bl	80014c4 <SCH_AddTask>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <fsmTunning+0x8c>)
 8000ba0:	70da      	strb	r2, [r3, #3]
	fsmTunningIDs[4] = SCH_AddTask(traffic0Off, 500, 1000);
 8000ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000baa:	4810      	ldr	r0, [pc, #64]	; (8000bec <fsmTunning+0xa0>)
 8000bac:	f000 fc8a 	bl	80014c4 <SCH_AddTask>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <fsmTunning+0x8c>)
 8000bb6:	711a      	strb	r2, [r3, #4]
	fsmTunningIDs[5] = SCH_AddTask(traffic1Off, 500, 1000);
 8000bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bbc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bc0:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <fsmTunning+0xa4>)
 8000bc2:	f000 fc7f 	bl	80014c4 <SCH_AddTask>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <fsmTunning+0x8c>)
 8000bcc:	715a      	strb	r2, [r3, #5]
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	08000845 	.word	0x08000845
 8000bd8:	2000010c 	.word	0x2000010c
 8000bdc:	200000f5 	.word	0x200000f5
 8000be0:	080020fd 	.word	0x080020fd
 8000be4:	0800208d 	.word	0x0800208d
 8000be8:	080020cd 	.word	0x080020cd
 8000bec:	0800207d 	.word	0x0800207d
 8000bf0:	080020bd 	.word	0x080020bd

08000bf4 <fsmInit>:

void fsmInit(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	fsmState = FSM_INIT;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <fsmInit+0x34>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
	fsmIDs[0] = SCH_AddTask(testButton, 0, TIMER_TICK);
 8000bfe:	220a      	movs	r2, #10
 8000c00:	2100      	movs	r1, #0
 8000c02:	480a      	ldr	r0, [pc, #40]	; (8000c2c <fsmInit+0x38>)
 8000c04:	f000 fc5e 	bl	80014c4 <SCH_AddTask>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <fsmInit+0x3c>)
 8000c0e:	701a      	strb	r2, [r3, #0]
	SCH_AddTask(testBuzzer, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <fsmInit+0x40>)
 8000c16:	f000 fc55 	bl	80014c4 <SCH_AddTask>
	SCH_AddTask(testLED, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <fsmInit+0x44>)
 8000c20:	f000 fc50 	bl	80014c4 <SCH_AddTask>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000f4 	.word	0x200000f4
 8000c2c:	08001d55 	.word	0x08001d55
 8000c30:	200000f8 	.word	0x200000f8
 8000c34:	08001de1 	.word	0x08001de1
 8000c38:	08001e05 	.word	0x08001e05

08000c3c <fsmProcessing>:

void fsmProcessing(void) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
	if (buttonPressed(0)) {
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fb0c 	bl	8000260 <buttonPressed>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d07e      	beq.n	8000d4c <fsmProcessing+0x110>
		switch (fsmState) {
 8000c4e:	4b41      	ldr	r3, [pc, #260]	; (8000d54 <fsmProcessing+0x118>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d879      	bhi.n	8000d4a <fsmProcessing+0x10e>
 8000c56:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <fsmProcessing+0x20>)
 8000c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5c:	08000c6d 	.word	0x08000c6d
 8000c60:	08000c9d 	.word	0x08000c9d
 8000c64:	08000cd7 	.word	0x08000cd7
 8000c68:	08000d11 	.word	0x08000d11
		case FSM_INIT:
			for (uint8_t i = 0; i < FSM_TASK; i ++) {
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	e008      	b.n	8000c84 <fsmProcessing+0x48>
				SCH_DeleteTask(fsmIDs[i]);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	4a38      	ldr	r2, [pc, #224]	; (8000d58 <fsmProcessing+0x11c>)
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fd29 	bl	80016d0 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TASK; i ++) {
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	3301      	adds	r3, #1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f3      	beq.n	8000c72 <fsmProcessing+0x36>
			}
			SCH_AddTask(fsmAuto, 10, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	210a      	movs	r1, #10
 8000c8e:	4833      	ldr	r0, [pc, #204]	; (8000d5c <fsmProcessing+0x120>)
 8000c90:	f000 fc18 	bl	80014c4 <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000c94:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <fsmProcessing+0x118>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
			break;
 8000c9a:	e057      	b.n	8000d4c <fsmProcessing+0x110>
		case FSM_AUTO:
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	71bb      	strb	r3, [r7, #6]
 8000ca0:	e008      	b.n	8000cb4 <fsmProcessing+0x78>
				SCH_DeleteTask(fsmAutoIDs[i]);
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	4a2e      	ldr	r2, [pc, #184]	; (8000d60 <fsmProcessing+0x124>)
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 fd11 	bl	80016d0 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	71bb      	strb	r3, [r7, #6]
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	2b0a      	cmp	r3, #10
 8000cb8:	d9f3      	bls.n	8000ca2 <fsmProcessing+0x66>
			}
			SCH_AddTask(fsmAutoStop, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4829      	ldr	r0, [pc, #164]	; (8000d64 <fsmProcessing+0x128>)
 8000cc0:	f000 fc00 	bl	80014c4 <SCH_AddTask>
			SCH_AddTask(fsmManual, 10, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	210a      	movs	r1, #10
 8000cc8:	4827      	ldr	r0, [pc, #156]	; (8000d68 <fsmProcessing+0x12c>)
 8000cca:	f000 fbfb 	bl	80014c4 <SCH_AddTask>
			fsmState = FSM_MANUAL;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <fsmProcessing+0x118>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	701a      	strb	r2, [r3, #0]
			break;
 8000cd4:	e03a      	b.n	8000d4c <fsmProcessing+0x110>
		case FSM_MANUAL:
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	717b      	strb	r3, [r7, #5]
 8000cda:	e008      	b.n	8000cee <fsmProcessing+0xb2>
				SCH_DeleteTask(fsmManualIDs[i]);
 8000cdc:	797b      	ldrb	r3, [r7, #5]
 8000cde:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <fsmProcessing+0x130>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fcf4 	bl	80016d0 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 8000ce8:	797b      	ldrb	r3, [r7, #5]
 8000cea:	3301      	adds	r3, #1
 8000cec:	717b      	strb	r3, [r7, #5]
 8000cee:	797b      	ldrb	r3, [r7, #5]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d9f3      	bls.n	8000cdc <fsmProcessing+0xa0>
			}
			SCH_AddTask(fsmManualStop, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	481d      	ldr	r0, [pc, #116]	; (8000d70 <fsmProcessing+0x134>)
 8000cfa:	f000 fbe3 	bl	80014c4 <SCH_AddTask>
			SCH_AddTask(fsmTunning, 10, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	210a      	movs	r1, #10
 8000d02:	481c      	ldr	r0, [pc, #112]	; (8000d74 <fsmProcessing+0x138>)
 8000d04:	f000 fbde 	bl	80014c4 <SCH_AddTask>
			fsmState = FSM_TUNNING;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <fsmProcessing+0x118>)
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	701a      	strb	r2, [r3, #0]
			break;
 8000d0e:	e01d      	b.n	8000d4c <fsmProcessing+0x110>
		case FSM_TUNNING:
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	713b      	strb	r3, [r7, #4]
 8000d14:	e008      	b.n	8000d28 <fsmProcessing+0xec>
				SCH_DeleteTask(fsmTunningIDs[i]);
 8000d16:	793b      	ldrb	r3, [r7, #4]
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <fsmProcessing+0x13c>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fcd7 	bl	80016d0 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000d22:	793b      	ldrb	r3, [r7, #4]
 8000d24:	3301      	adds	r3, #1
 8000d26:	713b      	strb	r3, [r7, #4]
 8000d28:	793b      	ldrb	r3, [r7, #4]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	d9f3      	bls.n	8000d16 <fsmProcessing+0xda>
			}
			SCH_AddTask(fsmTunningStop, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	4812      	ldr	r0, [pc, #72]	; (8000d7c <fsmProcessing+0x140>)
 8000d34:	f000 fbc6 	bl	80014c4 <SCH_AddTask>
			SCH_AddTask(fsmAuto, 10, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	210a      	movs	r1, #10
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <fsmProcessing+0x120>)
 8000d3e:	f000 fbc1 	bl	80014c4 <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <fsmProcessing+0x118>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
			break;
 8000d48:	e000      	b.n	8000d4c <fsmProcessing+0x110>
		default:
			break;
 8000d4a:	bf00      	nop
		}
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200000f4 	.word	0x200000f4
 8000d58:	200000f8 	.word	0x200000f8
 8000d5c:	08000569 	.word	0x08000569
 8000d60:	200000fc 	.word	0x200000fc
 8000d64:	0800049d 	.word	0x0800049d
 8000d68:	080007cd 	.word	0x080007cd
 8000d6c:	20000108 	.word	0x20000108
 8000d70:	080006d9 	.word	0x080006d9
 8000d74:	08000b4d 	.word	0x08000b4d
 8000d78:	2000010c 	.word	0x2000010c
 8000d7c:	08000839 	.word	0x08000839

08000d80 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_UART_RxCpltCallback+0x30>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d10a      	bne.n	8000da8 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <HAL_UART_RxCpltCallback+0x34>)
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <HAL_UART_RxCpltCallback+0x38>)
 8000d98:	f003 fa71 	bl	800427e <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000d9c:	2332      	movs	r3, #50	; 0x32
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4904      	ldr	r1, [pc, #16]	; (8000db4 <HAL_UART_RxCpltCallback+0x34>)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_RxCpltCallback+0x38>)
 8000da4:	f003 f9e8 	bl	8004178 <HAL_UART_Transmit>
	}
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40004400 	.word	0x40004400
 8000db4:	200001ec 	.word	0x200001ec
 8000db8:	200001a4 	.word	0x200001a4

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc0:	f001 fa4a 	bl	8002258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc4:	f000 f842 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc8:	f000 f974 	bl	80010b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dcc:	f000 f87a 	bl	8000ec4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000dd0:	f000 f946 	bl	8001060 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000dd4:	f000 f8c2 	bl	8000f5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <main+0x70>)
 8000dda:	f002 fa83 	bl	80032e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dde:	2100      	movs	r1, #0
 8000de0:	4813      	ldr	r0, [pc, #76]	; (8000e30 <main+0x74>)
 8000de2:	f002 fb23 	bl	800342c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000de6:	2104      	movs	r1, #4
 8000de8:	4811      	ldr	r0, [pc, #68]	; (8000e30 <main+0x74>)
 8000dea:	f002 fb1f 	bl	800342c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000dee:	2201      	movs	r2, #1
 8000df0:	4910      	ldr	r1, [pc, #64]	; (8000e34 <main+0x78>)
 8000df2:	4811      	ldr	r0, [pc, #68]	; (8000e38 <main+0x7c>)
 8000df4:	f003 fa43 	bl	800427e <HAL_UART_Receive_IT>
  SCH_Init();
 8000df8:	f000 fada 	bl	80013b0 <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(testMCU, 0, 500);
 8000dfc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e00:	2100      	movs	r1, #0
 8000e02:	480e      	ldr	r0, [pc, #56]	; (8000e3c <main+0x80>)
 8000e04:	f000 fb5e 	bl	80014c4 <SCH_AddTask>
//  SCH_AddTask(uartReport, 100, 5000);
  SCH_AddTask(buttonReading, 0, TIMER_TICK);
 8000e08:	220a      	movs	r2, #10
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <main+0x84>)
 8000e0e:	f000 fb59 	bl	80014c4 <SCH_AddTask>
  SCH_AddTask(fsmInit, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	480b      	ldr	r0, [pc, #44]	; (8000e44 <main+0x88>)
 8000e18:	f000 fb54 	bl	80014c4 <SCH_AddTask>
  SCH_AddTask(fsmProcessing, 10, TIMER_TICK);
 8000e1c:	220a      	movs	r2, #10
 8000e1e:	210a      	movs	r1, #10
 8000e20:	4809      	ldr	r0, [pc, #36]	; (8000e48 <main+0x8c>)
 8000e22:	f000 fb4f 	bl	80014c4 <SCH_AddTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch();
 8000e26:	f000 fb33 	bl	8001490 <SCH_Dispatch>
 8000e2a:	e7fc      	b.n	8000e26 <main+0x6a>
 8000e2c:	20000114 	.word	0x20000114
 8000e30:	2000015c 	.word	0x2000015c
 8000e34:	200001ec 	.word	0x200001ec
 8000e38:	200001a4 	.word	0x200001a4
 8000e3c:	08001d41 	.word	0x08001d41
 8000e40:	0800014d 	.word	0x0800014d
 8000e44:	08000bf5 	.word	0x08000bf5
 8000e48:	08000c3d 	.word	0x08000c3d

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b090      	sub	sp, #64	; 0x40
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0318 	add.w	r3, r7, #24
 8000e56:	2228      	movs	r2, #40	; 0x28
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 ffd4 	bl	8004e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e72:	2301      	movs	r3, #1
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e76:	2310      	movs	r3, #16
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7e:	f107 0318 	add.w	r3, r7, #24
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fdce 	bl	8002a24 <HAL_RCC_OscConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e8e:	f000 f990 	bl	80011b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e92:	230f      	movs	r3, #15
 8000e94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 f83c 	bl	8002f28 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000eb6:	f000 f97c 	bl	80011b2 <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3740      	adds	r7, #64	; 0x40
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000ef6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000efa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f08:	4813      	ldr	r0, [pc, #76]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f0a:	f002 f99b 	bl	8003244 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f14:	f000 f94d 	bl	80011b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f26:	f002 fce7 	bl	80038f8 <HAL_TIM_ConfigClockSource>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f30:	f000 f93f 	bl	80011b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_TIM2_Init+0x94>)
 8000f42:	f003 f85f 	bl	8004004 <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f4c:	f000 f931 	bl	80011b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000114 	.word	0x20000114

08000f5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08e      	sub	sp, #56	; 0x38
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <MX_TIM3_Init+0xfc>)
 8000f8e:	4a33      	ldr	r2, [pc, #204]	; (800105c <MX_TIM3_Init+0x100>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <MX_TIM3_Init+0xfc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_TIM3_Init+0xfc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <MX_TIM3_Init+0xfc>)
 8000fa0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_TIM3_Init+0xfc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_TIM3_Init+0xfc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fb2:	4829      	ldr	r0, [pc, #164]	; (8001058 <MX_TIM3_Init+0xfc>)
 8000fb4:	f002 f946 	bl	8003244 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fbe:	f000 f8f8 	bl	80011b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4822      	ldr	r0, [pc, #136]	; (8001058 <MX_TIM3_Init+0xfc>)
 8000fd0:	f002 fc92 	bl	80038f8 <HAL_TIM_ConfigClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fda:	f000 f8ea 	bl	80011b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fde:	481e      	ldr	r0, [pc, #120]	; (8001058 <MX_TIM3_Init+0xfc>)
 8000fe0:	f002 f9cc 	bl	800337c <HAL_TIM_PWM_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fea:	f000 f8e2 	bl	80011b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4816      	ldr	r0, [pc, #88]	; (8001058 <MX_TIM3_Init+0xfc>)
 8000ffe:	f003 f801 	bl	8004004 <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001008:	f000 f8d3 	bl	80011b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100c:	2360      	movs	r3, #96	; 0x60
 800100e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_TIM3_Init+0xfc>)
 8001024:	f002 fba6 	bl	8003774 <HAL_TIM_PWM_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800102e:	f000 f8c0 	bl	80011b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2204      	movs	r2, #4
 8001036:	4619      	mov	r1, r3
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <MX_TIM3_Init+0xfc>)
 800103a:	f002 fb9b 	bl	8003774 <HAL_TIM_PWM_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001044:	f000 f8b5 	bl	80011b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <MX_TIM3_Init+0xfc>)
 800104a:	f000 fd73 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 800104e:	bf00      	nop
 8001050:	3738      	adds	r7, #56	; 0x38
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000015c 	.word	0x2000015c
 800105c:	40000400 	.word	0x40000400

08001060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_USART2_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800106c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001098:	f003 f81e 	bl	80040d8 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f000 f886 	bl	80011b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001a4 	.word	0x200001a4
 80010b0:	40004400 	.word	0x40004400

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a2e      	ldr	r2, [pc, #184]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a28      	ldr	r2, [pc, #160]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2120      	movs	r1, #32
 80010fc:	4823      	ldr	r0, [pc, #140]	; (800118c <MX_GPIO_Init+0xd8>)
 80010fe:	f001 fc60 	bl	80029c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|GPIO_PIN_2|GPIO_PIN_10
 8001102:	2200      	movs	r2, #0
 8001104:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001108:	4821      	ldr	r0, [pc, #132]	; (8001190 <MX_GPIO_Init+0xdc>)
 800110a:	f001 fc5a 	bl	80029c2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin|TRAFFIC1_GREEN_Pin
                          |GPIO_PIN_15|GPIO_PIN_3|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin
                          |TRAFFIC0_GREEN_Pin|GPIO_PIN_7|PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800110e:	2320      	movs	r3, #32
 8001110:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001116:	2301      	movs	r3, #1
 8001118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2302      	movs	r3, #2
 800111c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4619      	mov	r1, r3
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <MX_GPIO_Init+0xd8>)
 8001126:	f001 fab9 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDESTRIAN0_RED_Pin PEDESTRIAN0_GREEN_Pin TRAFFIC1_RED_Pin TRAFFIC1_YELLOW_Pin
                           TRAFFIC1_GREEN_Pin TRAFFIC0_RED_Pin TRAFFIC0_YELLOW_Pin TRAFFIC0_GREEN_Pin
                           PEDESTRIAN1_RED_Pin PEDESTRIAN1_GREEN_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin
 800112a:	f247 3373 	movw	r3, #29555	; 0x7373
 800112e:	60bb      	str	r3, [r7, #8]
                          |TRAFFIC1_GREEN_Pin|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin|TRAFFIC0_GREEN_Pin
                          |PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001134:	2301      	movs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4619      	mov	r1, r3
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_GPIO_Init+0xdc>)
 8001144:	f001 faaa 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB15
                           PB3 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 8001148:	f648 438c 	movw	r3, #35980	; 0x8c8c
 800114c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001152:	2302      	movs	r3, #2
 8001154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2302      	movs	r3, #2
 8001158:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4619      	mov	r1, r3
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <MX_GPIO_Init+0xdc>)
 8001162:	f001 fa9b 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001166:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800116a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001170:	2301      	movs	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	4619      	mov	r1, r3
 800117a:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_GPIO_Init+0xd8>)
 800117c:	f001 fa8e 	bl	800269c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000
 800118c:	40010800 	.word	0x40010800
 8001190:	40010c00 	.word	0x40010c00

08001194 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a4:	d101      	bne.n	80011aa <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 80011a6:	f000 f94d 	bl	8001444 <SCH_Update>
	}
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b6:	b672      	cpsid	i
}
 80011b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ba:	e7fe      	b.n	80011ba <Error_Handler+0x8>

080011bc <pedestrianToggle>:
static GPIO_TypeDef* pedestrianGreenPorts[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_GPIO_Port};

static uint16_t pedestrianRedPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_RED_Pin, PEDESTRIAN1_RED_Pin};
static uint16_t pedestrianGreenPins[PEDESTRIAN_NUMBER] = {PEDESTRIAN0_GREEN_Pin, PEDESTRIAN1_GREEN_Pin};
//uint8_t test;
void pedestrianToggle(uint8_t index, enum PEDESTRIAN_STATE state) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	460a      	mov	r2, r1
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d05e      	beq.n	8001290 <pedestrianToggle+0xd4>
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	f300 8081 	bgt.w	80012da <pedestrianToggle+0x11e>
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <pedestrianToggle+0x26>
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d01d      	beq.n	800121c <pedestrianToggle+0x60>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
		pedestrianStates[index] = PEDESTRIAN_GREEN;
		pedestrianCounters[index] = trafficCounters[index];
		break;
	default:
		break;
 80011e0:	e07b      	b.n	80012da <pedestrianToggle+0x11e>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4a3f      	ldr	r2, [pc, #252]	; (80012e4 <pedestrianToggle+0x128>)
 80011e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	4a3e      	ldr	r2, [pc, #248]	; (80012e8 <pedestrianToggle+0x12c>)
 80011ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f2:	2201      	movs	r2, #1
 80011f4:	4619      	mov	r1, r3
 80011f6:	f001 fbe4 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4a3b      	ldr	r2, [pc, #236]	; (80012ec <pedestrianToggle+0x130>)
 80011fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4a3a      	ldr	r2, [pc, #232]	; (80012f0 <pedestrianToggle+0x134>)
 8001206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800120a:	2201      	movs	r2, #1
 800120c:	4619      	mov	r1, r3
 800120e:	f001 fbd8 	bl	80029c2 <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_OFF;
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4a37      	ldr	r2, [pc, #220]	; (80012f4 <pedestrianToggle+0x138>)
 8001216:	2100      	movs	r1, #0
 8001218:	54d1      	strb	r1, [r2, r3]
		break;
 800121a:	e05f      	b.n	80012dc <pedestrianToggle+0x120>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_RESET);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <pedestrianToggle+0x128>)
 8001220:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4a30      	ldr	r2, [pc, #192]	; (80012e8 <pedestrianToggle+0x12c>)
 8001228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	f001 fbc7 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_SET);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4a2d      	ldr	r2, [pc, #180]	; (80012ec <pedestrianToggle+0x130>)
 8001238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4a2c      	ldr	r2, [pc, #176]	; (80012f0 <pedestrianToggle+0x134>)
 8001240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001244:	2201      	movs	r2, #1
 8001246:	4619      	mov	r1, r3
 8001248:	f001 fbbb 	bl	80029c2 <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_RED;
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <pedestrianToggle+0x138>)
 8001250:	2101      	movs	r1, #1
 8001252:	54d1      	strb	r1, [r2, r3]
		switch (trafficStates[index]) {
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <pedestrianToggle+0x13c>)
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d002      	beq.n	8001264 <pedestrianToggle+0xa8>
 800125e:	2b03      	cmp	r3, #3
 8001260:	d00c      	beq.n	800127c <pedestrianToggle+0xc0>
			break;
 8001262:	e014      	b.n	800128e <pedestrianToggle+0xd2>
			pedestrianCounters[index] = trafficCounters[index] + trafficYellowDuration;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4a25      	ldr	r2, [pc, #148]	; (80012fc <pedestrianToggle+0x140>)
 8001268:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <pedestrianToggle+0x144>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	440a      	add	r2, r1
 8001274:	4923      	ldr	r1, [pc, #140]	; (8001304 <pedestrianToggle+0x148>)
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800127a:	e008      	b.n	800128e <pedestrianToggle+0xd2>
			pedestrianCounters[index] = trafficCounters[index];
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	491e      	ldr	r1, [pc, #120]	; (80012fc <pedestrianToggle+0x140>)
 8001282:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001286:	491f      	ldr	r1, [pc, #124]	; (8001304 <pedestrianToggle+0x148>)
 8001288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800128c:	bf00      	nop
		break;
 800128e:	e025      	b.n	80012dc <pedestrianToggle+0x120>
		HAL_GPIO_WritePin(pedestrianRedPorts[index], pedestrianRedPins[index], GPIO_PIN_SET);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <pedestrianToggle+0x128>)
 8001294:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <pedestrianToggle+0x12c>)
 800129c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a0:	2201      	movs	r2, #1
 80012a2:	4619      	mov	r1, r3
 80012a4:	f001 fb8d 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pedestrianGreenPorts[index], pedestrianGreenPins[index], GPIO_PIN_RESET);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <pedestrianToggle+0x130>)
 80012ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <pedestrianToggle+0x134>)
 80012b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	f001 fb81 	bl	80029c2 <HAL_GPIO_WritePin>
		pedestrianStates[index] = PEDESTRIAN_GREEN;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <pedestrianToggle+0x138>)
 80012c4:	2102      	movs	r1, #2
 80012c6:	54d1      	strb	r1, [r2, r3]
		pedestrianCounters[index] = trafficCounters[index];
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	490b      	ldr	r1, [pc, #44]	; (80012fc <pedestrianToggle+0x140>)
 80012ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012d2:	490c      	ldr	r1, [pc, #48]	; (8001304 <pedestrianToggle+0x148>)
 80012d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80012d8:	e000      	b.n	80012dc <pedestrianToggle+0x120>
		break;
 80012da:	bf00      	nop
	}
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000018 	.word	0x20000018
 80012e8:	20000028 	.word	0x20000028
 80012ec:	20000020 	.word	0x20000020
 80012f0:	2000002c 	.word	0x2000002c
 80012f4:	200001f0 	.word	0x200001f0
 80012f8:	20000390 	.word	0x20000390
 80012fc:	20000394 	.word	0x20000394
 8001300:	2000003c 	.word	0x2000003c
 8001304:	200001f4 	.word	0x200001f4

08001308 <pedestrian0On>:

void pedestrian0On(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	switch (trafficStates[0]) {
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <pedestrian0On+0x3c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d005      	beq.n	8001320 <pedestrian0On+0x18>
 8001314:	2b00      	cmp	r3, #0
 8001316:	dd11      	ble.n	800133c <pedestrian0On+0x34>
 8001318:	3b02      	subs	r3, #2
 800131a:	2b01      	cmp	r3, #1
 800131c:	d80e      	bhi.n	800133c <pedestrian0On+0x34>
 800131e:	e006      	b.n	800132e <pedestrian0On+0x26>
	case TRAFFIC_RED:
		pedestrianToggle(0, PEDESTRIAN_GREEN);
 8001320:	2102      	movs	r1, #2
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff ff4a 	bl	80011bc <pedestrianToggle>
		buzzer0On();
 8001328:	f7ff f808 	bl	800033c <buzzer0On>
		break;
 800132c:	e007      	b.n	800133e <pedestrian0On+0x36>
	case TRAFFIC_YELLOW:
	case TRAFFIC_GREEN:
		pedestrianToggle(0, PEDESTRIAN_RED);
 800132e:	2101      	movs	r1, #1
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ff43 	bl	80011bc <pedestrianToggle>
		buzzer0Off();
 8001336:	f7ff f827 	bl	8000388 <buzzer0Off>
		break;
 800133a:	e000      	b.n	800133e <pedestrian0On+0x36>
	default:
		break;
 800133c:	bf00      	nop
	}
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000390 	.word	0x20000390

08001348 <pedestrian1On>:

void pedestrian1On(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	switch (trafficStates[1]) {
 800134c:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <pedestrian1On+0x3c>)
 800134e:	785b      	ldrb	r3, [r3, #1]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d005      	beq.n	8001360 <pedestrian1On+0x18>
 8001354:	2b00      	cmp	r3, #0
 8001356:	dd11      	ble.n	800137c <pedestrian1On+0x34>
 8001358:	3b02      	subs	r3, #2
 800135a:	2b01      	cmp	r3, #1
 800135c:	d80e      	bhi.n	800137c <pedestrian1On+0x34>
 800135e:	e006      	b.n	800136e <pedestrian1On+0x26>
	case TRAFFIC_RED:
		pedestrianToggle(1, PEDESTRIAN_GREEN);
 8001360:	2102      	movs	r1, #2
 8001362:	2001      	movs	r0, #1
 8001364:	f7ff ff2a 	bl	80011bc <pedestrianToggle>
		buzzer1On();
 8001368:	f7ff f816 	bl	8000398 <buzzer1On>
		break;
 800136c:	e007      	b.n	800137e <pedestrian1On+0x36>
	case TRAFFIC_YELLOW:
	case TRAFFIC_GREEN:
		pedestrianToggle(1, PEDESTRIAN_RED);
 800136e:	2101      	movs	r1, #1
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff23 	bl	80011bc <pedestrianToggle>
		buzzer1Off();
 8001376:	f7ff f835 	bl	80003e4 <buzzer1Off>
		break;
 800137a:	e000      	b.n	800137e <pedestrian1On+0x36>
	default:
		break;
 800137c:	bf00      	nop
	}
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000390 	.word	0x20000390

08001388 <pedestrian0Off>:

void pedestrian0Off(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	pedestrianToggle(0, PEDESTRIAN_OFF);
 800138c:	2100      	movs	r1, #0
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff ff14 	bl	80011bc <pedestrianToggle>
	buzzer0Off();
 8001394:	f7fe fff8 	bl	8000388 <buzzer0Off>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <pedestrian1Off>:

void pedestrian1Off(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	pedestrianToggle(1, PEDESTRIAN_OFF);
 80013a0:	2100      	movs	r1, #0
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff ff0a 	bl	80011bc <pedestrianToggle>
	buzzer1Off();
 80013a8:	f7ff f81c 	bl	80003e4 <buzzer1Off>
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	e037      	b.n	800142c <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	4920      	ldr	r1, [pc, #128]	; (8001440 <SCH_Init+0x90>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i;
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f1c3 0314 	rsb	r3, r3, #20
 80013d6:	b2d8      	uxtb	r0, r3
 80013d8:	4919      	ldr	r1, [pc, #100]	; (8001440 <SCH_Init+0x90>)
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	3304      	adds	r3, #4
 80013e6:	4602      	mov	r2, r0
 80013e8:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	4914      	ldr	r1, [pc, #80]	; (8001440 <SCH_Init+0x90>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	3308      	adds	r3, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 80013fe:	79fa      	ldrb	r2, [r7, #7]
 8001400:	490f      	ldr	r1, [pc, #60]	; (8001440 <SCH_Init+0x90>)
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	330c      	adds	r3, #12
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	490a      	ldr	r1, [pc, #40]	; (8001440 <SCH_Init+0x90>)
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	3310      	adds	r3, #16
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	3301      	adds	r3, #1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b13      	cmp	r3, #19
 8001430:	d9c4      	bls.n	80013bc <SCH_Init+0xc>
    }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200001fc 	.word	0x200001fc

08001444 <SCH_Update>:

void SCH_Update(void) {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <SCH_Update+0x48>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d018      	beq.n	8001482 <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <SCH_Update+0x48>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00c      	beq.n	8001472 <SCH_Update+0x2e>
		if (tasks[0].delay > TIMER_TICK) {
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <SCH_Update+0x48>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b0a      	cmp	r3, #10
 800145e:	d905      	bls.n	800146c <SCH_Update+0x28>
			tasks[0].delay -= TIMER_TICK;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <SCH_Update+0x48>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	3b0a      	subs	r3, #10
 8001466:	4a09      	ldr	r2, [pc, #36]	; (800148c <SCH_Update+0x48>)
 8001468:	6093      	str	r3, [r2, #8]
 800146a:	e002      	b.n	8001472 <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <SCH_Update+0x48>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <SCH_Update+0x48>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d104      	bne.n	8001484 <SCH_Update+0x40>
		tasks[0].flag = 1;
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SCH_Update+0x48>)
 800147c:	2201      	movs	r2, #1
 800147e:	741a      	strb	r2, [r3, #16]
 8001480:	e000      	b.n	8001484 <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 8001482:	bf00      	nop
	}
}
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200001fc 	.word	0x200001fc

08001490 <SCH_Dispatch>:

void SCH_Dispatch(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    if (tasks[0].flag == 0) return;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <SCH_Dispatch+0x30>)
 8001496:	7c1b      	ldrb	r3, [r3, #16]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00f      	beq.n	80014bc <SCH_Dispatch+0x2c>
    (*tasks[0].functionPointer)();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <SCH_Dispatch+0x30>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4798      	blx	r3
    if (tasks[0].period > 0) {
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <SCH_Dispatch+0x30>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <SCH_Dispatch+0x20>
        SCH_RefreshTask();
 80014aa:	f000 f9af 	bl	800180c <SCH_RefreshTask>
 80014ae:	e006      	b.n	80014be <SCH_Dispatch+0x2e>
    }
    else {
        SCH_DeleteTask(tasks[0].id);
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <SCH_Dispatch+0x30>)
 80014b2:	791b      	ldrb	r3, [r3, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f90b 	bl	80016d0 <SCH_DeleteTask>
 80014ba:	e000      	b.n	80014be <SCH_Dispatch+0x2e>
    if (tasks[0].flag == 0) return;
 80014bc:	bf00      	nop
    }
}
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200001fc 	.word	0x200001fc

080014c4 <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 80014c4:	b4b0      	push	{r4, r5, r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return 0;
 80014d0:	4b7e      	ldr	r3, [pc, #504]	; (80016cc <SCH_AddTask+0x208>)
 80014d2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SCH_AddTask+0x1a>
 80014da:	2300      	movs	r3, #0
 80014dc:	e0f1      	b.n	80016c2 <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 80014de:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <SCH_AddTask+0x208>)
 80014e0:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 80014e4:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	76fb      	strb	r3, [r7, #27]
 80014ee:	e0e3      	b.n	80016b8 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 80014f0:	7efa      	ldrb	r2, [r7, #27]
 80014f2:	4976      	ldr	r1, [pc, #472]	; (80016cc <SCH_AddTask+0x208>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3308      	adds	r3, #8
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	429a      	cmp	r2, r3
 800150e:	d80a      	bhi.n	8001526 <SCH_AddTask+0x62>
 8001510:	7efa      	ldrb	r2, [r7, #27]
 8001512:	496e      	ldr	r1, [pc, #440]	; (80016cc <SCH_AddTask+0x208>)
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f040 80c6 	bne.w	80016b2 <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8001526:	2313      	movs	r3, #19
 8001528:	76bb      	strb	r3, [r7, #26]
 800152a:	e017      	b.n	800155c <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 800152c:	7ebb      	ldrb	r3, [r7, #26]
 800152e:	1e5a      	subs	r2, r3, #1
 8001530:	7eb9      	ldrb	r1, [r7, #26]
 8001532:	4866      	ldr	r0, [pc, #408]	; (80016cc <SCH_AddTask+0x208>)
 8001534:	460b      	mov	r3, r1
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4418      	add	r0, r3
 800153e:	4963      	ldr	r1, [pc, #396]	; (80016cc <SCH_AddTask+0x208>)
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	4604      	mov	r4, r0
 800154c:	461d      	mov	r5, r3
 800154e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001552:	682b      	ldr	r3, [r5, #0]
 8001554:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8001556:	7ebb      	ldrb	r3, [r7, #26]
 8001558:	3b01      	subs	r3, #1
 800155a:	76bb      	strb	r3, [r7, #26]
 800155c:	7eba      	ldrb	r2, [r7, #26]
 800155e:	7efb      	ldrb	r3, [r7, #27]
 8001560:	429a      	cmp	r2, r3
 8001562:	d8e3      	bhi.n	800152c <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 8001564:	7efa      	ldrb	r2, [r7, #27]
 8001566:	4959      	ldr	r1, [pc, #356]	; (80016cc <SCH_AddTask+0x208>)
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 8001576:	7efa      	ldrb	r2, [r7, #27]
 8001578:	4954      	ldr	r1, [pc, #336]	; (80016cc <SCH_AddTask+0x208>)
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3304      	adds	r3, #4
 8001586:	7e7a      	ldrb	r2, [r7, #25]
 8001588:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 800158a:	7efa      	ldrb	r2, [r7, #27]
 800158c:	494f      	ldr	r1, [pc, #316]	; (80016cc <SCH_AddTask+0x208>)
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	330c      	adds	r3, #12
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 800159e:	7efa      	ldrb	r2, [r7, #27]
 80015a0:	494a      	ldr	r1, [pc, #296]	; (80016cc <SCH_AddTask+0x208>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3310      	adds	r3, #16
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d950      	bls.n	800165c <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 80015c2:	7efb      	ldrb	r3, [r7, #27]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	4941      	ldr	r1, [pc, #260]	; (80016cc <SCH_AddTask+0x208>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3308      	adds	r3, #8
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	7efa      	ldrb	r2, [r7, #27]
 80015da:	1ac9      	subs	r1, r1, r3
 80015dc:	483b      	ldr	r0, [pc, #236]	; (80016cc <SCH_AddTask+0x208>)
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4403      	add	r3, r0
 80015e8:	3308      	adds	r3, #8
 80015ea:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 80015ec:	7efa      	ldrb	r2, [r7, #27]
 80015ee:	4937      	ldr	r1, [pc, #220]	; (80016cc <SCH_AddTask+0x208>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	3308      	adds	r3, #8
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 8001602:	7efa      	ldrb	r2, [r7, #27]
 8001604:	4931      	ldr	r1, [pc, #196]	; (80016cc <SCH_AddTask+0x208>)
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	3310      	adds	r3, #16
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8001616:	7efb      	ldrb	r3, [r7, #27]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	6979      	ldr	r1, [r7, #20]
 800161c:	482b      	ldr	r0, [pc, #172]	; (80016cc <SCH_AddTask+0x208>)
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4403      	add	r3, r0
 8001628:	3308      	adds	r3, #8
 800162a:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 800162c:	7efb      	ldrb	r3, [r7, #27]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	4926      	ldr	r1, [pc, #152]	; (80016cc <SCH_AddTask+0x208>)
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	3308      	adds	r3, #8
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d12c      	bne.n	800169e <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 8001644:	7efb      	ldrb	r3, [r7, #27]
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	4920      	ldr	r1, [pc, #128]	; (80016cc <SCH_AddTask+0x208>)
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3310      	adds	r3, #16
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	e020      	b.n	800169e <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 800165c:	7efa      	ldrb	r2, [r7, #27]
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	1ac9      	subs	r1, r1, r3
 8001664:	4819      	ldr	r0, [pc, #100]	; (80016cc <SCH_AddTask+0x208>)
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4403      	add	r3, r0
 8001670:	3308      	adds	r3, #8
 8001672:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8001674:	7efa      	ldrb	r2, [r7, #27]
 8001676:	4915      	ldr	r1, [pc, #84]	; (80016cc <SCH_AddTask+0x208>)
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3308      	adds	r3, #8
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 800168a:	7efa      	ldrb	r2, [r7, #27]
 800168c:	490f      	ldr	r1, [pc, #60]	; (80016cc <SCH_AddTask+0x208>)
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	3310      	adds	r3, #16
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 800169e:	7efa      	ldrb	r2, [r7, #27]
 80016a0:	490a      	ldr	r1, [pc, #40]	; (80016cc <SCH_AddTask+0x208>)
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	3304      	adds	r3, #4
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	e007      	b.n	80016c2 <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80016b2:	7efb      	ldrb	r3, [r7, #27]
 80016b4:	3301      	adds	r3, #1
 80016b6:	76fb      	strb	r3, [r7, #27]
 80016b8:	7efb      	ldrb	r3, [r7, #27]
 80016ba:	2b13      	cmp	r3, #19
 80016bc:	f67f af18 	bls.w	80014f0 <SCH_AddTask+0x2c>
        }
    }
    return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3724      	adds	r7, #36	; 0x24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bcb0      	pop	{r4, r5, r7}
 80016ca:	4770      	bx	lr
 80016cc:	200001fc 	.word	0x200001fc

080016d0 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 80016d0:	b4b0      	push	{r4, r5, r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e088      	b.n	80017f2 <SCH_DeleteTask+0x122>
    	if (tasks[i].functionPointer == 0) return 0;
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	4949      	ldr	r1, [pc, #292]	; (8001808 <SCH_DeleteTask+0x138>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <SCH_DeleteTask+0x28>
 80016f4:	2300      	movs	r3, #0
 80016f6:	e081      	b.n	80017fc <SCH_DeleteTask+0x12c>
        if (tasks[i].id == id) {
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	4943      	ldr	r1, [pc, #268]	; (8001808 <SCH_DeleteTask+0x138>)
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	3304      	adds	r3, #4
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	429a      	cmp	r2, r3
 800170e:	d16d      	bne.n	80017ec <SCH_DeleteTask+0x11c>
            uint8_t currentID = tasks[i].id;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	493d      	ldr	r1, [pc, #244]	; (8001808 <SCH_DeleteTask+0x138>)
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	3304      	adds	r3, #4
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	4937      	ldr	r1, [pc, #220]	; (8001808 <SCH_DeleteTask+0x138>)
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01d      	beq.n	8001776 <SCH_DeleteTask+0xa6>
                tasks[i + 1].delay += tasks[i].delay;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	4932      	ldr	r1, [pc, #200]	; (8001808 <SCH_DeleteTask+0x138>)
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	3308      	adds	r3, #8
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	482d      	ldr	r0, [pc, #180]	; (8001808 <SCH_DeleteTask+0x138>)
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4403      	add	r3, r0
 800175c:	3308      	adds	r3, #8
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	3201      	adds	r2, #1
 8001764:	4419      	add	r1, r3
 8001766:	4828      	ldr	r0, [pc, #160]	; (8001808 <SCH_DeleteTask+0x138>)
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4403      	add	r3, r0
 8001772:	3308      	adds	r3, #8
 8001774:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	73bb      	strb	r3, [r7, #14]
 800177a:	e017      	b.n	80017ac <SCH_DeleteTask+0xdc>
                tasks[j] = tasks[j + 1];
 800177c:	7bbb      	ldrb	r3, [r7, #14]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	7bb9      	ldrb	r1, [r7, #14]
 8001782:	4821      	ldr	r0, [pc, #132]	; (8001808 <SCH_DeleteTask+0x138>)
 8001784:	460b      	mov	r3, r1
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4418      	add	r0, r3
 800178e:	491e      	ldr	r1, [pc, #120]	; (8001808 <SCH_DeleteTask+0x138>)
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	4604      	mov	r4, r0
 800179c:	461d      	mov	r5, r3
 800179e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017a2:	682b      	ldr	r3, [r5, #0]
 80017a4:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 80017a6:	7bbb      	ldrb	r3, [r7, #14]
 80017a8:	3301      	adds	r3, #1
 80017aa:	73bb      	strb	r3, [r7, #14]
 80017ac:	7bbb      	ldrb	r3, [r7, #14]
 80017ae:	2b12      	cmp	r3, #18
 80017b0:	d9e4      	bls.n	800177c <SCH_DeleteTask+0xac>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <SCH_DeleteTask+0x138>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 80017ba:	4a13      	ldr	r2, [pc, #76]	; (8001808 <SCH_DeleteTask+0x138>)
 80017bc:	7b7b      	ldrb	r3, [r7, #13]
 80017be:	f882 3180 	strb.w	r3, [r2, #384]	; 0x180
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <SCH_DeleteTask+0x138>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            tasks[SCH_TASKNUMBER - 1].period = 0;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <SCH_DeleteTask+0x138>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <SCH_DeleteTask+0x138>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <SCH_DeleteTask+0x138>)
 80017dc:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	e007      	b.n	80017fc <SCH_DeleteTask+0x12c>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	3301      	adds	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	2b13      	cmp	r3, #19
 80017f6:	f67f af73 	bls.w	80016e0 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bcb0      	pop	{r4, r5, r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	200001fc 	.word	0x200001fc

0800180c <SCH_RefreshTask>:

unsigned char SCH_RefreshTask(void) {
 800180c:	b4b0      	push	{r4, r5, r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return 0;
 8001812:	4b96      	ldr	r3, [pc, #600]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <SCH_RefreshTask+0x12>
 800181a:	2300      	movs	r3, #0
 800181c:	e120      	b.n	8001a60 <SCH_RefreshTask+0x254>
    SCH_Task currentTask = tasks[0];
 800181e:	4b93      	ldr	r3, [pc, #588]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001820:	463c      	mov	r4, r7
 8001822:	461d      	mov	r5, r3
 8001824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001828:	682b      	ldr	r3, [r5, #0]
 800182a:	6023      	str	r3, [r4, #0]
    uint32_t currentDelay = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001830:	2300      	movs	r3, #0
 8001832:	76fb      	strb	r3, [r7, #27]
 8001834:	e10f      	b.n	8001a56 <SCH_RefreshTask+0x24a>
        if (i + 1 == SCH_TASKNUMBER || tasks[i + 1].functionPointer == NULL) {
 8001836:	7efb      	ldrb	r3, [r7, #27]
 8001838:	2b13      	cmp	r3, #19
 800183a:	d00a      	beq.n	8001852 <SCH_RefreshTask+0x46>
 800183c:	7efb      	ldrb	r3, [r7, #27]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	498a      	ldr	r1, [pc, #552]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d14a      	bne.n	80018e8 <SCH_RefreshTask+0xdc>
            tasks[i].functionPointer = currentTask.functionPointer;
 8001852:	7efa      	ldrb	r2, [r7, #27]
 8001854:	6839      	ldr	r1, [r7, #0]
 8001856:	4885      	ldr	r0, [pc, #532]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4403      	add	r3, r0
 8001862:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 8001864:	7efa      	ldrb	r2, [r7, #27]
 8001866:	7938      	ldrb	r0, [r7, #4]
 8001868:	4980      	ldr	r1, [pc, #512]	; (8001a6c <SCH_RefreshTask+0x260>)
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	3304      	adds	r3, #4
 8001876:	4602      	mov	r2, r0
 8001878:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 800187a:	7efa      	ldrb	r2, [r7, #27]
 800187c:	68f9      	ldr	r1, [r7, #12]
 800187e:	487b      	ldr	r0, [pc, #492]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4403      	add	r3, r0
 800188a:	330c      	adds	r3, #12
 800188c:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 800188e:	7efa      	ldrb	r2, [r7, #27]
 8001890:	4976      	ldr	r1, [pc, #472]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	3310      	adds	r3, #16
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
            tasks[i].delay = currentTask.period - currentDelay;
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	7efa      	ldrb	r2, [r7, #27]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	1ac9      	subs	r1, r1, r3
 80018aa:	4870      	ldr	r0, [pc, #448]	; (8001a6c <SCH_RefreshTask+0x260>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4403      	add	r3, r0
 80018b6:	3308      	adds	r3, #8
 80018b8:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 80018ba:	7efa      	ldrb	r2, [r7, #27]
 80018bc:	496b      	ldr	r1, [pc, #428]	; (8001a6c <SCH_RefreshTask+0x260>)
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	3308      	adds	r3, #8
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d109      	bne.n	80018e4 <SCH_RefreshTask+0xd8>
                tasks[i].flag = 1;
 80018d0:	7efa      	ldrb	r2, [r7, #27]
 80018d2:	4966      	ldr	r1, [pc, #408]	; (8001a6c <SCH_RefreshTask+0x260>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	3310      	adds	r3, #16
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0bb      	b.n	8001a60 <SCH_RefreshTask+0x254>
        }
        currentDelay += tasks[i + 1].delay;
 80018e8:	7efb      	ldrb	r3, [r7, #27]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	495f      	ldr	r1, [pc, #380]	; (8001a6c <SCH_RefreshTask+0x260>)
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3308      	adds	r3, #8
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	4413      	add	r3, r2
 8001900:	61fb      	str	r3, [r7, #28]
        if (currentDelay > currentTask.period) {
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	429a      	cmp	r2, r3
 8001908:	f240 808d 	bls.w	8001a26 <SCH_RefreshTask+0x21a>
            tasks[i].functionPointer = currentTask.functionPointer;
 800190c:	7efa      	ldrb	r2, [r7, #27]
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	4856      	ldr	r0, [pc, #344]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4403      	add	r3, r0
 800191c:	6019      	str	r1, [r3, #0]
            tasks[i].id = currentTask.id;
 800191e:	7efa      	ldrb	r2, [r7, #27]
 8001920:	7938      	ldrb	r0, [r7, #4]
 8001922:	4952      	ldr	r1, [pc, #328]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3304      	adds	r3, #4
 8001930:	4602      	mov	r2, r0
 8001932:	701a      	strb	r2, [r3, #0]
            tasks[i].period = currentTask.period;
 8001934:	7efa      	ldrb	r2, [r7, #27]
 8001936:	68f9      	ldr	r1, [r7, #12]
 8001938:	484c      	ldr	r0, [pc, #304]	; (8001a6c <SCH_RefreshTask+0x260>)
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4403      	add	r3, r0
 8001944:	330c      	adds	r3, #12
 8001946:	6019      	str	r1, [r3, #0]
            tasks[i].flag = 0;
 8001948:	7efa      	ldrb	r2, [r7, #27]
 800194a:	4948      	ldr	r1, [pc, #288]	; (8001a6c <SCH_RefreshTask+0x260>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3310      	adds	r3, #16
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
            int newDelay = currentDelay - currentTask.period;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
            tasks[i].delay = tasks[i + 1].delay - newDelay;
 8001964:	7efb      	ldrb	r3, [r7, #27]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	4940      	ldr	r1, [pc, #256]	; (8001a6c <SCH_RefreshTask+0x260>)
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	3308      	adds	r3, #8
 8001976:	6819      	ldr	r1, [r3, #0]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	7efa      	ldrb	r2, [r7, #27]
 800197c:	1ac9      	subs	r1, r1, r3
 800197e:	483b      	ldr	r0, [pc, #236]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4403      	add	r3, r0
 800198a:	3308      	adds	r3, #8
 800198c:	6019      	str	r1, [r3, #0]
            if (tasks[i].delay == 0) {
 800198e:	7efa      	ldrb	r2, [r7, #27]
 8001990:	4936      	ldr	r1, [pc, #216]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	3308      	adds	r3, #8
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <SCH_RefreshTask+0x1ac>
                tasks[i].flag = 1;
 80019a4:	7efa      	ldrb	r2, [r7, #27]
 80019a6:	4931      	ldr	r1, [pc, #196]	; (8001a6c <SCH_RefreshTask+0x260>)
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3310      	adds	r3, #16
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
            }
            tasks[i + 1].delay -= tasks[i].delay;
 80019b8:	7efb      	ldrb	r3, [r7, #27]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	492b      	ldr	r1, [pc, #172]	; (8001a6c <SCH_RefreshTask+0x260>)
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	3308      	adds	r3, #8
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	7efa      	ldrb	r2, [r7, #27]
 80019ce:	4827      	ldr	r0, [pc, #156]	; (8001a6c <SCH_RefreshTask+0x260>)
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	3308      	adds	r3, #8
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	7efa      	ldrb	r2, [r7, #27]
 80019e0:	3201      	adds	r2, #1
 80019e2:	1ac9      	subs	r1, r1, r3
 80019e4:	4821      	ldr	r0, [pc, #132]	; (8001a6c <SCH_RefreshTask+0x260>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4403      	add	r3, r0
 80019f0:	3308      	adds	r3, #8
 80019f2:	6019      	str	r1, [r3, #0]
            if (tasks[i + 1].delay == 0) {
 80019f4:	7efb      	ldrb	r3, [r7, #27]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	491c      	ldr	r1, [pc, #112]	; (8001a6c <SCH_RefreshTask+0x260>)
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	3308      	adds	r3, #8
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10a      	bne.n	8001a22 <SCH_RefreshTask+0x216>
                tasks[i + 1].flag = 1;
 8001a0c:	7efb      	ldrb	r3, [r7, #27]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	4916      	ldr	r1, [pc, #88]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3310      	adds	r3, #16
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
            }
            return 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e01c      	b.n	8001a60 <SCH_RefreshTask+0x254>
        }
        else {
            tasks[i] = tasks[i + 1];
 8001a26:	7efb      	ldrb	r3, [r7, #27]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	7ef9      	ldrb	r1, [r7, #27]
 8001a2c:	480f      	ldr	r0, [pc, #60]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001a2e:	460b      	mov	r3, r1
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4418      	add	r0, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <SCH_RefreshTask+0x260>)
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	4604      	mov	r4, r0
 8001a46:	461d      	mov	r5, r3
 8001a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	3301      	adds	r3, #1
 8001a54:	76fb      	strb	r3, [r7, #27]
 8001a56:	7efb      	ldrb	r3, [r7, #27]
 8001a58:	2b13      	cmp	r3, #19
 8001a5a:	f67f aeec 	bls.w	8001836 <SCH_RefreshTask+0x2a>
        }
    }
    return 0;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3724      	adds	r7, #36	; 0x24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bcb0      	pop	{r4, r5, r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200001fc 	.word	0x200001fc

08001a70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_MspInit+0x40>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <HAL_MspInit+0x40>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6193      	str	r3, [r2, #24]
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_MspInit+0x40>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_MspInit+0x40>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_MspInit+0x40>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_MspInit+0x40>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac4:	d114      	bne.n	8001af0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_TIM_Base_MspInit+0x78>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_TIM_Base_MspInit+0x78>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_TIM_Base_MspInit+0x78>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	201c      	movs	r0, #28
 8001ae4:	f000 fcf1 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae8:	201c      	movs	r0, #28
 8001aea:	f000 fd0a 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001aee:	e018      	b.n	8001b22 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_TIM_Base_MspInit+0x7c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d113      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_TIM_Base_MspInit+0x78>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <HAL_TIM_Base_MspInit+0x78>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_TIM_Base_MspInit+0x78>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	201d      	movs	r0, #29
 8001b18:	f000 fcd7 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b1c:	201d      	movs	r0, #29
 8001b1e:	f000 fcf0 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40000400 	.word	0x40000400

08001b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <HAL_TIM_MspPostInit+0x58>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d117      	bne.n	8001b84 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_TIM_MspPostInit+0x5c>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <HAL_TIM_MspPostInit+0x5c>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6193      	str	r3, [r2, #24]
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_TIM_MspPostInit+0x5c>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b6c:	23c0      	movs	r3, #192	; 0xc0
 8001b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2302      	movs	r3, #2
 8001b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_TIM_MspPostInit+0x60>)
 8001b80:	f000 fd8c 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b84:	bf00      	nop
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40000400 	.word	0x40000400
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010800 	.word	0x40010800

08001b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_UART_MspInit+0x98>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d137      	bne.n	8001c28 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_UART_MspInit+0x9c>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <HAL_UART_MspInit+0x9c>)
 8001bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc2:	61d3      	str	r3, [r2, #28]
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_UART_MspInit+0x9c>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_UART_MspInit+0x9c>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_UART_MspInit+0x9c>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_UART_MspInit+0x9c>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001be8:	2304      	movs	r3, #4
 8001bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480f      	ldr	r0, [pc, #60]	; (8001c38 <HAL_UART_MspInit+0xa0>)
 8001bfc:	f000 fd4e 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c00:	2308      	movs	r3, #8
 8001c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <HAL_UART_MspInit+0xa0>)
 8001c14:	f000 fd42 	bl	800269c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	2026      	movs	r0, #38	; 0x26
 8001c1e:	f000 fc54 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c22:	2026      	movs	r0, #38	; 0x26
 8001c24:	f000 fc6d 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40004400 	.word	0x40004400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010800 	.word	0x40010800

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c82:	f000 fb2f 	bl	80022e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <TIM2_IRQHandler+0x10>)
 8001c92:	f001 fc67 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000114 	.word	0x20000114

08001ca0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM3_IRQHandler+0x10>)
 8001ca6:	f001 fc5d 	bl	8003564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2000015c 	.word	0x2000015c

08001cb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <USART2_IRQHandler+0x10>)
 8001cba:	f002 fb05 	bl	80042c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200001a4 	.word	0x200001a4

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f003 f88e 	bl	8004e18 <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20002800 	.word	0x20002800
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	2000038c 	.word	0x2000038c
 8001d30:	200004e8 	.word	0x200004e8

08001d34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <testMCU>:

#include "test.h"

extern TIM_HandleTypeDef htim3;

void testMCU(void) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001d44:	2120      	movs	r1, #32
 8001d46:	4802      	ldr	r0, [pc, #8]	; (8001d50 <testMCU+0x10>)
 8001d48:	f000 fe53 	bl	80029f2 <HAL_GPIO_TogglePin>
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40010800 	.word	0x40010800

08001d54 <testButton>:

void testButton(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	if (buttonPressed(1) || buttonPressed(2) || buttonPressed(3)) {
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7fe fa81 	bl	8000260 <buttonPressed>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10b      	bne.n	8001d7c <testButton+0x28>
 8001d64:	2002      	movs	r0, #2
 8001d66:	f7fe fa7b 	bl	8000260 <buttonPressed>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <testButton+0x28>
 8001d70:	2003      	movs	r0, #3
 8001d72:	f7fe fa75 	bl	8000260 <buttonPressed>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d02c      	beq.n	8001dd6 <testButton+0x82>
		HAL_GPIO_TogglePin(TRAFFIC0_RED_GPIO_Port, TRAFFIC0_RED_Pin);
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	4817      	ldr	r0, [pc, #92]	; (8001ddc <testButton+0x88>)
 8001d80:	f000 fe37 	bl	80029f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC0_GREEN_GPIO_Port, TRAFFIC0_GREEN_Pin);
 8001d84:	2140      	movs	r1, #64	; 0x40
 8001d86:	4815      	ldr	r0, [pc, #84]	; (8001ddc <testButton+0x88>)
 8001d88:	f000 fe33 	bl	80029f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC0_YELLOW_GPIO_Port, TRAFFIC0_YELLOW_Pin);
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	4813      	ldr	r0, [pc, #76]	; (8001ddc <testButton+0x88>)
 8001d90:	f000 fe2f 	bl	80029f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_RED_GPIO_Port, TRAFFIC1_RED_Pin);
 8001d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d98:	4810      	ldr	r0, [pc, #64]	; (8001ddc <testButton+0x88>)
 8001d9a:	f000 fe2a 	bl	80029f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_GREEN_GPIO_Port, TRAFFIC1_GREEN_Pin);
 8001d9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da2:	480e      	ldr	r0, [pc, #56]	; (8001ddc <testButton+0x88>)
 8001da4:	f000 fe25 	bl	80029f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TRAFFIC1_YELLOW_GPIO_Port, TRAFFIC1_YELLOW_Pin);
 8001da8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <testButton+0x88>)
 8001dae:	f000 fe20 	bl	80029f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN0_RED_GPIO_Port, PEDESTRIAN0_RED_Pin);
 8001db2:	2101      	movs	r1, #1
 8001db4:	4809      	ldr	r0, [pc, #36]	; (8001ddc <testButton+0x88>)
 8001db6:	f000 fe1c 	bl	80029f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN0_GREEN_Pin);
 8001dba:	2102      	movs	r1, #2
 8001dbc:	4807      	ldr	r0, [pc, #28]	; (8001ddc <testButton+0x88>)
 8001dbe:	f000 fe18 	bl	80029f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN1_RED_GPIO_Port, PEDESTRIAN1_RED_Pin);
 8001dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <testButton+0x88>)
 8001dc8:	f000 fe13 	bl	80029f2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(PEDESTRIAN1_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_Pin);
 8001dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <testButton+0x88>)
 8001dd2:	f000 fe0e 	bl	80029f2 <HAL_GPIO_TogglePin>
	}
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40010c00 	.word	0x40010c00

08001de0 <testBuzzer>:

void testBuzzer(void) {
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Init.Period);
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <testBuzzer+0x20>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <testBuzzer+0x20>)
 8001dea:	68d2      	ldr	r2, [r2, #12]
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period);
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <testBuzzer+0x20>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <testBuzzer+0x20>)
 8001df4:	68d2      	ldr	r2, [r2, #12]
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	2000015c 	.word	0x2000015c

08001e04 <testLED>:

void testLED(void) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRAFFIC0_RED_GPIO_Port, TRAFFIC0_RED_Pin, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	481b      	ldr	r0, [pc, #108]	; (8001e7c <testLED+0x78>)
 8001e0e:	f000 fdd8 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC0_GREEN_GPIO_Port, TRAFFIC0_GREEN_Pin, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2140      	movs	r1, #64	; 0x40
 8001e16:	4819      	ldr	r0, [pc, #100]	; (8001e7c <testLED+0x78>)
 8001e18:	f000 fdd3 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC0_YELLOW_GPIO_Port, TRAFFIC0_YELLOW_Pin, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2120      	movs	r1, #32
 8001e20:	4816      	ldr	r0, [pc, #88]	; (8001e7c <testLED+0x78>)
 8001e22:	f000 fdce 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_RED_GPIO_Port, TRAFFIC1_RED_Pin, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2c:	4813      	ldr	r0, [pc, #76]	; (8001e7c <testLED+0x78>)
 8001e2e:	f000 fdc8 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_GREEN_GPIO_Port, TRAFFIC1_GREEN_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e38:	4810      	ldr	r0, [pc, #64]	; (8001e7c <testLED+0x78>)
 8001e3a:	f000 fdc2 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC1_YELLOW_GPIO_Port, TRAFFIC1_YELLOW_Pin, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <testLED+0x78>)
 8001e46:	f000 fdbc 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN0_RED_GPIO_Port, PEDESTRIAN0_RED_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	480b      	ldr	r0, [pc, #44]	; (8001e7c <testLED+0x78>)
 8001e50:	f000 fdb7 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN0_GREEN_GPIO_Port, PEDESTRIAN0_GREEN_Pin, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2102      	movs	r1, #2
 8001e58:	4808      	ldr	r0, [pc, #32]	; (8001e7c <testLED+0x78>)
 8001e5a:	f000 fdb2 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN1_RED_GPIO_Port, PEDESTRIAN1_RED_Pin, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <testLED+0x78>)
 8001e66:	f000 fdac 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDESTRIAN1_GREEN_GPIO_Port, PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <testLED+0x78>)
 8001e72:	f000 fda6 	bl	80029c2 <HAL_GPIO_WritePin>
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40010c00 	.word	0x40010c00

08001e80 <trafficToggle>:

static uint16_t trafficRedPins[TRAFFIC_NUMBER] = {TRAFFIC0_RED_Pin, TRAFFIC1_RED_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMBER] = {TRAFFIC0_GREEN_Pin, TRAFFIC1_GREEN_Pin};
static uint16_t trafficYellowPins[TRAFFIC_NUMBER] = {TRAFFIC0_YELLOW_Pin, TRAFFIC1_YELLOW_Pin};

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	460a      	mov	r2, r1
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8001e90:	79bb      	ldrb	r3, [r7, #6]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	f200 80ce 	bhi.w	8002034 <trafficToggle+0x1b4>
 8001e98:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <trafficToggle+0x20>)
 8001e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9e:	bf00      	nop
 8001ea0:	08001eb1 	.word	0x08001eb1
 8001ea4:	08001f03 	.word	0x08001f03
 8001ea8:	08001f69 	.word	0x08001f69
 8001eac:	08001fcf 	.word	0x08001fcf
	case TRAFFIC_OFF:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	4a66      	ldr	r2, [pc, #408]	; (800204c <trafficToggle+0x1cc>)
 8001eb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	4a65      	ldr	r2, [pc, #404]	; (8002050 <trafficToggle+0x1d0>)
 8001ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f000 fd7d 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	4a62      	ldr	r2, [pc, #392]	; (8002054 <trafficToggle+0x1d4>)
 8001ecc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4a61      	ldr	r2, [pc, #388]	; (8002058 <trafficToggle+0x1d8>)
 8001ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	f000 fd71 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	4a5e      	ldr	r2, [pc, #376]	; (800205c <trafficToggle+0x1dc>)
 8001ee4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	4a5d      	ldr	r2, [pc, #372]	; (8002060 <trafficToggle+0x1e0>)
 8001eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f000 fd65 	bl	80029c2 <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_OFF;
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4a5a      	ldr	r2, [pc, #360]	; (8002064 <trafficToggle+0x1e4>)
 8001efc:	2100      	movs	r1, #0
 8001efe:	54d1      	strb	r1, [r2, r3]
		break;
 8001f00:	e09f      	b.n	8002042 <trafficToggle+0x1c2>
	case TRAFFIC_RED:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_RESET);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	4a51      	ldr	r2, [pc, #324]	; (800204c <trafficToggle+0x1cc>)
 8001f06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	4a50      	ldr	r2, [pc, #320]	; (8002050 <trafficToggle+0x1d0>)
 8001f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f12:	2200      	movs	r2, #0
 8001f14:	4619      	mov	r1, r3
 8001f16:	f000 fd54 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	4a4d      	ldr	r2, [pc, #308]	; (8002054 <trafficToggle+0x1d4>)
 8001f1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	4a4c      	ldr	r2, [pc, #304]	; (8002058 <trafficToggle+0x1d8>)
 8001f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f000 fd48 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	4a49      	ldr	r2, [pc, #292]	; (800205c <trafficToggle+0x1dc>)
 8001f36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	4a48      	ldr	r2, [pc, #288]	; (8002060 <trafficToggle+0x1e0>)
 8001f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	f000 fd3c 	bl	80029c2 <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_RED;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4a45      	ldr	r2, [pc, #276]	; (8002064 <trafficToggle+0x1e4>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001f52:	4b45      	ldr	r3, [pc, #276]	; (8002068 <trafficToggle+0x1e8>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d16e      	bne.n	8002038 <trafficToggle+0x1b8>
			trafficCounters[index] = trafficRedDuration;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4a43      	ldr	r2, [pc, #268]	; (800206c <trafficToggle+0x1ec>)
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	4943      	ldr	r1, [pc, #268]	; (8002070 <trafficToggle+0x1f0>)
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001f66:	e067      	b.n	8002038 <trafficToggle+0x1b8>
	case TRAFFIC_GREEN:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	4a38      	ldr	r2, [pc, #224]	; (800204c <trafficToggle+0x1cc>)
 8001f6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	4a37      	ldr	r2, [pc, #220]	; (8002050 <trafficToggle+0x1d0>)
 8001f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f000 fd21 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4a34      	ldr	r2, [pc, #208]	; (8002054 <trafficToggle+0x1d4>)
 8001f84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4a33      	ldr	r2, [pc, #204]	; (8002058 <trafficToggle+0x1d8>)
 8001f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4619      	mov	r1, r3
 8001f94:	f000 fd15 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_RESET);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	4a30      	ldr	r2, [pc, #192]	; (800205c <trafficToggle+0x1dc>)
 8001f9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4a2f      	ldr	r2, [pc, #188]	; (8002060 <trafficToggle+0x1e0>)
 8001fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	f000 fd09 	bl	80029c2 <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_GREEN;
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <trafficToggle+0x1e4>)
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <trafficToggle+0x1e8>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d13d      	bne.n	800203c <trafficToggle+0x1bc>
			trafficCounters[index] = trafficGreenDuration;
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <trafficToggle+0x1f4>)
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	492a      	ldr	r1, [pc, #168]	; (8002070 <trafficToggle+0x1f0>)
 8001fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8001fcc:	e036      	b.n	800203c <trafficToggle+0x1bc>
	case TRAFFIC_YELLOW:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	; (800204c <trafficToggle+0x1cc>)
 8001fd2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <trafficToggle+0x1d0>)
 8001fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f000 fcee 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_RESET);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	4a1a      	ldr	r2, [pc, #104]	; (8002054 <trafficToggle+0x1d4>)
 8001fea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	4a19      	ldr	r2, [pc, #100]	; (8002058 <trafficToggle+0x1d8>)
 8001ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f000 fce2 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4a16      	ldr	r2, [pc, #88]	; (800205c <trafficToggle+0x1dc>)
 8002002:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	4a15      	ldr	r2, [pc, #84]	; (8002060 <trafficToggle+0x1e0>)
 800200a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800200e:	2201      	movs	r2, #1
 8002010:	4619      	mov	r1, r3
 8002012:	f000 fcd6 	bl	80029c2 <HAL_GPIO_WritePin>
		trafficStates[index] = TRAFFIC_YELLOW;
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	4a12      	ldr	r2, [pc, #72]	; (8002064 <trafficToggle+0x1e4>)
 800201a:	2103      	movs	r1, #3
 800201c:	54d1      	strb	r1, [r2, r3]
		if (fsmState == FSM_AUTO) {
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <trafficToggle+0x1e8>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d10c      	bne.n	8002040 <trafficToggle+0x1c0>
			trafficCounters[index] = trafficYellowDuration;
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <trafficToggle+0x1f8>)
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	4910      	ldr	r1, [pc, #64]	; (8002070 <trafficToggle+0x1f0>)
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		break;
 8002032:	e005      	b.n	8002040 <trafficToggle+0x1c0>
	default:
		break;
 8002034:	bf00      	nop
 8002036:	e004      	b.n	8002042 <trafficToggle+0x1c2>
		break;
 8002038:	bf00      	nop
 800203a:	e002      	b.n	8002042 <trafficToggle+0x1c2>
		break;
 800203c:	bf00      	nop
 800203e:	e000      	b.n	8002042 <trafficToggle+0x1c2>
		break;
 8002040:	bf00      	nop
	}
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000040 	.word	0x20000040
 8002050:	20000058 	.word	0x20000058
 8002054:	20000050 	.word	0x20000050
 8002058:	20000060 	.word	0x20000060
 800205c:	20000048 	.word	0x20000048
 8002060:	2000005c 	.word	0x2000005c
 8002064:	20000390 	.word	0x20000390
 8002068:	200000f4 	.word	0x200000f4
 800206c:	20000034 	.word	0x20000034
 8002070:	20000394 	.word	0x20000394
 8002074:	20000038 	.word	0x20000038
 8002078:	2000003c 	.word	0x2000003c

0800207c <traffic0Off>:

void traffic0Off(void) {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_OFF);
 8002080:	2100      	movs	r1, #0
 8002082:	2000      	movs	r0, #0
 8002084:	f7ff fefc 	bl	8001e80 <trafficToggle>
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <traffic0Red>:
void traffic0Red(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 8002090:	2101      	movs	r1, #1
 8002092:	2000      	movs	r0, #0
 8002094:	f7ff fef4 	bl	8001e80 <trafficToggle>
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <traffic0Green>:
void traffic0Green(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 80020a0:	2102      	movs	r1, #2
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff feec 	bl	8001e80 <trafficToggle>
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}

080020ac <traffic0Yellow>:
void traffic0Yellow(void) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 80020b0:	2103      	movs	r1, #3
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff fee4 	bl	8001e80 <trafficToggle>
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <traffic1Off>:

void traffic1Off(void) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_OFF);
 80020c0:	2100      	movs	r1, #0
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7ff fedc 	bl	8001e80 <trafficToggle>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <traffic1Red>:
void traffic1Red(void) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 80020d0:	2101      	movs	r1, #1
 80020d2:	2001      	movs	r0, #1
 80020d4:	f7ff fed4 	bl	8001e80 <trafficToggle>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <traffic1Green>:
void traffic1Green(void) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 80020e0:	2102      	movs	r1, #2
 80020e2:	2001      	movs	r0, #1
 80020e4:	f7ff fecc 	bl	8001e80 <trafficToggle>
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <traffic1Yellow>:
void traffic1Yellow(void) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 80020f0:	2103      	movs	r1, #3
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7ff fec4 	bl	8001e80 <trafficToggle>
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <uartRedDuration>:
void uartReport(void) {
	char str[40];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Time: %lu - Task: %u\r\n", HAL_GetTick(), SCH_Report()), 100);
}

void uartRedDuration(void) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficRedDuration / 1000), 100);
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <uartRedDuration+0x34>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <uartRedDuration+0x38>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	099a      	lsrs	r2, r3, #6
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4909      	ldr	r1, [pc, #36]	; (8002138 <uartRedDuration+0x3c>)
 8002112:	4618      	mov	r0, r3
 8002114:	f002 fe58 	bl	8004dc8 <siprintf>
 8002118:	4603      	mov	r3, r0
 800211a:	b29a      	uxth	r2, r3
 800211c:	1d39      	adds	r1, r7, #4
 800211e:	2364      	movs	r3, #100	; 0x64
 8002120:	4806      	ldr	r0, [pc, #24]	; (800213c <uartRedDuration+0x40>)
 8002122:	f002 f829 	bl	8004178 <HAL_UART_Transmit>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000034 	.word	0x20000034
 8002134:	10624dd3 	.word	0x10624dd3
 8002138:	0800575c 	.word	0x0800575c
 800213c:	200001a4 	.word	0x200001a4

08002140 <uartGreenDuration>:

void uartGreenDuration(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficGreenDuration / 1000), 100);
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <uartGreenDuration+0x34>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <uartGreenDuration+0x38>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	099a      	lsrs	r2, r3, #6
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	4909      	ldr	r1, [pc, #36]	; (800217c <uartGreenDuration+0x3c>)
 8002156:	4618      	mov	r0, r3
 8002158:	f002 fe36 	bl	8004dc8 <siprintf>
 800215c:	4603      	mov	r3, r0
 800215e:	b29a      	uxth	r2, r3
 8002160:	1d39      	adds	r1, r7, #4
 8002162:	2364      	movs	r3, #100	; 0x64
 8002164:	4806      	ldr	r0, [pc, #24]	; (8002180 <uartGreenDuration+0x40>)
 8002166:	f002 f807 	bl	8004178 <HAL_UART_Transmit>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000038 	.word	0x20000038
 8002178:	10624dd3 	.word	0x10624dd3
 800217c:	0800575c 	.word	0x0800575c
 8002180:	200001a4 	.word	0x200001a4

08002184 <uartYellowDuration>:

void uartYellowDuration(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficYellowDuration / 1000), 100);
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <uartYellowDuration+0x34>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <uartYellowDuration+0x38>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	099a      	lsrs	r2, r3, #6
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	4909      	ldr	r1, [pc, #36]	; (80021c0 <uartYellowDuration+0x3c>)
 800219a:	4618      	mov	r0, r3
 800219c:	f002 fe14 	bl	8004dc8 <siprintf>
 80021a0:	4603      	mov	r3, r0
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	1d39      	adds	r1, r7, #4
 80021a6:	2364      	movs	r3, #100	; 0x64
 80021a8:	4806      	ldr	r0, [pc, #24]	; (80021c4 <uartYellowDuration+0x40>)
 80021aa:	f001 ffe5 	bl	8004178 <HAL_UART_Transmit>
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000003c 	.word	0x2000003c
 80021bc:	10624dd3 	.word	0x10624dd3
 80021c0:	0800575c 	.word	0x0800575c
 80021c4:	200001a4 	.word	0x200001a4

080021c8 <uartCounter>:

void uartCounter(void) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
	char str[20];
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "7SEG:%02lu\r\n", trafficCounters[0] / 1000), 100);
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <uartCounter+0x34>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <uartCounter+0x38>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	099a      	lsrs	r2, r3, #6
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	4909      	ldr	r1, [pc, #36]	; (8002204 <uartCounter+0x3c>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fdf2 	bl	8004dc8 <siprintf>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	1d39      	adds	r1, r7, #4
 80021ea:	2364      	movs	r3, #100	; 0x64
 80021ec:	4806      	ldr	r0, [pc, #24]	; (8002208 <uartCounter+0x40>)
 80021ee:	f001 ffc3 	bl	8004178 <HAL_UART_Transmit>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000394 	.word	0x20000394
 8002200:	10624dd3 	.word	0x10624dd3
 8002204:	0800575c 	.word	0x0800575c
 8002208:	200001a4 	.word	0x200001a4

0800220c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800220c:	f7ff fd92 	bl	8001d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002210:	480b      	ldr	r0, [pc, #44]	; (8002240 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002212:	490c      	ldr	r1, [pc, #48]	; (8002244 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002214:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002228:	4c09      	ldr	r4, [pc, #36]	; (8002250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002236:	f002 fdf5 	bl	8004e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800223a:	f7fe fdbf 	bl	8000dbc <main>
  bx lr
 800223e:	4770      	bx	lr
  ldr r0, =_sdata
 8002240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002244:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8002248:	080057d4 	.word	0x080057d4
  ldr r2, =_sbss
 800224c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8002250:	200004e8 	.word	0x200004e8

08002254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC1_2_IRQHandler>
	...

08002258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_Init+0x28>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a07      	ldr	r2, [pc, #28]	; (8002280 <HAL_Init+0x28>)
 8002262:	f043 0310 	orr.w	r3, r3, #16
 8002266:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002268:	2003      	movs	r0, #3
 800226a:	f000 f923 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800226e:	200f      	movs	r0, #15
 8002270:	f000 f808 	bl	8002284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002274:	f7ff fbfc 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000

08002284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x54>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x58>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f93b 	bl	800251e <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00e      	b.n	80022d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d80a      	bhi.n	80022ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f000 f903 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_InitTick+0x5c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000030 	.word	0x20000030
 80022dc:	20000068 	.word	0x20000068
 80022e0:	20000064 	.word	0x20000064

080022e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_IncTick+0x1c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_IncTick+0x20>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <HAL_IncTick+0x20>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000068 	.word	0x20000068
 8002304:	2000039c 	.word	0x2000039c

08002308 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return uwTick;
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <HAL_GetTick+0x10>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	2000039c 	.word	0x2000039c

0800231c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002338:	4013      	ands	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234e:	4a04      	ldr	r2, [pc, #16]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	60d3      	str	r3, [r2, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <__NVIC_GetPriorityGrouping+0x18>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 0307 	and.w	r3, r3, #7
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db0b      	blt.n	80023aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	4906      	ldr	r1, [pc, #24]	; (80023b4 <__NVIC_EnableIRQ+0x34>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2001      	movs	r0, #1
 80023a2:	fa00 f202 	lsl.w	r2, r0, r2
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff90 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff2d 	bl	800231c <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff42 	bl	8002364 <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff90 	bl	800240c <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5f 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff35 	bl	8002380 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002536:	b480      	push	{r7}
 8002538:	b085      	sub	sp, #20
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d008      	beq.n	8002560 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2204      	movs	r2, #4
 8002552:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e020      	b.n	80025a2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 020e 	bic.w	r2, r2, #14
 800256e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	2101      	movs	r1, #1
 800258a:	fa01 f202 	lsl.w	r2, r1, r2
 800258e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d005      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2204      	movs	r2, #4
 80025c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e051      	b.n	8002674 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 020e 	bic.w	r2, r2, #14
 80025de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a22      	ldr	r2, [pc, #136]	; (8002680 <HAL_DMA_Abort_IT+0xd4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d029      	beq.n	800264e <HAL_DMA_Abort_IT+0xa2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	; (8002684 <HAL_DMA_Abort_IT+0xd8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d022      	beq.n	800264a <HAL_DMA_Abort_IT+0x9e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_DMA_Abort_IT+0xdc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01a      	beq.n	8002644 <HAL_DMA_Abort_IT+0x98>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1e      	ldr	r2, [pc, #120]	; (800268c <HAL_DMA_Abort_IT+0xe0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d012      	beq.n	800263e <HAL_DMA_Abort_IT+0x92>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <HAL_DMA_Abort_IT+0xe4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00a      	beq.n	8002638 <HAL_DMA_Abort_IT+0x8c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_DMA_Abort_IT+0xe8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d102      	bne.n	8002632 <HAL_DMA_Abort_IT+0x86>
 800262c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002630:	e00e      	b.n	8002650 <HAL_DMA_Abort_IT+0xa4>
 8002632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002636:	e00b      	b.n	8002650 <HAL_DMA_Abort_IT+0xa4>
 8002638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800263c:	e008      	b.n	8002650 <HAL_DMA_Abort_IT+0xa4>
 800263e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002642:	e005      	b.n	8002650 <HAL_DMA_Abort_IT+0xa4>
 8002644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002648:	e002      	b.n	8002650 <HAL_DMA_Abort_IT+0xa4>
 800264a:	2310      	movs	r3, #16
 800264c:	e000      	b.n	8002650 <HAL_DMA_Abort_IT+0xa4>
 800264e:	2301      	movs	r3, #1
 8002650:	4a11      	ldr	r2, [pc, #68]	; (8002698 <HAL_DMA_Abort_IT+0xec>)
 8002652:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	4798      	blx	r3
    } 
  }
  return status;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40020008 	.word	0x40020008
 8002684:	4002001c 	.word	0x4002001c
 8002688:	40020030 	.word	0x40020030
 800268c:	40020044 	.word	0x40020044
 8002690:	40020058 	.word	0x40020058
 8002694:	4002006c 	.word	0x4002006c
 8002698:	40020000 	.word	0x40020000

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b08b      	sub	sp, #44	; 0x2c
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ae:	e161      	b.n	8002974 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026b0:	2201      	movs	r2, #1
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 8150 	bne.w	800296e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4a97      	ldr	r2, [pc, #604]	; (8002930 <HAL_GPIO_Init+0x294>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d05e      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
 80026d8:	4a95      	ldr	r2, [pc, #596]	; (8002930 <HAL_GPIO_Init+0x294>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d875      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 80026de:	4a95      	ldr	r2, [pc, #596]	; (8002934 <HAL_GPIO_Init+0x298>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d058      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
 80026e4:	4a93      	ldr	r2, [pc, #588]	; (8002934 <HAL_GPIO_Init+0x298>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d86f      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 80026ea:	4a93      	ldr	r2, [pc, #588]	; (8002938 <HAL_GPIO_Init+0x29c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d052      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
 80026f0:	4a91      	ldr	r2, [pc, #580]	; (8002938 <HAL_GPIO_Init+0x29c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d869      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 80026f6:	4a91      	ldr	r2, [pc, #580]	; (800293c <HAL_GPIO_Init+0x2a0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d04c      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
 80026fc:	4a8f      	ldr	r2, [pc, #572]	; (800293c <HAL_GPIO_Init+0x2a0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d863      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 8002702:	4a8f      	ldr	r2, [pc, #572]	; (8002940 <HAL_GPIO_Init+0x2a4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d046      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
 8002708:	4a8d      	ldr	r2, [pc, #564]	; (8002940 <HAL_GPIO_Init+0x2a4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d85d      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 800270e:	2b12      	cmp	r3, #18
 8002710:	d82a      	bhi.n	8002768 <HAL_GPIO_Init+0xcc>
 8002712:	2b12      	cmp	r3, #18
 8002714:	d859      	bhi.n	80027ca <HAL_GPIO_Init+0x12e>
 8002716:	a201      	add	r2, pc, #4	; (adr r2, 800271c <HAL_GPIO_Init+0x80>)
 8002718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271c:	08002797 	.word	0x08002797
 8002720:	08002771 	.word	0x08002771
 8002724:	08002783 	.word	0x08002783
 8002728:	080027c5 	.word	0x080027c5
 800272c:	080027cb 	.word	0x080027cb
 8002730:	080027cb 	.word	0x080027cb
 8002734:	080027cb 	.word	0x080027cb
 8002738:	080027cb 	.word	0x080027cb
 800273c:	080027cb 	.word	0x080027cb
 8002740:	080027cb 	.word	0x080027cb
 8002744:	080027cb 	.word	0x080027cb
 8002748:	080027cb 	.word	0x080027cb
 800274c:	080027cb 	.word	0x080027cb
 8002750:	080027cb 	.word	0x080027cb
 8002754:	080027cb 	.word	0x080027cb
 8002758:	080027cb 	.word	0x080027cb
 800275c:	080027cb 	.word	0x080027cb
 8002760:	08002779 	.word	0x08002779
 8002764:	0800278d 	.word	0x0800278d
 8002768:	4a76      	ldr	r2, [pc, #472]	; (8002944 <HAL_GPIO_Init+0x2a8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800276e:	e02c      	b.n	80027ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	623b      	str	r3, [r7, #32]
          break;
 8002776:	e029      	b.n	80027cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	3304      	adds	r3, #4
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e024      	b.n	80027cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	3308      	adds	r3, #8
 8002788:	623b      	str	r3, [r7, #32]
          break;
 800278a:	e01f      	b.n	80027cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	330c      	adds	r3, #12
 8002792:	623b      	str	r3, [r7, #32]
          break;
 8002794:	e01a      	b.n	80027cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800279e:	2304      	movs	r3, #4
 80027a0:	623b      	str	r3, [r7, #32]
          break;
 80027a2:	e013      	b.n	80027cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	611a      	str	r2, [r3, #16]
          break;
 80027b6:	e009      	b.n	80027cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b8:	2308      	movs	r3, #8
 80027ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	615a      	str	r2, [r3, #20]
          break;
 80027c2:	e003      	b.n	80027cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
          break;
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x130>
          break;
 80027ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2bff      	cmp	r3, #255	; 0xff
 80027d0:	d801      	bhi.n	80027d6 <HAL_GPIO_Init+0x13a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	e001      	b.n	80027da <HAL_GPIO_Init+0x13e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2bff      	cmp	r3, #255	; 0xff
 80027e0:	d802      	bhi.n	80027e8 <HAL_GPIO_Init+0x14c>
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	e002      	b.n	80027ee <HAL_GPIO_Init+0x152>
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	3b08      	subs	r3, #8
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	210f      	movs	r1, #15
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	401a      	ands	r2, r3
 8002800:	6a39      	ldr	r1, [r7, #32]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	431a      	orrs	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80a9 	beq.w	800296e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800281c:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <HAL_GPIO_Init+0x2ac>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4a49      	ldr	r2, [pc, #292]	; (8002948 <HAL_GPIO_Init+0x2ac>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6193      	str	r3, [r2, #24]
 8002828:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_GPIO_Init+0x2ac>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002834:	4a45      	ldr	r2, [pc, #276]	; (800294c <HAL_GPIO_Init+0x2b0>)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	089b      	lsrs	r3, r3, #2
 800283a:	3302      	adds	r3, #2
 800283c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002840:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	220f      	movs	r2, #15
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3d      	ldr	r2, [pc, #244]	; (8002950 <HAL_GPIO_Init+0x2b4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00d      	beq.n	800287c <HAL_GPIO_Init+0x1e0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a3c      	ldr	r2, [pc, #240]	; (8002954 <HAL_GPIO_Init+0x2b8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d007      	beq.n	8002878 <HAL_GPIO_Init+0x1dc>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a3b      	ldr	r2, [pc, #236]	; (8002958 <HAL_GPIO_Init+0x2bc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d101      	bne.n	8002874 <HAL_GPIO_Init+0x1d8>
 8002870:	2302      	movs	r3, #2
 8002872:	e004      	b.n	800287e <HAL_GPIO_Init+0x1e2>
 8002874:	2303      	movs	r3, #3
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x1e2>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_GPIO_Init+0x1e2>
 800287c:	2300      	movs	r3, #0
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	f002 0203 	and.w	r2, r2, #3
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	4093      	lsls	r3, r2
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800288e:	492f      	ldr	r1, [pc, #188]	; (800294c <HAL_GPIO_Init+0x2b0>)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a8:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_GPIO_Init+0x2c0>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	492b      	ldr	r1, [pc, #172]	; (800295c <HAL_GPIO_Init+0x2c0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_GPIO_Init+0x2c0>)
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4927      	ldr	r1, [pc, #156]	; (800295c <HAL_GPIO_Init+0x2c0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_GPIO_Init+0x2c0>)
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	4921      	ldr	r1, [pc, #132]	; (800295c <HAL_GPIO_Init+0x2c0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028de:	4b1f      	ldr	r3, [pc, #124]	; (800295c <HAL_GPIO_Init+0x2c0>)
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	491d      	ldr	r1, [pc, #116]	; (800295c <HAL_GPIO_Init+0x2c0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_GPIO_Init+0x2c0>)
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4917      	ldr	r1, [pc, #92]	; (800295c <HAL_GPIO_Init+0x2c0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_GPIO_Init+0x2c0>)
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	43db      	mvns	r3, r3
 800290e:	4913      	ldr	r1, [pc, #76]	; (800295c <HAL_GPIO_Init+0x2c0>)
 8002910:	4013      	ands	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01f      	beq.n	8002960 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002920:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_GPIO_Init+0x2c0>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	490d      	ldr	r1, [pc, #52]	; (800295c <HAL_GPIO_Init+0x2c0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
 800292c:	e01f      	b.n	800296e <HAL_GPIO_Init+0x2d2>
 800292e:	bf00      	nop
 8002930:	10320000 	.word	0x10320000
 8002934:	10310000 	.word	0x10310000
 8002938:	10220000 	.word	0x10220000
 800293c:	10210000 	.word	0x10210000
 8002940:	10120000 	.word	0x10120000
 8002944:	10110000 	.word	0x10110000
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000
 8002950:	40010800 	.word	0x40010800
 8002954:	40010c00 	.word	0x40010c00
 8002958:	40011000 	.word	0x40011000
 800295c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_GPIO_Init+0x2f4>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	43db      	mvns	r3, r3
 8002968:	4909      	ldr	r1, [pc, #36]	; (8002990 <HAL_GPIO_Init+0x2f4>)
 800296a:	4013      	ands	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	3301      	adds	r3, #1
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	f47f ae96 	bne.w	80026b0 <HAL_GPIO_Init+0x14>
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	372c      	adds	r7, #44	; 0x2c
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e001      	b.n	80029b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	807b      	strh	r3, [r7, #2]
 80029ce:	4613      	mov	r3, r2
 80029d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d2:	787b      	ldrb	r3, [r7, #1]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029de:	e003      	b.n	80029e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	041a      	lsls	r2, r3, #16
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	611a      	str	r2, [r3, #16]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a04:	887a      	ldrh	r2, [r7, #2]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	041a      	lsls	r2, r3, #16
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	400b      	ands	r3, r1
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e272      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8087 	beq.w	8002b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a44:	4b92      	ldr	r3, [pc, #584]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d00c      	beq.n	8002a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a50:	4b8f      	ldr	r3, [pc, #572]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d112      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d10b      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6a:	4b89      	ldr	r3, [pc, #548]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d06c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x12c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d168      	bne.n	8002b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e24c      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x76>
 8002a8c:	4b80      	ldr	r3, [pc, #512]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7f      	ldr	r2, [pc, #508]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e02e      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x98>
 8002aa2:	4b7b      	ldr	r3, [pc, #492]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7a      	ldr	r2, [pc, #488]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a77      	ldr	r2, [pc, #476]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xbc>
 8002ac6:	4b72      	ldr	r3, [pc, #456]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a71      	ldr	r2, [pc, #452]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b6f      	ldr	r3, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6e      	ldr	r2, [pc, #440]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002ae0:	4b6b      	ldr	r3, [pc, #428]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6a      	ldr	r2, [pc, #424]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a67      	ldr	r2, [pc, #412]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff fc02 	bl	8002308 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff fbfe 	bl	8002308 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e200      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe4>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7ff fbee 	bl	8002308 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7ff fbea 	bl	8002308 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1ec      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x10c>
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d063      	beq.n	8002c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d11c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d116      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e1c0      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4939      	ldr	r1, [pc, #228]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	e03a      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fba3 	bl	8002308 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7ff fb9f 	bl	8002308 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e1a1      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4927      	ldr	r1, [pc, #156]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]
 8002bf8:	e015      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7ff fb82 	bl	8002308 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7ff fb7e 	bl	8002308 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e180      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d03a      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7ff fb62 	bl	8002308 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c48:	f7ff fb5e 	bl	8002308 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e160      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f000 face 	bl	8003208 <RCC_Delay>
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7ff fb48 	bl	8002308 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7a:	e00f      	b.n	8002c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7ff fb44 	bl	8002308 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e146      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	42420000 	.word	0x42420000
 8002c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e9      	bne.n	8002c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a6 	beq.w	8002e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b8b      	ldr	r3, [pc, #556]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a87      	ldr	r2, [pc, #540]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	61d3      	str	r3, [r2, #28]
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b82      	ldr	r3, [pc, #520]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b7f      	ldr	r3, [pc, #508]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7e      	ldr	r2, [pc, #504]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7ff fb05 	bl	8002308 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7ff fb01 	bl	8002308 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e103      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b75      	ldr	r3, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x312>
 8002d28:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a6e      	ldr	r2, [pc, #440]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	e02d      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x334>
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a69      	ldr	r2, [pc, #420]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6213      	str	r3, [r2, #32]
 8002d4a:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a66      	ldr	r2, [pc, #408]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	e01c      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x356>
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a60      	ldr	r2, [pc, #384]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	4b5e      	ldr	r3, [pc, #376]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a5d      	ldr	r2, [pc, #372]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6213      	str	r3, [r2, #32]
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a5a      	ldr	r2, [pc, #360]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	4b58      	ldr	r3, [pc, #352]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a57      	ldr	r2, [pc, #348]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7ff fab5 	bl	8002308 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7ff fab1 	bl	8002308 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0b1      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	4b4b      	ldr	r3, [pc, #300]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ee      	beq.n	8002da2 <HAL_RCC_OscConfig+0x37e>
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7ff fa9f 	bl	8002308 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7ff fa9b 	bl	8002308 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e09b      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ee      	bne.n	8002dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8087 	beq.w	8002f1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d061      	beq.n	8002edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d146      	bne.n	8002eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7ff fa6f 	bl	8002308 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7ff fa6b 	bl	8002308 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e06d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d108      	bne.n	8002e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4921      	ldr	r1, [pc, #132]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a19      	ldr	r1, [r3, #32]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	491b      	ldr	r1, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7ff fa3f 	bl	8002308 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7ff fa3b 	bl	8002308 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e03d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x46a>
 8002eac:	e035      	b.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7ff fa28 	bl	8002308 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7ff fa24 	bl	8002308 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e026      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x498>
 8002eda:	e01e      	b.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e019      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x500>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0d0      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d910      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 0207 	bic.w	r2, r3, #7
 8002f52:	4965      	ldr	r1, [pc, #404]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b63      	ldr	r3, [pc, #396]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0b8      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f84:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a58      	ldr	r2, [pc, #352]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	494d      	ldr	r1, [pc, #308]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d040      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d115      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07f      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e073      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e06b      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b39      	ldr	r3, [pc, #228]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4936      	ldr	r1, [pc, #216]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7ff f976 	bl	8002308 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7ff f972 	bl	8002308 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e053      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d210      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4922      	ldr	r1, [pc, #136]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e032      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4916      	ldr	r1, [pc, #88]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	490e      	ldr	r1, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b6:	f000 f821 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	490a      	ldr	r1, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1cc>)
 80030d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1d0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f8d4 	bl	8002284 <HAL_InitTick>

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	0800576c 	.word	0x0800576c
 80030f4:	20000030 	.word	0x20000030
 80030f8:	20000064 	.word	0x20000064

080030fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <HAL_RCC_GetSysClockFreq+0x94>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x30>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d003      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x36>
 800312a:	e027      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800312e:	613b      	str	r3, [r7, #16]
      break;
 8003130:	e027      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	0c9b      	lsrs	r3, r3, #18
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800313c:	5cd3      	ldrb	r3, [r2, r3]
 800313e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d010      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_RCC_GetSysClockFreq+0x94>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0c5b      	lsrs	r3, r3, #17
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	4a11      	ldr	r2, [pc, #68]	; (800319c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800315e:	fb03 f202 	mul.w	r2, r3, r2
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e004      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a0c      	ldr	r2, [pc, #48]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	613b      	str	r3, [r7, #16]
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	613b      	str	r3, [r7, #16]
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	693b      	ldr	r3, [r7, #16]
}
 8003184:	4618      	mov	r0, r3
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	007a1200 	.word	0x007a1200
 8003198:	08005784 	.word	0x08005784
 800319c:	08005794 	.word	0x08005794
 80031a0:	003d0900 	.word	0x003d0900

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b02      	ldr	r3, [pc, #8]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	20000030 	.word	0x20000030

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031bc:	f7ff fff2 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	0800577c 	.word	0x0800577c

080031e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e4:	f7ff ffde 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	0adb      	lsrs	r3, r3, #11
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4903      	ldr	r1, [pc, #12]	; (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	0800577c 	.word	0x0800577c

08003208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <RCC_Delay+0x34>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <RCC_Delay+0x38>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0a5b      	lsrs	r3, r3, #9
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003224:	bf00      	nop
  }
  while (Delay --);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	60fa      	str	r2, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f9      	bne.n	8003224 <RCC_Delay+0x1c>
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	20000030 	.word	0x20000030
 8003240:	10624dd3 	.word	0x10624dd3

08003244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e041      	b.n	80032da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe fc22 	bl	8001ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3304      	adds	r3, #4
 8003280:	4619      	mov	r1, r3
 8003282:	4610      	mov	r0, r2
 8003284:	f000 fc24 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d001      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e035      	b.n	8003368 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_TIM_Base_Start_IT+0x90>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x4e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d004      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x4e>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a12      	ldr	r2, [pc, #72]	; (8003378 <HAL_TIM_Base_Start_IT+0x94>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d111      	bne.n	8003356 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b06      	cmp	r3, #6
 8003342:	d010      	beq.n	8003366 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003354:	e007      	b.n	8003366 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0201 	orr.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400

0800337c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e041      	b.n	8003412 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f839 	bl	800341a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f000 fb88 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <HAL_TIM_PWM_Start+0x24>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	bf14      	ite	ne
 8003448:	2301      	movne	r3, #1
 800344a:	2300      	moveq	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	e022      	b.n	8003496 <HAL_TIM_PWM_Start+0x6a>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b04      	cmp	r3, #4
 8003454:	d109      	bne.n	800346a <HAL_TIM_PWM_Start+0x3e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b01      	cmp	r3, #1
 8003460:	bf14      	ite	ne
 8003462:	2301      	movne	r3, #1
 8003464:	2300      	moveq	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	e015      	b.n	8003496 <HAL_TIM_PWM_Start+0x6a>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d109      	bne.n	8003484 <HAL_TIM_PWM_Start+0x58>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	bf14      	ite	ne
 800347c:	2301      	movne	r3, #1
 800347e:	2300      	moveq	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e008      	b.n	8003496 <HAL_TIM_PWM_Start+0x6a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	bf14      	ite	ne
 8003490:	2301      	movne	r3, #1
 8003492:	2300      	moveq	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e059      	b.n	8003552 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_PWM_Start+0x82>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ac:	e013      	b.n	80034d6 <HAL_TIM_PWM_Start+0xaa>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d104      	bne.n	80034be <HAL_TIM_PWM_Start+0x92>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034bc:	e00b      	b.n	80034d6 <HAL_TIM_PWM_Start+0xaa>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d104      	bne.n	80034ce <HAL_TIM_PWM_Start+0xa2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034cc:	e003      	b.n	80034d6 <HAL_TIM_PWM_Start+0xaa>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2201      	movs	r2, #1
 80034dc:	6839      	ldr	r1, [r7, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fd6c 	bl	8003fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1c      	ldr	r2, [pc, #112]	; (800355c <HAL_TIM_PWM_Start+0x130>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d107      	bne.n	80034fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a16      	ldr	r2, [pc, #88]	; (800355c <HAL_TIM_PWM_Start+0x130>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_TIM_PWM_Start+0xf0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003510:	d004      	beq.n	800351c <HAL_TIM_PWM_Start+0xf0>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <HAL_TIM_PWM_Start+0x134>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d111      	bne.n	8003540 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b06      	cmp	r3, #6
 800352c:	d010      	beq.n	8003550 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	e007      	b.n	8003550 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40000400 	.word	0x40000400

08003564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d122      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0202 	mvn.w	r2, #2
 8003590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa76 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 80035ac:	e005      	b.n	80035ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa69 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fa78 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d122      	bne.n	8003614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d11b      	bne.n	8003614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0204 	mvn.w	r2, #4
 80035e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa4c 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa3f 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fa4e 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d122      	bne.n	8003668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b08      	cmp	r3, #8
 800362e:	d11b      	bne.n	8003668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0208 	mvn.w	r2, #8
 8003638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2204      	movs	r2, #4
 800363e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa22 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa15 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fa24 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	2b10      	cmp	r3, #16
 8003674:	d122      	bne.n	80036bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b10      	cmp	r3, #16
 8003682:	d11b      	bne.n	80036bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0210 	mvn.w	r2, #16
 800368c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2208      	movs	r2, #8
 8003692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f9f8 	bl	8003a98 <HAL_TIM_IC_CaptureCallback>
 80036a8:	e005      	b.n	80036b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f9eb 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f9fa 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0201 	mvn.w	r2, #1
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fd56 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d10e      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b80      	cmp	r3, #128	; 0x80
 8003702:	d107      	bne.n	8003714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fcd9 	bl	80040c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d10e      	bne.n	8003740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d107      	bne.n	8003740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f9be 	bl	8003abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b20      	cmp	r3, #32
 800374c:	d10e      	bne.n	800376c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b20      	cmp	r3, #32
 800375a:	d107      	bne.n	800376c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0220 	mvn.w	r2, #32
 8003764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fca4 	bl	80040b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800378e:	2302      	movs	r3, #2
 8003790:	e0ae      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	f200 809f 	bhi.w	80038e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080038e1 	.word	0x080038e1
 80037b0:	080038e1 	.word	0x080038e1
 80037b4:	080038e1 	.word	0x080038e1
 80037b8:	0800381d 	.word	0x0800381d
 80037bc:	080038e1 	.word	0x080038e1
 80037c0:	080038e1 	.word	0x080038e1
 80037c4:	080038e1 	.word	0x080038e1
 80037c8:	0800385f 	.word	0x0800385f
 80037cc:	080038e1 	.word	0x080038e1
 80037d0:	080038e1 	.word	0x080038e1
 80037d4:	080038e1 	.word	0x080038e1
 80037d8:	0800389f 	.word	0x0800389f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f9cc 	bl	8003b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0208 	orr.w	r2, r2, #8
 80037f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0204 	bic.w	r2, r2, #4
 8003806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6999      	ldr	r1, [r3, #24]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	619a      	str	r2, [r3, #24]
      break;
 800381a:	e064      	b.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fa12 	bl	8003c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6999      	ldr	r1, [r3, #24]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	021a      	lsls	r2, r3, #8
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	619a      	str	r2, [r3, #24]
      break;
 800385c:	e043      	b.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fa5b 	bl	8003d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0208 	orr.w	r2, r2, #8
 8003878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0204 	bic.w	r2, r2, #4
 8003888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69d9      	ldr	r1, [r3, #28]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	61da      	str	r2, [r3, #28]
      break;
 800389c:	e023      	b.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 faa5 	bl	8003df4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	021a      	lsls	r2, r3, #8
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	61da      	str	r2, [r3, #28]
      break;
 80038de:	e002      	b.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	75fb      	strb	r3, [r7, #23]
      break;
 80038e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIM_ConfigClockSource+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e0b4      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x186>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800393a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394c:	d03e      	beq.n	80039cc <HAL_TIM_ConfigClockSource+0xd4>
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003952:	f200 8087 	bhi.w	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	f000 8086 	beq.w	8003a6a <HAL_TIM_ConfigClockSource+0x172>
 800395e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003962:	d87f      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b70      	cmp	r3, #112	; 0x70
 8003966:	d01a      	beq.n	800399e <HAL_TIM_ConfigClockSource+0xa6>
 8003968:	2b70      	cmp	r3, #112	; 0x70
 800396a:	d87b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b60      	cmp	r3, #96	; 0x60
 800396e:	d050      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x11a>
 8003970:	2b60      	cmp	r3, #96	; 0x60
 8003972:	d877      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b50      	cmp	r3, #80	; 0x50
 8003976:	d03c      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003978:	2b50      	cmp	r3, #80	; 0x50
 800397a:	d873      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d058      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x13a>
 8003980:	2b40      	cmp	r3, #64	; 0x40
 8003982:	d86f      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b30      	cmp	r3, #48	; 0x30
 8003986:	d064      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	2b30      	cmp	r3, #48	; 0x30
 800398a:	d86b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800398c:	2b20      	cmp	r3, #32
 800398e:	d060      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d867      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05c      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003998:	2b10      	cmp	r3, #16
 800399a:	d05a      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 800399c:	e062      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039ae:	f000 fae6 	bl	8003f7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	609a      	str	r2, [r3, #8]
      break;
 80039ca:	e04f      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039dc:	f000 facf 	bl	8003f7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ee:	609a      	str	r2, [r3, #8]
      break;
 80039f0:	e03c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	461a      	mov	r2, r3
 8003a00:	f000 fa46 	bl	8003e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2150      	movs	r1, #80	; 0x50
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fa9d 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003a10:	e02c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f000 fa64 	bl	8003eec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2160      	movs	r1, #96	; 0x60
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fa8d 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003a30:	e01c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 fa26 	bl	8003e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2140      	movs	r1, #64	; 0x40
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fa7d 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003a50:	e00c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f000 fa74 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003a62:	e003      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
      break;
 8003a68:	e000      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
	...

08003ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a25      	ldr	r2, [pc, #148]	; (8003b78 <TIM_Base_SetConfig+0xa8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d007      	beq.n	8003af8 <TIM_Base_SetConfig+0x28>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d003      	beq.n	8003af8 <TIM_Base_SetConfig+0x28>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <TIM_Base_SetConfig+0xac>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d108      	bne.n	8003b0a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <TIM_Base_SetConfig+0xa8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <TIM_Base_SetConfig+0x52>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b18:	d003      	beq.n	8003b22 <TIM_Base_SetConfig+0x52>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a17      	ldr	r2, [pc, #92]	; (8003b7c <TIM_Base_SetConfig+0xac>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d108      	bne.n	8003b34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <TIM_Base_SetConfig+0xa8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d103      	bne.n	8003b68 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400

08003b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 0201 	bic.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 0302 	bic.w	r3, r3, #2
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <TIM_OC1_SetConfig+0xc8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10c      	bne.n	8003bf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0308 	bic.w	r3, r3, #8
 8003be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <TIM_OC1_SetConfig+0xc8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d111      	bne.n	8003c22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00

08003c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f023 0210 	bic.w	r2, r3, #16
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0320 	bic.w	r3, r3, #32
 8003c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <TIM_OC2_SetConfig+0xd0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10d      	bne.n	8003cc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <TIM_OC2_SetConfig+0xd0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d113      	bne.n	8003cf8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	40012c00 	.word	0x40012c00

08003d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <TIM_OC3_SetConfig+0xd0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10d      	bne.n	8003d9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <TIM_OC3_SetConfig+0xd0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d113      	bne.n	8003dca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	621a      	str	r2, [r3, #32]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40012c00 	.word	0x40012c00

08003df4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	031b      	lsls	r3, r3, #12
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a0f      	ldr	r2, [pc, #60]	; (8003e8c <TIM_OC4_SetConfig+0x98>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d109      	bne.n	8003e68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	019b      	lsls	r3, r3, #6
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	40012c00 	.word	0x40012c00

08003e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0201 	bic.w	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f023 030a 	bic.w	r3, r3, #10
 8003ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0210 	bic.w	r2, r3, #16
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	031b      	lsls	r3, r3, #12
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	621a      	str	r2, [r3, #32]
}
 8003f40:	bf00      	nop
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f043 0307 	orr.w	r3, r3, #7
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b087      	sub	sp, #28
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	021a      	lsls	r2, r3, #8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	609a      	str	r2, [r3, #8]
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	2201      	movs	r2, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr

08004004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004018:	2302      	movs	r3, #2
 800401a:	e041      	b.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a14      	ldr	r2, [pc, #80]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004068:	d004      	beq.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10c      	bne.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	4313      	orrs	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40000400 	.word	0x40000400

080040b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e042      	b.n	8004170 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fd fd4a 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2224      	movs	r2, #36	; 0x24
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800411a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fdc5 	bl	8004cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	4613      	mov	r3, r2
 8004186:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b20      	cmp	r3, #32
 8004196:	d16d      	bne.n	8004274 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_UART_Transmit+0x2c>
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e066      	b.n	8004276 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2221      	movs	r2, #33	; 0x21
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041b6:	f7fe f8a7 	bl	8002308 <HAL_GetTick>
 80041ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	88fa      	ldrh	r2, [r7, #6]
 80041c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d0:	d108      	bne.n	80041e4 <HAL_UART_Transmit+0x6c>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d104      	bne.n	80041e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	e003      	b.n	80041ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041ec:	e02a      	b.n	8004244 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fb14 	bl	8004826 <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e036      	b.n	8004276 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10b      	bne.n	8004226 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800421c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3302      	adds	r3, #2
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e007      	b.n	8004236 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	3301      	adds	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1cf      	bne.n	80041ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2140      	movs	r1, #64	; 0x40
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fae4 	bl	8004826 <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e006      	b.n	8004276 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	4613      	mov	r3, r2
 800428a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	d112      	bne.n	80042be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Receive_IT+0x26>
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e00b      	b.n	80042c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	461a      	mov	r2, r3
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fb24 	bl	8004902 <UART_Start_Receive_IT>
 80042ba:	4603      	mov	r3, r0
 80042bc:	e000      	b.n	80042c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042be:	2302      	movs	r3, #2
  }
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b0ba      	sub	sp, #232	; 0xe8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_UART_IRQHandler+0x66>
 800431a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fc01 	bl	8004b2e <UART_Receive_IT>
      return;
 800432c:	e25b      	b.n	80047e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800432e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80de 	beq.w	80044f4 <HAL_UART_IRQHandler+0x22c>
 8004338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004348:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80d1 	beq.w	80044f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HAL_UART_IRQHandler+0xae>
 800435e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	f043 0201 	orr.w	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_UART_IRQHandler+0xd2>
 8004382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f043 0202 	orr.w	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_UART_IRQHandler+0xf6>
 80043a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	f043 0204 	orr.w	r2, r3, #4
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d011      	beq.n	80043ee <HAL_UART_IRQHandler+0x126>
 80043ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d105      	bne.n	80043e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f043 0208 	orr.w	r2, r3, #8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 81f2 	beq.w	80047dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_UART_IRQHandler+0x14e>
 8004404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fb8c 	bl	8004b2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <HAL_UART_IRQHandler+0x17a>
 800443a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800443e:	2b00      	cmp	r3, #0
 8004440:	d04f      	beq.n	80044e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa96 	bl	8004974 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d041      	beq.n	80044da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3314      	adds	r3, #20
 800445c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800446c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3314      	adds	r3, #20
 800447e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004482:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800448e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800449a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1d9      	bne.n	8004456 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d013      	beq.n	80044d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	4a7e      	ldr	r2, [pc, #504]	; (80046a8 <HAL_UART_IRQHandler+0x3e0>)
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe f878 	bl	80025ac <HAL_DMA_Abort_IT>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d016      	beq.n	80044f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044cc:	4610      	mov	r0, r2
 80044ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	e00e      	b.n	80044f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f993 	bl	80047fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	e00a      	b.n	80044f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f98f 	bl	80047fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e0:	e006      	b.n	80044f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f98b 	bl	80047fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80044ee:	e175      	b.n	80047dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	bf00      	nop
    return;
 80044f2:	e173      	b.n	80047dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	f040 814f 	bne.w	800479c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8148 	beq.w	800479c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8141 	beq.w	800479c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80b6 	beq.w	80046ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800454c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8145 	beq.w	80047e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800455a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800455e:	429a      	cmp	r2, r3
 8004560:	f080 813e 	bcs.w	80047e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800456a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b20      	cmp	r3, #32
 8004574:	f000 8088 	beq.w	8004688 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800458e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004596:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1d9      	bne.n	8004578 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e1      	bne.n	80045c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3314      	adds	r3, #20
 8004606:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3314      	adds	r3, #20
 8004620:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004624:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004626:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800462a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e3      	bne.n	8004600 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004658:	f023 0310 	bic.w	r3, r3, #16
 800465c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800466a:	65ba      	str	r2, [r7, #88]	; 0x58
 800466c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e3      	bne.n	8004646 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd ff57 	bl	8002536 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004696:	b29b      	uxth	r3, r3
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	b29b      	uxth	r3, r3
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8b6 	bl	8004810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046a4:	e09c      	b.n	80047e0 <HAL_UART_IRQHandler+0x518>
 80046a6:	bf00      	nop
 80046a8:	08004a39 	.word	0x08004a39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 808e 	beq.w	80047e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8089 	beq.w	80047e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	330c      	adds	r3, #12
 80046f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046f6:	647a      	str	r2, [r7, #68]	; 0x44
 80046f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e3      	bne.n	80046d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	623b      	str	r3, [r7, #32]
   return(result);
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3314      	adds	r3, #20
 800472a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800472e:	633a      	str	r2, [r7, #48]	; 0x30
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e3      	bne.n	800470a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0310 	bic.w	r3, r3, #16
 8004766:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004774:	61fa      	str	r2, [r7, #28]
 8004776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	69b9      	ldr	r1, [r7, #24]
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	617b      	str	r3, [r7, #20]
   return(result);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e3      	bne.n	8004750 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800478e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004792:	4619      	mov	r1, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f83b 	bl	8004810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800479a:	e023      	b.n	80047e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800479c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <HAL_UART_IRQHandler+0x4f4>
 80047a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f953 	bl	8004a60 <UART_Transmit_IT>
    return;
 80047ba:	e014      	b.n	80047e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00e      	beq.n	80047e6 <HAL_UART_IRQHandler+0x51e>
 80047c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f992 	bl	8004afe <UART_EndTransmit_IT>
    return;
 80047da:	e004      	b.n	80047e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80047dc:	bf00      	nop
 80047de:	e002      	b.n	80047e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80047e4:	bf00      	nop
  }
}
 80047e6:	37e8      	adds	r7, #232	; 0xe8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b090      	sub	sp, #64	; 0x40
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	4613      	mov	r3, r2
 8004834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004836:	e050      	b.n	80048da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d04c      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <UART_WaitOnFlagUntilTimeout+0x30>
 8004846:	f7fd fd5f 	bl	8002308 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004852:	429a      	cmp	r2, r3
 8004854:	d241      	bcs.n	80048da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800486c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004876:	637a      	str	r2, [r7, #52]	; 0x34
 8004878:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800487c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e5      	bne.n	8004856 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	613b      	str	r3, [r7, #16]
   return(result);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3314      	adds	r3, #20
 80048a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048aa:	623a      	str	r2, [r7, #32]
 80048ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	69f9      	ldr	r1, [r7, #28]
 80048b0:	6a3a      	ldr	r2, [r7, #32]
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e5      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e00f      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4013      	ands	r3, r2
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d09f      	beq.n	8004838 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3740      	adds	r7, #64	; 0x40
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	4613      	mov	r3, r2
 800490e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	88fa      	ldrh	r2, [r7, #6]
 800491a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2222      	movs	r2, #34	; 0x22
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004946:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0220 	orr.w	r2, r2, #32
 8004966:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004974:	b480      	push	{r7}
 8004976:	b095      	sub	sp, #84	; 0x54
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800499c:	643a      	str	r2, [r7, #64]	; 0x40
 800499e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e5      	bne.n	800497c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3314      	adds	r3, #20
 80049b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3314      	adds	r3, #20
 80049ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e5      	bne.n	80049b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d119      	bne.n	8004a20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f023 0310 	bic.w	r3, r3, #16
 8004a02:	647b      	str	r3, [r7, #68]	; 0x44
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a0c:	61ba      	str	r2, [r7, #24]
 8004a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6979      	ldr	r1, [r7, #20]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e5      	bne.n	80049ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a2e:	bf00      	nop
 8004a30:	3754      	adds	r7, #84	; 0x54
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f7ff fed3 	bl	80047fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a58:	bf00      	nop
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b21      	cmp	r3, #33	; 0x21
 8004a72:	d13e      	bne.n	8004af2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7c:	d114      	bne.n	8004aa8 <UART_Transmit_IT+0x48>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d110      	bne.n	8004aa8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	1c9a      	adds	r2, r3, #2
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	621a      	str	r2, [r3, #32]
 8004aa6:	e008      	b.n	8004aba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	1c59      	adds	r1, r3, #1
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6211      	str	r1, [r2, #32]
 8004ab2:	781a      	ldrb	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10f      	bne.n	8004aee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004adc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e000      	b.n	8004af4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
  }
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fe64 	bl	80047ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b08c      	sub	sp, #48	; 0x30
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b22      	cmp	r3, #34	; 0x22
 8004b40:	f040 80ae 	bne.w	8004ca0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4c:	d117      	bne.n	8004b7e <UART_Receive_IT+0x50>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d113      	bne.n	8004b7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	1c9a      	adds	r2, r3, #2
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b7c:	e026      	b.n	8004bcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b90:	d007      	beq.n	8004ba2 <UART_Receive_IT+0x74>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <UART_Receive_IT+0x82>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e008      	b.n	8004bc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d15d      	bne.n	8004c9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0220 	bic.w	r2, r2, #32
 8004bee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d135      	bne.n	8004c92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4c:	623a      	str	r2, [r7, #32]
 8004c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	69f9      	ldr	r1, [r7, #28]
 8004c52:	6a3a      	ldr	r2, [r7, #32]
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e5      	bne.n	8004c2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d10a      	bne.n	8004c84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff fdc0 	bl	8004810 <HAL_UARTEx_RxEventCallback>
 8004c90:	e002      	b.n	8004c98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc f874 	bl	8000d80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e002      	b.n	8004ca2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e000      	b.n	8004ca2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
  }
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3730      	adds	r7, #48	; 0x30
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ce6:	f023 030c 	bic.w	r3, r3, #12
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a2c      	ldr	r2, [pc, #176]	; (8004dc0 <UART_SetConfig+0x114>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d103      	bne.n	8004d1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d14:	f7fe fa64 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	e002      	b.n	8004d22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d1c:	f7fe fa4c 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8004d20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	009a      	lsls	r2, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d38:	4a22      	ldr	r2, [pc, #136]	; (8004dc4 <UART_SetConfig+0x118>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	0119      	lsls	r1, r3, #4
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009a      	lsls	r2, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <UART_SetConfig+0x118>)
 8004d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	2064      	movs	r0, #100	; 0x64
 8004d62:	fb00 f303 	mul.w	r3, r0, r3
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	3332      	adds	r3, #50	; 0x32
 8004d6c:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <UART_SetConfig+0x118>)
 8004d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d78:	4419      	add	r1, r3
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009a      	lsls	r2, r3, #2
 8004d84:	441a      	add	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d90:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <UART_SetConfig+0x118>)
 8004d92:	fba3 0302 	umull	r0, r3, r3, r2
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2064      	movs	r0, #100	; 0x64
 8004d9a:	fb00 f303 	mul.w	r3, r0, r3
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	3332      	adds	r3, #50	; 0x32
 8004da4:	4a07      	ldr	r2, [pc, #28]	; (8004dc4 <UART_SetConfig+0x118>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	f003 020f 	and.w	r2, r3, #15
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	440a      	add	r2, r1
 8004db6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004db8:	bf00      	nop
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40013800 	.word	0x40013800
 8004dc4:	51eb851f 	.word	0x51eb851f

08004dc8 <siprintf>:
 8004dc8:	b40e      	push	{r1, r2, r3}
 8004dca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dce:	b500      	push	{lr}
 8004dd0:	b09c      	sub	sp, #112	; 0x70
 8004dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004dd4:	9002      	str	r0, [sp, #8]
 8004dd6:	9006      	str	r0, [sp, #24]
 8004dd8:	9107      	str	r1, [sp, #28]
 8004dda:	9104      	str	r1, [sp, #16]
 8004ddc:	4808      	ldr	r0, [pc, #32]	; (8004e00 <siprintf+0x38>)
 8004dde:	4909      	ldr	r1, [pc, #36]	; (8004e04 <siprintf+0x3c>)
 8004de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de4:	9105      	str	r1, [sp, #20]
 8004de6:	6800      	ldr	r0, [r0, #0]
 8004de8:	a902      	add	r1, sp, #8
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	f000 f98e 	bl	800510c <_svfiprintf_r>
 8004df0:	2200      	movs	r2, #0
 8004df2:	9b02      	ldr	r3, [sp, #8]
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	b01c      	add	sp, #112	; 0x70
 8004df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dfc:	b003      	add	sp, #12
 8004dfe:	4770      	bx	lr
 8004e00:	200000b8 	.word	0x200000b8
 8004e04:	ffff0208 	.word	0xffff0208

08004e08 <memset>:
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4402      	add	r2, r0
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <memset+0xa>
 8004e10:	4770      	bx	lr
 8004e12:	f803 1b01 	strb.w	r1, [r3], #1
 8004e16:	e7f9      	b.n	8004e0c <memset+0x4>

08004e18 <__errno>:
 8004e18:	4b01      	ldr	r3, [pc, #4]	; (8004e20 <__errno+0x8>)
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	200000b8 	.word	0x200000b8

08004e24 <__libc_init_array>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	2600      	movs	r6, #0
 8004e28:	4d0c      	ldr	r5, [pc, #48]	; (8004e5c <__libc_init_array+0x38>)
 8004e2a:	4c0d      	ldr	r4, [pc, #52]	; (8004e60 <__libc_init_array+0x3c>)
 8004e2c:	1b64      	subs	r4, r4, r5
 8004e2e:	10a4      	asrs	r4, r4, #2
 8004e30:	42a6      	cmp	r6, r4
 8004e32:	d109      	bne.n	8004e48 <__libc_init_array+0x24>
 8004e34:	f000 fc7a 	bl	800572c <_init>
 8004e38:	2600      	movs	r6, #0
 8004e3a:	4d0a      	ldr	r5, [pc, #40]	; (8004e64 <__libc_init_array+0x40>)
 8004e3c:	4c0a      	ldr	r4, [pc, #40]	; (8004e68 <__libc_init_array+0x44>)
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	10a4      	asrs	r4, r4, #2
 8004e42:	42a6      	cmp	r6, r4
 8004e44:	d105      	bne.n	8004e52 <__libc_init_array+0x2e>
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4c:	4798      	blx	r3
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7ee      	b.n	8004e30 <__libc_init_array+0xc>
 8004e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e56:	4798      	blx	r3
 8004e58:	3601      	adds	r6, #1
 8004e5a:	e7f2      	b.n	8004e42 <__libc_init_array+0x1e>
 8004e5c:	080057cc 	.word	0x080057cc
 8004e60:	080057cc 	.word	0x080057cc
 8004e64:	080057cc 	.word	0x080057cc
 8004e68:	080057d0 	.word	0x080057d0

08004e6c <__retarget_lock_acquire_recursive>:
 8004e6c:	4770      	bx	lr

08004e6e <__retarget_lock_release_recursive>:
 8004e6e:	4770      	bx	lr

08004e70 <_free_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4605      	mov	r5, r0
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d040      	beq.n	8004efa <_free_r+0x8a>
 8004e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7c:	1f0c      	subs	r4, r1, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfb8      	it	lt
 8004e82:	18e4      	addlt	r4, r4, r3
 8004e84:	f000 f8dc 	bl	8005040 <__malloc_lock>
 8004e88:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <_free_r+0x8c>)
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	b933      	cbnz	r3, 8004e9c <_free_r+0x2c>
 8004e8e:	6063      	str	r3, [r4, #4]
 8004e90:	6014      	str	r4, [r2, #0]
 8004e92:	4628      	mov	r0, r5
 8004e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e98:	f000 b8d8 	b.w	800504c <__malloc_unlock>
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	d908      	bls.n	8004eb2 <_free_r+0x42>
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	1821      	adds	r1, r4, r0
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	bf01      	itttt	eq
 8004ea8:	6819      	ldreq	r1, [r3, #0]
 8004eaa:	685b      	ldreq	r3, [r3, #4]
 8004eac:	1809      	addeq	r1, r1, r0
 8004eae:	6021      	streq	r1, [r4, #0]
 8004eb0:	e7ed      	b.n	8004e8e <_free_r+0x1e>
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b10b      	cbz	r3, 8004ebc <_free_r+0x4c>
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d9fa      	bls.n	8004eb2 <_free_r+0x42>
 8004ebc:	6811      	ldr	r1, [r2, #0]
 8004ebe:	1850      	adds	r0, r2, r1
 8004ec0:	42a0      	cmp	r0, r4
 8004ec2:	d10b      	bne.n	8004edc <_free_r+0x6c>
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	4401      	add	r1, r0
 8004ec8:	1850      	adds	r0, r2, r1
 8004eca:	4283      	cmp	r3, r0
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	d1e0      	bne.n	8004e92 <_free_r+0x22>
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4408      	add	r0, r1
 8004ed6:	6010      	str	r0, [r2, #0]
 8004ed8:	6053      	str	r3, [r2, #4]
 8004eda:	e7da      	b.n	8004e92 <_free_r+0x22>
 8004edc:	d902      	bls.n	8004ee4 <_free_r+0x74>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	e7d6      	b.n	8004e92 <_free_r+0x22>
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	1821      	adds	r1, r4, r0
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	bf01      	itttt	eq
 8004eec:	6819      	ldreq	r1, [r3, #0]
 8004eee:	685b      	ldreq	r3, [r3, #4]
 8004ef0:	1809      	addeq	r1, r1, r0
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	6054      	str	r4, [r2, #4]
 8004ef8:	e7cb      	b.n	8004e92 <_free_r+0x22>
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	200004e0 	.word	0x200004e0

08004f00 <sbrk_aligned>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4e0e      	ldr	r6, [pc, #56]	; (8004f3c <sbrk_aligned+0x3c>)
 8004f04:	460c      	mov	r4, r1
 8004f06:	6831      	ldr	r1, [r6, #0]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	b911      	cbnz	r1, 8004f12 <sbrk_aligned+0x12>
 8004f0c:	f000 fbaa 	bl	8005664 <_sbrk_r>
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 fba5 	bl	8005664 <_sbrk_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d00a      	beq.n	8004f34 <sbrk_aligned+0x34>
 8004f1e:	1cc4      	adds	r4, r0, #3
 8004f20:	f024 0403 	bic.w	r4, r4, #3
 8004f24:	42a0      	cmp	r0, r4
 8004f26:	d007      	beq.n	8004f38 <sbrk_aligned+0x38>
 8004f28:	1a21      	subs	r1, r4, r0
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f000 fb9a 	bl	8005664 <_sbrk_r>
 8004f30:	3001      	adds	r0, #1
 8004f32:	d101      	bne.n	8004f38 <sbrk_aligned+0x38>
 8004f34:	f04f 34ff 	mov.w	r4, #4294967295
 8004f38:	4620      	mov	r0, r4
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	200004e4 	.word	0x200004e4

08004f40 <_malloc_r>:
 8004f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f44:	1ccd      	adds	r5, r1, #3
 8004f46:	f025 0503 	bic.w	r5, r5, #3
 8004f4a:	3508      	adds	r5, #8
 8004f4c:	2d0c      	cmp	r5, #12
 8004f4e:	bf38      	it	cc
 8004f50:	250c      	movcc	r5, #12
 8004f52:	2d00      	cmp	r5, #0
 8004f54:	4607      	mov	r7, r0
 8004f56:	db01      	blt.n	8004f5c <_malloc_r+0x1c>
 8004f58:	42a9      	cmp	r1, r5
 8004f5a:	d905      	bls.n	8004f68 <_malloc_r+0x28>
 8004f5c:	230c      	movs	r3, #12
 8004f5e:	2600      	movs	r6, #0
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	4630      	mov	r0, r6
 8004f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800503c <_malloc_r+0xfc>
 8004f6c:	f000 f868 	bl	8005040 <__malloc_lock>
 8004f70:	f8d8 3000 	ldr.w	r3, [r8]
 8004f74:	461c      	mov	r4, r3
 8004f76:	bb5c      	cbnz	r4, 8004fd0 <_malloc_r+0x90>
 8004f78:	4629      	mov	r1, r5
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	f7ff ffc0 	bl	8004f00 <sbrk_aligned>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	4604      	mov	r4, r0
 8004f84:	d155      	bne.n	8005032 <_malloc_r+0xf2>
 8004f86:	f8d8 4000 	ldr.w	r4, [r8]
 8004f8a:	4626      	mov	r6, r4
 8004f8c:	2e00      	cmp	r6, #0
 8004f8e:	d145      	bne.n	800501c <_malloc_r+0xdc>
 8004f90:	2c00      	cmp	r4, #0
 8004f92:	d048      	beq.n	8005026 <_malloc_r+0xe6>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	4631      	mov	r1, r6
 8004f98:	4638      	mov	r0, r7
 8004f9a:	eb04 0903 	add.w	r9, r4, r3
 8004f9e:	f000 fb61 	bl	8005664 <_sbrk_r>
 8004fa2:	4581      	cmp	r9, r0
 8004fa4:	d13f      	bne.n	8005026 <_malloc_r+0xe6>
 8004fa6:	6821      	ldr	r1, [r4, #0]
 8004fa8:	4638      	mov	r0, r7
 8004faa:	1a6d      	subs	r5, r5, r1
 8004fac:	4629      	mov	r1, r5
 8004fae:	f7ff ffa7 	bl	8004f00 <sbrk_aligned>
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d037      	beq.n	8005026 <_malloc_r+0xe6>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	442b      	add	r3, r5
 8004fba:	6023      	str	r3, [r4, #0]
 8004fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d038      	beq.n	8005036 <_malloc_r+0xf6>
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	42a2      	cmp	r2, r4
 8004fc8:	d12b      	bne.n	8005022 <_malloc_r+0xe2>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	e00f      	b.n	8004ff0 <_malloc_r+0xb0>
 8004fd0:	6822      	ldr	r2, [r4, #0]
 8004fd2:	1b52      	subs	r2, r2, r5
 8004fd4:	d41f      	bmi.n	8005016 <_malloc_r+0xd6>
 8004fd6:	2a0b      	cmp	r2, #11
 8004fd8:	d917      	bls.n	800500a <_malloc_r+0xca>
 8004fda:	1961      	adds	r1, r4, r5
 8004fdc:	42a3      	cmp	r3, r4
 8004fde:	6025      	str	r5, [r4, #0]
 8004fe0:	bf18      	it	ne
 8004fe2:	6059      	strne	r1, [r3, #4]
 8004fe4:	6863      	ldr	r3, [r4, #4]
 8004fe6:	bf08      	it	eq
 8004fe8:	f8c8 1000 	streq.w	r1, [r8]
 8004fec:	5162      	str	r2, [r4, r5]
 8004fee:	604b      	str	r3, [r1, #4]
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f104 060b 	add.w	r6, r4, #11
 8004ff6:	f000 f829 	bl	800504c <__malloc_unlock>
 8004ffa:	f026 0607 	bic.w	r6, r6, #7
 8004ffe:	1d23      	adds	r3, r4, #4
 8005000:	1af2      	subs	r2, r6, r3
 8005002:	d0ae      	beq.n	8004f62 <_malloc_r+0x22>
 8005004:	1b9b      	subs	r3, r3, r6
 8005006:	50a3      	str	r3, [r4, r2]
 8005008:	e7ab      	b.n	8004f62 <_malloc_r+0x22>
 800500a:	42a3      	cmp	r3, r4
 800500c:	6862      	ldr	r2, [r4, #4]
 800500e:	d1dd      	bne.n	8004fcc <_malloc_r+0x8c>
 8005010:	f8c8 2000 	str.w	r2, [r8]
 8005014:	e7ec      	b.n	8004ff0 <_malloc_r+0xb0>
 8005016:	4623      	mov	r3, r4
 8005018:	6864      	ldr	r4, [r4, #4]
 800501a:	e7ac      	b.n	8004f76 <_malloc_r+0x36>
 800501c:	4634      	mov	r4, r6
 800501e:	6876      	ldr	r6, [r6, #4]
 8005020:	e7b4      	b.n	8004f8c <_malloc_r+0x4c>
 8005022:	4613      	mov	r3, r2
 8005024:	e7cc      	b.n	8004fc0 <_malloc_r+0x80>
 8005026:	230c      	movs	r3, #12
 8005028:	4638      	mov	r0, r7
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	f000 f80e 	bl	800504c <__malloc_unlock>
 8005030:	e797      	b.n	8004f62 <_malloc_r+0x22>
 8005032:	6025      	str	r5, [r4, #0]
 8005034:	e7dc      	b.n	8004ff0 <_malloc_r+0xb0>
 8005036:	605b      	str	r3, [r3, #4]
 8005038:	deff      	udf	#255	; 0xff
 800503a:	bf00      	nop
 800503c:	200004e0 	.word	0x200004e0

08005040 <__malloc_lock>:
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <__malloc_lock+0x8>)
 8005042:	f7ff bf13 	b.w	8004e6c <__retarget_lock_acquire_recursive>
 8005046:	bf00      	nop
 8005048:	200004dc 	.word	0x200004dc

0800504c <__malloc_unlock>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__malloc_unlock+0x8>)
 800504e:	f7ff bf0e 	b.w	8004e6e <__retarget_lock_release_recursive>
 8005052:	bf00      	nop
 8005054:	200004dc 	.word	0x200004dc

08005058 <__ssputs_r>:
 8005058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	461f      	mov	r7, r3
 800505e:	688e      	ldr	r6, [r1, #8]
 8005060:	4682      	mov	sl, r0
 8005062:	42be      	cmp	r6, r7
 8005064:	460c      	mov	r4, r1
 8005066:	4690      	mov	r8, r2
 8005068:	680b      	ldr	r3, [r1, #0]
 800506a:	d82c      	bhi.n	80050c6 <__ssputs_r+0x6e>
 800506c:	898a      	ldrh	r2, [r1, #12]
 800506e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005072:	d026      	beq.n	80050c2 <__ssputs_r+0x6a>
 8005074:	6965      	ldr	r5, [r4, #20]
 8005076:	6909      	ldr	r1, [r1, #16]
 8005078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800507c:	eba3 0901 	sub.w	r9, r3, r1
 8005080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005084:	1c7b      	adds	r3, r7, #1
 8005086:	444b      	add	r3, r9
 8005088:	106d      	asrs	r5, r5, #1
 800508a:	429d      	cmp	r5, r3
 800508c:	bf38      	it	cc
 800508e:	461d      	movcc	r5, r3
 8005090:	0553      	lsls	r3, r2, #21
 8005092:	d527      	bpl.n	80050e4 <__ssputs_r+0x8c>
 8005094:	4629      	mov	r1, r5
 8005096:	f7ff ff53 	bl	8004f40 <_malloc_r>
 800509a:	4606      	mov	r6, r0
 800509c:	b360      	cbz	r0, 80050f8 <__ssputs_r+0xa0>
 800509e:	464a      	mov	r2, r9
 80050a0:	6921      	ldr	r1, [r4, #16]
 80050a2:	f000 fafd 	bl	80056a0 <memcpy>
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b0:	81a3      	strh	r3, [r4, #12]
 80050b2:	6126      	str	r6, [r4, #16]
 80050b4:	444e      	add	r6, r9
 80050b6:	6026      	str	r6, [r4, #0]
 80050b8:	463e      	mov	r6, r7
 80050ba:	6165      	str	r5, [r4, #20]
 80050bc:	eba5 0509 	sub.w	r5, r5, r9
 80050c0:	60a5      	str	r5, [r4, #8]
 80050c2:	42be      	cmp	r6, r7
 80050c4:	d900      	bls.n	80050c8 <__ssputs_r+0x70>
 80050c6:	463e      	mov	r6, r7
 80050c8:	4632      	mov	r2, r6
 80050ca:	4641      	mov	r1, r8
 80050cc:	6820      	ldr	r0, [r4, #0]
 80050ce:	f000 faaf 	bl	8005630 <memmove>
 80050d2:	2000      	movs	r0, #0
 80050d4:	68a3      	ldr	r3, [r4, #8]
 80050d6:	1b9b      	subs	r3, r3, r6
 80050d8:	60a3      	str	r3, [r4, #8]
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	4433      	add	r3, r6
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e4:	462a      	mov	r2, r5
 80050e6:	f000 fae9 	bl	80056bc <_realloc_r>
 80050ea:	4606      	mov	r6, r0
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1e0      	bne.n	80050b2 <__ssputs_r+0x5a>
 80050f0:	4650      	mov	r0, sl
 80050f2:	6921      	ldr	r1, [r4, #16]
 80050f4:	f7ff febc 	bl	8004e70 <_free_r>
 80050f8:	230c      	movs	r3, #12
 80050fa:	f8ca 3000 	str.w	r3, [sl]
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	e7e9      	b.n	80050e0 <__ssputs_r+0x88>

0800510c <_svfiprintf_r>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	4698      	mov	r8, r3
 8005112:	898b      	ldrh	r3, [r1, #12]
 8005114:	4607      	mov	r7, r0
 8005116:	061b      	lsls	r3, r3, #24
 8005118:	460d      	mov	r5, r1
 800511a:	4614      	mov	r4, r2
 800511c:	b09d      	sub	sp, #116	; 0x74
 800511e:	d50e      	bpl.n	800513e <_svfiprintf_r+0x32>
 8005120:	690b      	ldr	r3, [r1, #16]
 8005122:	b963      	cbnz	r3, 800513e <_svfiprintf_r+0x32>
 8005124:	2140      	movs	r1, #64	; 0x40
 8005126:	f7ff ff0b 	bl	8004f40 <_malloc_r>
 800512a:	6028      	str	r0, [r5, #0]
 800512c:	6128      	str	r0, [r5, #16]
 800512e:	b920      	cbnz	r0, 800513a <_svfiprintf_r+0x2e>
 8005130:	230c      	movs	r3, #12
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	e0d0      	b.n	80052dc <_svfiprintf_r+0x1d0>
 800513a:	2340      	movs	r3, #64	; 0x40
 800513c:	616b      	str	r3, [r5, #20]
 800513e:	2300      	movs	r3, #0
 8005140:	9309      	str	r3, [sp, #36]	; 0x24
 8005142:	2320      	movs	r3, #32
 8005144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005148:	2330      	movs	r3, #48	; 0x30
 800514a:	f04f 0901 	mov.w	r9, #1
 800514e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005152:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80052f4 <_svfiprintf_r+0x1e8>
 8005156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800515a:	4623      	mov	r3, r4
 800515c:	469a      	mov	sl, r3
 800515e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005162:	b10a      	cbz	r2, 8005168 <_svfiprintf_r+0x5c>
 8005164:	2a25      	cmp	r2, #37	; 0x25
 8005166:	d1f9      	bne.n	800515c <_svfiprintf_r+0x50>
 8005168:	ebba 0b04 	subs.w	fp, sl, r4
 800516c:	d00b      	beq.n	8005186 <_svfiprintf_r+0x7a>
 800516e:	465b      	mov	r3, fp
 8005170:	4622      	mov	r2, r4
 8005172:	4629      	mov	r1, r5
 8005174:	4638      	mov	r0, r7
 8005176:	f7ff ff6f 	bl	8005058 <__ssputs_r>
 800517a:	3001      	adds	r0, #1
 800517c:	f000 80a9 	beq.w	80052d2 <_svfiprintf_r+0x1c6>
 8005180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005182:	445a      	add	r2, fp
 8005184:	9209      	str	r2, [sp, #36]	; 0x24
 8005186:	f89a 3000 	ldrb.w	r3, [sl]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80a1 	beq.w	80052d2 <_svfiprintf_r+0x1c6>
 8005190:	2300      	movs	r3, #0
 8005192:	f04f 32ff 	mov.w	r2, #4294967295
 8005196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800519a:	f10a 0a01 	add.w	sl, sl, #1
 800519e:	9304      	str	r3, [sp, #16]
 80051a0:	9307      	str	r3, [sp, #28]
 80051a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051a6:	931a      	str	r3, [sp, #104]	; 0x68
 80051a8:	4654      	mov	r4, sl
 80051aa:	2205      	movs	r2, #5
 80051ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b0:	4850      	ldr	r0, [pc, #320]	; (80052f4 <_svfiprintf_r+0x1e8>)
 80051b2:	f000 fa67 	bl	8005684 <memchr>
 80051b6:	9a04      	ldr	r2, [sp, #16]
 80051b8:	b9d8      	cbnz	r0, 80051f2 <_svfiprintf_r+0xe6>
 80051ba:	06d0      	lsls	r0, r2, #27
 80051bc:	bf44      	itt	mi
 80051be:	2320      	movmi	r3, #32
 80051c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051c4:	0711      	lsls	r1, r2, #28
 80051c6:	bf44      	itt	mi
 80051c8:	232b      	movmi	r3, #43	; 0x2b
 80051ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ce:	f89a 3000 	ldrb.w	r3, [sl]
 80051d2:	2b2a      	cmp	r3, #42	; 0x2a
 80051d4:	d015      	beq.n	8005202 <_svfiprintf_r+0xf6>
 80051d6:	4654      	mov	r4, sl
 80051d8:	2000      	movs	r0, #0
 80051da:	f04f 0c0a 	mov.w	ip, #10
 80051de:	9a07      	ldr	r2, [sp, #28]
 80051e0:	4621      	mov	r1, r4
 80051e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051e6:	3b30      	subs	r3, #48	; 0x30
 80051e8:	2b09      	cmp	r3, #9
 80051ea:	d94d      	bls.n	8005288 <_svfiprintf_r+0x17c>
 80051ec:	b1b0      	cbz	r0, 800521c <_svfiprintf_r+0x110>
 80051ee:	9207      	str	r2, [sp, #28]
 80051f0:	e014      	b.n	800521c <_svfiprintf_r+0x110>
 80051f2:	eba0 0308 	sub.w	r3, r0, r8
 80051f6:	fa09 f303 	lsl.w	r3, r9, r3
 80051fa:	4313      	orrs	r3, r2
 80051fc:	46a2      	mov	sl, r4
 80051fe:	9304      	str	r3, [sp, #16]
 8005200:	e7d2      	b.n	80051a8 <_svfiprintf_r+0x9c>
 8005202:	9b03      	ldr	r3, [sp, #12]
 8005204:	1d19      	adds	r1, r3, #4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	9103      	str	r1, [sp, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	bfbb      	ittet	lt
 800520e:	425b      	neglt	r3, r3
 8005210:	f042 0202 	orrlt.w	r2, r2, #2
 8005214:	9307      	strge	r3, [sp, #28]
 8005216:	9307      	strlt	r3, [sp, #28]
 8005218:	bfb8      	it	lt
 800521a:	9204      	strlt	r2, [sp, #16]
 800521c:	7823      	ldrb	r3, [r4, #0]
 800521e:	2b2e      	cmp	r3, #46	; 0x2e
 8005220:	d10c      	bne.n	800523c <_svfiprintf_r+0x130>
 8005222:	7863      	ldrb	r3, [r4, #1]
 8005224:	2b2a      	cmp	r3, #42	; 0x2a
 8005226:	d134      	bne.n	8005292 <_svfiprintf_r+0x186>
 8005228:	9b03      	ldr	r3, [sp, #12]
 800522a:	3402      	adds	r4, #2
 800522c:	1d1a      	adds	r2, r3, #4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	9203      	str	r2, [sp, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	bfb8      	it	lt
 8005236:	f04f 33ff 	movlt.w	r3, #4294967295
 800523a:	9305      	str	r3, [sp, #20]
 800523c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80052f8 <_svfiprintf_r+0x1ec>
 8005240:	2203      	movs	r2, #3
 8005242:	4650      	mov	r0, sl
 8005244:	7821      	ldrb	r1, [r4, #0]
 8005246:	f000 fa1d 	bl	8005684 <memchr>
 800524a:	b138      	cbz	r0, 800525c <_svfiprintf_r+0x150>
 800524c:	2240      	movs	r2, #64	; 0x40
 800524e:	9b04      	ldr	r3, [sp, #16]
 8005250:	eba0 000a 	sub.w	r0, r0, sl
 8005254:	4082      	lsls	r2, r0
 8005256:	4313      	orrs	r3, r2
 8005258:	3401      	adds	r4, #1
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005260:	2206      	movs	r2, #6
 8005262:	4826      	ldr	r0, [pc, #152]	; (80052fc <_svfiprintf_r+0x1f0>)
 8005264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005268:	f000 fa0c 	bl	8005684 <memchr>
 800526c:	2800      	cmp	r0, #0
 800526e:	d038      	beq.n	80052e2 <_svfiprintf_r+0x1d6>
 8005270:	4b23      	ldr	r3, [pc, #140]	; (8005300 <_svfiprintf_r+0x1f4>)
 8005272:	bb1b      	cbnz	r3, 80052bc <_svfiprintf_r+0x1b0>
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	3307      	adds	r3, #7
 8005278:	f023 0307 	bic.w	r3, r3, #7
 800527c:	3308      	adds	r3, #8
 800527e:	9303      	str	r3, [sp, #12]
 8005280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005282:	4433      	add	r3, r6
 8005284:	9309      	str	r3, [sp, #36]	; 0x24
 8005286:	e768      	b.n	800515a <_svfiprintf_r+0x4e>
 8005288:	460c      	mov	r4, r1
 800528a:	2001      	movs	r0, #1
 800528c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005290:	e7a6      	b.n	80051e0 <_svfiprintf_r+0xd4>
 8005292:	2300      	movs	r3, #0
 8005294:	f04f 0c0a 	mov.w	ip, #10
 8005298:	4619      	mov	r1, r3
 800529a:	3401      	adds	r4, #1
 800529c:	9305      	str	r3, [sp, #20]
 800529e:	4620      	mov	r0, r4
 80052a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052a4:	3a30      	subs	r2, #48	; 0x30
 80052a6:	2a09      	cmp	r2, #9
 80052a8:	d903      	bls.n	80052b2 <_svfiprintf_r+0x1a6>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0c6      	beq.n	800523c <_svfiprintf_r+0x130>
 80052ae:	9105      	str	r1, [sp, #20]
 80052b0:	e7c4      	b.n	800523c <_svfiprintf_r+0x130>
 80052b2:	4604      	mov	r4, r0
 80052b4:	2301      	movs	r3, #1
 80052b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ba:	e7f0      	b.n	800529e <_svfiprintf_r+0x192>
 80052bc:	ab03      	add	r3, sp, #12
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	462a      	mov	r2, r5
 80052c2:	4638      	mov	r0, r7
 80052c4:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <_svfiprintf_r+0x1f8>)
 80052c6:	a904      	add	r1, sp, #16
 80052c8:	f3af 8000 	nop.w
 80052cc:	1c42      	adds	r2, r0, #1
 80052ce:	4606      	mov	r6, r0
 80052d0:	d1d6      	bne.n	8005280 <_svfiprintf_r+0x174>
 80052d2:	89ab      	ldrh	r3, [r5, #12]
 80052d4:	065b      	lsls	r3, r3, #25
 80052d6:	f53f af2d 	bmi.w	8005134 <_svfiprintf_r+0x28>
 80052da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052dc:	b01d      	add	sp, #116	; 0x74
 80052de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e2:	ab03      	add	r3, sp, #12
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	462a      	mov	r2, r5
 80052e8:	4638      	mov	r0, r7
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <_svfiprintf_r+0x1f8>)
 80052ec:	a904      	add	r1, sp, #16
 80052ee:	f000 f87d 	bl	80053ec <_printf_i>
 80052f2:	e7eb      	b.n	80052cc <_svfiprintf_r+0x1c0>
 80052f4:	08005796 	.word	0x08005796
 80052f8:	0800579c 	.word	0x0800579c
 80052fc:	080057a0 	.word	0x080057a0
 8005300:	00000000 	.word	0x00000000
 8005304:	08005059 	.word	0x08005059

08005308 <_printf_common>:
 8005308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800530c:	4616      	mov	r6, r2
 800530e:	4699      	mov	r9, r3
 8005310:	688a      	ldr	r2, [r1, #8]
 8005312:	690b      	ldr	r3, [r1, #16]
 8005314:	4607      	mov	r7, r0
 8005316:	4293      	cmp	r3, r2
 8005318:	bfb8      	it	lt
 800531a:	4613      	movlt	r3, r2
 800531c:	6033      	str	r3, [r6, #0]
 800531e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005322:	460c      	mov	r4, r1
 8005324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005328:	b10a      	cbz	r2, 800532e <_printf_common+0x26>
 800532a:	3301      	adds	r3, #1
 800532c:	6033      	str	r3, [r6, #0]
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	0699      	lsls	r1, r3, #26
 8005332:	bf42      	ittt	mi
 8005334:	6833      	ldrmi	r3, [r6, #0]
 8005336:	3302      	addmi	r3, #2
 8005338:	6033      	strmi	r3, [r6, #0]
 800533a:	6825      	ldr	r5, [r4, #0]
 800533c:	f015 0506 	ands.w	r5, r5, #6
 8005340:	d106      	bne.n	8005350 <_printf_common+0x48>
 8005342:	f104 0a19 	add.w	sl, r4, #25
 8005346:	68e3      	ldr	r3, [r4, #12]
 8005348:	6832      	ldr	r2, [r6, #0]
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	42ab      	cmp	r3, r5
 800534e:	dc2b      	bgt.n	80053a8 <_printf_common+0xa0>
 8005350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005354:	1e13      	subs	r3, r2, #0
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	bf18      	it	ne
 800535a:	2301      	movne	r3, #1
 800535c:	0692      	lsls	r2, r2, #26
 800535e:	d430      	bmi.n	80053c2 <_printf_common+0xba>
 8005360:	4649      	mov	r1, r9
 8005362:	4638      	mov	r0, r7
 8005364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005368:	47c0      	blx	r8
 800536a:	3001      	adds	r0, #1
 800536c:	d023      	beq.n	80053b6 <_printf_common+0xae>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	6922      	ldr	r2, [r4, #16]
 8005372:	f003 0306 	and.w	r3, r3, #6
 8005376:	2b04      	cmp	r3, #4
 8005378:	bf14      	ite	ne
 800537a:	2500      	movne	r5, #0
 800537c:	6833      	ldreq	r3, [r6, #0]
 800537e:	f04f 0600 	mov.w	r6, #0
 8005382:	bf08      	it	eq
 8005384:	68e5      	ldreq	r5, [r4, #12]
 8005386:	f104 041a 	add.w	r4, r4, #26
 800538a:	bf08      	it	eq
 800538c:	1aed      	subeq	r5, r5, r3
 800538e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005392:	bf08      	it	eq
 8005394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005398:	4293      	cmp	r3, r2
 800539a:	bfc4      	itt	gt
 800539c:	1a9b      	subgt	r3, r3, r2
 800539e:	18ed      	addgt	r5, r5, r3
 80053a0:	42b5      	cmp	r5, r6
 80053a2:	d11a      	bne.n	80053da <_printf_common+0xd2>
 80053a4:	2000      	movs	r0, #0
 80053a6:	e008      	b.n	80053ba <_printf_common+0xb2>
 80053a8:	2301      	movs	r3, #1
 80053aa:	4652      	mov	r2, sl
 80053ac:	4649      	mov	r1, r9
 80053ae:	4638      	mov	r0, r7
 80053b0:	47c0      	blx	r8
 80053b2:	3001      	adds	r0, #1
 80053b4:	d103      	bne.n	80053be <_printf_common+0xb6>
 80053b6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053be:	3501      	adds	r5, #1
 80053c0:	e7c1      	b.n	8005346 <_printf_common+0x3e>
 80053c2:	2030      	movs	r0, #48	; 0x30
 80053c4:	18e1      	adds	r1, r4, r3
 80053c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053d0:	4422      	add	r2, r4
 80053d2:	3302      	adds	r3, #2
 80053d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053d8:	e7c2      	b.n	8005360 <_printf_common+0x58>
 80053da:	2301      	movs	r3, #1
 80053dc:	4622      	mov	r2, r4
 80053de:	4649      	mov	r1, r9
 80053e0:	4638      	mov	r0, r7
 80053e2:	47c0      	blx	r8
 80053e4:	3001      	adds	r0, #1
 80053e6:	d0e6      	beq.n	80053b6 <_printf_common+0xae>
 80053e8:	3601      	adds	r6, #1
 80053ea:	e7d9      	b.n	80053a0 <_printf_common+0x98>

080053ec <_printf_i>:
 80053ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f0:	7e0f      	ldrb	r7, [r1, #24]
 80053f2:	4691      	mov	r9, r2
 80053f4:	2f78      	cmp	r7, #120	; 0x78
 80053f6:	4680      	mov	r8, r0
 80053f8:	460c      	mov	r4, r1
 80053fa:	469a      	mov	sl, r3
 80053fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005402:	d807      	bhi.n	8005414 <_printf_i+0x28>
 8005404:	2f62      	cmp	r7, #98	; 0x62
 8005406:	d80a      	bhi.n	800541e <_printf_i+0x32>
 8005408:	2f00      	cmp	r7, #0
 800540a:	f000 80d5 	beq.w	80055b8 <_printf_i+0x1cc>
 800540e:	2f58      	cmp	r7, #88	; 0x58
 8005410:	f000 80c1 	beq.w	8005596 <_printf_i+0x1aa>
 8005414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800541c:	e03a      	b.n	8005494 <_printf_i+0xa8>
 800541e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005422:	2b15      	cmp	r3, #21
 8005424:	d8f6      	bhi.n	8005414 <_printf_i+0x28>
 8005426:	a101      	add	r1, pc, #4	; (adr r1, 800542c <_printf_i+0x40>)
 8005428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800542c:	08005485 	.word	0x08005485
 8005430:	08005499 	.word	0x08005499
 8005434:	08005415 	.word	0x08005415
 8005438:	08005415 	.word	0x08005415
 800543c:	08005415 	.word	0x08005415
 8005440:	08005415 	.word	0x08005415
 8005444:	08005499 	.word	0x08005499
 8005448:	08005415 	.word	0x08005415
 800544c:	08005415 	.word	0x08005415
 8005450:	08005415 	.word	0x08005415
 8005454:	08005415 	.word	0x08005415
 8005458:	0800559f 	.word	0x0800559f
 800545c:	080054c5 	.word	0x080054c5
 8005460:	08005559 	.word	0x08005559
 8005464:	08005415 	.word	0x08005415
 8005468:	08005415 	.word	0x08005415
 800546c:	080055c1 	.word	0x080055c1
 8005470:	08005415 	.word	0x08005415
 8005474:	080054c5 	.word	0x080054c5
 8005478:	08005415 	.word	0x08005415
 800547c:	08005415 	.word	0x08005415
 8005480:	08005561 	.word	0x08005561
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	1d1a      	adds	r2, r3, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	602a      	str	r2, [r5, #0]
 800548c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005494:	2301      	movs	r3, #1
 8005496:	e0a0      	b.n	80055da <_printf_i+0x1ee>
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	682b      	ldr	r3, [r5, #0]
 800549c:	0607      	lsls	r7, r0, #24
 800549e:	f103 0104 	add.w	r1, r3, #4
 80054a2:	6029      	str	r1, [r5, #0]
 80054a4:	d501      	bpl.n	80054aa <_printf_i+0xbe>
 80054a6:	681e      	ldr	r6, [r3, #0]
 80054a8:	e003      	b.n	80054b2 <_printf_i+0xc6>
 80054aa:	0646      	lsls	r6, r0, #25
 80054ac:	d5fb      	bpl.n	80054a6 <_printf_i+0xba>
 80054ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054b2:	2e00      	cmp	r6, #0
 80054b4:	da03      	bge.n	80054be <_printf_i+0xd2>
 80054b6:	232d      	movs	r3, #45	; 0x2d
 80054b8:	4276      	negs	r6, r6
 80054ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054be:	230a      	movs	r3, #10
 80054c0:	4859      	ldr	r0, [pc, #356]	; (8005628 <_printf_i+0x23c>)
 80054c2:	e012      	b.n	80054ea <_printf_i+0xfe>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	1d19      	adds	r1, r3, #4
 80054ca:	6029      	str	r1, [r5, #0]
 80054cc:	0605      	lsls	r5, r0, #24
 80054ce:	d501      	bpl.n	80054d4 <_printf_i+0xe8>
 80054d0:	681e      	ldr	r6, [r3, #0]
 80054d2:	e002      	b.n	80054da <_printf_i+0xee>
 80054d4:	0641      	lsls	r1, r0, #25
 80054d6:	d5fb      	bpl.n	80054d0 <_printf_i+0xe4>
 80054d8:	881e      	ldrh	r6, [r3, #0]
 80054da:	2f6f      	cmp	r7, #111	; 0x6f
 80054dc:	bf0c      	ite	eq
 80054de:	2308      	moveq	r3, #8
 80054e0:	230a      	movne	r3, #10
 80054e2:	4851      	ldr	r0, [pc, #324]	; (8005628 <_printf_i+0x23c>)
 80054e4:	2100      	movs	r1, #0
 80054e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ea:	6865      	ldr	r5, [r4, #4]
 80054ec:	2d00      	cmp	r5, #0
 80054ee:	bfa8      	it	ge
 80054f0:	6821      	ldrge	r1, [r4, #0]
 80054f2:	60a5      	str	r5, [r4, #8]
 80054f4:	bfa4      	itt	ge
 80054f6:	f021 0104 	bicge.w	r1, r1, #4
 80054fa:	6021      	strge	r1, [r4, #0]
 80054fc:	b90e      	cbnz	r6, 8005502 <_printf_i+0x116>
 80054fe:	2d00      	cmp	r5, #0
 8005500:	d04b      	beq.n	800559a <_printf_i+0x1ae>
 8005502:	4615      	mov	r5, r2
 8005504:	fbb6 f1f3 	udiv	r1, r6, r3
 8005508:	fb03 6711 	mls	r7, r3, r1, r6
 800550c:	5dc7      	ldrb	r7, [r0, r7]
 800550e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005512:	4637      	mov	r7, r6
 8005514:	42bb      	cmp	r3, r7
 8005516:	460e      	mov	r6, r1
 8005518:	d9f4      	bls.n	8005504 <_printf_i+0x118>
 800551a:	2b08      	cmp	r3, #8
 800551c:	d10b      	bne.n	8005536 <_printf_i+0x14a>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	07de      	lsls	r6, r3, #31
 8005522:	d508      	bpl.n	8005536 <_printf_i+0x14a>
 8005524:	6923      	ldr	r3, [r4, #16]
 8005526:	6861      	ldr	r1, [r4, #4]
 8005528:	4299      	cmp	r1, r3
 800552a:	bfde      	ittt	le
 800552c:	2330      	movle	r3, #48	; 0x30
 800552e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005532:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005536:	1b52      	subs	r2, r2, r5
 8005538:	6122      	str	r2, [r4, #16]
 800553a:	464b      	mov	r3, r9
 800553c:	4621      	mov	r1, r4
 800553e:	4640      	mov	r0, r8
 8005540:	f8cd a000 	str.w	sl, [sp]
 8005544:	aa03      	add	r2, sp, #12
 8005546:	f7ff fedf 	bl	8005308 <_printf_common>
 800554a:	3001      	adds	r0, #1
 800554c:	d14a      	bne.n	80055e4 <_printf_i+0x1f8>
 800554e:	f04f 30ff 	mov.w	r0, #4294967295
 8005552:	b004      	add	sp, #16
 8005554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	f043 0320 	orr.w	r3, r3, #32
 800555e:	6023      	str	r3, [r4, #0]
 8005560:	2778      	movs	r7, #120	; 0x78
 8005562:	4832      	ldr	r0, [pc, #200]	; (800562c <_printf_i+0x240>)
 8005564:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	6829      	ldr	r1, [r5, #0]
 800556c:	061f      	lsls	r7, r3, #24
 800556e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005572:	d402      	bmi.n	800557a <_printf_i+0x18e>
 8005574:	065f      	lsls	r7, r3, #25
 8005576:	bf48      	it	mi
 8005578:	b2b6      	uxthmi	r6, r6
 800557a:	07df      	lsls	r7, r3, #31
 800557c:	bf48      	it	mi
 800557e:	f043 0320 	orrmi.w	r3, r3, #32
 8005582:	6029      	str	r1, [r5, #0]
 8005584:	bf48      	it	mi
 8005586:	6023      	strmi	r3, [r4, #0]
 8005588:	b91e      	cbnz	r6, 8005592 <_printf_i+0x1a6>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	f023 0320 	bic.w	r3, r3, #32
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	2310      	movs	r3, #16
 8005594:	e7a6      	b.n	80054e4 <_printf_i+0xf8>
 8005596:	4824      	ldr	r0, [pc, #144]	; (8005628 <_printf_i+0x23c>)
 8005598:	e7e4      	b.n	8005564 <_printf_i+0x178>
 800559a:	4615      	mov	r5, r2
 800559c:	e7bd      	b.n	800551a <_printf_i+0x12e>
 800559e:	682b      	ldr	r3, [r5, #0]
 80055a0:	6826      	ldr	r6, [r4, #0]
 80055a2:	1d18      	adds	r0, r3, #4
 80055a4:	6961      	ldr	r1, [r4, #20]
 80055a6:	6028      	str	r0, [r5, #0]
 80055a8:	0635      	lsls	r5, r6, #24
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	d501      	bpl.n	80055b2 <_printf_i+0x1c6>
 80055ae:	6019      	str	r1, [r3, #0]
 80055b0:	e002      	b.n	80055b8 <_printf_i+0x1cc>
 80055b2:	0670      	lsls	r0, r6, #25
 80055b4:	d5fb      	bpl.n	80055ae <_printf_i+0x1c2>
 80055b6:	8019      	strh	r1, [r3, #0]
 80055b8:	2300      	movs	r3, #0
 80055ba:	4615      	mov	r5, r2
 80055bc:	6123      	str	r3, [r4, #16]
 80055be:	e7bc      	b.n	800553a <_printf_i+0x14e>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	2100      	movs	r1, #0
 80055c4:	1d1a      	adds	r2, r3, #4
 80055c6:	602a      	str	r2, [r5, #0]
 80055c8:	681d      	ldr	r5, [r3, #0]
 80055ca:	6862      	ldr	r2, [r4, #4]
 80055cc:	4628      	mov	r0, r5
 80055ce:	f000 f859 	bl	8005684 <memchr>
 80055d2:	b108      	cbz	r0, 80055d8 <_printf_i+0x1ec>
 80055d4:	1b40      	subs	r0, r0, r5
 80055d6:	6060      	str	r0, [r4, #4]
 80055d8:	6863      	ldr	r3, [r4, #4]
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	2300      	movs	r3, #0
 80055de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e2:	e7aa      	b.n	800553a <_printf_i+0x14e>
 80055e4:	462a      	mov	r2, r5
 80055e6:	4649      	mov	r1, r9
 80055e8:	4640      	mov	r0, r8
 80055ea:	6923      	ldr	r3, [r4, #16]
 80055ec:	47d0      	blx	sl
 80055ee:	3001      	adds	r0, #1
 80055f0:	d0ad      	beq.n	800554e <_printf_i+0x162>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	079b      	lsls	r3, r3, #30
 80055f6:	d413      	bmi.n	8005620 <_printf_i+0x234>
 80055f8:	68e0      	ldr	r0, [r4, #12]
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	4298      	cmp	r0, r3
 80055fe:	bfb8      	it	lt
 8005600:	4618      	movlt	r0, r3
 8005602:	e7a6      	b.n	8005552 <_printf_i+0x166>
 8005604:	2301      	movs	r3, #1
 8005606:	4632      	mov	r2, r6
 8005608:	4649      	mov	r1, r9
 800560a:	4640      	mov	r0, r8
 800560c:	47d0      	blx	sl
 800560e:	3001      	adds	r0, #1
 8005610:	d09d      	beq.n	800554e <_printf_i+0x162>
 8005612:	3501      	adds	r5, #1
 8005614:	68e3      	ldr	r3, [r4, #12]
 8005616:	9903      	ldr	r1, [sp, #12]
 8005618:	1a5b      	subs	r3, r3, r1
 800561a:	42ab      	cmp	r3, r5
 800561c:	dcf2      	bgt.n	8005604 <_printf_i+0x218>
 800561e:	e7eb      	b.n	80055f8 <_printf_i+0x20c>
 8005620:	2500      	movs	r5, #0
 8005622:	f104 0619 	add.w	r6, r4, #25
 8005626:	e7f5      	b.n	8005614 <_printf_i+0x228>
 8005628:	080057a7 	.word	0x080057a7
 800562c:	080057b8 	.word	0x080057b8

08005630 <memmove>:
 8005630:	4288      	cmp	r0, r1
 8005632:	b510      	push	{r4, lr}
 8005634:	eb01 0402 	add.w	r4, r1, r2
 8005638:	d902      	bls.n	8005640 <memmove+0x10>
 800563a:	4284      	cmp	r4, r0
 800563c:	4623      	mov	r3, r4
 800563e:	d807      	bhi.n	8005650 <memmove+0x20>
 8005640:	1e43      	subs	r3, r0, #1
 8005642:	42a1      	cmp	r1, r4
 8005644:	d008      	beq.n	8005658 <memmove+0x28>
 8005646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800564a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800564e:	e7f8      	b.n	8005642 <memmove+0x12>
 8005650:	4601      	mov	r1, r0
 8005652:	4402      	add	r2, r0
 8005654:	428a      	cmp	r2, r1
 8005656:	d100      	bne.n	800565a <memmove+0x2a>
 8005658:	bd10      	pop	{r4, pc}
 800565a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800565e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005662:	e7f7      	b.n	8005654 <memmove+0x24>

08005664 <_sbrk_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	2300      	movs	r3, #0
 8005668:	4d05      	ldr	r5, [pc, #20]	; (8005680 <_sbrk_r+0x1c>)
 800566a:	4604      	mov	r4, r0
 800566c:	4608      	mov	r0, r1
 800566e:	602b      	str	r3, [r5, #0]
 8005670:	f7fc fb2a 	bl	8001cc8 <_sbrk>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_sbrk_r+0x1a>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_sbrk_r+0x1a>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	200004d8 	.word	0x200004d8

08005684 <memchr>:
 8005684:	4603      	mov	r3, r0
 8005686:	b510      	push	{r4, lr}
 8005688:	b2c9      	uxtb	r1, r1
 800568a:	4402      	add	r2, r0
 800568c:	4293      	cmp	r3, r2
 800568e:	4618      	mov	r0, r3
 8005690:	d101      	bne.n	8005696 <memchr+0x12>
 8005692:	2000      	movs	r0, #0
 8005694:	e003      	b.n	800569e <memchr+0x1a>
 8005696:	7804      	ldrb	r4, [r0, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	428c      	cmp	r4, r1
 800569c:	d1f6      	bne.n	800568c <memchr+0x8>
 800569e:	bd10      	pop	{r4, pc}

080056a0 <memcpy>:
 80056a0:	440a      	add	r2, r1
 80056a2:	4291      	cmp	r1, r2
 80056a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056a8:	d100      	bne.n	80056ac <memcpy+0xc>
 80056aa:	4770      	bx	lr
 80056ac:	b510      	push	{r4, lr}
 80056ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056b2:	4291      	cmp	r1, r2
 80056b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056b8:	d1f9      	bne.n	80056ae <memcpy+0xe>
 80056ba:	bd10      	pop	{r4, pc}

080056bc <_realloc_r>:
 80056bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c0:	4680      	mov	r8, r0
 80056c2:	4614      	mov	r4, r2
 80056c4:	460e      	mov	r6, r1
 80056c6:	b921      	cbnz	r1, 80056d2 <_realloc_r+0x16>
 80056c8:	4611      	mov	r1, r2
 80056ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ce:	f7ff bc37 	b.w	8004f40 <_malloc_r>
 80056d2:	b92a      	cbnz	r2, 80056e0 <_realloc_r+0x24>
 80056d4:	f7ff fbcc 	bl	8004e70 <_free_r>
 80056d8:	4625      	mov	r5, r4
 80056da:	4628      	mov	r0, r5
 80056dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e0:	f000 f81b 	bl	800571a <_malloc_usable_size_r>
 80056e4:	4284      	cmp	r4, r0
 80056e6:	4607      	mov	r7, r0
 80056e8:	d802      	bhi.n	80056f0 <_realloc_r+0x34>
 80056ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056ee:	d812      	bhi.n	8005716 <_realloc_r+0x5a>
 80056f0:	4621      	mov	r1, r4
 80056f2:	4640      	mov	r0, r8
 80056f4:	f7ff fc24 	bl	8004f40 <_malloc_r>
 80056f8:	4605      	mov	r5, r0
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d0ed      	beq.n	80056da <_realloc_r+0x1e>
 80056fe:	42bc      	cmp	r4, r7
 8005700:	4622      	mov	r2, r4
 8005702:	4631      	mov	r1, r6
 8005704:	bf28      	it	cs
 8005706:	463a      	movcs	r2, r7
 8005708:	f7ff ffca 	bl	80056a0 <memcpy>
 800570c:	4631      	mov	r1, r6
 800570e:	4640      	mov	r0, r8
 8005710:	f7ff fbae 	bl	8004e70 <_free_r>
 8005714:	e7e1      	b.n	80056da <_realloc_r+0x1e>
 8005716:	4635      	mov	r5, r6
 8005718:	e7df      	b.n	80056da <_realloc_r+0x1e>

0800571a <_malloc_usable_size_r>:
 800571a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800571e:	1f18      	subs	r0, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	bfbc      	itt	lt
 8005724:	580b      	ldrlt	r3, [r1, r0]
 8005726:	18c0      	addlt	r0, r0, r3
 8005728:	4770      	bx	lr
	...

0800572c <_init>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	bf00      	nop
 8005730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005732:	bc08      	pop	{r3}
 8005734:	469e      	mov	lr, r3
 8005736:	4770      	bx	lr

08005738 <_fini>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	bf00      	nop
 800573c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573e:	bc08      	pop	{r3}
 8005740:	469e      	mov	lr, r3
 8005742:	4770      	bx	lr
