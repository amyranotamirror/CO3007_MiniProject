
PEDESTRIAN_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004098  08004098  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08004098  08004098  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004098  08004098  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080040a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  200000a4  08004144  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08004144  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8a5  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002236  00000000  00000000  0002c9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  0002ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3b  00000000  00000000  0002f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183de  00000000  00000000  0003035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001034d  00000000  00000000  00048739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088743  00000000  00000000  00058a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a9c  00000000  00000000  000e11cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e4c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004014 	.word	0x08004014

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08004014 	.word	0x08004014

0800014c <buttonReading>:
static GPIO_PinState buttonDebounce2[BUTTON_NUMBER];

static uint8_t buttonFlags[BUTTON_NUMBER];
static int16_t buttonCounters[BUTTON_NUMBER];

void buttonReading(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonReading+0xe4>
		buttonDebounce2[i] = buttonDebounce1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	; (8000240 <buttonReading+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	; (8000244 <buttonReading+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		buttonDebounce1[i] = buttonDebounce0[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	; (8000248 <buttonReading+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	; (8000240 <buttonReading+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		buttonDebounce0[i] = HAL_GPIO_ReadPin(buttonPorts[i], buttonPins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <buttonReading+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	; (8000250 <buttonReading+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f001 fbdb 	bl	8001940 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <buttonReading+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if ((buttonDebounce0[i] == buttonDebounce1[i]) && (buttonDebounce0[i] == buttonDebounce2[i])) {
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2c      	ldr	r2, [pc, #176]	; (8000248 <buttonReading+0xfc>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	; (8000240 <buttonReading+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d143      	bne.n	800022a <buttonReading+0xde>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a28      	ldr	r2, [pc, #160]	; (8000248 <buttonReading+0xfc>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4926      	ldr	r1, [pc, #152]	; (8000244 <buttonReading+0xf8>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d13b      	bne.n	800022a <buttonReading+0xde>
			if (buttonStates[i] != buttonDebounce0[i]) {
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a27      	ldr	r2, [pc, #156]	; (8000254 <buttonReading+0x108>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4923      	ldr	r1, [pc, #140]	; (8000248 <buttonReading+0xfc>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonReading+0xa0>
				buttonStates[i] = buttonDebounce0[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	; (8000248 <buttonReading+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	; (8000254 <buttonReading+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a20      	ldr	r2, [pc, #128]	; (8000254 <buttonReading+0x108>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d128      	bne.n	800022a <buttonReading+0xde>
					buttonFlags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <buttonReading+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					buttonCounters[i] = BUTTON_PRESSED_DURATION / SCH_TIMERTICK;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <buttonReading+0x110>)
 80001e4:	2164      	movs	r1, #100	; 0x64
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001ea:	e01e      	b.n	800022a <buttonReading+0xde>
				}
			}
			else {
				if (buttonStates[i] == BUTTON_PRESSED) {
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <buttonReading+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d119      	bne.n	800022a <buttonReading+0xde>
					buttonCounters[i] --;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <buttonReading+0x110>)
 80001fa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80001fe:	b292      	uxth	r2, r2
 8000200:	3a01      	subs	r2, #1
 8000202:	b292      	uxth	r2, r2
 8000204:	b211      	sxth	r1, r2
 8000206:	4a15      	ldr	r2, [pc, #84]	; (800025c <buttonReading+0x110>)
 8000208:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (buttonCounters[i] <= 0) {
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <buttonReading+0x110>)
 8000210:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000214:	2b00      	cmp	r3, #0
 8000216:	dc08      	bgt.n	800022a <buttonReading+0xde>
						buttonFlags[i] = 1;
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4a0f      	ldr	r2, [pc, #60]	; (8000258 <buttonReading+0x10c>)
 800021c:	2101      	movs	r1, #1
 800021e:	54d1      	strb	r1, [r2, r3]
						buttonCounters[i] = BUTTON_HOLDING_DURATION / SCH_TIMERTICK;
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4a0e      	ldr	r2, [pc, #56]	; (800025c <buttonReading+0x110>)
 8000224:	2132      	movs	r1, #50	; 0x32
 8000226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < BUTTON_NUMBER; i ++) {
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d990      	bls.n	8000158 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	200000c8 	.word	0x200000c8
 8000244:	200000cc 	.word	0x200000cc
 8000248:	200000c4 	.word	0x200000c4
 800024c:	20000000 	.word	0x20000000
 8000250:	20000010 	.word	0x20000010
 8000254:	200000c0 	.word	0x200000c0
 8000258:	200000d0 	.word	0x200000d0
 800025c:	200000d4 	.word	0x200000d4

08000260 <buttonPressed>:

unsigned char buttonPressed(uint8_t index) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b03      	cmp	r3, #3
 800026e:	d901      	bls.n	8000274 <buttonPressed+0x14>
 8000270:	2300      	movs	r3, #0
 8000272:	e00b      	b.n	800028c <buttonPressed+0x2c>
	if (buttonFlags[index] == 1) {
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <buttonPressed+0x38>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	2b01      	cmp	r3, #1
 800027c:	d105      	bne.n	800028a <buttonPressed+0x2a>
		buttonFlags[index] = 0;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	4a05      	ldr	r2, [pc, #20]	; (8000298 <buttonPressed+0x38>)
 8000282:	2100      	movs	r1, #0
 8000284:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000286:	2301      	movs	r3, #1
 8000288:	e000      	b.n	800028c <buttonPressed+0x2c>
	}
	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	200000d0 	.word	0x200000d0

0800029c <fsmAuto>:

static uint8_t fsmAutoIDs[FSM_AUTO_TASK] = {};
static uint8_t fsmManualIDs[FSM_MANUAL_TASK] = {};
static uint8_t fsmTunningIDs[FSM_TUNNING_TASK] = {};

void fsmAuto(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	fsmAutoIDs[0] = SCH_AddTask(traffic0Red, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80002a0:	4b3a      	ldr	r3, [pc, #232]	; (800038c <fsmAuto+0xf0>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b3a      	ldr	r3, [pc, #232]	; (8000390 <fsmAuto+0xf4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	441a      	add	r2, r3
 80002aa:	4b3a      	ldr	r3, [pc, #232]	; (8000394 <fsmAuto+0xf8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4413      	add	r3, r2
 80002b0:	461a      	mov	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	4838      	ldr	r0, [pc, #224]	; (8000398 <fsmAuto+0xfc>)
 80002b6:	f000 fbb5 	bl	8000a24 <SCH_AddTask>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4b37      	ldr	r3, [pc, #220]	; (800039c <fsmAuto+0x100>)
 80002c0:	701a      	strb	r2, [r3, #0]
	fsmAutoIDs[1] = SCH_AddTask(traffic0Green, trafficRedDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80002c2:	4b32      	ldr	r3, [pc, #200]	; (800038c <fsmAuto+0xf0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4619      	mov	r1, r3
 80002c8:	4b30      	ldr	r3, [pc, #192]	; (800038c <fsmAuto+0xf0>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b30      	ldr	r3, [pc, #192]	; (8000390 <fsmAuto+0xf4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	441a      	add	r2, r3
 80002d2:	4b30      	ldr	r3, [pc, #192]	; (8000394 <fsmAuto+0xf8>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4413      	add	r3, r2
 80002d8:	461a      	mov	r2, r3
 80002da:	4831      	ldr	r0, [pc, #196]	; (80003a0 <fsmAuto+0x104>)
 80002dc:	f000 fba2 	bl	8000a24 <SCH_AddTask>
 80002e0:	4603      	mov	r3, r0
 80002e2:	461a      	mov	r2, r3
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <fsmAuto+0x100>)
 80002e6:	705a      	strb	r2, [r3, #1]
	fsmAutoIDs[2] = SCH_AddTask(traffic0Yellow, trafficRedDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <fsmAuto+0xf0>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	4b28      	ldr	r3, [pc, #160]	; (8000390 <fsmAuto+0xf4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4413      	add	r3, r2
 80002f2:	4619      	mov	r1, r3
 80002f4:	4b25      	ldr	r3, [pc, #148]	; (800038c <fsmAuto+0xf0>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b25      	ldr	r3, [pc, #148]	; (8000390 <fsmAuto+0xf4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	441a      	add	r2, r3
 80002fe:	4b25      	ldr	r3, [pc, #148]	; (8000394 <fsmAuto+0xf8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4413      	add	r3, r2
 8000304:	461a      	mov	r2, r3
 8000306:	4827      	ldr	r0, [pc, #156]	; (80003a4 <fsmAuto+0x108>)
 8000308:	f000 fb8c 	bl	8000a24 <SCH_AddTask>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	4b22      	ldr	r3, [pc, #136]	; (800039c <fsmAuto+0x100>)
 8000312:	709a      	strb	r2, [r3, #2]
	fsmAutoIDs[3] = SCH_AddTask(traffic1Green, 0, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000314:	4b1d      	ldr	r3, [pc, #116]	; (800038c <fsmAuto+0xf0>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <fsmAuto+0xf4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	441a      	add	r2, r3
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <fsmAuto+0xf8>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4413      	add	r3, r2
 8000324:	461a      	mov	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	481f      	ldr	r0, [pc, #124]	; (80003a8 <fsmAuto+0x10c>)
 800032a:	f000 fb7b 	bl	8000a24 <SCH_AddTask>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <fsmAuto+0x100>)
 8000334:	70da      	strb	r2, [r3, #3]
	fsmAutoIDs[4] = SCH_AddTask(traffic1Yellow, trafficGreenDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <fsmAuto+0xf8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4619      	mov	r1, r3
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <fsmAuto+0xf0>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <fsmAuto+0xf4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	441a      	add	r2, r3
 8000346:	4b13      	ldr	r3, [pc, #76]	; (8000394 <fsmAuto+0xf8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4413      	add	r3, r2
 800034c:	461a      	mov	r2, r3
 800034e:	4817      	ldr	r0, [pc, #92]	; (80003ac <fsmAuto+0x110>)
 8000350:	f000 fb68 	bl	8000a24 <SCH_AddTask>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <fsmAuto+0x100>)
 800035a:	711a      	strb	r2, [r3, #4]
	fsmAutoIDs[5] = SCH_AddTask(traffic1Red, trafficGreenDuration + trafficYellowDuration, trafficRedDuration + trafficYellowDuration + trafficGreenDuration);
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <fsmAuto+0xf8>)
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <fsmAuto+0xf4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4413      	add	r3, r2
 8000366:	4619      	mov	r1, r3
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <fsmAuto+0xf0>)
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <fsmAuto+0xf4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	441a      	add	r2, r3
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <fsmAuto+0xf8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4413      	add	r3, r2
 8000378:	461a      	mov	r2, r3
 800037a:	480d      	ldr	r0, [pc, #52]	; (80003b0 <fsmAuto+0x114>)
 800037c:	f000 fb52 	bl	8000a24 <SCH_AddTask>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <fsmAuto+0x100>)
 8000386:	715a      	strb	r2, [r3, #5]
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000001c 	.word	0x2000001c
 8000390:	20000020 	.word	0x20000020
 8000394:	20000024 	.word	0x20000024
 8000398:	08001159 	.word	0x08001159
 800039c:	200000e0 	.word	0x200000e0
 80003a0:	08001179 	.word	0x08001179
 80003a4:	08001169 	.word	0x08001169
 80003a8:	080011a9 	.word	0x080011a9
 80003ac:	08001199 	.word	0x08001199
 80003b0:	08001189 	.word	0x08001189

080003b4 <fsmManual>:

void fsmManual(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	if (buttonPressed(1)) {
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff ff51 	bl	8000260 <buttonPressed>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d022      	beq.n	800040a <fsmManual+0x56>
		switch (trafficState[0]) {
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <fsmManual+0xac>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	d012      	beq.n	80003f2 <fsmManual+0x3e>
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	dc16      	bgt.n	80003fe <fsmManual+0x4a>
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d002      	beq.n	80003da <fsmManual+0x26>
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d006      	beq.n	80003e6 <fsmManual+0x32>
 80003d8:	e011      	b.n	80003fe <fsmManual+0x4a>
		case TRAFFIC_RED:
			SCH_AddTask(traffic0Yellow, 0, 0);
 80003da:	2200      	movs	r2, #0
 80003dc:	2100      	movs	r1, #0
 80003de:	4821      	ldr	r0, [pc, #132]	; (8000464 <fsmManual+0xb0>)
 80003e0:	f000 fb20 	bl	8000a24 <SCH_AddTask>
			break;
 80003e4:	e011      	b.n	800040a <fsmManual+0x56>
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic0Green, 0, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2100      	movs	r1, #0
 80003ea:	481f      	ldr	r0, [pc, #124]	; (8000468 <fsmManual+0xb4>)
 80003ec:	f000 fb1a 	bl	8000a24 <SCH_AddTask>
			break;
 80003f0:	e00b      	b.n	800040a <fsmManual+0x56>
		case TRAFFIC_GREEN:
			SCH_AddTask(traffic0Red, 0, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2100      	movs	r1, #0
 80003f6:	481d      	ldr	r0, [pc, #116]	; (800046c <fsmManual+0xb8>)
 80003f8:	f000 fb14 	bl	8000a24 <SCH_AddTask>
			break;
 80003fc:	e005      	b.n	800040a <fsmManual+0x56>
		default:
			SCH_AddTask(traffic0Red, 0, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	481a      	ldr	r0, [pc, #104]	; (800046c <fsmManual+0xb8>)
 8000404:	f000 fb0e 	bl	8000a24 <SCH_AddTask>
			break;
 8000408:	bf00      	nop
		}
	}
	if (buttonPressed(2)) {
 800040a:	2002      	movs	r0, #2
 800040c:	f7ff ff28 	bl	8000260 <buttonPressed>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d022      	beq.n	800045c <fsmManual+0xa8>
		switch (trafficState[1]) {
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <fsmManual+0xac>)
 8000418:	785b      	ldrb	r3, [r3, #1]
 800041a:	2b03      	cmp	r3, #3
 800041c:	d012      	beq.n	8000444 <fsmManual+0x90>
 800041e:	2b03      	cmp	r3, #3
 8000420:	dc16      	bgt.n	8000450 <fsmManual+0x9c>
 8000422:	2b01      	cmp	r3, #1
 8000424:	d002      	beq.n	800042c <fsmManual+0x78>
 8000426:	2b02      	cmp	r3, #2
 8000428:	d006      	beq.n	8000438 <fsmManual+0x84>
 800042a:	e011      	b.n	8000450 <fsmManual+0x9c>
		case TRAFFIC_RED:
			SCH_AddTask(traffic1Yellow, 0, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	2100      	movs	r1, #0
 8000430:	480f      	ldr	r0, [pc, #60]	; (8000470 <fsmManual+0xbc>)
 8000432:	f000 faf7 	bl	8000a24 <SCH_AddTask>
			break;
 8000436:	e011      	b.n	800045c <fsmManual+0xa8>
		case TRAFFIC_YELLOW:
			SCH_AddTask(traffic1Green, 0, 0);
 8000438:	2200      	movs	r2, #0
 800043a:	2100      	movs	r1, #0
 800043c:	480d      	ldr	r0, [pc, #52]	; (8000474 <fsmManual+0xc0>)
 800043e:	f000 faf1 	bl	8000a24 <SCH_AddTask>
			break;
 8000442:	e00b      	b.n	800045c <fsmManual+0xa8>
		case TRAFFIC_GREEN:
			SCH_AddTask(traffic1Red, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <fsmManual+0xc4>)
 800044a:	f000 faeb 	bl	8000a24 <SCH_AddTask>
			break;
 800044e:	e005      	b.n	800045c <fsmManual+0xa8>
		default:
			SCH_AddTask(traffic1Green, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	4807      	ldr	r0, [pc, #28]	; (8000474 <fsmManual+0xc0>)
 8000456:	f000 fae5 	bl	8000a24 <SCH_AddTask>
			break;
 800045a:	bf00      	nop
		}
	}
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	200002c8 	.word	0x200002c8
 8000464:	08001169 	.word	0x08001169
 8000468:	08001179 	.word	0x08001179
 800046c:	08001159 	.word	0x08001159
 8000470:	08001199 	.word	0x08001199
 8000474:	080011a9 	.word	0x080011a9
 8000478:	08001189 	.word	0x08001189

0800047c <fsmTunning>:

void fsmTunning(void) {}
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <fsmProcessing>:

void fsmProcessing(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
	if (buttonPressed(0)) {
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff fee6 	bl	8000260 <buttonPressed>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d05b      	beq.n	8000552 <fsmProcessing+0xca>
		switch (fsmState) {
 800049a:	4b30      	ldr	r3, [pc, #192]	; (800055c <fsmProcessing+0xd4>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d03e      	beq.n	8000520 <fsmProcessing+0x98>
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	dc54      	bgt.n	8000550 <fsmProcessing+0xc8>
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d002      	beq.n	80004b0 <fsmProcessing+0x28>
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d01c      	beq.n	80004e8 <fsmProcessing+0x60>
			}
			SCH_AddTask(fsmAuto, 0, 0);
			fsmState = FSM_AUTO;
			break;
		default:
			break;
 80004ae:	e04f      	b.n	8000550 <fsmProcessing+0xc8>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 80004b0:	2300      	movs	r3, #0
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	e008      	b.n	80004c8 <fsmProcessing+0x40>
				SCH_DeleteTask(fsmAutoIDs[i]);
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	4a29      	ldr	r2, [pc, #164]	; (8000560 <fsmProcessing+0xd8>)
 80004ba:	5cd3      	ldrb	r3, [r2, r3]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 fbb7 	bl	8000c30 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_AUTO_TASK; i ++) {
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	3301      	adds	r3, #1
 80004c6:	71fb      	strb	r3, [r7, #7]
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b05      	cmp	r3, #5
 80004cc:	d9f3      	bls.n	80004b6 <fsmProcessing+0x2e>
			fsmManualIDs[0] = SCH_AddTask(fsmManual, 0, 10);
 80004ce:	220a      	movs	r2, #10
 80004d0:	2100      	movs	r1, #0
 80004d2:	4824      	ldr	r0, [pc, #144]	; (8000564 <fsmProcessing+0xdc>)
 80004d4:	f000 faa6 	bl	8000a24 <SCH_AddTask>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4b22      	ldr	r3, [pc, #136]	; (8000568 <fsmProcessing+0xe0>)
 80004de:	701a      	strb	r2, [r3, #0]
			fsmState = FSM_MANUAL;
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <fsmProcessing+0xd4>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
			break;
 80004e6:	e034      	b.n	8000552 <fsmProcessing+0xca>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 80004e8:	2300      	movs	r3, #0
 80004ea:	71bb      	strb	r3, [r7, #6]
 80004ec:	e008      	b.n	8000500 <fsmProcessing+0x78>
				SCH_DeleteTask(fsmManualIDs[i]);
 80004ee:	79bb      	ldrb	r3, [r7, #6]
 80004f0:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <fsmProcessing+0xe0>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fb9b 	bl	8000c30 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_MANUAL_TASK; i ++) {
 80004fa:	79bb      	ldrb	r3, [r7, #6]
 80004fc:	3301      	adds	r3, #1
 80004fe:	71bb      	strb	r3, [r7, #6]
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f3      	beq.n	80004ee <fsmProcessing+0x66>
			fsmTunningIDs[0] = SCH_AddTask(fsmTunning, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	4818      	ldr	r0, [pc, #96]	; (800056c <fsmProcessing+0xe4>)
 800050c:	f000 fa8a 	bl	8000a24 <SCH_AddTask>
 8000510:	4603      	mov	r3, r0
 8000512:	461a      	mov	r2, r3
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <fsmProcessing+0xe8>)
 8000516:	701a      	strb	r2, [r3, #0]
			fsmState = FSM_TUNNING;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <fsmProcessing+0xd4>)
 800051a:	2202      	movs	r2, #2
 800051c:	701a      	strb	r2, [r3, #0]
			break;
 800051e:	e018      	b.n	8000552 <fsmProcessing+0xca>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000520:	2300      	movs	r3, #0
 8000522:	717b      	strb	r3, [r7, #5]
 8000524:	e008      	b.n	8000538 <fsmProcessing+0xb0>
				SCH_DeleteTask(fsmTunningIDs[i]);
 8000526:	797b      	ldrb	r3, [r7, #5]
 8000528:	4a11      	ldr	r2, [pc, #68]	; (8000570 <fsmProcessing+0xe8>)
 800052a:	5cd3      	ldrb	r3, [r2, r3]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fb7f 	bl	8000c30 <SCH_DeleteTask>
			for (uint8_t i = 0; i < FSM_TUNNING_TASK; i ++) {
 8000532:	797b      	ldrb	r3, [r7, #5]
 8000534:	3301      	adds	r3, #1
 8000536:	717b      	strb	r3, [r7, #5]
 8000538:	797b      	ldrb	r3, [r7, #5]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f3      	beq.n	8000526 <fsmProcessing+0x9e>
			SCH_AddTask(fsmAuto, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <fsmProcessing+0xec>)
 8000544:	f000 fa6e 	bl	8000a24 <SCH_AddTask>
			fsmState = FSM_AUTO;
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <fsmProcessing+0xd4>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
			break;
 800054e:	e000      	b.n	8000552 <fsmProcessing+0xca>
			break;
 8000550:	bf00      	nop
		}
	}
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000dc 	.word	0x200000dc
 8000560:	200000e0 	.word	0x200000e0
 8000564:	080003b5 	.word	0x080003b5
 8000568:	200000e8 	.word	0x200000e8
 800056c:	0800047d 	.word	0x0800047d
 8000570:	200000ec 	.word	0x200000ec
 8000574:	0800029d 	.word	0x0800029d

08000578 <ledBlink>:
 *      Author: Nhat Khai
 */

#include "led.h"

void ledBlink(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800057c:	2120      	movs	r1, #32
 800057e:	4802      	ldr	r0, [pc, #8]	; (8000588 <ledBlink+0x10>)
 8000580:	f001 fa0d 	bl	800199e <HAL_GPIO_TogglePin>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40010800 	.word	0x40010800

0800058c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a08      	ldr	r2, [pc, #32]	; (80005bc <HAL_UART_RxCpltCallback+0x30>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d10a      	bne.n	80005b4 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800059e:	2201      	movs	r2, #1
 80005a0:	4907      	ldr	r1, [pc, #28]	; (80005c0 <HAL_UART_RxCpltCallback+0x34>)
 80005a2:	4808      	ldr	r0, [pc, #32]	; (80005c4 <HAL_UART_RxCpltCallback+0x38>)
 80005a4:	f002 fadf 	bl	8002b66 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 80005a8:	2332      	movs	r3, #50	; 0x32
 80005aa:	2201      	movs	r2, #1
 80005ac:	4904      	ldr	r1, [pc, #16]	; (80005c0 <HAL_UART_RxCpltCallback+0x34>)
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <HAL_UART_RxCpltCallback+0x38>)
 80005b0:	f002 fa56 	bl	8002a60 <HAL_UART_Transmit>
	}
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40004400 	.word	0x40004400
 80005c0:	20000180 	.word	0x20000180
 80005c4:	20000138 	.word	0x20000138

080005c8 <reportPrint>:
void reportPrint(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
	char str[10];
	uint8_t count = SCH_Report();
 80005ce:	f000 fbc1 	bl	8000d54 <SCH_Report>
 80005d2:	4603      	mov	r3, r0
 80005d4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "Tasks: %u\r\n", count), 100);
 80005d6:	7bfa      	ldrb	r2, [r7, #15]
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4907      	ldr	r1, [pc, #28]	; (80005f8 <reportPrint+0x30>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f867 	bl	80036b0 <siprintf>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	1d39      	adds	r1, r7, #4
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <reportPrint+0x34>)
 80005ec:	f002 fa38 	bl	8002a60 <HAL_UART_Transmit>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	0800402c 	.word	0x0800402c
 80005fc:	20000138 	.word	0x20000138

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fdfe 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f838 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f8e8 	bl	80007e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000610:	f000 f870 	bl	80006f4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000614:	f000 f8ba 	bl	800078c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000618:	4811      	ldr	r0, [pc, #68]	; (8000660 <main+0x60>)
 800061a:	f001 fe39 	bl	8002290 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	4910      	ldr	r1, [pc, #64]	; (8000664 <main+0x64>)
 8000622:	4811      	ldr	r0, [pc, #68]	; (8000668 <main+0x68>)
 8000624:	f002 fa9f 	bl	8002b66 <HAL_UART_Receive_IT>
  SCH_Init();
 8000628:	f000 f95e 	bl	80008e8 <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_AddTask(ledBlink, 0, 1000);
 800062c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000630:	2100      	movs	r1, #0
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <main+0x6c>)
 8000634:	f000 f9f6 	bl	8000a24 <SCH_AddTask>
  SCH_AddTask(buttonReading, 0, 10);
 8000638:	220a      	movs	r2, #10
 800063a:	2100      	movs	r1, #0
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <main+0x70>)
 800063e:	f000 f9f1 	bl	8000a24 <SCH_AddTask>
  SCH_AddTask(fsmProcessing, 0, 10);
 8000642:	220a      	movs	r2, #10
 8000644:	2100      	movs	r1, #0
 8000646:	480b      	ldr	r0, [pc, #44]	; (8000674 <main+0x74>)
 8000648:	f000 f9ec 	bl	8000a24 <SCH_AddTask>
  SCH_AddTask(reportPrint, 500, 1000);
 800064c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000650:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <main+0x78>)
 8000656:	f000 f9e5 	bl	8000a24 <SCH_AddTask>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch();
 800065a:	f000 f9b5 	bl	80009c8 <SCH_Dispatch>
 800065e:	e7fc      	b.n	800065a <main+0x5a>
 8000660:	200000f0 	.word	0x200000f0
 8000664:	20000180 	.word	0x20000180
 8000668:	20000138 	.word	0x20000138
 800066c:	08000579 	.word	0x08000579
 8000670:	0800014d 	.word	0x0800014d
 8000674:	08000489 	.word	0x08000489
 8000678:	080005c9 	.word	0x080005c9

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	; 0x40
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0318 	add.w	r3, r7, #24
 8000686:	2228      	movs	r2, #40	; 0x28
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f830 	bl	80036f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069e:	2302      	movs	r3, #2
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f98c 	bl	80019d0 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006be:	f000 f90e 	bl	80008de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fbfa 	bl	8001ed4 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f8fa 	bl	80008de <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3740      	adds	r7, #64	; 0x40
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_TIM2_Init+0x94>)
 8000712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MX_TIM2_Init+0x94>)
 800071a:	2201      	movs	r2, #1
 800071c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_TIM2_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_TIM2_Init+0x94>)
 8000726:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800072a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_TIM2_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_TIM2_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000738:	4813      	ldr	r0, [pc, #76]	; (8000788 <MX_TIM2_Init+0x94>)
 800073a:	f001 fd59 	bl	80021f0 <HAL_TIM_Base_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000744:	f000 f8cb 	bl	80008de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_TIM2_Init+0x94>)
 8000756:	f001 feef 	bl	8002538 <HAL_TIM_ConfigClockSource>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f8bd 	bl	80008de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_TIM2_Init+0x94>)
 8000772:	f002 f8bb 	bl	80028ec <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800077c:	f000 f8af 	bl	80008de <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000f0 	.word	0x200000f0

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f002 f8fc 	bl	80029c0 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f886 	bl	80008de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000138 	.word	0x20000138
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <MX_GPIO_Init+0xd4>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a2e      	ldr	r2, [pc, #184]	; (80008b4 <MX_GPIO_Init+0xd4>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <MX_GPIO_Init+0xd4>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080c:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <MX_GPIO_Init+0xd4>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a28      	ldr	r2, [pc, #160]	; (80008b4 <MX_GPIO_Init+0xd4>)
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_GPIO_Init+0xd4>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0308 	and.w	r3, r3, #8
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2120      	movs	r1, #32
 8000828:	4823      	ldr	r0, [pc, #140]	; (80008b8 <MX_GPIO_Init+0xd8>)
 800082a:	f001 f8a0 	bl	800196e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|GPIO_PIN_2|GPIO_PIN_10
 800082e:	2200      	movs	r2, #0
 8000830:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000834:	4821      	ldr	r0, [pc, #132]	; (80008bc <MX_GPIO_Init+0xdc>)
 8000836:	f001 f89a 	bl	800196e <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin|TRAFFIC1_GREEN_Pin
                          |GPIO_PIN_15|GPIO_PIN_3|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin
                          |TRAFFIC0_GREEN_Pin|GPIO_PIN_7|PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800083a:	2320      	movs	r3, #32
 800083c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2302      	movs	r3, #2
 8000848:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4619      	mov	r1, r3
 8000850:	4819      	ldr	r0, [pc, #100]	; (80008b8 <MX_GPIO_Init+0xd8>)
 8000852:	f000 fef9 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDESTRIAN0_RED_Pin PEDESTRIAN0_GREEN_Pin TRAFFIC1_RED_Pin TRAFFIC1_YELLOW_Pin
                           TRAFFIC1_GREEN_Pin TRAFFIC0_RED_Pin TRAFFIC0_YELLOW_Pin TRAFFIC0_GREEN_Pin
                           PEDESTRIAN1_RED_Pin PEDESTRIAN1_GREEN_Pin */
  GPIO_InitStruct.Pin = PEDESTRIAN0_RED_Pin|PEDESTRIAN0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_YELLOW_Pin
 8000856:	f247 3373 	movw	r3, #29555	; 0x7373
 800085a:	60bb      	str	r3, [r7, #8]
                          |TRAFFIC1_GREEN_Pin|TRAFFIC0_RED_Pin|TRAFFIC0_YELLOW_Pin|TRAFFIC0_GREEN_Pin
                          |PEDESTRIAN1_RED_Pin|PEDESTRIAN1_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	4619      	mov	r1, r3
 800086e:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_GPIO_Init+0xdc>)
 8000870:	f000 feea 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB15
                           PB3 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15
 8000874:	f648 438c 	movw	r3, #35980	; 0x8c8c
 8000878:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087e:	2302      	movs	r3, #2
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2302      	movs	r3, #2
 8000884:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4619      	mov	r1, r3
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <MX_GPIO_Init+0xdc>)
 800088e:	f000 fedb 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000892:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000896:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	4619      	mov	r1, r3
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_GPIO_Init+0xd8>)
 80008a8:	f000 fece 	bl	8001648 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	bf00      	nop
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010800 	.word	0x40010800
 80008bc:	40010c00 	.word	0x40010c00

080008c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 80008d2:	f000 f853 	bl	800097c <SCH_Update>
	}
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e2:	b672      	cpsid	i
}
 80008e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <Error_Handler+0x8>

080008e8 <SCH_Init>:

#include "scheduler.h"

SCH_Task tasks[SCH_TASKNUMBER];

void SCH_Init(void) {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	71fb      	strb	r3, [r7, #7]
 80008f2:	e037      	b.n	8000964 <SCH_Init+0x7c>
        tasks[i].functionPointer = 0;
 80008f4:	79fa      	ldrb	r2, [r7, #7]
 80008f6:	4920      	ldr	r1, [pc, #128]	; (8000978 <SCH_Init+0x90>)
 80008f8:	4613      	mov	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
        tasks[i].id = SCH_TASKNUMBER - i - 1;
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f1c3 030f 	rsb	r3, r3, #15
 800090e:	b2d8      	uxtb	r0, r3
 8000910:	4919      	ldr	r1, [pc, #100]	; (8000978 <SCH_Init+0x90>)
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	440b      	add	r3, r1
 800091c:	3304      	adds	r3, #4
 800091e:	4602      	mov	r2, r0
 8000920:	701a      	strb	r2, [r3, #0]
        tasks[i].delay = 0;
 8000922:	79fa      	ldrb	r2, [r7, #7]
 8000924:	4914      	ldr	r1, [pc, #80]	; (8000978 <SCH_Init+0x90>)
 8000926:	4613      	mov	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	3308      	adds	r3, #8
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
        tasks[i].period = 0;
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	490f      	ldr	r1, [pc, #60]	; (8000978 <SCH_Init+0x90>)
 800093a:	4613      	mov	r3, r2
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	440b      	add	r3, r1
 8000944:	330c      	adds	r3, #12
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
        tasks[i].flag = 0;
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	490a      	ldr	r1, [pc, #40]	; (8000978 <SCH_Init+0x90>)
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	440b      	add	r3, r1
 8000958:	3310      	adds	r3, #16
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	3301      	adds	r3, #1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b0f      	cmp	r3, #15
 8000968:	d9c4      	bls.n	80008f4 <SCH_Init+0xc>
    }
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000184 	.word	0x20000184

0800097c <SCH_Update>:

void SCH_Update(void) {
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
    if (tasks[0].functionPointer == 0) return;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <SCH_Update+0x48>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d018      	beq.n	80009ba <SCH_Update+0x3e>
	if (tasks[0].delay > 0) {
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <SCH_Update+0x48>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00c      	beq.n	80009aa <SCH_Update+0x2e>
		if (tasks[0].delay > SCH_TIMERTICK) {
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <SCH_Update+0x48>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	2b0a      	cmp	r3, #10
 8000996:	d905      	bls.n	80009a4 <SCH_Update+0x28>
			tasks[0].delay -= SCH_TIMERTICK;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <SCH_Update+0x48>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	3b0a      	subs	r3, #10
 800099e:	4a09      	ldr	r2, [pc, #36]	; (80009c4 <SCH_Update+0x48>)
 80009a0:	6093      	str	r3, [r2, #8]
 80009a2:	e002      	b.n	80009aa <SCH_Update+0x2e>
		}
		else {
			tasks[0].delay = 0;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <SCH_Update+0x48>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
		}
	}
	if (tasks[0].delay == 0) {
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SCH_Update+0x48>)
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d104      	bne.n	80009bc <SCH_Update+0x40>
		tasks[0].flag = 1;
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SCH_Update+0x48>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	741a      	strb	r2, [r3, #16]
 80009b8:	e000      	b.n	80009bc <SCH_Update+0x40>
    if (tasks[0].functionPointer == 0) return;
 80009ba:	bf00      	nop
	}
}
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000184 	.word	0x20000184

080009c8 <SCH_Dispatch>:

void SCH_Dispatch(void) {
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
	if (tasks[0].functionPointer == 0 || tasks[0].flag == 0) return;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <SCH_Dispatch+0x58>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d01f      	beq.n	8000a16 <SCH_Dispatch+0x4e>
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <SCH_Dispatch+0x58>)
 80009d8:	7c1b      	ldrb	r3, [r3, #16]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d01b      	beq.n	8000a16 <SCH_Dispatch+0x4e>
	(*tasks[0].functionPointer)();
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <SCH_Dispatch+0x58>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4798      	blx	r3
	tasks[0].flag = 0;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <SCH_Dispatch+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	741a      	strb	r2, [r3, #16]
	SCH_Task newTask = tasks[0];
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <SCH_Dispatch+0x58>)
 80009ec:	1d3c      	adds	r4, r7, #4
 80009ee:	461d      	mov	r5, r3
 80009f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f4:	682b      	ldr	r3, [r5, #0]
 80009f6:	6023      	str	r3, [r4, #0]
	SCH_DeleteTask(tasks[0].id);
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <SCH_Dispatch+0x58>)
 80009fa:	791b      	ldrb	r3, [r3, #4]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f917 	bl	8000c30 <SCH_DeleteTask>
	if (newTask.period > 0) {
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d007      	beq.n	8000a18 <SCH_Dispatch+0x50>
		SCH_AddTask(newTask.functionPointer, newTask.period, newTask.period);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6939      	ldr	r1, [r7, #16]
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f808 	bl	8000a24 <SCH_AddTask>
 8000a14:	e000      	b.n	8000a18 <SCH_Dispatch+0x50>
	if (tasks[0].functionPointer == 0 || tasks[0].flag == 0) return;
 8000a16:	bf00      	nop
	}
}
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000184 	.word	0x20000184

08000a24 <SCH_AddTask>:

uint8_t SCH_AddTask(void (*functionPointer)(void), uint32_t delay, uint32_t period) {
 8000a24:	b4b0      	push	{r4, r5, r7}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
    if (tasks[SCH_TASKNUMBER - 1].functionPointer != 0) return SCH_TASKNUMBER;
 8000a30:	4b7e      	ldr	r3, [pc, #504]	; (8000c2c <SCH_AddTask+0x208>)
 8000a32:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SCH_AddTask+0x1a>
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	e0f1      	b.n	8000c22 <SCH_AddTask+0x1fe>
    uint8_t currentID = tasks[SCH_TASKNUMBER - 1].id;
 8000a3e:	4b7b      	ldr	r3, [pc, #492]	; (8000c2c <SCH_AddTask+0x208>)
 8000a40:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8000a44:	767b      	strb	r3, [r7, #25]
    uint32_t currentDelay = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	76fb      	strb	r3, [r7, #27]
 8000a4e:	e0e3      	b.n	8000c18 <SCH_AddTask+0x1f4>
        currentDelay += tasks[i].delay;
 8000a50:	7efa      	ldrb	r2, [r7, #27]
 8000a52:	4976      	ldr	r1, [pc, #472]	; (8000c2c <SCH_AddTask+0x208>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3308      	adds	r3, #8
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	4413      	add	r3, r2
 8000a66:	61fb      	str	r3, [r7, #28]
        if (currentDelay > delay || tasks[i].functionPointer == 0) {
 8000a68:	69fa      	ldr	r2, [r7, #28]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d80a      	bhi.n	8000a86 <SCH_AddTask+0x62>
 8000a70:	7efa      	ldrb	r2, [r7, #27]
 8000a72:	496e      	ldr	r1, [pc, #440]	; (8000c2c <SCH_AddTask+0x208>)
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f040 80c6 	bne.w	8000c12 <SCH_AddTask+0x1ee>
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8000a86:	230f      	movs	r3, #15
 8000a88:	76bb      	strb	r3, [r7, #26]
 8000a8a:	e017      	b.n	8000abc <SCH_AddTask+0x98>
                tasks[j] = tasks[j - 1];
 8000a8c:	7ebb      	ldrb	r3, [r7, #26]
 8000a8e:	1e5a      	subs	r2, r3, #1
 8000a90:	7eb9      	ldrb	r1, [r7, #26]
 8000a92:	4866      	ldr	r0, [pc, #408]	; (8000c2c <SCH_AddTask+0x208>)
 8000a94:	460b      	mov	r3, r1
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	440b      	add	r3, r1
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4418      	add	r0, r3
 8000a9e:	4963      	ldr	r1, [pc, #396]	; (8000c2c <SCH_AddTask+0x208>)
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	4604      	mov	r4, r0
 8000aac:	461d      	mov	r5, r3
 8000aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab2:	682b      	ldr	r3, [r5, #0]
 8000ab4:	6023      	str	r3, [r4, #0]
            for (uint8_t j = SCH_TASKNUMBER - 1; j > i; j --) {
 8000ab6:	7ebb      	ldrb	r3, [r7, #26]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	76bb      	strb	r3, [r7, #26]
 8000abc:	7eba      	ldrb	r2, [r7, #26]
 8000abe:	7efb      	ldrb	r3, [r7, #27]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8e3      	bhi.n	8000a8c <SCH_AddTask+0x68>
            }
            tasks[i].functionPointer = functionPointer;
 8000ac4:	7efa      	ldrb	r2, [r7, #27]
 8000ac6:	4959      	ldr	r1, [pc, #356]	; (8000c2c <SCH_AddTask+0x208>)
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	601a      	str	r2, [r3, #0]
            tasks[i].id = currentID;
 8000ad6:	7efa      	ldrb	r2, [r7, #27]
 8000ad8:	4954      	ldr	r1, [pc, #336]	; (8000c2c <SCH_AddTask+0x208>)
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	7e7a      	ldrb	r2, [r7, #25]
 8000ae8:	701a      	strb	r2, [r3, #0]
            tasks[i].period = period;
 8000aea:	7efa      	ldrb	r2, [r7, #27]
 8000aec:	494f      	ldr	r1, [pc, #316]	; (8000c2c <SCH_AddTask+0x208>)
 8000aee:	4613      	mov	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4413      	add	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	440b      	add	r3, r1
 8000af8:	330c      	adds	r3, #12
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
            tasks[i].flag = 0;
 8000afe:	7efa      	ldrb	r2, [r7, #27]
 8000b00:	494a      	ldr	r1, [pc, #296]	; (8000c2c <SCH_AddTask+0x208>)
 8000b02:	4613      	mov	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	3310      	adds	r3, #16
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
            if (currentDelay > delay) {
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d950      	bls.n	8000bbc <SCH_AddTask+0x198>
                int newDelay = currentDelay - delay;
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	617b      	str	r3, [r7, #20]
                tasks[i].delay = tasks[i + 1].delay - newDelay;
 8000b22:	7efb      	ldrb	r3, [r7, #27]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	4941      	ldr	r1, [pc, #260]	; (8000c2c <SCH_AddTask+0x208>)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	3308      	adds	r3, #8
 8000b34:	6819      	ldr	r1, [r3, #0]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	7efa      	ldrb	r2, [r7, #27]
 8000b3a:	1ac9      	subs	r1, r1, r3
 8000b3c:	483b      	ldr	r0, [pc, #236]	; (8000c2c <SCH_AddTask+0x208>)
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4403      	add	r3, r0
 8000b48:	3308      	adds	r3, #8
 8000b4a:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000b4c:	7efa      	ldrb	r2, [r7, #27]
 8000b4e:	4937      	ldr	r1, [pc, #220]	; (8000c2c <SCH_AddTask+0x208>)
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	440b      	add	r3, r1
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d109      	bne.n	8000b76 <SCH_AddTask+0x152>
                    tasks[i].flag = 1;
 8000b62:	7efa      	ldrb	r2, [r7, #27]
 8000b64:	4931      	ldr	r1, [pc, #196]	; (8000c2c <SCH_AddTask+0x208>)
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	440b      	add	r3, r1
 8000b70:	3310      	adds	r3, #16
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
                }
                tasks[i + 1].delay = newDelay;
 8000b76:	7efb      	ldrb	r3, [r7, #27]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	6979      	ldr	r1, [r7, #20]
 8000b7c:	482b      	ldr	r0, [pc, #172]	; (8000c2c <SCH_AddTask+0x208>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4403      	add	r3, r0
 8000b88:	3308      	adds	r3, #8
 8000b8a:	6019      	str	r1, [r3, #0]
                if (tasks[i + 1].delay == 0) {
 8000b8c:	7efb      	ldrb	r3, [r7, #27]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	4926      	ldr	r1, [pc, #152]	; (8000c2c <SCH_AddTask+0x208>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d12c      	bne.n	8000bfe <SCH_AddTask+0x1da>
                    tasks[i + 1].flag = 1;
 8000ba4:	7efb      	ldrb	r3, [r7, #27]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	4920      	ldr	r1, [pc, #128]	; (8000c2c <SCH_AddTask+0x208>)
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e020      	b.n	8000bfe <SCH_AddTask+0x1da>
                }
            }
            else {
                tasks[i].delay = delay - currentDelay;
 8000bbc:	7efa      	ldrb	r2, [r7, #27]
 8000bbe:	68b9      	ldr	r1, [r7, #8]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	1ac9      	subs	r1, r1, r3
 8000bc4:	4819      	ldr	r0, [pc, #100]	; (8000c2c <SCH_AddTask+0x208>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4403      	add	r3, r0
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	6019      	str	r1, [r3, #0]
                if (tasks[i].delay == 0) {
 8000bd4:	7efa      	ldrb	r2, [r7, #27]
 8000bd6:	4915      	ldr	r1, [pc, #84]	; (8000c2c <SCH_AddTask+0x208>)
 8000bd8:	4613      	mov	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	440b      	add	r3, r1
 8000be2:	3308      	adds	r3, #8
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d109      	bne.n	8000bfe <SCH_AddTask+0x1da>
                    tasks[i].flag = 1;
 8000bea:	7efa      	ldrb	r2, [r7, #27]
 8000bec:	490f      	ldr	r1, [pc, #60]	; (8000c2c <SCH_AddTask+0x208>)
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	3310      	adds	r3, #16
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
                }
            }
            return tasks[i].id;
 8000bfe:	7efa      	ldrb	r2, [r7, #27]
 8000c00:	490a      	ldr	r1, [pc, #40]	; (8000c2c <SCH_AddTask+0x208>)
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	e007      	b.n	8000c22 <SCH_AddTask+0x1fe>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000c12:	7efb      	ldrb	r3, [r7, #27]
 8000c14:	3301      	adds	r3, #1
 8000c16:	76fb      	strb	r3, [r7, #27]
 8000c18:	7efb      	ldrb	r3, [r7, #27]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	f67f af18 	bls.w	8000a50 <SCH_AddTask+0x2c>
        }
    }
    return SCH_TASKNUMBER;
 8000c20:	2310      	movs	r3, #16
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bcb0      	pop	{r4, r5, r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000184 	.word	0x20000184

08000c30 <SCH_DeleteTask>:

unsigned char SCH_DeleteTask(uint8_t id) {
 8000c30:	b4b0      	push	{r4, r5, r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]
 8000c3e:	e07c      	b.n	8000d3a <SCH_DeleteTask+0x10a>
        if (tasks[i].id == id) {
 8000c40:	7bfa      	ldrb	r2, [r7, #15]
 8000c42:	4943      	ldr	r1, [pc, #268]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	3304      	adds	r3, #4
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d16d      	bne.n	8000d34 <SCH_DeleteTask+0x104>
            uint8_t currentID = tasks[i].id;
 8000c58:	7bfa      	ldrb	r2, [r7, #15]
 8000c5a:	493d      	ldr	r1, [pc, #244]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	440b      	add	r3, r1
 8000c66:	3304      	adds	r3, #4
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	737b      	strb	r3, [r7, #13]
            if (tasks[i + 1].functionPointer != 0) {
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	4937      	ldr	r1, [pc, #220]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d01d      	beq.n	8000cbe <SCH_DeleteTask+0x8e>
                tasks[i + 1].delay += tasks[i].delay;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	4932      	ldr	r1, [pc, #200]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	440b      	add	r3, r1
 8000c92:	3308      	adds	r3, #8
 8000c94:	6819      	ldr	r1, [r3, #0]
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	482d      	ldr	r0, [pc, #180]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4403      	add	r3, r0
 8000ca4:	3308      	adds	r3, #8
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	3201      	adds	r2, #1
 8000cac:	4419      	add	r1, r3
 8000cae:	4828      	ldr	r0, [pc, #160]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4403      	add	r3, r0
 8000cba:	3308      	adds	r3, #8
 8000cbc:	6019      	str	r1, [r3, #0]
            }
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	73bb      	strb	r3, [r7, #14]
 8000cc2:	e017      	b.n	8000cf4 <SCH_DeleteTask+0xc4>
                tasks[j] = tasks[j + 1];
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	7bb9      	ldrb	r1, [r7, #14]
 8000cca:	4821      	ldr	r0, [pc, #132]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000ccc:	460b      	mov	r3, r1
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4418      	add	r0, r3
 8000cd6:	491e      	ldr	r1, [pc, #120]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	461d      	mov	r5, r3
 8000ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cea:	682b      	ldr	r3, [r5, #0]
 8000cec:	6023      	str	r3, [r4, #0]
            for (uint8_t j = i; j < SCH_TASKNUMBER - 1; j ++) {
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	73bb      	strb	r3, [r7, #14]
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	2b0e      	cmp	r3, #14
 8000cf8:	d9e4      	bls.n	8000cc4 <SCH_DeleteTask+0x94>
            }
            tasks[SCH_TASKNUMBER - 1].functionPointer = 0;
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            tasks[SCH_TASKNUMBER - 1].id = currentID;
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000d04:	7b7b      	ldrb	r3, [r7, #13]
 8000d06:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
            tasks[SCH_TASKNUMBER - 1].delay = 0;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            tasks[SCH_TASKNUMBER - 1].period = 0;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
            tasks[SCH_TASKNUMBER - 1].flag = 0;
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
            return tasks[SCH_TASKNUMBER - 1].functionPointer == 0;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <SCH_DeleteTask+0x120>)
 8000d24:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	bf0c      	ite	eq
 8000d2c:	2301      	moveq	r3, #1
 8000d2e:	2300      	movne	r3, #0
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	e007      	b.n	8000d44 <SCH_DeleteTask+0x114>
    for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	3301      	adds	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	f67f af7f 	bls.w	8000c40 <SCH_DeleteTask+0x10>
        }
    }
    return 0;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bcb0      	pop	{r4, r5, r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000184 	.word	0x20000184

08000d54 <SCH_Report>:

uint8_t SCH_Report(void) {
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71bb      	strb	r3, [r7, #6]
 8000d62:	e00f      	b.n	8000d84 <SCH_Report+0x30>
		if (tasks[i].functionPointer != 0) {
 8000d64:	79ba      	ldrb	r2, [r7, #6]
 8000d66:	490c      	ldr	r1, [pc, #48]	; (8000d98 <SCH_Report+0x44>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <SCH_Report+0x2a>
			count ++;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < SCH_TASKNUMBER; i ++) {
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	3301      	adds	r3, #1
 8000d82:	71bb      	strb	r3, [r7, #6]
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d9ec      	bls.n	8000d64 <SCH_Report+0x10>
		}
	}
	return count;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000184 	.word	0x20000184

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_MspInit+0x40>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_MspInit+0x40>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6193      	str	r3, [r2, #24]
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_MspInit+0x40>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_MspInit+0x40>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_MspInit+0x40>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	61d3      	str	r3, [r2, #28]
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_MspInit+0x40>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df0:	d113      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_TIM_Base_MspInit+0x44>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_TIM_Base_MspInit+0x44>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_TIM_Base_MspInit+0x44>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	201c      	movs	r0, #28
 8000e10:	f000 fb31 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e14:	201c      	movs	r0, #28
 8000e16:	f000 fb4a 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <HAL_UART_MspInit+0x98>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d137      	bne.n	8000eb8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <HAL_UART_MspInit+0x9c>)
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <HAL_UART_MspInit+0x9c>)
 8000e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e52:	61d3      	str	r3, [r2, #28]
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_UART_MspInit+0x9c>)
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_UART_MspInit+0x9c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_UART_MspInit+0x9c>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_UART_MspInit+0x9c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <HAL_UART_MspInit+0xa0>)
 8000e8c:	f000 fbdc 	bl	8001648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e90:	2308      	movs	r3, #8
 8000e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <HAL_UART_MspInit+0xa0>)
 8000ea4:	f000 fbd0 	bl	8001648 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2026      	movs	r0, #38	; 0x26
 8000eae:	f000 fae2 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eb2:	2026      	movs	r0, #38	; 0x26
 8000eb4:	f000 fafb 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010800 	.word	0x40010800

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f000 f9bd 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM2_IRQHandler+0x10>)
 8000f22:	f001 fa01 	bl	8002328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000f0 	.word	0x200000f0

08000f30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <USART2_IRQHandler+0x10>)
 8000f36:	f001 fe3b 	bl	8002bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000138 	.word	0x20000138

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f002 fbc4 	bl	8003700 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20002800 	.word	0x20002800
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	200002c4 	.word	0x200002c4
 8000fac:	20000418 	.word	0x20000418

08000fb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <trafficToggle>:

static uint16_t trafficRedPins[TRAFFIC_NUMBER] = {TRAFFIC0_RED_Pin, TRAFFIC1_RED_Pin};
static uint16_t trafficYellowPins[TRAFFIC_NUMBER] = {TRAFFIC0_YELLOW_Pin, TRAFFIC1_YELLOW_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMBER] = {TRAFFIC0_GREEN_Pin, TRAFFIC1_GREEN_Pin};

void trafficToggle(uint8_t index, enum TRAFFIC_STATE state) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
	switch (state) {
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	f200 80b0 	bhi.w	8001134 <trafficToggle+0x178>
 8000fd4:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <trafficToggle+0x20>)
 8000fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fda:	bf00      	nop
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	0800103f 	.word	0x0800103f
 8000fe4:	08001091 	.word	0x08001091
 8000fe8:	080010e3 	.word	0x080010e3
	case TRAFFIC_OFF:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a53      	ldr	r2, [pc, #332]	; (800113c <trafficToggle+0x180>)
 8000ff0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4a52      	ldr	r2, [pc, #328]	; (8001140 <trafficToggle+0x184>)
 8000ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4619      	mov	r1, r3
 8001000:	f000 fcb5 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4a4f      	ldr	r2, [pc, #316]	; (8001144 <trafficToggle+0x188>)
 8001008:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4a4e      	ldr	r2, [pc, #312]	; (8001148 <trafficToggle+0x18c>)
 8001010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001014:	2201      	movs	r2, #1
 8001016:	4619      	mov	r1, r3
 8001018:	f000 fca9 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4a4b      	ldr	r2, [pc, #300]	; (800114c <trafficToggle+0x190>)
 8001020:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <trafficToggle+0x194>)
 8001028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	f000 fc9d 	bl	800196e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_OFF;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a47      	ldr	r2, [pc, #284]	; (8001154 <trafficToggle+0x198>)
 8001038:	2100      	movs	r1, #0
 800103a:	54d1      	strb	r1, [r2, r3]
		break;
 800103c:	e07a      	b.n	8001134 <trafficToggle+0x178>
	case TRAFFIC_RED:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_RESET);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	4a3e      	ldr	r2, [pc, #248]	; (800113c <trafficToggle+0x180>)
 8001042:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4a3d      	ldr	r2, [pc, #244]	; (8001140 <trafficToggle+0x184>)
 800104a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800104e:	2200      	movs	r2, #0
 8001050:	4619      	mov	r1, r3
 8001052:	f000 fc8c 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4a3a      	ldr	r2, [pc, #232]	; (8001144 <trafficToggle+0x188>)
 800105a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4a39      	ldr	r2, [pc, #228]	; (8001148 <trafficToggle+0x18c>)
 8001062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001066:	2201      	movs	r2, #1
 8001068:	4619      	mov	r1, r3
 800106a:	f000 fc80 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	4a36      	ldr	r2, [pc, #216]	; (800114c <trafficToggle+0x190>)
 8001072:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4a35      	ldr	r2, [pc, #212]	; (8001150 <trafficToggle+0x194>)
 800107a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	f000 fc74 	bl	800196e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_RED;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4a32      	ldr	r2, [pc, #200]	; (8001154 <trafficToggle+0x198>)
 800108a:	2101      	movs	r1, #1
 800108c:	54d1      	strb	r1, [r2, r3]
		break;
 800108e:	e051      	b.n	8001134 <trafficToggle+0x178>
	case TRAFFIC_YELLOW:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	4a2a      	ldr	r2, [pc, #168]	; (800113c <trafficToggle+0x180>)
 8001094:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4a29      	ldr	r2, [pc, #164]	; (8001140 <trafficToggle+0x184>)
 800109c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a0:	2201      	movs	r2, #1
 80010a2:	4619      	mov	r1, r3
 80010a4:	f000 fc63 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_RESET);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <trafficToggle+0x188>)
 80010ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4a25      	ldr	r2, [pc, #148]	; (8001148 <trafficToggle+0x18c>)
 80010b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	f000 fc57 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_SET);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4a22      	ldr	r2, [pc, #136]	; (800114c <trafficToggle+0x190>)
 80010c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4a21      	ldr	r2, [pc, #132]	; (8001150 <trafficToggle+0x194>)
 80010cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d0:	2201      	movs	r2, #1
 80010d2:	4619      	mov	r1, r3
 80010d4:	f000 fc4b 	bl	800196e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_YELLOW;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <trafficToggle+0x198>)
 80010dc:	2102      	movs	r1, #2
 80010de:	54d1      	strb	r1, [r2, r3]
		break;
 80010e0:	e028      	b.n	8001134 <trafficToggle+0x178>
	case TRAFFIC_GREEN:
		HAL_GPIO_WritePin(trafficRedPorts[index], trafficRedPins[index], GPIO_PIN_SET);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4a15      	ldr	r2, [pc, #84]	; (800113c <trafficToggle+0x180>)
 80010e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <trafficToggle+0x184>)
 80010ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f000 fc3a 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficYellowPorts[index], trafficYellowPins[index], GPIO_PIN_SET);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <trafficToggle+0x188>)
 80010fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <trafficToggle+0x18c>)
 8001106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	f000 fc2e 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(trafficGreenPorts[index], trafficGreenPins[index], GPIO_PIN_RESET);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <trafficToggle+0x190>)
 8001116:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <trafficToggle+0x194>)
 800111e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	f000 fc22 	bl	800196e <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_GREEN;
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4a09      	ldr	r2, [pc, #36]	; (8001154 <trafficToggle+0x198>)
 800112e:	2103      	movs	r1, #3
 8001130:	54d1      	strb	r1, [r2, r3]
		break;
 8001132:	bf00      	nop
	}
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000028 	.word	0x20000028
 8001140:	20000040 	.word	0x20000040
 8001144:	20000030 	.word	0x20000030
 8001148:	20000044 	.word	0x20000044
 800114c:	20000038 	.word	0x20000038
 8001150:	20000048 	.word	0x20000048
 8001154:	200002c8 	.word	0x200002c8

08001158 <traffic0Red>:

void traffic0Off(void) {
	trafficToggle(0, TRAFFIC_OFF);
}
void traffic0Red(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_RED);
 800115c:	2101      	movs	r1, #1
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff ff2c 	bl	8000fbc <trafficToggle>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <traffic0Yellow>:
void traffic0Yellow(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_YELLOW);
 800116c:	2102      	movs	r1, #2
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff ff24 	bl	8000fbc <trafficToggle>
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <traffic0Green>:
void traffic0Green(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	trafficToggle(0, TRAFFIC_GREEN);
 800117c:	2103      	movs	r1, #3
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff ff1c 	bl	8000fbc <trafficToggle>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <traffic1Red>:

void traffic1Off(void) {
	trafficToggle(1, TRAFFIC_OFF);
}
void traffic1Red(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_RED);
 800118c:	2101      	movs	r1, #1
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff ff14 	bl	8000fbc <trafficToggle>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <traffic1Yellow>:
void traffic1Yellow(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_YELLOW);
 800119c:	2102      	movs	r1, #2
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff ff0c 	bl	8000fbc <trafficToggle>
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <traffic1Green>:
void traffic1Green(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	trafficToggle(1, TRAFFIC_GREEN);
 80011ac:	2103      	movs	r1, #3
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff ff04 	bl	8000fbc <trafficToggle>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b8:	f7ff fefa 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011be:	490c      	ldr	r1, [pc, #48]	; (80011f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011c0:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011d4:	4c09      	ldr	r4, [pc, #36]	; (80011fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e2:	f002 fa93 	bl	800370c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011e6:	f7ff fa0b 	bl	8000600 <main>
  bx lr
 80011ea:	4770      	bx	lr
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80011f4:	080040a0 	.word	0x080040a0
  ldr r2, =_sbss
 80011f8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80011fc:	20000418 	.word	0x20000418

08001200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC1_2_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_Init+0x28>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_Init+0x28>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f923 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	200f      	movs	r0, #15
 800121c:	f000 f808 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff fdbc 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40022000 	.word	0x40022000

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f93b 	bl	80014ca <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f903 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000018 	.word	0x20000018
 8001288:	20000050 	.word	0x20000050
 800128c:	2000004c 	.word	0x2000004c

08001290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_IncTick+0x1c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_IncTick+0x20>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <HAL_IncTick+0x20>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	20000050 	.word	0x20000050
 80012b0:	200002cc 	.word	0x200002cc

080012b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <HAL_GetTick+0x10>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	200002cc 	.word	0x200002cc

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4906      	ldr	r1, [pc, #24]	; (8001360 <__NVIC_EnableIRQ+0x34>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff90 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff2d 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff42 	bl	8001310 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff90 	bl	80013b8 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5f 	bl	8001364 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff35 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d008      	beq.n	800150c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e020      	b.n	800154e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 020e 	bic.w	r2, r2, #14
 800151a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f202 	lsl.w	r2, r1, r2
 800153a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d005      	beq.n	800157c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2204      	movs	r2, #4
 8001574:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e051      	b.n	8001620 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 020e 	bic.w	r2, r2, #14
 800158a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a22      	ldr	r2, [pc, #136]	; (800162c <HAL_DMA_Abort_IT+0xd4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d029      	beq.n	80015fa <HAL_DMA_Abort_IT+0xa2>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a21      	ldr	r2, [pc, #132]	; (8001630 <HAL_DMA_Abort_IT+0xd8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d022      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x9e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <HAL_DMA_Abort_IT+0xdc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01a      	beq.n	80015f0 <HAL_DMA_Abort_IT+0x98>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <HAL_DMA_Abort_IT+0xe0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d012      	beq.n	80015ea <HAL_DMA_Abort_IT+0x92>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <HAL_DMA_Abort_IT+0xe4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00a      	beq.n	80015e4 <HAL_DMA_Abort_IT+0x8c>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_DMA_Abort_IT+0xe8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d102      	bne.n	80015de <HAL_DMA_Abort_IT+0x86>
 80015d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015dc:	e00e      	b.n	80015fc <HAL_DMA_Abort_IT+0xa4>
 80015de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015e2:	e00b      	b.n	80015fc <HAL_DMA_Abort_IT+0xa4>
 80015e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e8:	e008      	b.n	80015fc <HAL_DMA_Abort_IT+0xa4>
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	e005      	b.n	80015fc <HAL_DMA_Abort_IT+0xa4>
 80015f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f4:	e002      	b.n	80015fc <HAL_DMA_Abort_IT+0xa4>
 80015f6:	2310      	movs	r3, #16
 80015f8:	e000      	b.n	80015fc <HAL_DMA_Abort_IT+0xa4>
 80015fa:	2301      	movs	r3, #1
 80015fc:	4a11      	ldr	r2, [pc, #68]	; (8001644 <HAL_DMA_Abort_IT+0xec>)
 80015fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	4798      	blx	r3
    } 
  }
  return status;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40020008 	.word	0x40020008
 8001630:	4002001c 	.word	0x4002001c
 8001634:	40020030 	.word	0x40020030
 8001638:	40020044 	.word	0x40020044
 800163c:	40020058 	.word	0x40020058
 8001640:	4002006c 	.word	0x4002006c
 8001644:	40020000 	.word	0x40020000

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b08b      	sub	sp, #44	; 0x2c
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165a:	e161      	b.n	8001920 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800165c:	2201      	movs	r2, #1
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	429a      	cmp	r2, r3
 8001676:	f040 8150 	bne.w	800191a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a97      	ldr	r2, [pc, #604]	; (80018dc <HAL_GPIO_Init+0x294>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d05e      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 8001684:	4a95      	ldr	r2, [pc, #596]	; (80018dc <HAL_GPIO_Init+0x294>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d875      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 800168a:	4a95      	ldr	r2, [pc, #596]	; (80018e0 <HAL_GPIO_Init+0x298>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d058      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 8001690:	4a93      	ldr	r2, [pc, #588]	; (80018e0 <HAL_GPIO_Init+0x298>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d86f      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 8001696:	4a93      	ldr	r2, [pc, #588]	; (80018e4 <HAL_GPIO_Init+0x29c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d052      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 800169c:	4a91      	ldr	r2, [pc, #580]	; (80018e4 <HAL_GPIO_Init+0x29c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d869      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016a2:	4a91      	ldr	r2, [pc, #580]	; (80018e8 <HAL_GPIO_Init+0x2a0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d04c      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 80016a8:	4a8f      	ldr	r2, [pc, #572]	; (80018e8 <HAL_GPIO_Init+0x2a0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d863      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016ae:	4a8f      	ldr	r2, [pc, #572]	; (80018ec <HAL_GPIO_Init+0x2a4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d046      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 80016b4:	4a8d      	ldr	r2, [pc, #564]	; (80018ec <HAL_GPIO_Init+0x2a4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d85d      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016ba:	2b12      	cmp	r3, #18
 80016bc:	d82a      	bhi.n	8001714 <HAL_GPIO_Init+0xcc>
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d859      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <HAL_GPIO_Init+0x80>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	08001743 	.word	0x08001743
 80016cc:	0800171d 	.word	0x0800171d
 80016d0:	0800172f 	.word	0x0800172f
 80016d4:	08001771 	.word	0x08001771
 80016d8:	08001777 	.word	0x08001777
 80016dc:	08001777 	.word	0x08001777
 80016e0:	08001777 	.word	0x08001777
 80016e4:	08001777 	.word	0x08001777
 80016e8:	08001777 	.word	0x08001777
 80016ec:	08001777 	.word	0x08001777
 80016f0:	08001777 	.word	0x08001777
 80016f4:	08001777 	.word	0x08001777
 80016f8:	08001777 	.word	0x08001777
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001777 	.word	0x08001777
 8001704:	08001777 	.word	0x08001777
 8001708:	08001777 	.word	0x08001777
 800170c:	08001725 	.word	0x08001725
 8001710:	08001739 	.word	0x08001739
 8001714:	4a76      	ldr	r2, [pc, #472]	; (80018f0 <HAL_GPIO_Init+0x2a8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800171a:	e02c      	b.n	8001776 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	623b      	str	r3, [r7, #32]
          break;
 8001722:	e029      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	3304      	adds	r3, #4
 800172a:	623b      	str	r3, [r7, #32]
          break;
 800172c:	e024      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	3308      	adds	r3, #8
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e01f      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	330c      	adds	r3, #12
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	e01a      	b.n	8001778 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800174a:	2304      	movs	r3, #4
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e013      	b.n	8001778 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001758:	2308      	movs	r3, #8
 800175a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	611a      	str	r2, [r3, #16]
          break;
 8001762:	e009      	b.n	8001778 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001764:	2308      	movs	r3, #8
 8001766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	615a      	str	r2, [r3, #20]
          break;
 800176e:	e003      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x130>
          break;
 8001776:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d801      	bhi.n	8001782 <HAL_GPIO_Init+0x13a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	e001      	b.n	8001786 <HAL_GPIO_Init+0x13e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3304      	adds	r3, #4
 8001786:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2bff      	cmp	r3, #255	; 0xff
 800178c:	d802      	bhi.n	8001794 <HAL_GPIO_Init+0x14c>
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x152>
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	3b08      	subs	r3, #8
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	210f      	movs	r1, #15
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	401a      	ands	r2, r3
 80017ac:	6a39      	ldr	r1, [r7, #32]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80a9 	beq.w	800191a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017c8:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <HAL_GPIO_Init+0x2ac>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a49      	ldr	r2, [pc, #292]	; (80018f4 <HAL_GPIO_Init+0x2ac>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_GPIO_Init+0x2ac>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3d      	ldr	r2, [pc, #244]	; (80018fc <HAL_GPIO_Init+0x2b4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00d      	beq.n	8001828 <HAL_GPIO_Init+0x1e0>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <HAL_GPIO_Init+0x2b8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d007      	beq.n	8001824 <HAL_GPIO_Init+0x1dc>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3b      	ldr	r2, [pc, #236]	; (8001904 <HAL_GPIO_Init+0x2bc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_GPIO_Init+0x1d8>
 800181c:	2302      	movs	r3, #2
 800181e:	e004      	b.n	800182a <HAL_GPIO_Init+0x1e2>
 8001820:	2303      	movs	r3, #3
 8001822:	e002      	b.n	800182a <HAL_GPIO_Init+0x1e2>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_GPIO_Init+0x1e2>
 8001828:	2300      	movs	r3, #0
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	f002 0203 	and.w	r2, r2, #3
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	4093      	lsls	r3, r2
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183a:	492f      	ldr	r1, [pc, #188]	; (80018f8 <HAL_GPIO_Init+0x2b0>)
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001854:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	492b      	ldr	r1, [pc, #172]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	4927      	ldr	r1, [pc, #156]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 800186c:	4013      	ands	r3, r2
 800186e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	4921      	ldr	r1, [pc, #132]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	60cb      	str	r3, [r1, #12]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	491d      	ldr	r1, [pc, #116]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 8001894:	4013      	ands	r3, r2
 8001896:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4917      	ldr	r1, [pc, #92]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4913      	ldr	r1, [pc, #76]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d01f      	beq.n	800190c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	490d      	ldr	r1, [pc, #52]	; (8001908 <HAL_GPIO_Init+0x2c0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	e01f      	b.n	800191a <HAL_GPIO_Init+0x2d2>
 80018da:	bf00      	nop
 80018dc:	10320000 	.word	0x10320000
 80018e0:	10310000 	.word	0x10310000
 80018e4:	10220000 	.word	0x10220000
 80018e8:	10210000 	.word	0x10210000
 80018ec:	10120000 	.word	0x10120000
 80018f0:	10110000 	.word	0x10110000
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010000 	.word	0x40010000
 80018fc:	40010800 	.word	0x40010800
 8001900:	40010c00 	.word	0x40010c00
 8001904:	40011000 	.word	0x40011000
 8001908:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_GPIO_Init+0x2f4>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	43db      	mvns	r3, r3
 8001914:	4909      	ldr	r1, [pc, #36]	; (800193c <HAL_GPIO_Init+0x2f4>)
 8001916:	4013      	ands	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	3301      	adds	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	f47f ae96 	bne.w	800165c <HAL_GPIO_Init+0x14>
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	372c      	adds	r7, #44	; 0x2c
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e001      	b.n	8001962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	807b      	strh	r3, [r7, #2]
 800197a:	4613      	mov	r3, r2
 800197c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197e:	787b      	ldrb	r3, [r7, #1]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001984:	887a      	ldrh	r2, [r7, #2]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800198a:	e003      	b.n	8001994 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	041a      	lsls	r2, r3, #16
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	611a      	str	r2, [r3, #16]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b0:	887a      	ldrh	r2, [r7, #2]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	041a      	lsls	r2, r3, #16
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	400b      	ands	r3, r1
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	611a      	str	r2, [r3, #16]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e272      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8087 	beq.w	8001afe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f0:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d00c      	beq.n	8001a16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019fc:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d112      	bne.n	8001a2e <HAL_RCC_OscConfig+0x5e>
 8001a08:	4b8c      	ldr	r3, [pc, #560]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d10b      	bne.n	8001a2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a16:	4b89      	ldr	r3, [pc, #548]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d06c      	beq.n	8001afc <HAL_RCC_OscConfig+0x12c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d168      	bne.n	8001afc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e24c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x76>
 8001a38:	4b80      	ldr	r3, [pc, #512]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a7f      	ldr	r2, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e02e      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x98>
 8001a4e:	4b7b      	ldr	r3, [pc, #492]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7a      	ldr	r2, [pc, #488]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b78      	ldr	r3, [pc, #480]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a77      	ldr	r2, [pc, #476]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e01d      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0xbc>
 8001a72:	4b72      	ldr	r3, [pc, #456]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a71      	ldr	r2, [pc, #452]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6e      	ldr	r2, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0xd4>
 8001a8c:	4b6b      	ldr	r3, [pc, #428]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6a      	ldr	r2, [pc, #424]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b68      	ldr	r3, [pc, #416]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a67      	ldr	r2, [pc, #412]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d013      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fc02 	bl	80012b4 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fbfe 	bl	80012b4 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e200      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fbee 	bl	80012b4 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fbea 	bl	80012b4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1ec      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x10c>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d063      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0a:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00b      	beq.n	8001b2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b16:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d11c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x18c>
 8001b22:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d116      	bne.n	8001b5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_RCC_OscConfig+0x176>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e1c0      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4939      	ldr	r1, [pc, #228]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	e03a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fba3 	bl	80012b4 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b72:	f7ff fb9f 	bl	80012b4 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e1a1      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4927      	ldr	r1, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e015      	b.n	8001bd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fb82 	bl	80012b4 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fb7e 	bl	80012b4 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e180      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d03a      	beq.n	8001c54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d019      	beq.n	8001c1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff fb62 	bl	80012b4 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fb5e 	bl	80012b4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e160      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f000 face 	bl	80021b4 <RCC_Delay>
 8001c18:	e01c      	b.n	8001c54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7ff fb48 	bl	80012b4 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c26:	e00f      	b.n	8001c48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff fb44 	bl	80012b4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d908      	bls.n	8001c48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e146      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	42420000 	.word	0x42420000
 8001c44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	4b92      	ldr	r3, [pc, #584]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1e9      	bne.n	8001c28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80a6 	beq.w	8001dae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10d      	bne.n	8001c8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a87      	ldr	r2, [pc, #540]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8e:	4b82      	ldr	r3, [pc, #520]	; (8001e98 <HAL_RCC_OscConfig+0x4c8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d118      	bne.n	8001ccc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9a:	4b7f      	ldr	r3, [pc, #508]	; (8001e98 <HAL_RCC_OscConfig+0x4c8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7e      	ldr	r2, [pc, #504]	; (8001e98 <HAL_RCC_OscConfig+0x4c8>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fb05 	bl	80012b4 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cae:	f7ff fb01 	bl	80012b4 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b64      	cmp	r3, #100	; 0x64
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e103      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	4b75      	ldr	r3, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x4c8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x312>
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a6e      	ldr	r2, [pc, #440]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	e02d      	b.n	8001d3e <HAL_RCC_OscConfig+0x36e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x334>
 8001cea:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a69      	ldr	r2, [pc, #420]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a66      	ldr	r2, [pc, #408]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	e01c      	b.n	8001d3e <HAL_RCC_OscConfig+0x36e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	d10c      	bne.n	8001d26 <HAL_RCC_OscConfig+0x356>
 8001d0c:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4a60      	ldr	r2, [pc, #384]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6213      	str	r3, [r2, #32]
 8001d18:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4a5d      	ldr	r2, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6213      	str	r3, [r2, #32]
 8001d24:	e00b      	b.n	8001d3e <HAL_RCC_OscConfig+0x36e>
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a5a      	ldr	r2, [pc, #360]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	4b58      	ldr	r3, [pc, #352]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a57      	ldr	r2, [pc, #348]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	f023 0304 	bic.w	r3, r3, #4
 8001d3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d015      	beq.n	8001d72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7ff fab5 	bl	80012b4 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff fab1 	bl	80012b4 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0b1      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0ee      	beq.n	8001d4e <HAL_RCC_OscConfig+0x37e>
 8001d70:	e014      	b.n	8001d9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fa9f 	bl	80012b4 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d78:	e00a      	b.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff fa9b 	bl	80012b4 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e09b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d90:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ee      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d105      	bne.n	8001dae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da2:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a3b      	ldr	r2, [pc, #236]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8087 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d061      	beq.n	8001e88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d146      	bne.n	8001e5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dcc:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_RCC_OscConfig+0x4cc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fa6f 	bl	80012b4 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dda:	f7ff fa6b 	bl	80012b4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e06d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dec:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d108      	bne.n	8001e14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e02:	4b24      	ldr	r3, [pc, #144]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	4921      	ldr	r1, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a19      	ldr	r1, [r3, #32]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	430b      	orrs	r3, r1
 8001e26:	491b      	ldr	r1, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fa3f 	bl	80012b4 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7ff fa3b 	bl	80012b4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e03d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x46a>
 8001e58:	e035      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_RCC_OscConfig+0x4cc>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fa28 	bl	80012b4 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff fa24 	bl	80012b4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e026      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x498>
 8001e86:	e01e      	b.n	8001ec6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e019      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_OscConfig+0x500>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0d0      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d910      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4965      	ldr	r1, [pc, #404]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b8      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d020      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f30:	4b59      	ldr	r3, [pc, #356]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a58      	ldr	r2, [pc, #352]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b50      	ldr	r3, [pc, #320]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	494d      	ldr	r1, [pc, #308]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d040      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d115      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07f      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e073      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e06b      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4b39      	ldr	r3, [pc, #228]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f023 0203 	bic.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4936      	ldr	r1, [pc, #216]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc4:	f7ff f976 	bl	80012b4 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7ff f972 	bl	80012b4 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e053      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 020c 	and.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1eb      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d210      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 0207 	bic.w	r2, r3, #7
 800200a:	4922      	ldr	r1, [pc, #136]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e032      	b.n	800208a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4916      	ldr	r1, [pc, #88]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	490e      	ldr	r1, [pc, #56]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002062:	f000 f821 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002066:	4602      	mov	r2, r0
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	490a      	ldr	r1, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	5ccb      	ldrb	r3, [r1, r3]
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1cc>)
 800207c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f8d4 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40022000 	.word	0x40022000
 8002098:	40021000 	.word	0x40021000
 800209c:	08004038 	.word	0x08004038
 80020a0:	20000018 	.word	0x20000018
 80020a4:	2000004c 	.word	0x2000004c

080020a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_RCC_GetSysClockFreq+0x94>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d002      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x30>
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d003      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x36>
 80020d6:	e027      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_RCC_GetSysClockFreq+0x98>)
 80020da:	613b      	str	r3, [r7, #16]
      break;
 80020dc:	e027      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	0c9b      	lsrs	r3, r3, #18
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020e8:	5cd3      	ldrb	r3, [r2, r3]
 80020ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d010      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_RCC_GetSysClockFreq+0x94>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	0c5b      	lsrs	r3, r3, #17
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_RCC_GetSysClockFreq+0x98>)
 800210a:	fb03 f202 	mul.w	r2, r3, r2
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e004      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a0c      	ldr	r2, [pc, #48]	; (800214c <HAL_RCC_GetSysClockFreq+0xa4>)
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	613b      	str	r3, [r7, #16]
      break;
 8002126:	e002      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetSysClockFreq+0x98>)
 800212a:	613b      	str	r3, [r7, #16]
      break;
 800212c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212e:	693b      	ldr	r3, [r7, #16]
}
 8002130:	4618      	mov	r0, r3
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	007a1200 	.word	0x007a1200
 8002144:	08004050 	.word	0x08004050
 8002148:	08004060 	.word	0x08004060
 800214c:	003d0900 	.word	0x003d0900

08002150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <HAL_RCC_GetHCLKFreq+0x10>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	20000018 	.word	0x20000018

08002164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002168:	f7ff fff2 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4903      	ldr	r1, [pc, #12]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002180:	4618      	mov	r0, r3
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	08004048 	.word	0x08004048

0800218c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002190:	f7ff ffde 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0adb      	lsrs	r3, r3, #11
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4903      	ldr	r1, [pc, #12]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08004048 	.word	0x08004048

080021b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <RCC_Delay+0x34>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <RCC_Delay+0x38>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0a5b      	lsrs	r3, r3, #9
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021d0:	bf00      	nop
  }
  while (Delay --);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1e5a      	subs	r2, r3, #1
 80021d6:	60fa      	str	r2, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f9      	bne.n	80021d0 <RCC_Delay+0x1c>
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	20000018 	.word	0x20000018
 80021ec:	10624dd3 	.word	0x10624dd3

080021f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e041      	b.n	8002286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fde2 	bl	8000de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3304      	adds	r3, #4
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f000 fa6e 	bl	8002710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d001      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e035      	b.n	8002314 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a16      	ldr	r2, [pc, #88]	; (8002320 <HAL_TIM_Base_Start_IT+0x90>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d009      	beq.n	80022de <HAL_TIM_Base_Start_IT+0x4e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d2:	d004      	beq.n	80022de <HAL_TIM_Base_Start_IT+0x4e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a12      	ldr	r2, [pc, #72]	; (8002324 <HAL_TIM_Base_Start_IT+0x94>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d111      	bne.n	8002302 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b06      	cmp	r3, #6
 80022ee:	d010      	beq.n	8002312 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002300:	e007      	b.n	8002312 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40012c00 	.word	0x40012c00
 8002324:	40000400 	.word	0x40000400

08002328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b02      	cmp	r3, #2
 800233c:	d122      	bne.n	8002384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b02      	cmp	r3, #2
 800234a:	d11b      	bne.n	8002384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0202 	mvn.w	r2, #2
 8002354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f9b4 	bl	80026d8 <HAL_TIM_IC_CaptureCallback>
 8002370:	e005      	b.n	800237e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f9a7 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f9b6 	bl	80026ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	d122      	bne.n	80023d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b04      	cmp	r3, #4
 800239e:	d11b      	bne.n	80023d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0204 	mvn.w	r2, #4
 80023a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2202      	movs	r2, #2
 80023ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f98a 	bl	80026d8 <HAL_TIM_IC_CaptureCallback>
 80023c4:	e005      	b.n	80023d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f97d 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f98c 	bl	80026ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d122      	bne.n	800242c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d11b      	bne.n	800242c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0208 	mvn.w	r2, #8
 80023fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2204      	movs	r2, #4
 8002402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f960 	bl	80026d8 <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f953 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f962 	bl	80026ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b10      	cmp	r3, #16
 8002438:	d122      	bne.n	8002480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b10      	cmp	r3, #16
 8002446:	d11b      	bne.n	8002480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0210 	mvn.w	r2, #16
 8002450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2208      	movs	r2, #8
 8002456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f936 	bl	80026d8 <HAL_TIM_IC_CaptureCallback>
 800246c:	e005      	b.n	800247a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f929 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f938 	bl	80026ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d10e      	bne.n	80024ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d107      	bne.n	80024ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0201 	mvn.w	r2, #1
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fa0a 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b6:	2b80      	cmp	r3, #128	; 0x80
 80024b8:	d10e      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b80      	cmp	r3, #128	; 0x80
 80024c6:	d107      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa6b 	bl	80029ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b40      	cmp	r3, #64	; 0x40
 80024e4:	d10e      	bne.n	8002504 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	2b40      	cmp	r3, #64	; 0x40
 80024f2:	d107      	bne.n	8002504 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f8fc 	bl	80026fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b20      	cmp	r3, #32
 8002510:	d10e      	bne.n	8002530 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b20      	cmp	r3, #32
 800251e:	d107      	bne.n	8002530 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0220 	mvn.w	r2, #32
 8002528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa36 	bl	800299c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_TIM_ConfigClockSource+0x1c>
 8002550:	2302      	movs	r3, #2
 8002552:	e0b4      	b.n	80026be <HAL_TIM_ConfigClockSource+0x186>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800257a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258c:	d03e      	beq.n	800260c <HAL_TIM_ConfigClockSource+0xd4>
 800258e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002592:	f200 8087 	bhi.w	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259a:	f000 8086 	beq.w	80026aa <HAL_TIM_ConfigClockSource+0x172>
 800259e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a2:	d87f      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025a4:	2b70      	cmp	r3, #112	; 0x70
 80025a6:	d01a      	beq.n	80025de <HAL_TIM_ConfigClockSource+0xa6>
 80025a8:	2b70      	cmp	r3, #112	; 0x70
 80025aa:	d87b      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025ac:	2b60      	cmp	r3, #96	; 0x60
 80025ae:	d050      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x11a>
 80025b0:	2b60      	cmp	r3, #96	; 0x60
 80025b2:	d877      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025b4:	2b50      	cmp	r3, #80	; 0x50
 80025b6:	d03c      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0xfa>
 80025b8:	2b50      	cmp	r3, #80	; 0x50
 80025ba:	d873      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d058      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x13a>
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d86f      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025c4:	2b30      	cmp	r3, #48	; 0x30
 80025c6:	d064      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x15a>
 80025c8:	2b30      	cmp	r3, #48	; 0x30
 80025ca:	d86b      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d060      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x15a>
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d867      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d05c      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x15a>
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d05a      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x15a>
 80025dc:	e062      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025ee:	f000 f95e 	bl	80028ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	609a      	str	r2, [r3, #8]
      break;
 800260a:	e04f      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800261c:	f000 f947 	bl	80028ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800262e:	609a      	str	r2, [r3, #8]
      break;
 8002630:	e03c      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	461a      	mov	r2, r3
 8002640:	f000 f8be 	bl	80027c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2150      	movs	r1, #80	; 0x50
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f915 	bl	800287a <TIM_ITRx_SetConfig>
      break;
 8002650:	e02c      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800265e:	461a      	mov	r2, r3
 8002660:	f000 f8dc 	bl	800281c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2160      	movs	r1, #96	; 0x60
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f905 	bl	800287a <TIM_ITRx_SetConfig>
      break;
 8002670:	e01c      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267e:	461a      	mov	r2, r3
 8002680:	f000 f89e 	bl	80027c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2140      	movs	r1, #64	; 0x40
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f8f5 	bl	800287a <TIM_ITRx_SetConfig>
      break;
 8002690:	e00c      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	4610      	mov	r0, r2
 800269e:	f000 f8ec 	bl	800287a <TIM_ITRx_SetConfig>
      break;
 80026a2:	e003      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      break;
 80026a8:	e000      	b.n	80026ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
	...

08002710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <TIM_Base_SetConfig+0xa8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <TIM_Base_SetConfig+0x28>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272e:	d003      	beq.n	8002738 <TIM_Base_SetConfig+0x28>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a22      	ldr	r2, [pc, #136]	; (80027bc <TIM_Base_SetConfig+0xac>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d108      	bne.n	800274a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <TIM_Base_SetConfig+0xa8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <TIM_Base_SetConfig+0x52>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d003      	beq.n	8002762 <TIM_Base_SetConfig+0x52>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a17      	ldr	r2, [pc, #92]	; (80027bc <TIM_Base_SetConfig+0xac>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d108      	bne.n	8002774 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <TIM_Base_SetConfig+0xa8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d103      	bne.n	80027a8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	615a      	str	r2, [r3, #20]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40000400 	.word	0x40000400

080027c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f023 0201 	bic.w	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f023 030a 	bic.w	r3, r3, #10
 80027fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	621a      	str	r2, [r3, #32]
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	f023 0210 	bic.w	r2, r3, #16
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	031b      	lsls	r3, r3, #12
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002858:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	621a      	str	r2, [r3, #32]
}
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	f043 0307 	orr.w	r3, r3, #7
 800289c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	609a      	str	r2, [r3, #8]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b087      	sub	sp, #28
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	021a      	lsls	r2, r3, #8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	609a      	str	r2, [r3, #8]
}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002900:	2302      	movs	r3, #2
 8002902:	e041      	b.n	8002988 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a14      	ldr	r2, [pc, #80]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d009      	beq.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d004      	beq.n	800295c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a10      	ldr	r2, [pc, #64]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d10c      	bne.n	8002976 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002962:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	4313      	orrs	r3, r2
 800296c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40000400 	.word	0x40000400

0800299c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e042      	b.n	8002a58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe fa1e 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2224      	movs	r2, #36	; 0x24
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fdc5 	bl	8003594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d16d      	bne.n	8002b5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <HAL_UART_Transmit+0x2c>
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e066      	b.n	8002b5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2221      	movs	r2, #33	; 0x21
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a9e:	f7fe fc09 	bl	80012b4 <HAL_GetTick>
 8002aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	88fa      	ldrh	r2, [r7, #6]
 8002aae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab8:	d108      	bne.n	8002acc <HAL_UART_Transmit+0x6c>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	e003      	b.n	8002ad4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ad4:	e02a      	b.n	8002b2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fb14 	bl	800310e <UART_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e036      	b.n	8002b5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	3302      	adds	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e007      	b.n	8002b1e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1cf      	bne.n	8002ad6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2140      	movs	r1, #64	; 0x40
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fae4 	bl	800310e <UART_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e006      	b.n	8002b5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	4613      	mov	r3, r2
 8002b72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d112      	bne.n	8002ba6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_UART_Receive_IT+0x26>
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e00b      	b.n	8002ba8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fb24 	bl	80031ea <UART_Start_Receive_IT>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	e000      	b.n	8002ba8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
  }
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b0ba      	sub	sp, #232	; 0xe8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_UART_IRQHandler+0x66>
 8002c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fc01 	bl	8003416 <UART_Receive_IT>
      return;
 8002c14:	e25b      	b.n	80030ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80de 	beq.w	8002ddc <HAL_UART_IRQHandler+0x22c>
 8002c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80d1 	beq.w	8002ddc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <HAL_UART_IRQHandler+0xae>
 8002c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_UART_IRQHandler+0xd2>
 8002c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	f043 0202 	orr.w	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_UART_IRQHandler+0xf6>
 8002c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f043 0204 	orr.w	r2, r3, #4
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d011      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x126>
 8002cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d105      	bne.n	8002cca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f043 0208 	orr.w	r2, r3, #8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 81f2 	beq.w	80030c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_UART_IRQHandler+0x14e>
 8002cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fb8c 	bl	8003416 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <HAL_UART_IRQHandler+0x17a>
 8002d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d04f      	beq.n	8002dca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fa96 	bl	800325c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d041      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3314      	adds	r3, #20
 8002d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d4c:	e853 3f00 	ldrex	r3, [r3]
 8002d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3314      	adds	r3, #20
 8002d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d7a:	e841 2300 	strex	r3, r2, [r1]
 8002d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1d9      	bne.n	8002d3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d013      	beq.n	8002dba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	4a7e      	ldr	r2, [pc, #504]	; (8002f90 <HAL_UART_IRQHandler+0x3e0>)
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fbda 	bl	8001558 <HAL_DMA_Abort_IT>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002db4:	4610      	mov	r0, r2
 8002db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	e00e      	b.n	8002dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f993 	bl	80030e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	e00a      	b.n	8002dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f98f 	bl	80030e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	e006      	b.n	8002dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f98b 	bl	80030e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002dd6:	e175      	b.n	80030c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	bf00      	nop
    return;
 8002dda:	e173      	b.n	80030c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	f040 814f 	bne.w	8003084 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8148 	beq.w	8003084 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8141 	beq.w	8003084 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80b6 	beq.w	8002f94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8145 	beq.w	80030c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e46:	429a      	cmp	r2, r3
 8002e48:	f080 813e 	bcs.w	80030c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	f000 8088 	beq.w	8002f70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	330c      	adds	r3, #12
 8002e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330c      	adds	r3, #12
 8002e88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e8c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1d9      	bne.n	8002e60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3314      	adds	r3, #20
 8002eb2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb6:	e853 3f00 	ldrex	r3, [r3]
 8002eba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3314      	adds	r3, #20
 8002ecc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ed0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ed8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002edc:	e841 2300 	strex	r3, r2, [r1]
 8002ee0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e1      	bne.n	8002eac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3314      	adds	r3, #20
 8002f08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e3      	bne.n	8002ee8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	330c      	adds	r3, #12
 8002f34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	f023 0310 	bic.w	r3, r3, #16
 8002f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f52:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f54:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e3      	bne.n	8002f2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fab9 	bl	80014e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	4619      	mov	r1, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8b6 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f8c:	e09c      	b.n	80030c8 <HAL_UART_IRQHandler+0x518>
 8002f8e:	bf00      	nop
 8002f90:	08003321 	.word	0x08003321
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 808e 	beq.w	80030cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8089 	beq.w	80030cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	e853 3f00 	ldrex	r3, [r3]
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002fde:	647a      	str	r2, [r7, #68]	; 0x44
 8002fe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e3      	bne.n	8002fba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	623b      	str	r3, [r7, #32]
   return(result);
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3314      	adds	r3, #20
 8003012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003016:	633a      	str	r2, [r7, #48]	; 0x30
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800301c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e3      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	60fb      	str	r3, [r7, #12]
   return(result);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0310 	bic.w	r3, r3, #16
 800304e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800305c:	61fa      	str	r2, [r7, #28]
 800305e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	69b9      	ldr	r1, [r7, #24]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	617b      	str	r3, [r7, #20]
   return(result);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e3      	bne.n	8003038 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003076:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f83b 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003082:	e023      	b.n	80030cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <HAL_UART_IRQHandler+0x4f4>
 8003090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f953 	bl	8003348 <UART_Transmit_IT>
    return;
 80030a2:	e014      	b.n	80030ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00e      	beq.n	80030ce <HAL_UART_IRQHandler+0x51e>
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f992 	bl	80033e6 <UART_EndTransmit_IT>
    return;
 80030c2:	e004      	b.n	80030ce <HAL_UART_IRQHandler+0x51e>
    return;
 80030c4:	bf00      	nop
 80030c6:	e002      	b.n	80030ce <HAL_UART_IRQHandler+0x51e>
      return;
 80030c8:	bf00      	nop
 80030ca:	e000      	b.n	80030ce <HAL_UART_IRQHandler+0x51e>
      return;
 80030cc:	bf00      	nop
  }
}
 80030ce:	37e8      	adds	r7, #232	; 0xe8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr

0800310e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b090      	sub	sp, #64	; 0x40
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311e:	e050      	b.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003126:	d04c      	beq.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <UART_WaitOnFlagUntilTimeout+0x30>
 800312e:	f7fe f8c1 	bl	80012b4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800313a:	429a      	cmp	r2, r3
 800313c:	d241      	bcs.n	80031c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	330c      	adds	r3, #12
 800315c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800315e:	637a      	str	r2, [r7, #52]	; 0x34
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e5      	bne.n	800313e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	613b      	str	r3, [r7, #16]
   return(result);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	63bb      	str	r3, [r7, #56]	; 0x38
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3314      	adds	r3, #20
 8003190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003192:	623a      	str	r2, [r7, #32]
 8003194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	69f9      	ldr	r1, [r7, #28]
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e00f      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d09f      	beq.n	8003120 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3740      	adds	r7, #64	; 0x40
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	4613      	mov	r3, r2
 80031f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	88fa      	ldrh	r2, [r7, #6]
 8003208:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2222      	movs	r2, #34	; 0x22
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0220 	orr.w	r2, r2, #32
 800324e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800325c:	b480      	push	{r7}
 800325e:	b095      	sub	sp, #84	; 0x54
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330c      	adds	r3, #12
 8003282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003284:	643a      	str	r2, [r7, #64]	; 0x40
 8003286:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800328a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800328c:	e841 2300 	strex	r3, r2, [r1]
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e5      	bne.n	8003264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3314      	adds	r3, #20
 800329e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3314      	adds	r3, #20
 80032b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c0:	e841 2300 	strex	r3, r2, [r1]
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e5      	bne.n	8003298 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d119      	bne.n	8003308 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f023 0310 	bic.w	r3, r3, #16
 80032ea:	647b      	str	r3, [r7, #68]	; 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032f4:	61ba      	str	r2, [r7, #24]
 80032f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	613b      	str	r3, [r7, #16]
   return(result);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003316:	bf00      	nop
 8003318:	3754      	adds	r7, #84	; 0x54
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fed3 	bl	80030e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b21      	cmp	r3, #33	; 0x21
 800335a:	d13e      	bne.n	80033da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003364:	d114      	bne.n	8003390 <UART_Transmit_IT+0x48>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d110      	bne.n	8003390 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003382:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]
 800338e:	e008      	b.n	80033a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	1c59      	adds	r1, r3, #1
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6211      	str	r1, [r2, #32]
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4619      	mov	r1, r3
 80033b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10f      	bne.n	80033d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fe64 	bl	80030d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b08c      	sub	sp, #48	; 0x30
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b22      	cmp	r3, #34	; 0x22
 8003428:	f040 80ae 	bne.w	8003588 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003434:	d117      	bne.n	8003466 <UART_Receive_IT+0x50>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d113      	bne.n	8003466 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800343e:	2300      	movs	r3, #0
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003454:	b29a      	uxth	r2, r3
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
 8003464:	e026      	b.n	80034b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800346c:	2300      	movs	r3, #0
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003478:	d007      	beq.n	800348a <UART_Receive_IT+0x74>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <UART_Receive_IT+0x82>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e008      	b.n	80034aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29b      	uxth	r3, r3
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4619      	mov	r1, r3
 80034c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d15d      	bne.n	8003584 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0220 	bic.w	r2, r2, #32
 80034d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	2b01      	cmp	r3, #1
 800350c:	d135      	bne.n	800357a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	330c      	adds	r3, #12
 800351a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	613b      	str	r3, [r7, #16]
   return(result);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f023 0310 	bic.w	r3, r3, #16
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	330c      	adds	r3, #12
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	623a      	str	r2, [r7, #32]
 8003536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	69f9      	ldr	r1, [r7, #28]
 800353a:	6a3a      	ldr	r2, [r7, #32]
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	61bb      	str	r3, [r7, #24]
   return(result);
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e5      	bne.n	8003514 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b10      	cmp	r3, #16
 8003554:	d10a      	bne.n	800356c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fdc0 	bl	80030f8 <HAL_UARTEx_RxEventCallback>
 8003578:	e002      	b.n	8003580 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd f806 	bl	800058c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e002      	b.n	800358a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	e000      	b.n	800358a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003588:	2302      	movs	r3, #2
  }
}
 800358a:	4618      	mov	r0, r3
 800358c:	3730      	adds	r7, #48	; 0x30
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035ce:	f023 030c 	bic.w	r3, r3, #12
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	430b      	orrs	r3, r1
 80035da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <UART_SetConfig+0x114>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d103      	bne.n	8003604 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035fc:	f7fe fdc6 	bl	800218c <HAL_RCC_GetPCLK2Freq>
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	e002      	b.n	800360a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7fe fdae 	bl	8002164 <HAL_RCC_GetPCLK1Freq>
 8003608:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009a      	lsls	r2, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <UART_SetConfig+0x118>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	0119      	lsls	r1, r3, #4
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <UART_SetConfig+0x118>)
 8003642:	fba3 0302 	umull	r0, r3, r3, r2
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2064      	movs	r0, #100	; 0x64
 800364a:	fb00 f303 	mul.w	r3, r0, r3
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	3332      	adds	r3, #50	; 0x32
 8003654:	4a15      	ldr	r2, [pc, #84]	; (80036ac <UART_SetConfig+0x118>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003660:	4419      	add	r1, r3
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009a      	lsls	r2, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fbb2 f2f3 	udiv	r2, r2, r3
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <UART_SetConfig+0x118>)
 800367a:	fba3 0302 	umull	r0, r3, r3, r2
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2064      	movs	r0, #100	; 0x64
 8003682:	fb00 f303 	mul.w	r3, r0, r3
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	3332      	adds	r3, #50	; 0x32
 800368c:	4a07      	ldr	r2, [pc, #28]	; (80036ac <UART_SetConfig+0x118>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	440a      	add	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40013800 	.word	0x40013800
 80036ac:	51eb851f 	.word	0x51eb851f

080036b0 <siprintf>:
 80036b0:	b40e      	push	{r1, r2, r3}
 80036b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036b6:	b500      	push	{lr}
 80036b8:	b09c      	sub	sp, #112	; 0x70
 80036ba:	ab1d      	add	r3, sp, #116	; 0x74
 80036bc:	9002      	str	r0, [sp, #8]
 80036be:	9006      	str	r0, [sp, #24]
 80036c0:	9107      	str	r1, [sp, #28]
 80036c2:	9104      	str	r1, [sp, #16]
 80036c4:	4808      	ldr	r0, [pc, #32]	; (80036e8 <siprintf+0x38>)
 80036c6:	4909      	ldr	r1, [pc, #36]	; (80036ec <siprintf+0x3c>)
 80036c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036cc:	9105      	str	r1, [sp, #20]
 80036ce:	6800      	ldr	r0, [r0, #0]
 80036d0:	a902      	add	r1, sp, #8
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	f000 f98e 	bl	80039f4 <_svfiprintf_r>
 80036d8:	2200      	movs	r2, #0
 80036da:	9b02      	ldr	r3, [sp, #8]
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	b01c      	add	sp, #112	; 0x70
 80036e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036e4:	b003      	add	sp, #12
 80036e6:	4770      	bx	lr
 80036e8:	200000a0 	.word	0x200000a0
 80036ec:	ffff0208 	.word	0xffff0208

080036f0 <memset>:
 80036f0:	4603      	mov	r3, r0
 80036f2:	4402      	add	r2, r0
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d100      	bne.n	80036fa <memset+0xa>
 80036f8:	4770      	bx	lr
 80036fa:	f803 1b01 	strb.w	r1, [r3], #1
 80036fe:	e7f9      	b.n	80036f4 <memset+0x4>

08003700 <__errno>:
 8003700:	4b01      	ldr	r3, [pc, #4]	; (8003708 <__errno+0x8>)
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	200000a0 	.word	0x200000a0

0800370c <__libc_init_array>:
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	2600      	movs	r6, #0
 8003710:	4d0c      	ldr	r5, [pc, #48]	; (8003744 <__libc_init_array+0x38>)
 8003712:	4c0d      	ldr	r4, [pc, #52]	; (8003748 <__libc_init_array+0x3c>)
 8003714:	1b64      	subs	r4, r4, r5
 8003716:	10a4      	asrs	r4, r4, #2
 8003718:	42a6      	cmp	r6, r4
 800371a:	d109      	bne.n	8003730 <__libc_init_array+0x24>
 800371c:	f000 fc7a 	bl	8004014 <_init>
 8003720:	2600      	movs	r6, #0
 8003722:	4d0a      	ldr	r5, [pc, #40]	; (800374c <__libc_init_array+0x40>)
 8003724:	4c0a      	ldr	r4, [pc, #40]	; (8003750 <__libc_init_array+0x44>)
 8003726:	1b64      	subs	r4, r4, r5
 8003728:	10a4      	asrs	r4, r4, #2
 800372a:	42a6      	cmp	r6, r4
 800372c:	d105      	bne.n	800373a <__libc_init_array+0x2e>
 800372e:	bd70      	pop	{r4, r5, r6, pc}
 8003730:	f855 3b04 	ldr.w	r3, [r5], #4
 8003734:	4798      	blx	r3
 8003736:	3601      	adds	r6, #1
 8003738:	e7ee      	b.n	8003718 <__libc_init_array+0xc>
 800373a:	f855 3b04 	ldr.w	r3, [r5], #4
 800373e:	4798      	blx	r3
 8003740:	3601      	adds	r6, #1
 8003742:	e7f2      	b.n	800372a <__libc_init_array+0x1e>
 8003744:	08004098 	.word	0x08004098
 8003748:	08004098 	.word	0x08004098
 800374c:	08004098 	.word	0x08004098
 8003750:	0800409c 	.word	0x0800409c

08003754 <__retarget_lock_acquire_recursive>:
 8003754:	4770      	bx	lr

08003756 <__retarget_lock_release_recursive>:
 8003756:	4770      	bx	lr

08003758 <_free_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4605      	mov	r5, r0
 800375c:	2900      	cmp	r1, #0
 800375e:	d040      	beq.n	80037e2 <_free_r+0x8a>
 8003760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003764:	1f0c      	subs	r4, r1, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	bfb8      	it	lt
 800376a:	18e4      	addlt	r4, r4, r3
 800376c:	f000 f8dc 	bl	8003928 <__malloc_lock>
 8003770:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <_free_r+0x8c>)
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	b933      	cbnz	r3, 8003784 <_free_r+0x2c>
 8003776:	6063      	str	r3, [r4, #4]
 8003778:	6014      	str	r4, [r2, #0]
 800377a:	4628      	mov	r0, r5
 800377c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003780:	f000 b8d8 	b.w	8003934 <__malloc_unlock>
 8003784:	42a3      	cmp	r3, r4
 8003786:	d908      	bls.n	800379a <_free_r+0x42>
 8003788:	6820      	ldr	r0, [r4, #0]
 800378a:	1821      	adds	r1, r4, r0
 800378c:	428b      	cmp	r3, r1
 800378e:	bf01      	itttt	eq
 8003790:	6819      	ldreq	r1, [r3, #0]
 8003792:	685b      	ldreq	r3, [r3, #4]
 8003794:	1809      	addeq	r1, r1, r0
 8003796:	6021      	streq	r1, [r4, #0]
 8003798:	e7ed      	b.n	8003776 <_free_r+0x1e>
 800379a:	461a      	mov	r2, r3
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	b10b      	cbz	r3, 80037a4 <_free_r+0x4c>
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	d9fa      	bls.n	800379a <_free_r+0x42>
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	1850      	adds	r0, r2, r1
 80037a8:	42a0      	cmp	r0, r4
 80037aa:	d10b      	bne.n	80037c4 <_free_r+0x6c>
 80037ac:	6820      	ldr	r0, [r4, #0]
 80037ae:	4401      	add	r1, r0
 80037b0:	1850      	adds	r0, r2, r1
 80037b2:	4283      	cmp	r3, r0
 80037b4:	6011      	str	r1, [r2, #0]
 80037b6:	d1e0      	bne.n	800377a <_free_r+0x22>
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4408      	add	r0, r1
 80037be:	6010      	str	r0, [r2, #0]
 80037c0:	6053      	str	r3, [r2, #4]
 80037c2:	e7da      	b.n	800377a <_free_r+0x22>
 80037c4:	d902      	bls.n	80037cc <_free_r+0x74>
 80037c6:	230c      	movs	r3, #12
 80037c8:	602b      	str	r3, [r5, #0]
 80037ca:	e7d6      	b.n	800377a <_free_r+0x22>
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	1821      	adds	r1, r4, r0
 80037d0:	428b      	cmp	r3, r1
 80037d2:	bf01      	itttt	eq
 80037d4:	6819      	ldreq	r1, [r3, #0]
 80037d6:	685b      	ldreq	r3, [r3, #4]
 80037d8:	1809      	addeq	r1, r1, r0
 80037da:	6021      	streq	r1, [r4, #0]
 80037dc:	6063      	str	r3, [r4, #4]
 80037de:	6054      	str	r4, [r2, #4]
 80037e0:	e7cb      	b.n	800377a <_free_r+0x22>
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	20000410 	.word	0x20000410

080037e8 <sbrk_aligned>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	4e0e      	ldr	r6, [pc, #56]	; (8003824 <sbrk_aligned+0x3c>)
 80037ec:	460c      	mov	r4, r1
 80037ee:	6831      	ldr	r1, [r6, #0]
 80037f0:	4605      	mov	r5, r0
 80037f2:	b911      	cbnz	r1, 80037fa <sbrk_aligned+0x12>
 80037f4:	f000 fbaa 	bl	8003f4c <_sbrk_r>
 80037f8:	6030      	str	r0, [r6, #0]
 80037fa:	4621      	mov	r1, r4
 80037fc:	4628      	mov	r0, r5
 80037fe:	f000 fba5 	bl	8003f4c <_sbrk_r>
 8003802:	1c43      	adds	r3, r0, #1
 8003804:	d00a      	beq.n	800381c <sbrk_aligned+0x34>
 8003806:	1cc4      	adds	r4, r0, #3
 8003808:	f024 0403 	bic.w	r4, r4, #3
 800380c:	42a0      	cmp	r0, r4
 800380e:	d007      	beq.n	8003820 <sbrk_aligned+0x38>
 8003810:	1a21      	subs	r1, r4, r0
 8003812:	4628      	mov	r0, r5
 8003814:	f000 fb9a 	bl	8003f4c <_sbrk_r>
 8003818:	3001      	adds	r0, #1
 800381a:	d101      	bne.n	8003820 <sbrk_aligned+0x38>
 800381c:	f04f 34ff 	mov.w	r4, #4294967295
 8003820:	4620      	mov	r0, r4
 8003822:	bd70      	pop	{r4, r5, r6, pc}
 8003824:	20000414 	.word	0x20000414

08003828 <_malloc_r>:
 8003828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800382c:	1ccd      	adds	r5, r1, #3
 800382e:	f025 0503 	bic.w	r5, r5, #3
 8003832:	3508      	adds	r5, #8
 8003834:	2d0c      	cmp	r5, #12
 8003836:	bf38      	it	cc
 8003838:	250c      	movcc	r5, #12
 800383a:	2d00      	cmp	r5, #0
 800383c:	4607      	mov	r7, r0
 800383e:	db01      	blt.n	8003844 <_malloc_r+0x1c>
 8003840:	42a9      	cmp	r1, r5
 8003842:	d905      	bls.n	8003850 <_malloc_r+0x28>
 8003844:	230c      	movs	r3, #12
 8003846:	2600      	movs	r6, #0
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4630      	mov	r0, r6
 800384c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003850:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003924 <_malloc_r+0xfc>
 8003854:	f000 f868 	bl	8003928 <__malloc_lock>
 8003858:	f8d8 3000 	ldr.w	r3, [r8]
 800385c:	461c      	mov	r4, r3
 800385e:	bb5c      	cbnz	r4, 80038b8 <_malloc_r+0x90>
 8003860:	4629      	mov	r1, r5
 8003862:	4638      	mov	r0, r7
 8003864:	f7ff ffc0 	bl	80037e8 <sbrk_aligned>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	4604      	mov	r4, r0
 800386c:	d155      	bne.n	800391a <_malloc_r+0xf2>
 800386e:	f8d8 4000 	ldr.w	r4, [r8]
 8003872:	4626      	mov	r6, r4
 8003874:	2e00      	cmp	r6, #0
 8003876:	d145      	bne.n	8003904 <_malloc_r+0xdc>
 8003878:	2c00      	cmp	r4, #0
 800387a:	d048      	beq.n	800390e <_malloc_r+0xe6>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	4631      	mov	r1, r6
 8003880:	4638      	mov	r0, r7
 8003882:	eb04 0903 	add.w	r9, r4, r3
 8003886:	f000 fb61 	bl	8003f4c <_sbrk_r>
 800388a:	4581      	cmp	r9, r0
 800388c:	d13f      	bne.n	800390e <_malloc_r+0xe6>
 800388e:	6821      	ldr	r1, [r4, #0]
 8003890:	4638      	mov	r0, r7
 8003892:	1a6d      	subs	r5, r5, r1
 8003894:	4629      	mov	r1, r5
 8003896:	f7ff ffa7 	bl	80037e8 <sbrk_aligned>
 800389a:	3001      	adds	r0, #1
 800389c:	d037      	beq.n	800390e <_malloc_r+0xe6>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	442b      	add	r3, r5
 80038a2:	6023      	str	r3, [r4, #0]
 80038a4:	f8d8 3000 	ldr.w	r3, [r8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d038      	beq.n	800391e <_malloc_r+0xf6>
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	42a2      	cmp	r2, r4
 80038b0:	d12b      	bne.n	800390a <_malloc_r+0xe2>
 80038b2:	2200      	movs	r2, #0
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	e00f      	b.n	80038d8 <_malloc_r+0xb0>
 80038b8:	6822      	ldr	r2, [r4, #0]
 80038ba:	1b52      	subs	r2, r2, r5
 80038bc:	d41f      	bmi.n	80038fe <_malloc_r+0xd6>
 80038be:	2a0b      	cmp	r2, #11
 80038c0:	d917      	bls.n	80038f2 <_malloc_r+0xca>
 80038c2:	1961      	adds	r1, r4, r5
 80038c4:	42a3      	cmp	r3, r4
 80038c6:	6025      	str	r5, [r4, #0]
 80038c8:	bf18      	it	ne
 80038ca:	6059      	strne	r1, [r3, #4]
 80038cc:	6863      	ldr	r3, [r4, #4]
 80038ce:	bf08      	it	eq
 80038d0:	f8c8 1000 	streq.w	r1, [r8]
 80038d4:	5162      	str	r2, [r4, r5]
 80038d6:	604b      	str	r3, [r1, #4]
 80038d8:	4638      	mov	r0, r7
 80038da:	f104 060b 	add.w	r6, r4, #11
 80038de:	f000 f829 	bl	8003934 <__malloc_unlock>
 80038e2:	f026 0607 	bic.w	r6, r6, #7
 80038e6:	1d23      	adds	r3, r4, #4
 80038e8:	1af2      	subs	r2, r6, r3
 80038ea:	d0ae      	beq.n	800384a <_malloc_r+0x22>
 80038ec:	1b9b      	subs	r3, r3, r6
 80038ee:	50a3      	str	r3, [r4, r2]
 80038f0:	e7ab      	b.n	800384a <_malloc_r+0x22>
 80038f2:	42a3      	cmp	r3, r4
 80038f4:	6862      	ldr	r2, [r4, #4]
 80038f6:	d1dd      	bne.n	80038b4 <_malloc_r+0x8c>
 80038f8:	f8c8 2000 	str.w	r2, [r8]
 80038fc:	e7ec      	b.n	80038d8 <_malloc_r+0xb0>
 80038fe:	4623      	mov	r3, r4
 8003900:	6864      	ldr	r4, [r4, #4]
 8003902:	e7ac      	b.n	800385e <_malloc_r+0x36>
 8003904:	4634      	mov	r4, r6
 8003906:	6876      	ldr	r6, [r6, #4]
 8003908:	e7b4      	b.n	8003874 <_malloc_r+0x4c>
 800390a:	4613      	mov	r3, r2
 800390c:	e7cc      	b.n	80038a8 <_malloc_r+0x80>
 800390e:	230c      	movs	r3, #12
 8003910:	4638      	mov	r0, r7
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	f000 f80e 	bl	8003934 <__malloc_unlock>
 8003918:	e797      	b.n	800384a <_malloc_r+0x22>
 800391a:	6025      	str	r5, [r4, #0]
 800391c:	e7dc      	b.n	80038d8 <_malloc_r+0xb0>
 800391e:	605b      	str	r3, [r3, #4]
 8003920:	deff      	udf	#255	; 0xff
 8003922:	bf00      	nop
 8003924:	20000410 	.word	0x20000410

08003928 <__malloc_lock>:
 8003928:	4801      	ldr	r0, [pc, #4]	; (8003930 <__malloc_lock+0x8>)
 800392a:	f7ff bf13 	b.w	8003754 <__retarget_lock_acquire_recursive>
 800392e:	bf00      	nop
 8003930:	2000040c 	.word	0x2000040c

08003934 <__malloc_unlock>:
 8003934:	4801      	ldr	r0, [pc, #4]	; (800393c <__malloc_unlock+0x8>)
 8003936:	f7ff bf0e 	b.w	8003756 <__retarget_lock_release_recursive>
 800393a:	bf00      	nop
 800393c:	2000040c 	.word	0x2000040c

08003940 <__ssputs_r>:
 8003940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	461f      	mov	r7, r3
 8003946:	688e      	ldr	r6, [r1, #8]
 8003948:	4682      	mov	sl, r0
 800394a:	42be      	cmp	r6, r7
 800394c:	460c      	mov	r4, r1
 800394e:	4690      	mov	r8, r2
 8003950:	680b      	ldr	r3, [r1, #0]
 8003952:	d82c      	bhi.n	80039ae <__ssputs_r+0x6e>
 8003954:	898a      	ldrh	r2, [r1, #12]
 8003956:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800395a:	d026      	beq.n	80039aa <__ssputs_r+0x6a>
 800395c:	6965      	ldr	r5, [r4, #20]
 800395e:	6909      	ldr	r1, [r1, #16]
 8003960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003964:	eba3 0901 	sub.w	r9, r3, r1
 8003968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800396c:	1c7b      	adds	r3, r7, #1
 800396e:	444b      	add	r3, r9
 8003970:	106d      	asrs	r5, r5, #1
 8003972:	429d      	cmp	r5, r3
 8003974:	bf38      	it	cc
 8003976:	461d      	movcc	r5, r3
 8003978:	0553      	lsls	r3, r2, #21
 800397a:	d527      	bpl.n	80039cc <__ssputs_r+0x8c>
 800397c:	4629      	mov	r1, r5
 800397e:	f7ff ff53 	bl	8003828 <_malloc_r>
 8003982:	4606      	mov	r6, r0
 8003984:	b360      	cbz	r0, 80039e0 <__ssputs_r+0xa0>
 8003986:	464a      	mov	r2, r9
 8003988:	6921      	ldr	r1, [r4, #16]
 800398a:	f000 fafd 	bl	8003f88 <memcpy>
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003998:	81a3      	strh	r3, [r4, #12]
 800399a:	6126      	str	r6, [r4, #16]
 800399c:	444e      	add	r6, r9
 800399e:	6026      	str	r6, [r4, #0]
 80039a0:	463e      	mov	r6, r7
 80039a2:	6165      	str	r5, [r4, #20]
 80039a4:	eba5 0509 	sub.w	r5, r5, r9
 80039a8:	60a5      	str	r5, [r4, #8]
 80039aa:	42be      	cmp	r6, r7
 80039ac:	d900      	bls.n	80039b0 <__ssputs_r+0x70>
 80039ae:	463e      	mov	r6, r7
 80039b0:	4632      	mov	r2, r6
 80039b2:	4641      	mov	r1, r8
 80039b4:	6820      	ldr	r0, [r4, #0]
 80039b6:	f000 faaf 	bl	8003f18 <memmove>
 80039ba:	2000      	movs	r0, #0
 80039bc:	68a3      	ldr	r3, [r4, #8]
 80039be:	1b9b      	subs	r3, r3, r6
 80039c0:	60a3      	str	r3, [r4, #8]
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	4433      	add	r3, r6
 80039c6:	6023      	str	r3, [r4, #0]
 80039c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039cc:	462a      	mov	r2, r5
 80039ce:	f000 fae9 	bl	8003fa4 <_realloc_r>
 80039d2:	4606      	mov	r6, r0
 80039d4:	2800      	cmp	r0, #0
 80039d6:	d1e0      	bne.n	800399a <__ssputs_r+0x5a>
 80039d8:	4650      	mov	r0, sl
 80039da:	6921      	ldr	r1, [r4, #16]
 80039dc:	f7ff febc 	bl	8003758 <_free_r>
 80039e0:	230c      	movs	r3, #12
 80039e2:	f8ca 3000 	str.w	r3, [sl]
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f0:	81a3      	strh	r3, [r4, #12]
 80039f2:	e7e9      	b.n	80039c8 <__ssputs_r+0x88>

080039f4 <_svfiprintf_r>:
 80039f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f8:	4698      	mov	r8, r3
 80039fa:	898b      	ldrh	r3, [r1, #12]
 80039fc:	4607      	mov	r7, r0
 80039fe:	061b      	lsls	r3, r3, #24
 8003a00:	460d      	mov	r5, r1
 8003a02:	4614      	mov	r4, r2
 8003a04:	b09d      	sub	sp, #116	; 0x74
 8003a06:	d50e      	bpl.n	8003a26 <_svfiprintf_r+0x32>
 8003a08:	690b      	ldr	r3, [r1, #16]
 8003a0a:	b963      	cbnz	r3, 8003a26 <_svfiprintf_r+0x32>
 8003a0c:	2140      	movs	r1, #64	; 0x40
 8003a0e:	f7ff ff0b 	bl	8003828 <_malloc_r>
 8003a12:	6028      	str	r0, [r5, #0]
 8003a14:	6128      	str	r0, [r5, #16]
 8003a16:	b920      	cbnz	r0, 8003a22 <_svfiprintf_r+0x2e>
 8003a18:	230c      	movs	r3, #12
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	e0d0      	b.n	8003bc4 <_svfiprintf_r+0x1d0>
 8003a22:	2340      	movs	r3, #64	; 0x40
 8003a24:	616b      	str	r3, [r5, #20]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a30:	2330      	movs	r3, #48	; 0x30
 8003a32:	f04f 0901 	mov.w	r9, #1
 8003a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a3a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003bdc <_svfiprintf_r+0x1e8>
 8003a3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a42:	4623      	mov	r3, r4
 8003a44:	469a      	mov	sl, r3
 8003a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a4a:	b10a      	cbz	r2, 8003a50 <_svfiprintf_r+0x5c>
 8003a4c:	2a25      	cmp	r2, #37	; 0x25
 8003a4e:	d1f9      	bne.n	8003a44 <_svfiprintf_r+0x50>
 8003a50:	ebba 0b04 	subs.w	fp, sl, r4
 8003a54:	d00b      	beq.n	8003a6e <_svfiprintf_r+0x7a>
 8003a56:	465b      	mov	r3, fp
 8003a58:	4622      	mov	r2, r4
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f7ff ff6f 	bl	8003940 <__ssputs_r>
 8003a62:	3001      	adds	r0, #1
 8003a64:	f000 80a9 	beq.w	8003bba <_svfiprintf_r+0x1c6>
 8003a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a6a:	445a      	add	r2, fp
 8003a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80a1 	beq.w	8003bba <_svfiprintf_r+0x1c6>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a82:	f10a 0a01 	add.w	sl, sl, #1
 8003a86:	9304      	str	r3, [sp, #16]
 8003a88:	9307      	str	r3, [sp, #28]
 8003a8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a90:	4654      	mov	r4, sl
 8003a92:	2205      	movs	r2, #5
 8003a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a98:	4850      	ldr	r0, [pc, #320]	; (8003bdc <_svfiprintf_r+0x1e8>)
 8003a9a:	f000 fa67 	bl	8003f6c <memchr>
 8003a9e:	9a04      	ldr	r2, [sp, #16]
 8003aa0:	b9d8      	cbnz	r0, 8003ada <_svfiprintf_r+0xe6>
 8003aa2:	06d0      	lsls	r0, r2, #27
 8003aa4:	bf44      	itt	mi
 8003aa6:	2320      	movmi	r3, #32
 8003aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aac:	0711      	lsls	r1, r2, #28
 8003aae:	bf44      	itt	mi
 8003ab0:	232b      	movmi	r3, #43	; 0x2b
 8003ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8003aba:	2b2a      	cmp	r3, #42	; 0x2a
 8003abc:	d015      	beq.n	8003aea <_svfiprintf_r+0xf6>
 8003abe:	4654      	mov	r4, sl
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f04f 0c0a 	mov.w	ip, #10
 8003ac6:	9a07      	ldr	r2, [sp, #28]
 8003ac8:	4621      	mov	r1, r4
 8003aca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ace:	3b30      	subs	r3, #48	; 0x30
 8003ad0:	2b09      	cmp	r3, #9
 8003ad2:	d94d      	bls.n	8003b70 <_svfiprintf_r+0x17c>
 8003ad4:	b1b0      	cbz	r0, 8003b04 <_svfiprintf_r+0x110>
 8003ad6:	9207      	str	r2, [sp, #28]
 8003ad8:	e014      	b.n	8003b04 <_svfiprintf_r+0x110>
 8003ada:	eba0 0308 	sub.w	r3, r0, r8
 8003ade:	fa09 f303 	lsl.w	r3, r9, r3
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	46a2      	mov	sl, r4
 8003ae6:	9304      	str	r3, [sp, #16]
 8003ae8:	e7d2      	b.n	8003a90 <_svfiprintf_r+0x9c>
 8003aea:	9b03      	ldr	r3, [sp, #12]
 8003aec:	1d19      	adds	r1, r3, #4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	9103      	str	r1, [sp, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bfbb      	ittet	lt
 8003af6:	425b      	neglt	r3, r3
 8003af8:	f042 0202 	orrlt.w	r2, r2, #2
 8003afc:	9307      	strge	r3, [sp, #28]
 8003afe:	9307      	strlt	r3, [sp, #28]
 8003b00:	bfb8      	it	lt
 8003b02:	9204      	strlt	r2, [sp, #16]
 8003b04:	7823      	ldrb	r3, [r4, #0]
 8003b06:	2b2e      	cmp	r3, #46	; 0x2e
 8003b08:	d10c      	bne.n	8003b24 <_svfiprintf_r+0x130>
 8003b0a:	7863      	ldrb	r3, [r4, #1]
 8003b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b0e:	d134      	bne.n	8003b7a <_svfiprintf_r+0x186>
 8003b10:	9b03      	ldr	r3, [sp, #12]
 8003b12:	3402      	adds	r4, #2
 8003b14:	1d1a      	adds	r2, r3, #4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	9203      	str	r2, [sp, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bfb8      	it	lt
 8003b1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b22:	9305      	str	r3, [sp, #20]
 8003b24:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003be0 <_svfiprintf_r+0x1ec>
 8003b28:	2203      	movs	r2, #3
 8003b2a:	4650      	mov	r0, sl
 8003b2c:	7821      	ldrb	r1, [r4, #0]
 8003b2e:	f000 fa1d 	bl	8003f6c <memchr>
 8003b32:	b138      	cbz	r0, 8003b44 <_svfiprintf_r+0x150>
 8003b34:	2240      	movs	r2, #64	; 0x40
 8003b36:	9b04      	ldr	r3, [sp, #16]
 8003b38:	eba0 000a 	sub.w	r0, r0, sl
 8003b3c:	4082      	lsls	r2, r0
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	3401      	adds	r4, #1
 8003b42:	9304      	str	r3, [sp, #16]
 8003b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b48:	2206      	movs	r2, #6
 8003b4a:	4826      	ldr	r0, [pc, #152]	; (8003be4 <_svfiprintf_r+0x1f0>)
 8003b4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b50:	f000 fa0c 	bl	8003f6c <memchr>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d038      	beq.n	8003bca <_svfiprintf_r+0x1d6>
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <_svfiprintf_r+0x1f4>)
 8003b5a:	bb1b      	cbnz	r3, 8003ba4 <_svfiprintf_r+0x1b0>
 8003b5c:	9b03      	ldr	r3, [sp, #12]
 8003b5e:	3307      	adds	r3, #7
 8003b60:	f023 0307 	bic.w	r3, r3, #7
 8003b64:	3308      	adds	r3, #8
 8003b66:	9303      	str	r3, [sp, #12]
 8003b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b6a:	4433      	add	r3, r6
 8003b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6e:	e768      	b.n	8003a42 <_svfiprintf_r+0x4e>
 8003b70:	460c      	mov	r4, r1
 8003b72:	2001      	movs	r0, #1
 8003b74:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b78:	e7a6      	b.n	8003ac8 <_svfiprintf_r+0xd4>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f04f 0c0a 	mov.w	ip, #10
 8003b80:	4619      	mov	r1, r3
 8003b82:	3401      	adds	r4, #1
 8003b84:	9305      	str	r3, [sp, #20]
 8003b86:	4620      	mov	r0, r4
 8003b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b8c:	3a30      	subs	r2, #48	; 0x30
 8003b8e:	2a09      	cmp	r2, #9
 8003b90:	d903      	bls.n	8003b9a <_svfiprintf_r+0x1a6>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0c6      	beq.n	8003b24 <_svfiprintf_r+0x130>
 8003b96:	9105      	str	r1, [sp, #20]
 8003b98:	e7c4      	b.n	8003b24 <_svfiprintf_r+0x130>
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ba2:	e7f0      	b.n	8003b86 <_svfiprintf_r+0x192>
 8003ba4:	ab03      	add	r3, sp, #12
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	462a      	mov	r2, r5
 8003baa:	4638      	mov	r0, r7
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <_svfiprintf_r+0x1f8>)
 8003bae:	a904      	add	r1, sp, #16
 8003bb0:	f3af 8000 	nop.w
 8003bb4:	1c42      	adds	r2, r0, #1
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	d1d6      	bne.n	8003b68 <_svfiprintf_r+0x174>
 8003bba:	89ab      	ldrh	r3, [r5, #12]
 8003bbc:	065b      	lsls	r3, r3, #25
 8003bbe:	f53f af2d 	bmi.w	8003a1c <_svfiprintf_r+0x28>
 8003bc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bc4:	b01d      	add	sp, #116	; 0x74
 8003bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bca:	ab03      	add	r3, sp, #12
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	462a      	mov	r2, r5
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <_svfiprintf_r+0x1f8>)
 8003bd4:	a904      	add	r1, sp, #16
 8003bd6:	f000 f87d 	bl	8003cd4 <_printf_i>
 8003bda:	e7eb      	b.n	8003bb4 <_svfiprintf_r+0x1c0>
 8003bdc:	08004062 	.word	0x08004062
 8003be0:	08004068 	.word	0x08004068
 8003be4:	0800406c 	.word	0x0800406c
 8003be8:	00000000 	.word	0x00000000
 8003bec:	08003941 	.word	0x08003941

08003bf0 <_printf_common>:
 8003bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf4:	4616      	mov	r6, r2
 8003bf6:	4699      	mov	r9, r3
 8003bf8:	688a      	ldr	r2, [r1, #8]
 8003bfa:	690b      	ldr	r3, [r1, #16]
 8003bfc:	4607      	mov	r7, r0
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	bfb8      	it	lt
 8003c02:	4613      	movlt	r3, r2
 8003c04:	6033      	str	r3, [r6, #0]
 8003c06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c10:	b10a      	cbz	r2, 8003c16 <_printf_common+0x26>
 8003c12:	3301      	adds	r3, #1
 8003c14:	6033      	str	r3, [r6, #0]
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	0699      	lsls	r1, r3, #26
 8003c1a:	bf42      	ittt	mi
 8003c1c:	6833      	ldrmi	r3, [r6, #0]
 8003c1e:	3302      	addmi	r3, #2
 8003c20:	6033      	strmi	r3, [r6, #0]
 8003c22:	6825      	ldr	r5, [r4, #0]
 8003c24:	f015 0506 	ands.w	r5, r5, #6
 8003c28:	d106      	bne.n	8003c38 <_printf_common+0x48>
 8003c2a:	f104 0a19 	add.w	sl, r4, #25
 8003c2e:	68e3      	ldr	r3, [r4, #12]
 8003c30:	6832      	ldr	r2, [r6, #0]
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	42ab      	cmp	r3, r5
 8003c36:	dc2b      	bgt.n	8003c90 <_printf_common+0xa0>
 8003c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c3c:	1e13      	subs	r3, r2, #0
 8003c3e:	6822      	ldr	r2, [r4, #0]
 8003c40:	bf18      	it	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	0692      	lsls	r2, r2, #26
 8003c46:	d430      	bmi.n	8003caa <_printf_common+0xba>
 8003c48:	4649      	mov	r1, r9
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c50:	47c0      	blx	r8
 8003c52:	3001      	adds	r0, #1
 8003c54:	d023      	beq.n	8003c9e <_printf_common+0xae>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	6922      	ldr	r2, [r4, #16]
 8003c5a:	f003 0306 	and.w	r3, r3, #6
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf14      	ite	ne
 8003c62:	2500      	movne	r5, #0
 8003c64:	6833      	ldreq	r3, [r6, #0]
 8003c66:	f04f 0600 	mov.w	r6, #0
 8003c6a:	bf08      	it	eq
 8003c6c:	68e5      	ldreq	r5, [r4, #12]
 8003c6e:	f104 041a 	add.w	r4, r4, #26
 8003c72:	bf08      	it	eq
 8003c74:	1aed      	subeq	r5, r5, r3
 8003c76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c7a:	bf08      	it	eq
 8003c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c80:	4293      	cmp	r3, r2
 8003c82:	bfc4      	itt	gt
 8003c84:	1a9b      	subgt	r3, r3, r2
 8003c86:	18ed      	addgt	r5, r5, r3
 8003c88:	42b5      	cmp	r5, r6
 8003c8a:	d11a      	bne.n	8003cc2 <_printf_common+0xd2>
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	e008      	b.n	8003ca2 <_printf_common+0xb2>
 8003c90:	2301      	movs	r3, #1
 8003c92:	4652      	mov	r2, sl
 8003c94:	4649      	mov	r1, r9
 8003c96:	4638      	mov	r0, r7
 8003c98:	47c0      	blx	r8
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d103      	bne.n	8003ca6 <_printf_common+0xb6>
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca6:	3501      	adds	r5, #1
 8003ca8:	e7c1      	b.n	8003c2e <_printf_common+0x3e>
 8003caa:	2030      	movs	r0, #48	; 0x30
 8003cac:	18e1      	adds	r1, r4, r3
 8003cae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cb8:	4422      	add	r2, r4
 8003cba:	3302      	adds	r3, #2
 8003cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cc0:	e7c2      	b.n	8003c48 <_printf_common+0x58>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	4638      	mov	r0, r7
 8003cca:	47c0      	blx	r8
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d0e6      	beq.n	8003c9e <_printf_common+0xae>
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7d9      	b.n	8003c88 <_printf_common+0x98>

08003cd4 <_printf_i>:
 8003cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	7e0f      	ldrb	r7, [r1, #24]
 8003cda:	4691      	mov	r9, r2
 8003cdc:	2f78      	cmp	r7, #120	; 0x78
 8003cde:	4680      	mov	r8, r0
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	469a      	mov	sl, r3
 8003ce4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ce6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cea:	d807      	bhi.n	8003cfc <_printf_i+0x28>
 8003cec:	2f62      	cmp	r7, #98	; 0x62
 8003cee:	d80a      	bhi.n	8003d06 <_printf_i+0x32>
 8003cf0:	2f00      	cmp	r7, #0
 8003cf2:	f000 80d5 	beq.w	8003ea0 <_printf_i+0x1cc>
 8003cf6:	2f58      	cmp	r7, #88	; 0x58
 8003cf8:	f000 80c1 	beq.w	8003e7e <_printf_i+0x1aa>
 8003cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d04:	e03a      	b.n	8003d7c <_printf_i+0xa8>
 8003d06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d0a:	2b15      	cmp	r3, #21
 8003d0c:	d8f6      	bhi.n	8003cfc <_printf_i+0x28>
 8003d0e:	a101      	add	r1, pc, #4	; (adr r1, 8003d14 <_printf_i+0x40>)
 8003d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d14:	08003d6d 	.word	0x08003d6d
 8003d18:	08003d81 	.word	0x08003d81
 8003d1c:	08003cfd 	.word	0x08003cfd
 8003d20:	08003cfd 	.word	0x08003cfd
 8003d24:	08003cfd 	.word	0x08003cfd
 8003d28:	08003cfd 	.word	0x08003cfd
 8003d2c:	08003d81 	.word	0x08003d81
 8003d30:	08003cfd 	.word	0x08003cfd
 8003d34:	08003cfd 	.word	0x08003cfd
 8003d38:	08003cfd 	.word	0x08003cfd
 8003d3c:	08003cfd 	.word	0x08003cfd
 8003d40:	08003e87 	.word	0x08003e87
 8003d44:	08003dad 	.word	0x08003dad
 8003d48:	08003e41 	.word	0x08003e41
 8003d4c:	08003cfd 	.word	0x08003cfd
 8003d50:	08003cfd 	.word	0x08003cfd
 8003d54:	08003ea9 	.word	0x08003ea9
 8003d58:	08003cfd 	.word	0x08003cfd
 8003d5c:	08003dad 	.word	0x08003dad
 8003d60:	08003cfd 	.word	0x08003cfd
 8003d64:	08003cfd 	.word	0x08003cfd
 8003d68:	08003e49 	.word	0x08003e49
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	602a      	str	r2, [r5, #0]
 8003d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0a0      	b.n	8003ec2 <_printf_i+0x1ee>
 8003d80:	6820      	ldr	r0, [r4, #0]
 8003d82:	682b      	ldr	r3, [r5, #0]
 8003d84:	0607      	lsls	r7, r0, #24
 8003d86:	f103 0104 	add.w	r1, r3, #4
 8003d8a:	6029      	str	r1, [r5, #0]
 8003d8c:	d501      	bpl.n	8003d92 <_printf_i+0xbe>
 8003d8e:	681e      	ldr	r6, [r3, #0]
 8003d90:	e003      	b.n	8003d9a <_printf_i+0xc6>
 8003d92:	0646      	lsls	r6, r0, #25
 8003d94:	d5fb      	bpl.n	8003d8e <_printf_i+0xba>
 8003d96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d9a:	2e00      	cmp	r6, #0
 8003d9c:	da03      	bge.n	8003da6 <_printf_i+0xd2>
 8003d9e:	232d      	movs	r3, #45	; 0x2d
 8003da0:	4276      	negs	r6, r6
 8003da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da6:	230a      	movs	r3, #10
 8003da8:	4859      	ldr	r0, [pc, #356]	; (8003f10 <_printf_i+0x23c>)
 8003daa:	e012      	b.n	8003dd2 <_printf_i+0xfe>
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	6820      	ldr	r0, [r4, #0]
 8003db0:	1d19      	adds	r1, r3, #4
 8003db2:	6029      	str	r1, [r5, #0]
 8003db4:	0605      	lsls	r5, r0, #24
 8003db6:	d501      	bpl.n	8003dbc <_printf_i+0xe8>
 8003db8:	681e      	ldr	r6, [r3, #0]
 8003dba:	e002      	b.n	8003dc2 <_printf_i+0xee>
 8003dbc:	0641      	lsls	r1, r0, #25
 8003dbe:	d5fb      	bpl.n	8003db8 <_printf_i+0xe4>
 8003dc0:	881e      	ldrh	r6, [r3, #0]
 8003dc2:	2f6f      	cmp	r7, #111	; 0x6f
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2308      	moveq	r3, #8
 8003dc8:	230a      	movne	r3, #10
 8003dca:	4851      	ldr	r0, [pc, #324]	; (8003f10 <_printf_i+0x23c>)
 8003dcc:	2100      	movs	r1, #0
 8003dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dd2:	6865      	ldr	r5, [r4, #4]
 8003dd4:	2d00      	cmp	r5, #0
 8003dd6:	bfa8      	it	ge
 8003dd8:	6821      	ldrge	r1, [r4, #0]
 8003dda:	60a5      	str	r5, [r4, #8]
 8003ddc:	bfa4      	itt	ge
 8003dde:	f021 0104 	bicge.w	r1, r1, #4
 8003de2:	6021      	strge	r1, [r4, #0]
 8003de4:	b90e      	cbnz	r6, 8003dea <_printf_i+0x116>
 8003de6:	2d00      	cmp	r5, #0
 8003de8:	d04b      	beq.n	8003e82 <_printf_i+0x1ae>
 8003dea:	4615      	mov	r5, r2
 8003dec:	fbb6 f1f3 	udiv	r1, r6, r3
 8003df0:	fb03 6711 	mls	r7, r3, r1, r6
 8003df4:	5dc7      	ldrb	r7, [r0, r7]
 8003df6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dfa:	4637      	mov	r7, r6
 8003dfc:	42bb      	cmp	r3, r7
 8003dfe:	460e      	mov	r6, r1
 8003e00:	d9f4      	bls.n	8003dec <_printf_i+0x118>
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d10b      	bne.n	8003e1e <_printf_i+0x14a>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	07de      	lsls	r6, r3, #31
 8003e0a:	d508      	bpl.n	8003e1e <_printf_i+0x14a>
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	6861      	ldr	r1, [r4, #4]
 8003e10:	4299      	cmp	r1, r3
 8003e12:	bfde      	ittt	le
 8003e14:	2330      	movle	r3, #48	; 0x30
 8003e16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e1e:	1b52      	subs	r2, r2, r5
 8003e20:	6122      	str	r2, [r4, #16]
 8003e22:	464b      	mov	r3, r9
 8003e24:	4621      	mov	r1, r4
 8003e26:	4640      	mov	r0, r8
 8003e28:	f8cd a000 	str.w	sl, [sp]
 8003e2c:	aa03      	add	r2, sp, #12
 8003e2e:	f7ff fedf 	bl	8003bf0 <_printf_common>
 8003e32:	3001      	adds	r0, #1
 8003e34:	d14a      	bne.n	8003ecc <_printf_i+0x1f8>
 8003e36:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3a:	b004      	add	sp, #16
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	f043 0320 	orr.w	r3, r3, #32
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	2778      	movs	r7, #120	; 0x78
 8003e4a:	4832      	ldr	r0, [pc, #200]	; (8003f14 <_printf_i+0x240>)
 8003e4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	6829      	ldr	r1, [r5, #0]
 8003e54:	061f      	lsls	r7, r3, #24
 8003e56:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e5a:	d402      	bmi.n	8003e62 <_printf_i+0x18e>
 8003e5c:	065f      	lsls	r7, r3, #25
 8003e5e:	bf48      	it	mi
 8003e60:	b2b6      	uxthmi	r6, r6
 8003e62:	07df      	lsls	r7, r3, #31
 8003e64:	bf48      	it	mi
 8003e66:	f043 0320 	orrmi.w	r3, r3, #32
 8003e6a:	6029      	str	r1, [r5, #0]
 8003e6c:	bf48      	it	mi
 8003e6e:	6023      	strmi	r3, [r4, #0]
 8003e70:	b91e      	cbnz	r6, 8003e7a <_printf_i+0x1a6>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	f023 0320 	bic.w	r3, r3, #32
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	2310      	movs	r3, #16
 8003e7c:	e7a6      	b.n	8003dcc <_printf_i+0xf8>
 8003e7e:	4824      	ldr	r0, [pc, #144]	; (8003f10 <_printf_i+0x23c>)
 8003e80:	e7e4      	b.n	8003e4c <_printf_i+0x178>
 8003e82:	4615      	mov	r5, r2
 8003e84:	e7bd      	b.n	8003e02 <_printf_i+0x12e>
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	6826      	ldr	r6, [r4, #0]
 8003e8a:	1d18      	adds	r0, r3, #4
 8003e8c:	6961      	ldr	r1, [r4, #20]
 8003e8e:	6028      	str	r0, [r5, #0]
 8003e90:	0635      	lsls	r5, r6, #24
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	d501      	bpl.n	8003e9a <_printf_i+0x1c6>
 8003e96:	6019      	str	r1, [r3, #0]
 8003e98:	e002      	b.n	8003ea0 <_printf_i+0x1cc>
 8003e9a:	0670      	lsls	r0, r6, #25
 8003e9c:	d5fb      	bpl.n	8003e96 <_printf_i+0x1c2>
 8003e9e:	8019      	strh	r1, [r3, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	4615      	mov	r5, r2
 8003ea4:	6123      	str	r3, [r4, #16]
 8003ea6:	e7bc      	b.n	8003e22 <_printf_i+0x14e>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	2100      	movs	r1, #0
 8003eac:	1d1a      	adds	r2, r3, #4
 8003eae:	602a      	str	r2, [r5, #0]
 8003eb0:	681d      	ldr	r5, [r3, #0]
 8003eb2:	6862      	ldr	r2, [r4, #4]
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f000 f859 	bl	8003f6c <memchr>
 8003eba:	b108      	cbz	r0, 8003ec0 <_printf_i+0x1ec>
 8003ebc:	1b40      	subs	r0, r0, r5
 8003ebe:	6060      	str	r0, [r4, #4]
 8003ec0:	6863      	ldr	r3, [r4, #4]
 8003ec2:	6123      	str	r3, [r4, #16]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eca:	e7aa      	b.n	8003e22 <_printf_i+0x14e>
 8003ecc:	462a      	mov	r2, r5
 8003ece:	4649      	mov	r1, r9
 8003ed0:	4640      	mov	r0, r8
 8003ed2:	6923      	ldr	r3, [r4, #16]
 8003ed4:	47d0      	blx	sl
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	d0ad      	beq.n	8003e36 <_printf_i+0x162>
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	079b      	lsls	r3, r3, #30
 8003ede:	d413      	bmi.n	8003f08 <_printf_i+0x234>
 8003ee0:	68e0      	ldr	r0, [r4, #12]
 8003ee2:	9b03      	ldr	r3, [sp, #12]
 8003ee4:	4298      	cmp	r0, r3
 8003ee6:	bfb8      	it	lt
 8003ee8:	4618      	movlt	r0, r3
 8003eea:	e7a6      	b.n	8003e3a <_printf_i+0x166>
 8003eec:	2301      	movs	r3, #1
 8003eee:	4632      	mov	r2, r6
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	47d0      	blx	sl
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	d09d      	beq.n	8003e36 <_printf_i+0x162>
 8003efa:	3501      	adds	r5, #1
 8003efc:	68e3      	ldr	r3, [r4, #12]
 8003efe:	9903      	ldr	r1, [sp, #12]
 8003f00:	1a5b      	subs	r3, r3, r1
 8003f02:	42ab      	cmp	r3, r5
 8003f04:	dcf2      	bgt.n	8003eec <_printf_i+0x218>
 8003f06:	e7eb      	b.n	8003ee0 <_printf_i+0x20c>
 8003f08:	2500      	movs	r5, #0
 8003f0a:	f104 0619 	add.w	r6, r4, #25
 8003f0e:	e7f5      	b.n	8003efc <_printf_i+0x228>
 8003f10:	08004073 	.word	0x08004073
 8003f14:	08004084 	.word	0x08004084

08003f18 <memmove>:
 8003f18:	4288      	cmp	r0, r1
 8003f1a:	b510      	push	{r4, lr}
 8003f1c:	eb01 0402 	add.w	r4, r1, r2
 8003f20:	d902      	bls.n	8003f28 <memmove+0x10>
 8003f22:	4284      	cmp	r4, r0
 8003f24:	4623      	mov	r3, r4
 8003f26:	d807      	bhi.n	8003f38 <memmove+0x20>
 8003f28:	1e43      	subs	r3, r0, #1
 8003f2a:	42a1      	cmp	r1, r4
 8003f2c:	d008      	beq.n	8003f40 <memmove+0x28>
 8003f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f36:	e7f8      	b.n	8003f2a <memmove+0x12>
 8003f38:	4601      	mov	r1, r0
 8003f3a:	4402      	add	r2, r0
 8003f3c:	428a      	cmp	r2, r1
 8003f3e:	d100      	bne.n	8003f42 <memmove+0x2a>
 8003f40:	bd10      	pop	{r4, pc}
 8003f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f4a:	e7f7      	b.n	8003f3c <memmove+0x24>

08003f4c <_sbrk_r>:
 8003f4c:	b538      	push	{r3, r4, r5, lr}
 8003f4e:	2300      	movs	r3, #0
 8003f50:	4d05      	ldr	r5, [pc, #20]	; (8003f68 <_sbrk_r+0x1c>)
 8003f52:	4604      	mov	r4, r0
 8003f54:	4608      	mov	r0, r1
 8003f56:	602b      	str	r3, [r5, #0]
 8003f58:	f7fc fff4 	bl	8000f44 <_sbrk>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d102      	bne.n	8003f66 <_sbrk_r+0x1a>
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	b103      	cbz	r3, 8003f66 <_sbrk_r+0x1a>
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
 8003f68:	20000408 	.word	0x20000408

08003f6c <memchr>:
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	b2c9      	uxtb	r1, r1
 8003f72:	4402      	add	r2, r0
 8003f74:	4293      	cmp	r3, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	d101      	bne.n	8003f7e <memchr+0x12>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e003      	b.n	8003f86 <memchr+0x1a>
 8003f7e:	7804      	ldrb	r4, [r0, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	428c      	cmp	r4, r1
 8003f84:	d1f6      	bne.n	8003f74 <memchr+0x8>
 8003f86:	bd10      	pop	{r4, pc}

08003f88 <memcpy>:
 8003f88:	440a      	add	r2, r1
 8003f8a:	4291      	cmp	r1, r2
 8003f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f90:	d100      	bne.n	8003f94 <memcpy+0xc>
 8003f92:	4770      	bx	lr
 8003f94:	b510      	push	{r4, lr}
 8003f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f9a:	4291      	cmp	r1, r2
 8003f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fa0:	d1f9      	bne.n	8003f96 <memcpy+0xe>
 8003fa2:	bd10      	pop	{r4, pc}

08003fa4 <_realloc_r>:
 8003fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa8:	4680      	mov	r8, r0
 8003faa:	4614      	mov	r4, r2
 8003fac:	460e      	mov	r6, r1
 8003fae:	b921      	cbnz	r1, 8003fba <_realloc_r+0x16>
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb6:	f7ff bc37 	b.w	8003828 <_malloc_r>
 8003fba:	b92a      	cbnz	r2, 8003fc8 <_realloc_r+0x24>
 8003fbc:	f7ff fbcc 	bl	8003758 <_free_r>
 8003fc0:	4625      	mov	r5, r4
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fc8:	f000 f81b 	bl	8004002 <_malloc_usable_size_r>
 8003fcc:	4284      	cmp	r4, r0
 8003fce:	4607      	mov	r7, r0
 8003fd0:	d802      	bhi.n	8003fd8 <_realloc_r+0x34>
 8003fd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fd6:	d812      	bhi.n	8003ffe <_realloc_r+0x5a>
 8003fd8:	4621      	mov	r1, r4
 8003fda:	4640      	mov	r0, r8
 8003fdc:	f7ff fc24 	bl	8003828 <_malloc_r>
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d0ed      	beq.n	8003fc2 <_realloc_r+0x1e>
 8003fe6:	42bc      	cmp	r4, r7
 8003fe8:	4622      	mov	r2, r4
 8003fea:	4631      	mov	r1, r6
 8003fec:	bf28      	it	cs
 8003fee:	463a      	movcs	r2, r7
 8003ff0:	f7ff ffca 	bl	8003f88 <memcpy>
 8003ff4:	4631      	mov	r1, r6
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	f7ff fbae 	bl	8003758 <_free_r>
 8003ffc:	e7e1      	b.n	8003fc2 <_realloc_r+0x1e>
 8003ffe:	4635      	mov	r5, r6
 8004000:	e7df      	b.n	8003fc2 <_realloc_r+0x1e>

08004002 <_malloc_usable_size_r>:
 8004002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004006:	1f18      	subs	r0, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	bfbc      	itt	lt
 800400c:	580b      	ldrlt	r3, [r1, r0]
 800400e:	18c0      	addlt	r0, r0, r3
 8004010:	4770      	bx	lr
	...

08004014 <_init>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	bf00      	nop
 8004018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401a:	bc08      	pop	{r3}
 800401c:	469e      	mov	lr, r3
 800401e:	4770      	bx	lr

08004020 <_fini>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	bf00      	nop
 8004024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004026:	bc08      	pop	{r3}
 8004028:	469e      	mov	lr, r3
 800402a:	4770      	bx	lr
